version: 0.2

# Environment Variables:
# $S3_BUCKET:        The S3 Bucket that the static website will be deployed to.
# $LAMBDA_S3_BUCKET: The S3 Bucket that the lambda function code will be deployed to.
# $STACK_NAME:       The CloudFormation stack name that should be updated.
# $FILES_STORAGE_CLASS: The S3 Storage class that file records should be stored in. See x-amz-storage-class in https://docs.aws.amazon.com/AmazonS3/latest/API/API_PutObject.html
# $CLOUDFRONT_DISTRIBUTION: The ID of the CloudFront Distributation that should be invalidated once the build completes.
# $ALLOWED_ORIGINS - The list of HTTP origins that are allowed to make API requests to the internal auth APIs. Should be aspace-separated list of HTTP(S) origins. This should include the domains that the auth site is hosted from but nothing else. (Always includes `http://localhost:3002`, `https://casualos.me`, `https://ab1.link`)
# $ALLOWED_API_ORIGINS - The HTTP Origins that the Records API can be used from. Used to limit the websites that can publish data to records. Should be a space-separated list of HTTP(S) origins. (Always includes `http://localhost:3000 http://localhost:3002 http://player.localhost:3000 https://casualos.com https://casualos.me https://ab1.link https://publicos.com https://alpha.casualos.com https://static.casualos.com https://stable.casualos.com`)

# See ServerBuilder.ts for the schema (BuilderOptions) that the SERVER_CONFIG uses.
# $SERVER_CONFIG - The config that should be used for the server. Provides the ability to configure TextIt, Livekit, Subscriptions, and more.

# Description:
# This buildspec is able to build and deploy the aux-auth package to AWS.
# It will build and deploy the static website to the S3_BUCKET environment variable,
# deploy the serverless lambda functions to LAMBDA_S3_BUCKET and update a CloudFormation
# stack called STACK_NAME with the MAGIC_SECRET_KEY, REDIS_PORT, REDIS_HOST, REDIS_USE_TLS, REDIS_RECORDS_NAMESPACE, REDIS_PASSWORD,
# and FILES_STORAGE_CLASS environment variables as parameters.
# Once the build is completed, you will need to go to CloudFormation and execute the new changeset in order for the Lambda functions to be deployed.

phases:
    install:
        runtime-versions:
            nodejs: 16
        commands:
            - echo Executing Install Phase
        finally:
            - echo Executing Install Finally
    pre_build:
        commands:
            - echo Executing Pre Build Phase
            - npm ci
            - npm run bootstrap
        finally:
            - echo Executing Pre Build Finally
    build:
        commands:
            - echo Executing Build Phase

            - echo Building packages...
            - npm run build:libs
            - npm run build:auth
        finally:
            - echo Executing Build Finally
    post_build:
        commands:
            - echo Executing Post Build Phase
            - echo Copying Site to S3...
            - aws s3 sync src/aux-auth/web/dist $S3_BUCKET --delete
            - aws s3 cp src/aux-auth/web/dist/index.html $S3_BUCKET/index.html --cache-control no-cache
            - aws s3 cp src/aux-auth/web/dist/iframe.html $S3_BUCKET/iframe.html --cache-control no-cache
            - aws s3 cp src/aux-auth/web/dist/acceptable-use-policy.txt $S3_BUCKET/acceptable-use-policy.txt --cache-control no-cache
            - aws s3 cp src/aux-auth/web/dist/privacy-policy.txt $S3_BUCKET/privacy-policy.txt --cache-control no-cache
            - aws s3 cp src/aux-auth/web/dist/terms-of-service.txt $S3_BUCKET/terms-of-service.txt --cache-control no-cache

            - echo Deploying Lambda...
            - cd src/aux-auth/serverless/aws

            # Remove tests and original source
            - rm -rf ./__tests__
            - rm -rf ./src
            - rm -rf ./events
            - sam package --template-file template.yml --s3-bucket $LAMBDA_S3_BUCKET --output-template-file template-out.yaml
            - |
                sam deploy --template-file template-out.yaml --stack-name $STACK_NAME \
                  --capabilities CAPABILITY_IAM --no-fail-on-empty-changeset \
                  --no-execute-changeset \
                  --parameter-overrides "FileRecordsS3StorageClassParameter='$FILES_STORAGE_CLASS' AllowedApiOriginsParameter='$ALLOWED_API_ORIGINS' AllowedOriginsParameter='$ALLOWED_ORIGINS' ServerConfigParameter='$SERVER_CONFIG'" \
                  --tags Customer=casualos

            # - aws cloudformation deploy --template-file template.yml --stack-name $STACK_NAME --s3-bucket $LAMBDA_S3_BUCKET --no-execute-changeset --parameter-overrides MagicSecretKeyParameter=$MAGIC_SECRET_KEY
            - echo Migrating Database...
            - cd ../../../..
            - npx prisma migrate deploy
            - echo Invalidating CloudFront...
            - aws cloudfront create-invalidation --distribution-id $CLOUDFRONT_DISTRIBUTION --paths "/*"
            - echo Done!
        finally:
            - echo Executing Post Build Finally
