version: 0.2

# Environment Variables:
# $PLAYER_S3_BUCKET:  The S3 Bucket that the player website will be deployed to.
# $AUTH_S3_BUCKET:    The S3 Bucket that the auth website will be deployed to.
# $LAMBDA_S3_BUCKET:  The S3 Bucket that the lambda function code will be deployed to.
# $STACK_NAME:        The CloudFormation stack name that should be updated.
# $FILES_STORAGE_CLASS:     The S3 Storage class that file records should be stored in. See x-amz-storage-class in https://docs.aws.amazon.com/AmazonS3/latest/API/API_PutObject.html
# $PLAYER_CLOUDFRONT_DISTRIBUTION:  The ID of the CloudFront Distribution that the player is deployed to.
# $AUTH_CLOUDFRONT_DISTRIBUTION:    The ID of the CloudFront Distribution that the player is deployed to.
# $ALLOWED_ORIGINS:       The list of HTTP origins that are allowed to make API requests to the internal auth APIs. Should be aspace-separated list of HTTP(S) origins. This should include the domains that the auth site is hosted from but nothing else. (Always includes `http://localhost:3002`, `https://casualos.me`, `https://ab1.link`)
# $ALLOWED_API_ORIGINS:   The HTTP Origins that the Records API can be used from. Used to limit the websites that can publish data to records. Should be a space-separated list of HTTP(S) origins. (Always includes `http://localhost:3000 http://localhost:3002 http://player.localhost:3000 https://casualos.com https://casualos.me https://ab1.link https://publicos.com https://alpha.casualos.com https://static.casualos.com https://stable.casualos.com`)
# $SERVER_CONFIG:  The config that should be used for the server. Provides the ability to configure TextIt, Livekit, Subscriptions, and more.
#                  See ServerBuilder.ts for the schema (BuilderOptions) that the SERVER_CONFIG uses.
# $DATABASE_URL:   The URL of the CockroachDB database that should be automatically migrated.
# $SES_IDENTITY_NAME - The name of the Simple Email Service identity that emails should be allowed to be sent from. (Optional)

phases:
    install:
        runtime-versions:
            nodejs: 18
        commands:
            - echo Executing Install Phase
        finally:
            - echo Executing Install Finally
    pre_build:
        commands:
            - echo Executing Pre Build Phase
            - npm ci
            - npm run bootstrap
        finally:
            - echo Executing Pre Build Finally
    build:
        commands:
            - echo Executing Build Phase

            - echo Building packages...
            - npm run build:libs

            - echo Building web...
            - npm run build:server

            - echo Packaging Config...
            - npm run package:config
        finally:
            - echo Executing Build Finally
    post_build:
        commands:
            - echo Executing Post Build Phase

            - echo Copying player to S3...
            - export GIT_TAG=$(git describe --abbrev=0 --tags)
            - aws s3 sync src/aux-server/aux-web/dist $PLAYER_S3_BUCKET

            # Copy the HTML files with a specific cache-control header
            - aws s3 cp src/aux-server/aux-web/dist/index.html $PLAYER_S3_BUCKET/index.html --cache-control no-cache
            - aws s3 cp src/aux-server/aux-web/dist/player.html $PLAYER_S3_BUCKET/player.html --cache-control no-cache
            - aws s3 cp src/aux-server/aux-web/dist/aux-vm-iframe.html $PLAYER_S3_BUCKET/aux-vm-iframe.html --cache-control no-cache
            - aws s3 cp src/aux-server/aux-web/dist/api/config $PLAYER_S3_BUCKET/api/config --cache-control no-cache
            - aws s3 cp src/aux-server/aux-web/dist/terms $PLAYER_S3_BUCKET/terms --content-type text/plain
            - aws s3 cp src/aux-server/aux-web/dist/privacy-policy $PLAYER_S3_BUCKET/privacy-policy --content-type text/plain
            - aws s3 cp src/aux-server/aux-web/dist/acceptable-use-policy $PLAYER_S3_BUCKET/acceptable-use-policy --content-type text/plain

            - aws s3 cp src/aux-server/aux-web/dist/index.html $PLAYER_S3_BUCKET/$GIT_TAG/index.html --cache-control no-cache
            - aws s3 cp src/aux-server/aux-web/dist/player.html $PLAYER_S3_BUCKET/$GIT_TAG/player.html --cache-control no-cache
            - aws s3 cp src/aux-server/aux-web/dist/aux-vm-iframe.html $PLAYER_S3_BUCKET/$GIT_TAG/aux-vm-iframe.html --cache-control no-cache
            - aws s3 cp src/aux-server/aux-web/dist/api/config $PLAYER_S3_BUCKET/$GIT_TAG/api/config --cache-control no-cache
            - aws s3 cp src/aux-server/aux-web/dist/terms $PLAYER_S3_BUCKET/$GIT_TAG/terms --content-type text/plain
            - aws s3 cp src/aux-server/aux-web/dist/privacy-policy $PLAYER_S3_BUCKET/$GIT_TAG/privacy-policy --content-type text/plain
            - aws s3 cp src/aux-server/aux-web/dist/acceptable-use-policy $PLAYER_S3_BUCKET/$GIT_TAG/acceptable-use-policy --content-type text/plain

            - echo Copying auth to S3...
            - aws s3 sync src/aux-server/aux-web/aux-auth/dist $AUTH_S3_BUCKET --delete
            - aws s3 cp src/aux-server/aux-web/aux-auth/dist/index.html $AUTH_S3_BUCKET/index.html --cache-control no-cache
            - aws s3 cp src/aux-server/aux-web/aux-auth/dist/iframe.html $AUTH_S3_BUCKET/iframe.html --cache-control no-cache
            - aws s3 cp src/aux-server/aux-web/aux-auth/dist/acceptable-use-policy.txt $AUTH_S3_BUCKET/acceptable-use-policy.txt --cache-control no-cache
            - aws s3 cp src/aux-server/aux-web/aux-auth/dist/privacy-policy.txt $AUTH_S3_BUCKET/privacy-policy.txt --cache-control no-cache
            - aws s3 cp src/aux-server/aux-web/aux-auth/dist/terms-of-service.txt $AUTH_S3_BUCKET/terms-of-service.txt --cache-control no-cache

            - echo Deploying Lambda...
            - cd src/aux-server/aux-backend/serverless/aws
            # Remove tests and original source
            - rm -rf ./__tests__
            - rm -rf ./src
            - rm -rf ./events
            - sam package --template-file template.yml --s3-bucket $LAMBDA_S3_BUCKET --output-template-file template-out.yaml
            - |
                sam deploy --template-file template-out.yaml --stack-name $STACK_NAME \
                  --capabilities CAPABILITY_IAM CAPABILITY_NAMED_IAM --no-fail-on-empty-changeset \
                  --no-execute-changeset \
                  --parameter-overrides "FileRecordsS3StorageClassParameter='$FILES_STORAGE_CLASS' AllowedApiOriginsParameter='$ALLOWED_API_ORIGINS' AllowedOriginsParameter='$ALLOWED_ORIGINS' ServerConfigParameter='$SERVER_CONFIG' SESIdentityNameParameter='$SES_IDENTITY_NAME'" \
                  --tags Customer=casualos

            - echo Migrating Database...
            - cd ../../../..
            - npx prisma migrate deploy

            - echo Invalidating CloudFront...
            - aws cloudfront create-invalidation --distribution-id $PLAYER_CLOUDFRONT_DISTRIBUTION --paths "/*"
            - aws cloudfront create-invalidation --distribution-id $AUTH_CLOUDFRONT_DISTRIBUTION --paths "/*"
            - echo Done!

        finally:
            - echo Executing Post Build Finally
