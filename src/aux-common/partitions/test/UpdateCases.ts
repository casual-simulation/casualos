// Case where the tag "402ccb16-d402-4404-b1ad-7ad73cc29772".tags.ResizeHandle
// misses a tag update so the CasualOS script state is different from the YJS state.
export const case1 = [
    '',
    'AQLJrdmmCwAnAPbI27MPAAZhYkluc3QCBADJrdmmCwAUZXF1aXZhbGVudC1iZWlnZS1ib2EA',
    'ASvyjdfMCgAnAQRib3RzJGU1MzgwYTZiLThiNGQtNGE4Yi04YjA0LTU4ZTFlYjAzZTVlNwEnAPKN18wKAAZzeXN0ZW0CBADyjdfMCgESYWIuY29uZmlnLnJlbWVtYmVyJwDyjdfMCgAEZm9ybQIEAPKN18wKFAdub3RoaW5nJwDyjdfMCgALZGVzY3JpcHRpb24CBADyjdfMChwrVGhpcyBpcyBtZWFudCB0byBiZSB0aGUgbG9jYWwgc3RhdGUgaG9sZGVyLicA8o3XzAoAC2FiUmVjb3JkS2V5AgQA8o3XzApILnZSSzEuWVdJdE1RPT0uTkhac1VHdG9ObUZHWTNGSmRqSlRNbXMxTkZscVVUMDknAPKN18wKABFhYkFjdGl2ZURpbWVuc2lvbgIEAPKN18wKdwRob21lJwDyjdfMCgALYWJCYXNlQ29sb3ICBADyjdfMCnwFY2xlYXIoAPKN18wKAA9hYkdyaWRTbmFwU3RhdGUBeCgA8o3XzAoADmFiQm90U25hcFN0YXRlAXgnAPKN18wKAA1hYk1lbnVSZWZyZXNoAgQA8o3XzAqEATNALy9jbGVhciB0ZW1wb3JhcnkgdmFpYWJsZXMKY2xlYXJUYWdNYXNrcyh0aGlzQm90KTsnAPKN18wKAAphYkVuZHBvaW50AgQA8o3XzAq4ARVodHRwczovL3B1YmxpY29zLmxpbmsnAPKN18wKAAhhYklnbm9yZQIEAPKN18wKzgEEdHJ1ZScA8o3XzAoADWFiQ29yZVZlcnNpb24CBADyjdfMCtMBATkoAPKN18wKAAxhYkJvdFZlcnNpb24BfYQBKADyjdfMCgAPYWJDb3JlSXRlcmF0aW9uAX2AAScA8o3XzAoAGWFiTGlzdGVuaW5nRm9yRmlsZVVwbG9hZHMCBADyjdfMCtcBBHRydWUnAPKN18wKABBwbGF5ZXJTa2lsbEFycmF5AgQA8o3XzArcAQ/wn6esWyJhYlNoZWxsIl0nAPKN18wKABFidWlsZGVyU2tpbGxBcnJheQIEAPKN18wK6gFC8J+nrFsiYWJTaGVsbCIsICJhYkludGVyZmFjZSIsICJhYkFjdGlvbiIsICJhYkZhY3RvcnkiLCAiYWJUZXN0cyJdJwDyjdfMCgARYWJCdWlsZGVySWRlbnRpdHkCBADyjdfMCqsCBGFiLTEnAPKN18wKABNpbW1lcnNpdmVTa2lsbEFycmF5AgQA8o3XzAqwAhPwn6esWyJhYkltbWVyc2l2ZSJdKADyjdfMCgAMYWJBd2FrZVN0YXRlAXknAPKN18wKAAZiYXNlQUICBADyjdfMCsMCJDQ4NTBjZjlhLTliYzYtNDlmNS05ZjU3LWQyYWFhMmVkNGM5ZCgA8o3XzAoAC2luaXRpYWxCb290AXgnAPKN18wKAAhhYkNvbmZpZwIEAPKN18wK6QIEdHJ1ZScA8o3XzAoAEWFiQmFzZVN0cm9rZUNvbG9yAgQA8o3XzAruAgcjOTA4QkZDAA==',
    '',
    '',
    '',
    '',
    '',
    'AQHJrdmmCxWo8o3XzAroAgF5AfKN18wKAegCAQ==',
    'AQXJrdmmCxantp6erQrK0gECBADJrdmmCxYFQXdha2Wo8o3XzArCAgF4p/KN18wKwwICBADJrdmmCx0kZTk1MTgzZmItNjk3Ni00NTIyLWJkMjItM2I0NjBiZGEwNGI1AvKN18wKAcICJraenq0KAcrSAQc=',
    'AQK9gf3qBgCnya3ZpgsdAgQAvYH96gYAJDlhNGQ4YjA5LTE0ZTctNDdhZC05ZmYwLTJhYzljMmNmYWRiZAHJrdmmCwEdJQ==',
    'AQKir6UuAKe9gf3qBgACBACir6UuACQ3ODE5NTk1NC01MDY2LTRlNzktODNmYi0wYmU4NTIwMTI3NmEBvYH96gYBACU=',
    'AQK836jpAgCnoq+lLgACBAC836jpAgAkNGYzMzY2YzUtNjVmOS00NmRmLWIxOWUtMzBkYTVjODExYmUxAaKvpS4BACU=',
    'AQL/85I7AKe836jpAgACBAD/85I7ACQ2ZTVmNzI5YS05MjhmLTQ1ZTktYmIyZi01YjZkN2U2N2JlZDQBvN+o6QIBACU=',
    'AQKC6Ma1BACn//OSOwACBACC6Ma1BAAkZDg3MTM5ZjMtNmE3MC00YWU4LTk2NzctNDZkYmRkYjZjNDM5Af/zkjsBACU=',
    'AQLepMyCCgCngujGtQQAAgQA3qTMggoAJDg2NmE3NjY1LWM3YjYtNDc2NC1iZmVkLTdjYTNiMzZjMTE5YQGC6Ma1BAEAJQ==',
    'AQLdsLaUBACn3qTMggoAAgQA3bC2lAQAJGIwZGY2ZWM4LWU3MWUtNDNjYi1iZGViLWM5NTcxNjI1OTZiZAHepMyCCgEAJQ==',
    'AQLaotrODACn3bC2lAQAAgQA2qLazgwAJDY4ZjkzOGY4LThhY2MtNDdhZi05YThmLTIwYmQ2NmQ1MmQ2NQHdsLaUBAEAJQ==',
];
