{"version":2,"updates":[{"id":0,"timestamp":1691972074530,"update":"AbkCkKni4QEAJwEEYm90cyQxMDE0MjU0Ni04YzM0LTRiZDYtYWQzNi0wYTE0NjE3OTNkMDkBJwCQqeLhAQAEYWJJRAIEAJCp4uEBARRhYnJ3X3Rlc3RfZXhwZXJpZW5jZScAkKni4QEAEGVnZ0Zvcm1hdFZlcnNpb24CBACQqeLhARYkMDE3MGQ4YmEtMTdjMC00MmM2LTgwZTktMmIxNWQzY2Q3NWM3KACQqeLhAQANdGFyZ2V0VmVyc2lvbgF9AScAkKni4QEAB21hbmFnZXICBACQqeLhATwo8J+Ul2Q4MzcxNDQ0LTkxNTgtNDQzNi04ZmM3LTg0Y2M5MWI3ZjUyNScAkKni4QEAB29uQ2xpY2sCBACQqeLhAWMlQCBsaW5rcy5tYW5hZ2VyLmludGVyYWN0T3ZvKHRoaXNCb3QpOycAkKni4QEACG9uQ3JlYXRlAgQAkKni4QGJAbUDQGNvbnN0IHRhcmdldEFCID0gYXdhaXQgb3Muc2hvd0lucHV0KCdhYicsIHsKICAgIHRpdGxlOiAnYWIgbmFtZScKfSk7CgppZiAoIXRhcmdldEFCIHx8IHRhcmdldEFCID09ICJhYiIpCnsKICAgIG9zLnRvYXN0KCJubyB2YWxpZCBhYiBnaXZlbiIpOwoKICAgIGRlc3Ryb3kodGhpc0JvdCk7CgogICAgcmV0dXJuOwp9Cgpjb25zdCBnZXRSZWNvcmQgPSBhd2FpdCBvcy5nZXREYXRhKGxpbmtzLnJlbWVtYmVyLnRhZ3MuYWJSZWNvcmRLZXksIHRhcmdldEFCLCBsaW5rcy5yZW1lbWJlci50YWdzLmFiRW5kcG9pbnQpOwoKaWYgKCFnZXRSZWNvcmQuc3VjY2VzcykKewogICAgb3MudG9hc3QoIm5vIGFiIGZvdW5kIHdpdGggdGhhdCBuYW1lIik7CgogICAgZGVzdHJveSh0aGlzQm90KTsKCiAgICByZXR1cm47Cn0KCmFwcGx5TW9kKHRoaXNCb3QsIGdldFJlY29yZC5kYXRhKTsnAJCp4uEBAARmb3JtAgQAkKni4QG/BANlZ2cnAJCp4uEBABBwcm9ncmVzc0JhckNvbG9yAgQAkKni4QHDBAcjQkY1RTY2JwCQqeLhAQAacHJvZ3Jlc3NCYXJCYWNrZ3JvdW5kQ29sb3ICBACQqeLhAcsEByM1OTI5ODkoAJCp4uEBAAlsYWJlbFNpemUBfD8AAAAnAJCp4uEBAApsYWJlbENvbG9yAgQAkKni4QHUBAcjNDA0MDQwJwCQqeLhAQAOb25Qb2ludGVyRW50ZXICBACQqeLhAdwEL0Bvcy50b2FzdCh0YWdzLmFiSUQgKyAnIHYnK3RhZ3MudGFyZ2V0VmVyc2lvbik7JwCQqeLhAQANbGFiZWxQb3NpdGlvbgIEAJCp4uEBjAUFZnJvbnQnAJCp4uEBAA9vcmllbnRhdGlvbk1vZGUCBACQqeLhAZIFDmJpbGxib2FyZEZyb250JwCQqeLhAQAJb25EZXN0cm95AgQAkKni4QGhBSNAbGlua3MubWFuYWdlci5tYXNrcy5vdm9Cb3QgPSBudWxsOycAkKni4QEACWRpbWVuc2lvbgIEAJCp4uEBxQUEaG9tZScAkKni4QEABnN5c3RlbQIEAJCp4uEBygUOYWIuZmFjdG9yeS5lZ2cnAJCp4uEBAAlsaXN0ZW5pbmcCBACQqeLhAdkFBWZhbHNlJwCQqeLhAQAJYWJGYWN0b3J5AgQAkKni4QHfBQR0cnVlJwCQqeLhAQAIYWJJZ25vcmUCBACQqeLhAeQFBHRydWUnAJCp4uEBAAhyZW1lbWJlcgIEAJCp4uEB6QUo8J+Ul2U1MzgwYTZiLThiNGQtNGE4Yi04YjA0LTU4ZTFlYjAzZTVlNycAkKni4QEAC2ZhY3RvcnlJY29uAgQAkKni4QGQBgNlZ2cnAJCp4uEBAAVjb2xvcgIEAJCp4uEBlAYHI0ZGRkZGRigAkKni4QEADGFiQm90VmVyc2lvbgF9ECcAkKni4QEAD2FiTWVudVNvcnRPcmRlcgIEAJCp4uEBnQYBMycBBGJvdHMkMTRlMWZkYWMtY2ZkNy00ZTdlLWJkZDEtOTY3YTQwODVhNzU1AScAkKni4QGfBgZzeXN0ZW0CBACQqeLhAaAGEmFiLmZhY3RvcnkubWFuYWdlcicAkKni4QGfBgRmb3JtAgQAkKni4QGzBgdub3RoaW5nJwCQqeLhAZ8GCGFiSWdub3JlAgQAkKni4QG7BgR0cnVlJwCQqeLhAZ8GDmFiQWRkVG9GYWN0b3J5AgQAkKni4QHABocGQC8vc2hvdXQoImFiQWRkVG9GYWN0b3J5Iiwge2RpbWVuc2lvbjogZGltZW5zaW9uLCBib3Q6IGJvdCwgZmFjdG9yeUlEOiBmYWN0b3J5SUR9KTsKbGV0IGZhY3RvcnlJRDsKCmlmICh0aGF0LmZhY3RvcnlJRCkKewogICAgZmFjdG9yeUlEID0gdGhhdC5mYWN0b3J5SUQ7Cn0KZWxzZQp7CiAgICBmYWN0b3J5SUQgPSBhd2FpdCBvcy5zaG93SW5wdXQobnVsbCwgewogICAgICAgIHRpdGxlOiAnQWRkIGZhY3RvcnkgaWQnCiAgICB9KTsKfQoKaWYgKGZhY3RvcnlJRCkKewogICAgbGV0IHByZXZpb3VzRmFjdG9yeUJvdCA9IGdldEJvdCgic3lzdGVtIiwgImFiLmZhY3RvcnkuIiArIGZhY3RvcnlJRCk7CiAgICAKICAgIGlmKHByZXZpb3VzRmFjdG9yeUJvdCkKICAgIHsKICAgICAgICBkZXN0cm95KHByZXZpb3VzRmFjdG9yeUJvdCk7CiAgICB9CgogICAgbGV0IHRlbXBsYXRlQm90ID0gdGhhdC5ib3Q7CiAgICBsZXQgZmFjdG9yeU1vZCA9IHt9OwoKICAgIGZhY3RvcnlNb2RbdGhhdC5kaW1lbnNpb25dID0gbnVsbDsKICAgIGZhY3RvcnlNb2Quc3lzdGVtID0gImFiLmZhY3RvcnkuIiArIGZhY3RvcnlJRDsKICAgIGZhY3RvcnlNb2QubGlzdGVuaW5nID0gZmFsc2U7CiAgICBmYWN0b3J5TW9kLmFiRmFjdG9yeSA9IHRydWU7CgogICAgY3JlYXRlKHRlbXBsYXRlQm90LCBmYWN0b3J5TW9kKTsKCiAgICBhYi5sb2coZmFjdG9yeUlEICsgIiBhZGRlZCB0byBmYWN0b3J5Iik7CgogICAgb3MudG9hc3QoImFkZGVkICIgKyBmYWN0b3J5SUQgKyAiIHRvIGZhY3RvcnkiKTsKfScAkKni4QGfBglhYkZhY3RvcnkCBACQqeLhAcgMBHRydWUnAJCp4uEBnwYPYWJCb3RNZW51QWN0aW9uAgQAkKni4QHNDLgBQGNvbnN0IGN1cnJlbnREaW0gPSBsaW5rcy5tYW5pZmVzdGF0aW9uLmxpbmtzLmFiQm90LnRhZ3MuZGltZW5zaW9uOwpjb25zdCB0YXJnZXRCb3QgPSBsaW5rcy5yZW1lbWJlci5saW5rcy5hYkJvdEZvY3VzOwoKdGhpc0JvdC5hYkFkZFRvRmFjdG9yeSh7ZGltZW5zaW9uOiBjdXJyZW50RGltLCBib3Q6IHRhcmdldEJvdH0pOycAkKni4QGfBhNhYkNyZWF0ZUZyb21GYWN0b3J5AgQAkKni4QGGDrYGQC8vc2hvdXQoImFiQ3JlYXRlRnJvbUZhY3RvcnkiLCB7ZmFjdG9yeUlEOiAiZmFjdG9yeUlEIiwgcG9zaXRpb246IHtkaW1lbnNpb246ICJkaW1lbnNpb24iLCB4OiAieCIsIHk6ICJ5In19KTsKbGV0IGZ1bGxOYW1lID0gImFiLmZhY3RvcnkuIiArIHRoYXQuZmFjdG9yeUlEOwpsZXQgZmFjdG9yeVRlbXBsYXRlID0gZ2V0TW9kKGdldEJvdCgnc3lzdGVtJywgZnVsbE5hbWUpKTsKbGV0IHBvc2l0aW9uSW5mbyA9IHRoYXQucG9zaXRpb247CgppZighZmFjdG9yeVRlbXBsYXRlKQp7CiAgICBjb25zb2xlLmxvZygibm90IGZhY3RvcnkgYm90IGZvdW5kIik7CgogICAgYWIubG9nKGZ1bGxOYW1lICsgIiBjb3VsZCBub3QgYmUgZm91bmQiKQoKICAgIHJldHVybjsKfQoKYWIubG9nKGZ1bGxOYW1lICsgIiBjcmVhdGVkIGZyb20gZmFjdG9yeSIpOwoKbGV0IG5ld0JvdCA9IHt9CgpuZXdCb3QuY3JlYXRvciA9IG51bGw7Cm5ld0JvdFtwb3NpdGlvbkluZm8uZGltZW5zaW9uXSA9IHRydWU7Cm5ld0JvdFtwb3NpdGlvbkluZm8uZGltZW5zaW9uICsgIlgiXSA9IHBvc2l0aW9uSW5mby5wb3NpdGlvbi54OwpuZXdCb3RbcG9zaXRpb25JbmZvLmRpbWVuc2lvbiArICJZIl0gPSBwb3NpdGlvbkluZm8ucG9zaXRpb24ueTsKbmV3Qm90Lmxpc3RlbmluZyA9IG51bGw7Cm5ld0JvdC5hYklnbm9yZSA9IG51bGw7Cm5ld0JvdC5zeXN0ZW0gPSBudWxsOwpuZXdCb3QuYWJGYWN0b3J5ID0gbnVsbDsKbmV3Qm90LmFiTWVudVNvcnRPcmRlciA9IG51bGw7CgpjcmVhdGUoZmFjdG9yeVRlbXBsYXRlLCBuZXdCb3QpOwoKbGlua3MubWFuaWZlc3RhdGlvbi5hYkNsaWNrKCk7JwCQqeLhAZ8GEGFiR3JpZE1lbnVBY3Rpb24CBACQqeLhAb0U1whAc2hvdXQoImFiTWVudVJlZnJlc2giKTsKCmNvbmZpZ0JvdC5tYXNrcy5tZW51UG9ydGFsID0gImFiTWVudSI7CgpsaW5rcy5tZW51Lm1hc2tzLm9uR3JpZENsaWNrID0gIkAgc2hvdXQoJ2FiTWVudVJlZnJlc2gnKTsgbGlua3MubWFuaWZlc3RhdGlvbi5hYkNsaWNrKCk7IjsKCmNvbnN0IGZhY3RvcnlCb3RzID0gZ2V0Qm90cygiYWJGYWN0b3J5Iik7CmNvbnN0IG1lbnVCdXR0b24gPSB7fTsKCm1lbnVCdXR0b24uYWJNZW51ID0gdHJ1ZTsKbWVudUJ1dHRvbi5hYk1lbnVSZWZyZXNoID0gIkAgZGVzdHJveSh0aGlzQm90KTsiOwptZW51QnV0dG9uLmdyaWRJbmZvcm1hdGlvbiA9IGxpbmtzLnJlbWVtYmVyLnRhZ3MuYWJHcmlkRm9jdXM7Cm1lbnVCdXR0b24ubWFuYWdlciA9ICLwn5SXIiArIHRoaXNCb3QuaWQ7Cm1lbnVCdXR0b24ub25DbGljayA9IGBAIGxpbmtzLm1hbmFnZXIuYWJDcmVhdGVGcm9tRmFjdG9yeSh7ZmFjdG9yeUlEOiB0YWdzLmxhYmVsLCBwb3NpdGlvbjogdGFncy5ncmlkSW5mb3JtYXRpb259KTsgc2hvdXQoJ2FiTWVudVJlZnJlc2gnKTtgOwoKaWYgKGZhY3RvcnlCb3RzLmxlbmd0aCA8IDIpCnsKICAgIHJldHVybjsgCn0KCmZvciAobGV0IGogPSAwOyBqIDwgZmFjdG9yeUJvdHMubGVuZ3RoOyBqKyspIAp7CiAgICBsZXQgY3VycmVudEZhY3RvcnlCb3QgPSBmYWN0b3J5Qm90c1tqXTsKICAgIGxldCBjdXJyZW50U3lzdGVtVGFnID0gY3VycmVudEZhY3RvcnlCb3QudGFncy5zeXN0ZW07CgogICAgaWYgKGN1cnJlbnRTeXN0ZW1UYWcgPT0gdGFncy5zeXN0ZW0pCiAgICB7CiAgICAgICAgY29udGludWU7CiAgICB9CgogICAgbWVudUJ1dHRvbi5hYk1lbnVTb3J0T3JkZXIgPSBjdXJyZW50RmFjdG9yeUJvdC50YWdzLmFiTWVudVNvcnRPcmRlcjsKICAgIG1lbnVCdXR0b24ubGFiZWwgPSBjdXJyZW50U3lzdGVtVGFnLnN1YnN0cmluZygxMSk7CiAgICBtZW51QnV0dG9uLmNvbG9yID0gY3VycmVudEZhY3RvcnlCb3QudGFncy5jb2xvcjsKICAgIG1lbnVCdXR0b24uZm9ybUFkZHJlc3MgPSBjdXJyZW50RmFjdG9yeUJvdC50YWdzLmZhY3RvcnlJY29uOwoKICAgIGxpbmtzLm1lbnUuYWJDcmVhdGVNZW51QnV0dG9uKG1lbnVCdXR0b24pOwp9JwCQqeLhAZ8GDW1hbmlmZXN0YXRpb24CBACQqeLhAZMdKPCflJdkY2E1ZDk4Ny1jNGQ4LTQ2ZTQtYjYwYy1kYWE3YjJmNGRkYWQnAJCp4uEBnwYIcmVtZW1iZXICBACQqeLhAbodKPCflJdlNTM4MGE2Yi04YjRkLTRhOGItOGIwNC01OGUxZWIwM2U1ZTcnAJCp4uEBnwYEbWVudQIEAJCp4uEB4R0o8J+Ul2IzMGM2YzVkLWE0ZjctNDI2Ni1iYTM4LTM5M2RjOTVlMWVjYicAkKni4QGfBg9hYkdyaWRNZW51TGFiZWwCBACQqeLhAYgeB3Rvb2xib3gnAJCp4uEBnwYOYWJHcmlkTWVudUljb24CBACQqeLhAZAeDGNvbnN0cnVjdGlvbicAkKni4QGfBhNhYkdyaWRNZW51U29ydE9yZGVyAgQAkKni4QGdHgEzJwCQqeLhAZ8GDWFiQm90TWVudUljb24CBACQqeLhAZ8eDGNvbnN0cnVjdGlvbicAkKni4QGfBg5hYkJvdE1lbnVMYWJlbAIEAJCp4uEBrB4OYWRkIHRvIHRvb2xib3gnAJCp4uEBnwYSYWJCb3RNZW51U29ydE9yZGVyAgQAkKni4QG7HgEzJwCQqeLhAZ8GDmFiQm90TWVudUNvbG9yAgQAkKni4QG9HgcjNTVFNjc5JwCQqeLhAZ8GD2FiR3JpZE1lbnVDb2xvcgIEAJCp4uEBxR4HIzU1RTY3OSgAkKni4QGfBgxhYkJvdFZlcnNpb24BfRYnAQRib3RzJDFkZDU5NmUxLTg4MjYtNDI1Ny1iNWQ2LWRjMmE5YTU3MWRmNQEnAJCp4uEBzh4FY29sb3ICBACQqeLhAc8eByM3QjY0RkYnAJCp4uEBzh4EZm9ybQIEAJCp4uEB1x4DaGV4KACQqeLhAc4eBXNjYWxlAXw/wAAAKACQqeLhAc4eBnNjYWxlWgF7P4R64UeuFHsnAJCp4uEBzh4Hb25DbGljawIEAJCp4uEB3R6JCUBzaG91dCgicGFkTWVudVJlc2V0Iik7Cgpjb25maWdCb3QubWFza3MubWVudVBvcnRhbCA9ICJwYWRNZW51IjsKCm1hc2tzLm9uR3JpZENsaWNrID0gYEAgc2hvdXQoInBhZE1lbnVSZXNldCIpO2A7Cm1hc2tzLnBhZE1lbnVSZXNldCA9IGBAIGNvbmZpZ0JvdC5tYXNrcy5tZW51UG9ydGFsID0gbnVsbDsKCmNsZWFyVGFnTWFza3ModGhpc0JvdCk7YDsKCmNvbnN0IHBhZExvY2F0aW9ucyA9IHRhZ3MucGFkTG9jYXRpb25zOwpjb25zdCBtZW51QnV0dG9uID0ge307CgptZW51QnV0dG9uLnNwYWNlID0gInRlbXBMb2NhbCI7Cm1lbnVCdXR0b24ucGFkTWVudSA9IHRydWU7Cm1lbnVCdXR0b24ucGFkTWVudVJlc2V0ID0gIkAgZGVzdHJveSh0aGlzQm90KTsiOwptZW51QnV0dG9uLm1lbnVJdGVtU3R5bGUgPSB7ImJvcmRlci1yYWRpdXMiOiI4cHgiLCAibWFyZ2luLXRvcCI6IjNweCJ9OwptZW51QnV0dG9uLmxhYmVsQWxpZ25tZW50ID0gImxlZnQiOwptZW51QnV0dG9uLmNvbG9yID0gdGFncy5jb2xvcjsKbWVudUJ1dHRvbi5tYW5hZ2VyID0gZ2V0TGluayh0aGlzQm90KTsKCmlmIChwYWRMb2NhdGlvbnMubGVuZ3RoID4gMCkKewogICAgbWVudUJ1dHRvbi5mb3JtQWRkcmVzcyA9ICJtZWV0aW5nX3Jvb20iOwogICAgbWVudUJ1dHRvbi5vbkNsaWNrID0gYEAgbGlua3MubWFuYWdlci5wYWRHb1RvTG9jYXRpb24odGFncy5sYWJlbCk7YDsKCiAgICBmb3IgKGxldCBpID0gMDsgaSA8IHBhZExvY2F0aW9ucy5sZW5ndGg7IGkrKykKICAgIHsKICAgICAgICBtZW51QnV0dG9uLmxhYmVsID0gcGFkTG9jYXRpb25zW2ldOwoKICAgICAgICBjcmVhdGUobWVudUJ1dHRvbik7CiAgICB9Cn0KCm1lbnVCdXR0b24ubGFiZWxBbGlnbm1lbnQgPSAiY2VudGVyIjsKbWVudUJ1dHRvbi5sYWJlbCA9ICIgICAgIjsKbWVudUJ1dHRvbi5mb3JtQWRkcmVzcyA9ICJpb3Nfc2hhcmUiOwptZW51QnV0dG9uLm9uQ2xpY2sgPSBgQCBsaW5rcy5tYW5hZ2VyLnBhZFNoYXJlKCk7YDsKCmNyZWF0ZShtZW51QnV0dG9uKTsKCmlmIChidWlsZGVyVmVyc2lvbikKewogICAgbWVudUJ1dHRvbi5mb3JtQWRkcmVzcyA9ICJlZGl0IjsKICAgIG1lbnVCdXR0b24ub25DbGljayA9IGBAIGxpbmtzLm1hbmFnZXIucGFkRWRpdE1lbnUoKTtgOwoKICAgIGNyZWF0ZShtZW51QnV0dG9uKTsKfScAkKni4QHOHg5vblBvaW50ZXJFbnRlcgIEAJCp4uEB5ychQCBtYXNrcy5zY2FsZSA9IHRhZ3Muc2NhbGUgKyAwLjE7JwCQqeLhAc4eDW9uUG9pbnRlckV4aXQCBACQqeLhAYkoGUAgY2xlYXJUYWdNYXNrcyh0aGlzQm90KTsnAJCp4uEBzh4Gc3lzdGVtAgQAkKni4QGjKA5hYi5mYWN0b3J5LnBhZCcAkKni4QHOHg9wYWRHb1RvTG9jYXRpb24CBACQqeLhAbIoogVAbGV0IHRhcmdldExvY2F0aW9uID0gdGhhdDsKbGV0IHVybENoZWNrID0gZmFsc2U7Cgp0cnkgCnsKICAgIHRhcmdldExvY2F0aW9uID0gbmV3IFVSTCh0aGF0KTsKCiAgICB1cmxDaGVjayA9ICF1cmxDaGVjazsKfQpjYXRjaCAoZSkgCnsKCiAgICBvcy50b2FzdCgidHJhdmVsbGluZyBub3ciKTsKCiAgICBvcy5nb1RvVVJMKCIvP2FiPSIgKyB0YXJnZXRMb2NhdGlvbik7Cn0KCmxldCBpbnN0Q2hlY2sgPSB0YXJnZXRMb2NhdGlvbi5zZWFyY2hQYXJhbXMuaGFzKCJpbnN0Iik7CmxldCBhYkNoZWNrID0gdGFyZ2V0TG9jYXRpb24uc2VhcmNoUGFyYW1zLmhhcygiYWIiKTsKCmlmIChpbnN0Q2hlY2spCnsKICAgIGlmIChhYkNoZWNrKQogICAgewogICAgICAgIG9zLmdvVG9VUkwoIi8/Z3JpZFBvcnRhbD1ob21lJmluc3Q9IiArIHRhcmdldExvY2F0aW9uLnNlYXJjaFBhcmFtcy5nZXQoImluc3QiKSArICImYWI9IiArIHRhcmdldExvY2F0aW9uLnNlYXJjaFBhcmFtcy5nZXQoImFiIikpOwogICAgfQogICAgZWxzZQogICAgewogICAgICAgIG9zLmdvVG9VUkwoIi8/Z3JpZFBvcnRhbD1ob21lJmluc3Q9IiArIHRhcmdldExvY2F0aW9uLnNlYXJjaFBhcmFtcy5nZXQoImluc3QiKSk7CiAgICB9CiAgICAKfQplbHNlIAp7CiAgICBvcy50b2FzdCgibm90IGEgcmVjb2duaXplZCB1cmwiKTsKfScAkKni4QHOHgtwYWRFZGl0TWVudQIEAJCp4uEB1S2BD0BzaG91dCgicGFkTWVudVJlc2V0Iik7Cgpjb25maWdCb3QubWFza3MubWVudVBvcnRhbCA9ICJwYWRNZW51IjsKCm1hc2tzLm9uR3JpZENsaWNrID0gYEAgc2hvdXQoInBhZE1lbnVSZXNldCIpO2A7Cm1hc2tzLnBhZE1lbnVSZXNldCA9IGBAIGNvbmZpZ0JvdC5tYXNrcy5tZW51UG9ydGFsID0gbnVsbDsKCmNsZWFyVGFnTWFza3ModGhpc0JvdCk7YDsKCmNvbnN0IHBhZExvY2F0aW9ucyA9IHRhZ3MucGFkTG9jYXRpb25zOwpjb25zdCBtZW51QnV0dG9uID0ge307CgptZW51QnV0dG9uLnNwYWNlID0gInRlbXBMb2NhbCI7Cm1lbnVCdXR0b24ucGFkTWVudVNvcnRPcmRlciA9IDEwMDsKbWVudUJ1dHRvbi5wYWRNZW51UmVzZXQgPSAiQCBkZXN0cm95KHRoaXNCb3QpOyI7Cm1lbnVCdXR0b24ubWVudUl0ZW1TdHlsZSA9IHsgImJvcmRlci1yYWRpdXMiOiAiOHB4IiwgIm1hcmdpbi10b3AiOiAiM3B4IiB9OwptZW51QnV0dG9uLmxhYmVsQWxpZ25tZW50ID0gImNlbnRlciI7Cm1lbnVCdXR0b24uY29sb3IgPSAiI0Q2NkQ1RSI7Cm1lbnVCdXR0b24ubWFuYWdlciA9IGdldExpbmsodGhpc0JvdCk7Cm1lbnVCdXR0b24ubGFiZWwgPSAiICAgICI7Cm1lbnVCdXR0b24uZm9ybUFkZHJlc3MgPSAiZGVsZXRlX2ZvcmV2ZXIiOwptZW51QnV0dG9uLm9uQ2xpY2sgPSBgQCBsaW5rcy5tYW5hZ2VyLnBhZFJlbW92ZUxvY2F0aW9ucygpO2A7Cm1lbnVCdXR0b24ub3B0aW9uQ2xpY2sgPSBgQCBpZiAoZ2V0Qm90KGJ5TW9kKHtwYWRMb2NhdGlvbk9wdGlvbjogdHJ1ZSwgZm9ybUFkZHJlc3M6ICJjaGVja19ib3gifSkpKQp7CiAgICB0YWdzLnBhZE1lbnUgPSB0cnVlOwp9CmVsc2UKewogICAgdGFncy5wYWRNZW51ID0gZmFsc2U7Cn1gOwoKbGV0IGRlbGV0ZUJ1dHRvbiA9IGNyZWF0ZShtZW51QnV0dG9uKTsKCm1lbnVCdXR0b24ucGFkTWVudSA9IHRydWU7Cm1lbnVCdXR0b24ubGFiZWxBbGlnbm1lbnQgPSAibGVmdCI7Cm1lbnVCdXR0b24uY29sb3IgPSB0YWdzLmNvbG9yOwptZW51QnV0dG9uLmRlbGV0ZUJ1dHRvbiA9IGdldExpbmsoZGVsZXRlQnV0dG9uKTsKCmlmIChwYWRMb2NhdGlvbnMubGVuZ3RoID4gMCkgCnsKICAgIG1lbnVCdXR0b24uZm9ybUFkZHJlc3MgPSAiY2hlY2tfYm94X291dGxpbmVfYmxhbmsiOwogICAgbWVudUJ1dHRvbi5wYWRMb2NhdGlvbk9wdGlvbiA9IHRydWU7CiAgICBtZW51QnV0dG9uLm9uQ2xpY2sgPSBgQCBpZiAodGFncy5mb3JtQWRkcmVzcyA9PSAiY2hlY2tfYm94X291dGxpbmVfYmxhbmsiKQogICAgewogICAgICAgIHRhZ3MuZm9ybUFkZHJlc3MgPSAiY2hlY2tfYm94IjsKICAgIH0KICAgIGVsc2UKICAgIHsKICAgICAgICB0YWdzLmZvcm1BZGRyZXNzID0gImNoZWNrX2JveF9vdXRsaW5lX2JsYW5rIjsKICAgIH0KICAgIAogICAgbGlua3MuZGVsZXRlQnV0dG9uLm9wdGlvbkNsaWNrKHRoaXNCb3QpO2A7CgogICAgZm9yIChsZXQgaSA9IDA7IGkgPCBwYWRMb2NhdGlvbnMubGVuZ3RoOyBpKyspIAogICAgewogICAgICAgIG1lbnVCdXR0b24ucGFkTWVudVNvcnRPcmRlciA9IGk7CiAgICAgICAgbWVudUJ1dHRvbi5sYWJlbCA9IHBhZExvY2F0aW9uc1tpXTsKCiAgICAgICAgY3JlYXRlKG1lbnVCdXR0b24pOwogICAgfQp9CgptZW51QnV0dG9uLm9uQ2xpY2sgPSBudWxsOwptZW51QnV0dG9uLnBhZExvY2F0aW9uT3B0aW9uID0gbnVsbDsKbWVudUJ1dHRvbi5wYWRNZW51U29ydE9yZGVyID0gLTE7Cm1lbnVCdXR0b24ubGFiZWwgPSAiKyI7Cm1lbnVCdXR0b24uZm9ybSA9ICJpbnB1dCI7Cm1lbnVCdXR0b24uZm9ybUFkZHJlc3MgPSAibWVldGluZ19yb29tIjsKbWVudUJ1dHRvbi5vblN1Ym1pdCA9IGBAIGlmICghdGhhdCkKewogICAgcmV0dXJuOwp9CgpsaW5rcy5tYW5hZ2VyLnBhZEFkZExvY2F0aW9uKHRoYXQudGV4dCk7YDsKCmNyZWF0ZShtZW51QnV0dG9uKTsnAJCp4uEBzh4IcGFkU2hhcmUCBACQqeLhAdc8Y0BzaG91dCgicGFkTWVudVJlc2V0Iik7Cgpvcy5zZXRDbGlwYm9hcmQoY29uZmlnQm90LnRhZ3MudXJsKTsKCm9zLnRvYXN0KCJ1cmwgY29waWVkIHRvIGNsaXBib2FyZCIpOycAkKni4QHOHg5wYWRBZGRMb2NhdGlvbgIEAJCp4uEBuz2HAUBzaG91dCgicGFkTWVudVJlc2V0Iik7CgpsZXQgbmV3QXJyYXkgPSB0YWdzLnBhZExvY2F0aW9uczsKCm5ld0FycmF5LnB1c2godGhhdCk7Cgp0YWdzLnBhZExvY2F0aW9ucyA9IG5ld0FycmF5OwoKdGhpc0JvdC5wYWRFZGl0TWVudSgpOycAkKni4QHOHhJwYWRSZW1vdmVMb2NhdGlvbnMCBACQqeLhAcM+5QNAY29uc3QgcGFkTWVudU9wdGlvbnMgPSBnZXRCb3RzKGJ5TW9kKHtwYWRMb2NhdGlvbk9wdGlvbjogdHJ1ZSwgZm9ybUFkZHJlc3M6ICJjaGVja19ib3giLCBwYWRNZW51OiB0cnVlfSkpOwpjb25zdCByZW1vdmVUYXJnZXRzID0gW107Cgpmb3IgKGxldCBpID0gMDsgaSA8IHBhZE1lbnVPcHRpb25zLmxlbmd0aDsgaSsrKQp7CiAgICByZW1vdmVUYXJnZXRzLnB1c2gocGFkTWVudU9wdGlvbnNbaV0udGFncy5sYWJlbCk7Cn0KCnNob3V0KCJwYWRNZW51UmVzZXQiKTsKCmNvbnN0IHBhZExvY2F0aW9ucyA9IHRhZ3MucGFkTG9jYXRpb25zOwoKZm9yIChsZXQgaiA9IDA7IGogPCByZW1vdmVUYXJnZXRzLmxlbmd0aDsgaisrKQp7CiAgICBsZXQgdGFyZ2V0SW5kZXggPSBwYWRMb2NhdGlvbnMuaW5kZXhPZihyZW1vdmVUYXJnZXRzW2pdKTsKCiAgICBwYWRMb2NhdGlvbnMuc3BsaWNlKHRhcmdldEluZGV4LCAxKTsKfQoKdGhpc0JvdC5wYWRFZGl0TWVudSgpOygAkKni4QHOHgxhYkJvdFZlcnNpb24BfQYnAJCp4uEBzh4JYWJGYWN0b3J5AgQAkKni4QGqQgR0cnVlJwCQqeLhAc4eCGFiSWdub3JlAgQAkKni4QGvQgR0cnVlJwCQqeLhAc4eC2ZhY3RvcnlJY29uAgQAkKni4QG0QgxtZWV0aW5nX3Jvb20nAJCp4uEBzh4JbGlzdGVuaW5nAgQAkKni4QHBQgVmYWxzZScAkKni4QHOHgt0b29sTWFuYWdlcgIEAJCp4uEBx0Io8J+UlzE0ZTFmZGFjLWNmZDctNGU3ZS1iZGQxLTk2N2E0MDg1YTc1NScAkKni4QHOHghvbkNyZWF0ZQIEAJCp4uEB7kJSQGlmICghdGFncy5zeXN0ZW0pCnsKICAgIGxldCBiYXNlQXJyYXkgPSBbXTsKCiAgICB0YWdzLnBhZExvY2F0aW9ucyA9IGJhc2VBcnJheTsKfScAkKni4QHOHg9hYk1lbnVTb3J0T3JkZXICBACQqeLhAcFDATEnAQRib3RzJGE1ZTJlZWRmLWNkMTctNGJmOC1hOTg2LWRkODJhYTFmZDg1OAEnAJCp4uEBw0MFY29sb3ICBACQqeLhAcRDByM2MjI3NzMnAJCp4uEBw0MEZm9ybQIEAJCp4uEBzEMFaGVsaXgnAJCp4uEBw0MEbW9kcwIEAJCp4uEB0kMY8J+nrHsiY29sb3IiOiAiIzYyMjc3MyJ9JwCQqeLhAcNDBnN5c3RlbQIEAJCp4uEB6UMOYWIuZmFjdG9yeS5tb2QnAJCp4uEBw0MJYWJGYWN0b3J5AgQAkKni4QH4QwR0cnVlJwCQqeLhAcNDCGFiSWdub3JlAgQAkKni4QH9QwR0cnVlJwCQqeLhAcNDCWxpc3RlbmluZwIEAJCp4uEBgkQFZmFsc2UnAJCp4uEBw0MLZmFjdG9yeUljb24CBACQqeLhAYhEBWhlbGl4JwCQqeLhAcNDC3Rvb2xNYW5hZ2VyAgQAkKni4QGORCjwn5SXMTRlMWZkYWMtY2ZkNy00ZTdlLWJkZDEtOTY3YTQwODVhNzU1JwCQqeLhAcNDB29uQ2xpY2sCBACQqeLhAbVEkwZAc2hvdXQoIm1vZE1lbnVSZXNldCIpOwoKY29uZmlnQm90Lm1hc2tzLm1lbnVQb3J0YWwgPSAibW9kTWVudSI7CgptYXNrcy5vbkdyaWRDbGljayA9IGBAIHNob3V0KCJtb2RNZW51UmVzZXQiKTtgOwptYXNrcy5tb2RNZW51UmVzZXQgPSBgQCBjb25maWdCb3QubWFza3MubWVudVBvcnRhbCA9IG51bGw7CmNvbmZpZ0JvdC5tYXNrcy50YWdQb3J0YWwgPSBudWxsOwoKdGFnUG9ydGFsQm90Lm1hc2tzLnRhZ1BvcnRhbEFuY2hvciA9IG51bGw7CgpjbGVhclRhZ01hc2tzKHRoaXNCb3QpO2A7CgpsZXQgbW9kTWVudUJvdCA9IHt9OwoKbW9kTWVudUJvdC5zcGFjZSA9ICJ0ZW1wTG9jYWwiOwptb2RNZW51Qm90Lm1vZE1lbnUgPSB0cnVlOwptb2RNZW51Qm90LmxhYmVsID0gImVkaXQgbW9kIjsKbW9kTWVudUJvdC5mb3JtQWRkcmVzcyA9ICJlZGl0IjsKbW9kTWVudUJvdC5jb2xvciA9IHRhZ3MuY29sb3I7Cm1vZE1lbnVCb3QubW9kRGltZW5zaW9uID0gdGhpc0JvdC5pZCArICIubW9kcyI7Cm1vZE1lbnVCb3QubW9kTWVudVJlc2V0ID0gYEAgZGVzdHJveSh0aGlzQm90KTtgOwptb2RNZW51Qm90Lm1lbnVJdGVtU3R5bGUgPSB7ImJvcmRlci1yYWRpdXMiOiI4cHgiLCAibWFyZ2luLXRvcCI6IjNweCJ9Owptb2RNZW51Qm90Lm9uQ2xpY2sgPSBgQCBkZXN0cm95KHRoaXNCb3QpOwoKY29uZmlnQm90Lm1hc2tzLnRhZ1BvcnRhbCA9IHRhZ3MubW9kRGltZW5zaW9uOwoKdGFnUG9ydGFsQm90Lm1hc2tzLnRhZ1BvcnRhbEFuY2hvclBvaW50ID0gInRvcCI7CmA7CgpjcmVhdGUobW9kTWVudUJvdCk7JwCQqeLhAcNDBm9uRHJvcAIEAJCp4uEByUrpAkBpZiAodGhhdC5kcmFnQm90ICE9IHRoaXNCb3QgfHwgdGhhdC50by5ib3QudGFncy5hYkZhY3RvcnkpCnsKICAgIHJldHVybjsKfQoKYXBwbHlNb2QodGhhdC50by5ib3QsIHRhZ3MubW9kcyk7CgpsZXQgcHJldmlvaXVzRGltZW5zaW9uID0gdGhhdC5mcm9tLmRpbWVuc2lvbjsKCnRhZ3NbdGhhdC50by5kaW1lbnNpb25dID0gbnVsbDsKdGFnc1twcmV2aW9pdXNEaW1lbnNpb25dID0gdHJ1ZTsKdGFnc1twcmV2aW9pdXNEaW1lbnNpb24gKyAiWCJdID0gdGhhdC5mcm9tLng7CnRhZ3NbcHJldmlvaXVzRGltZW5zaW9uICsgIlkiXSA9IHRoYXQuZnJvbS55Owp0YWdzW3ByZXZpb2l1c0RpbWVuc2lvbiArICJaIl0gPSB0aGF0LmZyb20uejsoAJCp4uEBw0MMYWJCb3RWZXJzaW9uAX0QJwCQqeLhAcNDD2FiTWVudVNvcnRPcmRlcgIEAJCp4uEBtE0BNCcBBGJvdHMkYzQ0ZWJjN2YtM2RmNy00ZThlLTk3ODEtMTRlMmNlOGUzNGM4AScAkKni4QG2TQtmYWN0b3J5SWNvbgIEAJCp4uEBt00LaW52ZW50b3J5XzInAJCp4uEBtk0FY29sb3ICBACQqeLhAcNNByM5MDhCRkMoAJCp4uEBtk0MYWJCb3RWZXJzaW9uAX0VJwCQqeLhAbZNBGZvcm0CBACQqeLhAcxNBmNpcmNsZSgAkKni4QG2TQVzY2FsZQF9AicAkKni4QG2TQt0b29sTWFuYWdlcgIEAJCp4uEB1E0o8J+UlzE0ZTFmZGFjLWNmZDctNGU3ZS1iZGQxLTk2N2E0MDg1YTc1NScAkKni4QG2TQZzY2FsZVoCBACQqeLhAftNAzAuMScAkKni4QG2TQZzeXN0ZW0CBACQqeLhAf9NE2FiLmZhY3RvcnkuYm90U3RvcmUnAJCp4uEBtk0Gb25Ecm9wAgQAkKni4QGTTn9AaWYgKHRoYXQuZHJhZ0JvdCA9PSB0aGlzQm90IHx8IHRoYXQuZHJhZ0JvdC50YWdzLnNwYWNlICE9ICJzaGFyZWQiKQp7CiAgICByZXR1cm47Cn0KCnRoaXNCb3RbdGFncy5zdG9yZU1vZGUgKyAiT25Ecm9wIl0odGhhdCk7JwCQqeLhAbZNEWJvdFN0b3JlUmVqZWN0Qm90AgQAkKni4QGTT4oCQHRoYXQuZHJhZ0JvdC50YWdzW3RoYXQudG8uZGltZW5zaW9uXSA9IG51bGw7CnRoYXQuZHJhZ0JvdC50YWdzW3RoYXQuZnJvbS5kaW1lbnNpb25dID0gdHJ1ZTsKdGhhdC5kcmFnQm90LnRhZ3NbdGhhdC5mcm9tLmRpbWVuc2lvbisiWCJdID0gdGhhdC5mcm9tLng7CnRoYXQuZHJhZ0JvdC50YWdzW3RoYXQuZnJvbS5kaW1lbnNpb24rIlkiXSA9IHRoYXQuZnJvbS55Owp0aGF0LmRyYWdCb3QudGFnc1t0aGF0LmZyb20uZGltZW5zaW9uKyJaIl0gPSB0aGF0LmZyb20uejsnAJCp4uEBtk0Jc3RvcmVNb2RlAgQAkKni4QGeUQl1bmxpbWl0ZWQnAJCp4uEBtk0PdW5saW1pdGVkT25Ecm9wAgQAkKni4QGoUWVAaWYgKHRhZ3MudGVtcGxhdGUpCnsKICAgIHRoaXNCb3QuYm90U3RvcmVSZWplY3RCb3QodGhhdCk7CgogICAgcmV0dXJuOwp9Cgp0aGlzQm90LmFkZFRlbXBsYXRlKHRoYXQpOycAkKni4QG2TQ1saW1pdGVkT25Ecm9wAgQAkKni4QGOUokCQGlmICgodGFncy5ib3RTdG9yZUlEICYmIHRoYXQuZHJhZ0JvdC50YWdzLmJvdFN0b3JlSUQgIT0gdGFncy5ib3RTdG9yZUlEKSB8fCB0YWdzLm1heENvdW50ID09IHRhZ3MubGFiZWwpCnsKICAgIHRoaXNCb3QuYm90U3RvcmVSZWplY3RCb3QodGhhdCk7CgogICAgcmV0dXJuOwp9Cgp0YWdzLmxhYmVsKys7CgppZiAodGFncy50ZW1wbGF0ZSkKewogICAgZGVzdHJveSh0aGF0LmRyYWdCb3QpOwp9CmVsc2UKewogICAgdGhpc0JvdC5hZGRUZW1wbGF0ZSh0aGF0KTsKfScAkKni4QG2TQthZGRUZW1wbGF0ZQIEAJCp4uEBmFTjC0B0YWdzLnRlbXBsYXRlID0gZ2V0TGluayh0aGF0LmRyYWdCb3QpOwoKdGhhdC5kcmFnQm90LnRhZ3MubGlzdGVuaW5nID0gZmFsc2U7CnRoYXQuZHJhZ0JvdC50YWdzLnBvaW50YWJsZSA9IGZhbHNlOwp0aGF0LmRyYWdCb3QudGFncy50cmFuc2Zvcm1lciA9IHRoaXNCb3QuaWQ7CnRoYXQuZHJhZ0JvdC50YWdzLmNyZWF0b3IgPSB0aGlzQm90LmlkOwp0aGF0LmRyYWdCb3QudGFncy50cmFuc2Zvcm1lciA9IHRoaXNCb3QuaWQ7CnRoYXQuZHJhZ0JvdC50YWdzW3RoYXQudG8uZGltZW5zaW9uICsgIlgiXSA9IDA7CnRoYXQuZHJhZ0JvdC50YWdzW3RoYXQudG8uZGltZW5zaW9uICsgIlkiXSA9IDA7CnRoYXQuZHJhZ0JvdC50YWdzW3RoYXQudG8uZGltZW5zaW9uICsgIloiXSA9IDU7CnRoYXQuZHJhZ0JvdC50YWdzLnNjYWxlID0gdGhhdC5kcmFnQm90LnRhZ3Muc2NhbGUgPyB0aGF0LmRyYWdCb3QudGFncy5zY2FsZSAvIDIgOiAwLjU7CnRoYXQuZHJhZ0JvdC50YWdzLnNjYWxlWCA9IHRoYXQuZHJhZ0JvdC50YWdzLnNjYWxlWCA/IHRoYXQuZHJhZ0JvdC50YWdzLnNjYWxlWCAvIDIgOiAxOwp0aGF0LmRyYWdCb3QudGFncy5zY2FsZVkgPSB0aGF0LmRyYWdCb3QudGFncy5zY2FsZVkgPyB0aGF0LmRyYWdCb3QudGFncy5zY2FsZVkgLyAyIDogMTsKdGhhdC5kcmFnQm90LnRhZ3Muc2NhbGVaID0gdGhhdC5kcmFnQm90LnRhZ3Muc2NhbGVaID8gdGhhdC5kcmFnQm90LnRhZ3Muc2NhbGVaICogMTAgOiAxMDsKCmlmICh0YWdzLnN0b3JlTW9kZSA9PSAibGltaXRlZCIpCnsKICAgIGxldCBuZXdTdG9yZUlEID0gdXVpZCgpOwoKICAgIHRhZ3MuYm90U3RvcmVJRCA9IG5ld1N0b3JlSUQ7CgogICAgdGhhdC5kcmFnQm90LnRhZ3MuYm90U3RvcmVJRCA9IG5ld1N0b3JlSUQ7Cn0KCmxldCBoaXRCb3ggPSB7fTsKCmhpdEJveC50cmFuc2Zvcm1lciA9IHRoaXNCb3QuaWQ7CmhpdEJveC5jb2xvciA9ICJjbGVhciI7CmhpdEJveC5kcmFnZ2FibGUgPSBmYWxzZTsKaGl0Qm94Lm1hbmFnZXIgPSBnZXRMaW5rKHRoaXNCb3QpOwpoaXRCb3gub25EcmFnID0gYEAgbGlua3MubWFuYWdlci50ZW1wbGF0ZURyYWcodGhhdCk7YDsKaGl0Qm94LnNjYWxlID0gbGlua3MudGVtcGxhdGUudGFncy5zY2FsZTsKaGl0Qm94LnNjYWxlWCA9IGxpbmtzLnRlbXBsYXRlLnRhZ3Muc2NhbGVYOwpoaXRCb3guc2NhbGVZID0gbGlua3MudGVtcGxhdGUudGFncy5zY2FsZVk7CmhpdEJveC5zY2FsZVogPSBsaW5rcy50ZW1wbGF0ZS50YWdzLnNjYWxlWjsKaGl0Qm94W3RoYXQudG8uZGltZW5zaW9uXSA9IHRydWU7CmhpdEJveFt0aGF0LnRvLmRpbWVuc2lvbiArICJYIl0gPSAwOwpoaXRCb3hbdGhhdC50by5kaW1lbnNpb24gKyAiWSJdID0gMDsKaGl0Qm94W3RoYXQudG8uZGltZW5zaW9uICsgIloiXSA9IDU7CgpsZXQgbmV3SGl0Ym94ID0gY3JlYXRlKGhpdEJveCk7CgpsaW5rcy5oaXRCb3ggPSBnZXRMaW5rKG5ld0hpdGJveCk7Cgp0aGlzQm90LmluaXRpYXRlQm90U3RvcmVBbmltYXRpb24oKTsnAJCp4uEBtk0Hb25DbGljawIEAJCp4uEB/F/8CkBzaG91dCgiYm90U3RvcmVNZW51UmVzZXQiKTsKCmNvbmZpZ0JvdC5tYXNrcy5tZW51UG9ydGFsID0gImJvdFN0b3JlTWVudSI7CgptYXNrcy5vbkdyaWRDbGljayA9IGBAIHNob3V0KCJib3RTdG9yZU1lbnVSZXNldCIpO2A7Cm1hc2tzLmJvdFN0b3JlTWVudVJlc2V0ID0gYEAgY29uZmlnQm90Lm1hc2tzLm1lbnVQb3J0YWwgPSBudWxsOwoKY2xlYXJUYWdNYXNrcyh0aGlzQm90KTtgOwoKbGV0IG1lbnVCdXR0b24gPSB7fTsKCm1lbnVCdXR0b24uc3BhY2UgPSAidGVtcExvY2FsIjsKbWVudUJ1dHRvbi5ib3RTdG9yZU1lbnUgPSB0cnVlOwptZW51QnV0dG9uLmJvdFN0b3JlTWVudVJlc2V0ID0gIkAgZGVzdHJveSh0aGlzQm90KTsiOwptZW51QnV0dG9uLm1lbnVJdGVtU3R5bGUgPSB7ImJvcmRlci1yYWRpdXMiOiI4cHgiLCAibWFyZ2luLXRvcCI6IjNweCJ9OwptZW51QnV0dG9uLmxhYmVsQWxpZ25tZW50ID0gImxlZnQiOwptZW51QnV0dG9uLmNvbG9yID0gdGFncy5jb2xvcjsKbWVudUJ1dHRvbi5tYW5hZ2VyID0gZ2V0TGluayh0aGlzQm90KTsKbWVudUJ1dHRvbi5vbkNsaWNrID0gYEAgc2hvdXQoImJvdFN0b3JlTWVudVJlc2V0Iik7CiAgICAKbGlua3MubWFuYWdlci5jaGFuZ2VTdG9yZVN0YXRlKCk7YDsKCmlmICh0YWdzLnN0b3JlTW9kZSA9PSAidW5saW1pdGVkIikKewogICAgbWVudUJ1dHRvbi5mb3JtQWRkcmVzcyA9ICJpbnZlbnRvcnkiOwogICAgbWVudUJ1dHRvbi5sYWJlbCA9ICJjaGFuZ2UgdG8gbGltaXRlZCI7CgogICAgY3JlYXRlKG1lbnVCdXR0b24pOwp9CmVsc2UKewogICAgbWVudUJ1dHRvbi5mb3JtQWRkcmVzcyA9ICJmaWxlX2NvcHkiOwogICAgbWVudUJ1dHRvbi5sYWJlbCA9ICJjaGFuZ2UgdG8gdW5saW1pdGVkIjsKCiAgICBjcmVhdGUobWVudUJ1dHRvbik7CgogICAgbWVudUJ1dHRvbi5sYWJlbCA9ICIgICAgIjsKICAgIG1lbnVCdXR0b24ubGFiZWxBbGlnbm1lbnQgPSAiY2VudGVyIjsKICAgIG1lbnVCdXR0b24ub25DbGljayA9IGBAIGxpbmtzLm1hbmFnZXIudGFncy50ZW1wbGF0ZUxvY2sgPSAhbGlua3MubWFuYWdlci50YWdzLnRlbXBsYXRlTG9jawogICAgCiAgICBpZiAobGlua3MubWFuYWdlci50YWdzLnRlbXBsYXRlTG9jaykKICAgIHsKICAgICAgICB0YWdzLmZvcm1BZGRyZXNzID0gImxvY2siOwogICAgfQogICAgZWxzZQogICAgewogICAgICAgIHRhZ3MuZm9ybUFkZHJlc3MgPSAibG9ja19vcGVuIjsKICAgIH1gOwoKICAgIGlmICh0YWdzLnRlbXBsYXRlTG9jaykKICAgIHsKICAgICAgICBtZW51QnV0dG9uLmZvcm1BZGRyZXNzID0gImxvY2siOwogICAgfQogICAgZWxzZQogICAgewogICAgICAgIG1lbnVCdXR0b24uZm9ybUFkZHJlc3MgPSAibG9ja19vcGVuIjsKICAgIH0KCiAgICBjcmVhdGUobWVudUJ1dHRvbik7Cn0KCicAkKni4QG2TQx0ZW1wbGF0ZURyYWcCBACQqeLhAflqgQdAaWYgKHRhZ3Muc3RvcmVNb2RlID09ICJsaW1pdGVkIikKewogICAgaWYgKHRhZ3MubGFiZWwgPT0gMCkKICAgIHsKICAgICAgICByZXR1cm47CiAgICB9Cn0KCmxldCBuZXdCb3QgPSBnZXRNb2QobGlua3MudGVtcGxhdGUpOwoKbmV3Qm90W3RoYXQuZnJvbS5kaW1lbnNpb25dID0gdHJ1ZTsKbmV3Qm90W3RoYXQuZnJvbS5kaW1lbnNpb24gKyAiWCJdID0gdGFnc1t0aGF0LmZyb20uZGltZW5zaW9uICsgIlgiXTsKbmV3Qm90W3RoYXQuZnJvbS5kaW1lbnNpb24gKyAiWSJdID0gdGFnc1t0aGF0LmZyb20uZGltZW5zaW9uICsgIlkiXTsKbmV3Qm90W3RoYXQuZnJvbS5kaW1lbnNpb24gKyAiWiJdID0gMDsKbmV3Qm90Lmxpc3RlbmluZyA9IG51bGw7Cm5ld0JvdC5wb2ludGFibGUgPSBudWxsOwpuZXdCb3QudHJhbnNmb3JtZXIgPSBudWxsOwpuZXdCb3QuY3JlYXRvciA9IG51bGw7Cm5ld0JvdC50cmFuc2Zvcm1lciA9IG51bGw7Cm5ld0JvdC5zY2FsZSA9IG5ld0JvdC5zY2FsZSA9PSAwLjUgPyBudWxsIDogbmV3Qm90LnNjYWxlICogMjsKbmV3Qm90LnNjYWxlWCA9IG5ld0JvdC5zY2FsZVggPT0gMSA/IG51bGwgOiBuZXdCb3Quc2NhbGVYICogMjsKbmV3Qm90LnNjYWxlWSA9IG5ld0JvdC5zY2FsZVkgPT0gMSA/IG51bGwgOiBuZXdCb3Quc2NhbGVZICogMjsKbmV3Qm90LnNjYWxlWiA9IG5ld0JvdC5zY2FsZVogPT0gMTAgPyBudWxsIDogbmV3Qm90LnNjYWxlWiAvIDEwOwpuZXdCb3QuYm90U3RvcmVJRCA9IHRhZ3MuYm90U3RvcmVJRDsKCmxldCBjcmVhdGVkQm90ID0gY3JlYXRlKG5ld0JvdCk7Cgpvcy5yZXBsYWNlRHJhZ0JvdChjcmVhdGVkQm90KTsKCmlmICh0YWdzLnN0b3JlTW9kZSA9PSAibGltaXRlZCIpCnsKICAgIHRoaXNCb3QucmVkdWNlTGltaXRlZENvdW50KCk7Cn0nAJCp4uEBtk0ScmVkdWNlTGltaXRlZENvdW50AgQAkKni4QH7cY0CQHRhZ3MubGFiZWwtLTsKCmlmICh0YWdzLmxhYmVsID09IDAgJiYgIXRhZ3MudGVtcGxhdGVMb2NrKQp7CiAgICBjbGVhckludGVydmFsKHRhZ3Muc3RvcmVJbnRlcnZhbCk7CgogICAgZGVzdHJveShsaW5rcy50ZW1wbGF0ZSk7CiAgICBkZXN0cm95KGxpbmtzLmhpdEJveCk7CgogICAgdGFncy50ZW1wbGF0ZSA9IG51bGw7CiAgICB0YWdzLmhpdEJveCA9IG51bGw7CiAgICB0YWdzLmJvdFN0b3JlSUQgPSBudWxsOwogICAgbWFza3Muc3RvcmVJbnRlcnZhbCA9IG51bGw7Cn0nAJCp4uEBtk0JYWJGYWN0b3J5AgQAkKni4QGJdAR0cnVlJwCQqeLhAbZNCGFiSWdub3JlAgQAkKni4QGOdAR0cnVlJwCQqeLhAbZNCWxpc3RlbmluZwIEAJCp4uEBk3QFZmFsc2UnAJCp4uEBtk0QY2hhbmdlU3RvcmVTdGF0ZQIEAJCp4uEBmXTtBEBpZiAodGFncy5zdG9yZU1vZGUgPT0gInVubGltaXRlZCIpCnsKICAgIHRhZ3Muc3RvcmVNb2RlID0gImxpbWl0ZWQiOwoKICAgIGNvbnN0IG1heENvdW50ID0gYXdhaXQgb3Muc2hvd0lucHV0KDEsIHsKICAgICAgICB0aXRsZTogJ2Nob29zZSBtYXgnCiAgICB9KTsKCiAgICBpZiAoIW1heENvdW50KQogICAgewogICAgICAgIG1heENvdW50ID0gMTsKICAgIH0KCiAgICB0YWdzLm1heENvdW50ID0gbWF4Q291bnQ7CgogICAgaWYgKHRhZ3MudGVtcGxhdGUpCiAgICB7CiAgICAgICAgbGV0IG5ld1N0b3JlSUQgPSB1dWlkKCk7CgogICAgICAgIHRhZ3MuYm90U3RvcmVJRCA9IG5ld1N0b3JlSUQ7CgogICAgICAgIGxpbmtzLnRlbXBsYXRlLnRhZ3MuYm90U3RvcmVJRCA9IG5ld1N0b3JlSUQ7CgogICAgICAgIHRhZ3MubGFiZWwgPSAxOwogICAgfQogICAgZWxzZQogICAgewogICAgICAgIHRhZ3MubGFiZWwgPSAwOwogICAgfQp9CmVsc2UKewogICAgdGFncy5zdG9yZU1vZGUgPSAidW5saW1pdGVkIjsKCiAgICB0YWdzLmxhYmVsID0gbnVsbDsKICAgIHRhZ3MubWF4Q291bnQgPSBudWxsOwogICAgdGFncy50ZW1wbGF0ZUxvY2sgPSBudWxsOwogICAgdGFncy5ib3RTdG9yZUlEID0gbnVsbDsKfScAkKni4QG2TRlpbml0aWF0ZUJvdFN0b3JlQW5pbWF0aW9uAgQAkKni4QGHeYsBQGlmICghdGFncy5zdG9yZUludGVydmFsKQp7CiAgICB0aGlzQm90LmFuaW1hdGVCb3RTdG9yZSgpOwoKICAgIG1hc2tzLnN0b3JlSW50ZXJ2YWwgPSBzZXRJbnRlcnZhbCgoKSA9PiB0aGlzQm90LmFuaW1hdGVCb3RTdG9yZSgpLCAyMDAwKTsKfScAkKni4QG2TQ9hbmltYXRlQm90U3RvcmUCBACQqeLhAZN6mgJAbGV0IHJvdFogPSBjb25maWdCb3QudGFncy5ncmlkUG9ydGFsICsgIlJvdGF0aW9uWiI7CmxldCB0YXJnZXRSb3RhdGlvbiA9IDM2MCAqIE1hdGguUEkvMTgwOwoKYXdhaXQgYW5pbWF0ZVRhZyhsaW5rcy50ZW1wbGF0ZSwgcm90WiwgewogICAgZnJvbVZhbHVlOiAwLAogICAgdG9WYWx1ZTogdGFyZ2V0Um90YXRpb24sCiAgICBlYXNpbmc6ewogICAgICAgIG1vZGU6ICJpbm91dCIsCiAgICAgICAgdHlwZTogImxpbmVhciIKICAgIH0sCiAgICBkdXJhdGlvbjogMgp9KS5jYXRjaChlID0+IHt9KTsnAJCp4uEBtk0Pb25JbnN0U3RyZWFtaW5nAgQAkKni4QGufEBAaWYgKHRhZ3MudGVtcGxhdGUpCnsKICAgIHRoaXNCb3QuaW5pdGlhdGVCb3RTdG9yZUFuaW1hdGlvbigpOwp9JwCQqeLhAbZNCW9uRGVzdHJveQIEAJCp4uEB73wjQGNsZWFySW50ZXJ2YWwodGFncy5zdG9yZUludGVydmFsKTsnAJCp4uEBtk0PYWJNZW51U29ydE9yZGVyAgQAkKni4QGTfQE1JwEEYm90cyRkMTQwMjA0Yy01NWM3LTRlYzMtOTM1NC05M2FlNzYyNmE4MzYBKACQqeLhAZV9BnNjYWxlWgF7P4R64UeuFHsoAJCp4uEBlX0Fc2NhbGUBez/jhR64UeuFJwCQqeLhAZV9BWNvbG9yAgQAkKni4QGYfQRncmF5JwCQqeLhAZV9C3N0cm9rZUNvbG9yAgQAkKni4QGdfQcjNUU1ODgwJwCQqeLhAZV9CWxpbmVDb2xvcgIEAJCp4uEBpX0HIzVFNTg4MCgAkKni4QGVfQhkdXJhdGlvbgF9AScAkKni4QGVfQplYXNpbmdUeXBlAgQAkKni4QGufQZsaW5lYXInAJCp4uEBlX0KZWFzaW5nTW9kZQIEAJCp4uEBtX0FaW5vdXQnAJCp4uEBlX0JbGluZVN0eWxlAgQAkKni4QG7fQRsaW5lJwCQqeLhAZV9BnN5c3RlbQIEAJCp4uEBwH0QYWIuZmFjdG9yeS50cmFjaycAkKni4QGVfQlhYkZhY3RvcnkCBACQqeLhAdF9BHRydWUnAJCp4uEBlX0IYWJJZ25vcmUCBACQqeLhAdZ9BHRydWUnAJCp4uEBlX0LdG9vbE1hbmFnZXICBACQqeLhAdt9KPCflJcxNGUxZmRhYy1jZmQ3LTRlN2UtYmRkMS05NjdhNDA4NWE3NTUnAJCp4uEBlX0LZmFjdG9yeUljb24CBACQqeLhAYJ+CHRpbWVsaW5lKACQqeLhAZV9DGFiQm90VmVyc2lvbgF9ECcAkKni4QGVfQhvbkNyZWF0ZQIEAJCp4uEBjH5vQHRhZ3MuY29sb3IgPSAiY2xlYXIiOwoKaWYgKCF0YWdzLmxpbmVUbykKewogICAgdGhpc0JvdC5hZGRUcmFja05vZGUoe2RpbWVuc2lvbjogY29uZmlnQm90LnRhZ3MuZ3JpZFBvcnRhbH0pOwp9JwCQqeLhAZV9DGFkZFRyYWNrTm9kZQIEAJCp4uEB/H7XBUBsZXQgYm90TW9kID0gZ2V0TW9kKHRoaXNCb3QpOwoKYm90TW9kW3RoYXQuZGltZW5zaW9uICsgIlkiXSA9IGJvdE1vZFt0aGF0LmRpbWVuc2lvbiArICJZIl0gLSAzOwoKYm90TW9kLmxpbmVUbyA9IHRoaXNCb3QuaWQ7CmJvdE1vZC5jcmVhdG9yID0gdGhpc0JvdC5pZDsKCmxldCBub2RlMiA9IGNyZWF0ZShib3RNb2QpOwoKdGFncy5saW5lVG8gPSBub2RlMi5pZDsKdGFncy5jcmVhdG9yID0gbm9kZTIuaWQ7CgpsZXQgbm9kZTMgPSBjcmVhdGUoYm90TW9kKTsKCmJvdE1vZFt0aGF0LmRpbWVuc2lvbiArICJYIl0gPSBib3RNb2RbdGhhdC5kaW1lbnNpb24gKyAiWCJdICsgMzsKCmxldCBub2RlNCA9IGNyZWF0ZShib3RNb2QpOwoKbm9kZTMudGFncy5saW5lVG8gPSBub2RlNC5pZDsKbm9kZTMudGFncy5jcmVhdG9yID0gbm9kZTQuaWQ7Cm5vZGU0LnRhZ3MubGluZVRvID0gbm9kZTMuaWQ7Cm5vZGU0LnRhZ3MuY3JlYXRvciA9IG5vZGUzLmlkOwoKbGV0IG5vZGU1ID0gY3JlYXRlKGJvdE1vZCk7Cgpib3RNb2RbdGhhdC5kaW1lbnNpb24gKyAiWSJdID0gYm90TW9kW3RoYXQuZGltZW5zaW9uICsgIlkiXSAtIDM7CgpsZXQgbm9kZTYgPSBjcmVhdGUoYm90TW9kKTsKCm5vZGU1LnRhZ3MubGluZVRvID0gbm9kZTYuaWQ7Cm5vZGU1LnRhZ3MuY3JlYXRvciA9IG5vZGU2LmlkOwpub2RlNi50YWdzLmxpbmVUbyA9IG5vZGU1LmlkOwpub2RlNi50YWdzLmNyZWF0b3IgPSBub2RlNS5pZDsnAJCp4uEBlX0LYWJUcmFja05vZGUCBACQqeLhAdSEAQR0cnVlJwCQqeLhAZV9CWxpc3RlbmluZwIEAJCp4uEB2YQBBWZhbHNlJwCQqeLhAZV9Bm9uRHJvcAIEAJCp4uEB34QBlgVAaWYgKHRoYXQuZHJhZ0JvdC50YWdzLmFiVHJhY2tOb2RlKQp7CiAgICB0YWdzW2NvbmZpZ0JvdC50YWdzLmdyaWRQb3J0YWwgKyAiWCJdID0gTWF0aC5yb3VuZCh0YWdzW2NvbmZpZ0JvdC50YWdzLmdyaWRQb3J0YWwgKyAiWCJdKTsKICAgIHRhZ3NbY29uZmlnQm90LnRhZ3MuZ3JpZFBvcnRhbCArICJZIl0gPSBNYXRoLnJvdW5kKHRhZ3NbY29uZmlnQm90LnRhZ3MuZ3JpZFBvcnRhbCArICJZIl0pOwoKICAgIHJldHVybjsKfQplbHNlIGlmICh0aGF0LmRyYWdCb3QudGFncy5mYWN0b3J5SWNvbiA9PSAiaGVsaXgiKQp7CiAgICB0aGlzQm90LmFwcGx5TW9kVG9UcmFja05vZGUodGhhdCk7CgogICAgdGhhdC5kcmFnQm90LnRhZ3NbdGhhdC5mcm9tLmRpbWVuc2lvbiArICJYIl0gPSB0aGF0LmZyb20ueDsKICAgIHRoYXQuZHJhZ0JvdC50YWdzW3RoYXQuZnJvbS5kaW1lbnNpb24gKyAiWSJdID0gdGhhdC5mcm9tLnk7CgogICAgcmV0dXJuOwp9Cgp0aGF0LmRyYWdCb3QubWFza3Mub25EcmFnID0gIkAgY2xlYXJUaW1lb3V0KHRhZ3MudHJhY2tUaW1lb3V0KTsgY2xlYXJBbmltYXRpb25zKHRoaXNCb3QpOyI7Cgp0aGlzQm90LmFuaW1hdGVUcmFjayh7YW5pbWF0ZWRCb3Q6IHRoYXQuZHJhZ0JvdCwgdGFyZ2V0Tm9kZTogZ2V0Qm90KCJpZCIsIHRhZ3MubGluZVRvKX0pOycAkKni4QGVfQxhbmltYXRlVHJhY2sCBACQqeLhAfaJAY8NQGxldCBjdXJyZW50RGltID0gY29uZmlnQm90LnRhZ3MubWFwUG9ydGFsID8gY29uZmlnQm90LnRhZ3MubWFwUG9ydGFsIDogY29uZmlnQm90LnRhZ3MuZ3JpZFBvcnRhbDsKbGV0IGFuaW1hdGVkQm90ID0gdGhhdC5hbmltYXRlZEJvdDsKbGV0IG5leHROb2RlID0gdGhhdC50YXJnZXROb2RlOwpsZXQgb3JpZ2luTm9kZSA9IHRoaXNCb3Q7CgppZiAobmV4dE5vZGUuaWQgPT0gdGhpc0JvdC5pZCkKewogICAgbGV0IG5vZGVTdGFjayA9IGdldEJvdHMoYnlNb2Qoe2FiVHJhY2tOb2RlOiB0cnVlLCBbY3VycmVudERpbV06IHRydWUsIFtjdXJyZW50RGltICsgIlgiXTogdGFnc1tjdXJyZW50RGltICsgIlgiXSwgW2N1cnJlbnREaW0gKyAiWSJdOiB0YWdzW2N1cnJlbnREaW0gKyAiWSJdfSkpOwoKICAgIGlmIChub2RlU3RhY2subGVuZ3RoID49IDMpCiAgICB7CiAgICAgICAgb3JpZ2luTm9kZSA9IG5vZGVTdGFja1ttYXRoLnJhbmRvbUludCgwLCBub2RlU3RhY2subGVuZ3RoKV07CgogICAgICAgIG5leHROb2RlID0gZ2V0Qm90KCJpZCIsIG9yaWdpbk5vZGUudGFncy5saW5lVG8pOwogICAgfQogICAgZWxzZSBpZiAobm9kZVN0YWNrLmxlbmd0aCA+IDEpCiAgICB7CiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBub2RlU3RhY2subGVuZ3RoOyBpKyspCiAgICAgICAgewogICAgICAgICAgICBpZiAobm9kZVN0YWNrW2ldLmlkICE9IHRoaXNCb3QuaWQpCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgIG9yaWdpbk5vZGUgPSBub2RlU3RhY2tbaV07CgogICAgICAgICAgICAgICAgbmV4dE5vZGUgPSBnZXRCb3QoImlkIiwgb3JpZ2luTm9kZS50YWdzLmxpbmVUbyk7CgogICAgICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICAgIH0KICAgICAgICB9CiAgICB9CiAgICBlbHNlCiAgICB7CiAgICAgICAgbmV4dE5vZGUgPSBnZXRCb3QoImlkIiwgdGFncy5saW5lVG8pOwogICAgfQp9CgphbmltYXRlZEJvdC5tYXNrcy50cmFja1RpbWVvdXQgPSBzZXRUaW1lb3V0KCgpPT4gd2hpc3BlcihuZXh0Tm9kZSwgImFuaW1hdGVUcmFjayIsIHthbmltYXRlZEJvdDogYW5pbWF0ZWRCb3QsIHRhcmdldE5vZGU6IG5leHROb2RlfSksIHRhZ3MuZHVyYXRpb24gKiAxMDAwKTsKCmlmIChvcmlnaW5Ob2RlLnRhZ3MubW9kcykKewogICAgYXBwbHlNb2QoYW5pbWF0ZWRCb3QsIG9yaWdpbk5vZGUudGFncy5tb2RzKTsKfQoKYXdhaXQgYW5pbWF0ZVRhZyhhbmltYXRlZEJvdCwgewogICAgZnJvbVZhbHVlOiB7CiAgICAgICAgW2N1cnJlbnREaW0gKyAiWCJdOiBvcmlnaW5Ob2RlLnRhZ3NbY3VycmVudERpbSArICJYIl0sCiAgICAgICAgW2N1cnJlbnREaW0gKyAiWSJdOiBvcmlnaW5Ob2RlLnRhZ3NbY3VycmVudERpbSArICJZIl0KICAgIH0sCiAgICB0b1ZhbHVlOiB7CiAgICAgICAgW2N1cnJlbnREaW0gKyAiWCJdOiBuZXh0Tm9kZS50YWdzW2N1cnJlbnREaW0gKyAiWCJdLAogICAgICAgIFtjdXJyZW50RGltICsgIlkiXTogbmV4dE5vZGUudGFnc1tjdXJyZW50RGltICsgIlkiXQogICAgfSwKICAgIGR1cmF0aW9uOiB0YWdzLmR1cmF0aW9uLAogICAgZWFzaW5nOnsKICAgICAgICB0eXBlOiB0YWdzLmVhc2luZ1R5cGUsCiAgICAgICAgbW9kZTogdGFncy5lYXNpbmdNb2RlCiAgICB9LAogICAgdGFnTWFza1NwYWNlOiAidGVtcExvY2FsIgp9KS5jYXRjaChlID0+IHt9KTsnAJCp4uEBlX0Hb25DbGljawIEAJCp4uEBhpcBzQhAc2hvdXQoImFiVHJhY2tNZW51UmVzZXQiKTsKCmNvbnN0IG1lbnVUeXBlID0gdGhhdC5tZW51VHlwZSA/IHRoYXQubWVudVR5cGUgOiAiYmFzZSI7CmNvbnN0IG1lbnVUYWcgPSB0YWdzW21lbnVUeXBlICsgIkFCVHJhY2tNZW51Il07Cgpjb25maWdCb3QubWFza3MubWVudVBvcnRhbCA9ICJhYlRyYWNrTWVudSI7CgptYXNrcy5vbkdyaWRDbGljayA9IGBAIHNob3V0KCJhYlRyYWNrTWVudVJlc2V0Iik7YDsKbWFza3MuYWJUcmFja01lbnVSZXNldCA9IGBAIGNvbmZpZ0JvdC5tYXNrcy5tZW51UG9ydGFsID0gbnVsbDsKCmNsZWFyVGFnTWFza3ModGhpc0JvdCk7YDsKCmxldCBtZW51QnV0dG9uID0ge307CgptZW51QnV0dG9uLnNwYWNlID0gInRlbXBMb2NhbCI7Cm1lbnVCdXR0b24uYWJUcmFja01lbnUgPSB0cnVlOwptZW51QnV0dG9uLmFiVHJhY2tNZW51UmVzZXQgPSAiQCBkZXN0cm95KHRoaXNCb3QpOyI7Cm1lbnVCdXR0b24ubWVudUl0ZW1TdHlsZSA9IHsiYm9yZGVyLXJhZGl1cyI6IjhweCIsICJtYXJnaW4tdG9wIjoiM3B4In07Cm1lbnVCdXR0b24ubGFiZWxBbGlnbm1lbnQgPSAibGVmdCI7Cm1lbnVCdXR0b24ubGFiZWxDb2xvciA9ICIjZmZmZmZmIjsKbWVudUJ1dHRvbi5jb2xvciA9IHRhZ3Muc3Ryb2tlQ29sb3I7Cm1lbnVCdXR0b24ubWFuYWdlciA9IGdldExpbmsodGhpc0JvdCk7Cgpmb3IgKGxldCBpID0gMDsgaSA8IHRhZ3NbbWVudVR5cGUgKyAiQUJUcmFja01lbnUiXS5sZW5ndGg7IGkrKykKewogICAgY3JlYXRlKG1lbnVCdXR0b24sIHRhZ3NbbWVudVR5cGUgKyAiQUJUcmFja01lbnUiXVtpXSk7Cn0KCmlmICh0YWdzLm1vZHMpCnsKICAgIG1lbnVCdXR0b24ubGFiZWwgPSAicmVtb3ZlIG1vZCI7CiAgICBtZW51QnV0dG9uLmZvcm1BZGRyZXNzID0gImhlbGl4IjsKICAgIG1lbnVCdXR0b24ub25DbGljayA9IGBAIGxpbmtzLm1hbmFnZXIudGFncy5tb2RzID0gbnVsbDsKICAgIGxpbmtzLm1hbmFnZXIudGFncy5jb2xvciA9ICJjbGVhciI7CiAgICBsaW5rcy5tYW5hZ2VyLnRhZ3MuZm9ybSA9IG51bGw7CiAgICAKICAgIHNob3V0KCdhYlRyYWNrTWVudVJlc2V0Jyk7YDsKCiAgICBjcmVhdGUobWVudUJ1dHRvbik7Cn0nAJCp4uEBlX0PYmFzZUFCVHJhY2tNZW51AgQAkKni4QHUnwHVAvCfp6xbeyJvbkNsaWNrIjogIkAgbGlua3MubWFuYWdlci51cGRhdGVUcmFja0R1cmF0aW9uKCk7IiwgImZvcm1BZGRyZXNzIjogImF2X3RpbWVyIiwgImxhYmVsIjogImR1cmF0aW9uIn0sCnsib25DbGljayI6ICJAIGxpbmtzLm1hbmFnZXIub25DbGljayh7bWVudVR5cGU6ICdlYXNpbmcnfSk7IiwgImZvcm1BZGRyZXNzIjogInRyZW5kaW5nX2ZsYXQiLCAibGFiZWwiOiAiZWFzaW5nIHR5cGUifSwKeyJvbkNsaWNrIjogIkAgbGlua3MubWFuYWdlci5vbkNsaWNrKHttZW51VHlwZTogJ21vZGUnfSk7IiwgImZvcm1BZGRyZXNzIjogInRyZW5kaW5nX3VwIiwgImxhYmVsIjogImVhc2luZyBtb2RlIn1dJwCQqeLhAZV9E3VwZGF0ZVRyYWNrRHVyYXRpb24CBACQqeLhAaiiAaIBQHNob3V0KCJhYlRyYWNrTWVudVJlc2V0Iik7CgpsZXQgaW5wdXQgPSBhd2FpdCBvcy5zaG93SW5wdXQodGFncy5kdXJhdGlvbiwgewogICAgdGl0bGU6ICJkdXJhdGlvbiIKfSk7CgppZiAoaW5wdXQgJiYgIWlzTmFOKGlucHV0KSkKewogICAgdGFncy5kdXJhdGlvbiA9IGlucHV0Owp9JwCQqeLhAZV9EWVhc2luZ0FCVHJhY2tNZW51AgQAkKni4QHLowHuCfCfp6xbeyJvbkNsaWNrIjogIkAgbGlua3MubWFuYWdlci50YWdzLmVhc2luZ1R5cGUgPSB0YWdzLmxhYmVsOyBzaG91dCgnYWJUcmFja01lbnVSZXNldCcpOyIsICJmb3JtQWRkcmVzcyI6ICJhcnJvd19yaWdodCIsICJsYWJlbCI6ICJsaW5lYXIifSwKeyJvbkNsaWNrIjogIkAgbGlua3MubWFuYWdlci50YWdzLmVhc2luZ1R5cGUgPSB0YWdzLmxhYmVsOyBzaG91dCgnYWJUcmFja01lbnVSZXNldCcpOyIsICJmb3JtQWRkcmVzcyI6ICJhcnJvd19yaWdodCIsICJsYWJlbCI6ICJxdWFkcmF0aWMifSwKeyJvbkNsaWNrIjogIkAgbGlua3MubWFuYWdlci50YWdzLmVhc2luZ1R5cGUgPSB0YWdzLmxhYmVsOyBzaG91dCgnYWJUcmFja01lbnVSZXNldCcpOyIsICJmb3JtQWRkcmVzcyI6ICJhcnJvd19yaWdodCIsICJsYWJlbCI6ICJjdWJpYyJ9LAp7Im9uQ2xpY2siOiAiQCBsaW5rcy5tYW5hZ2VyLnRhZ3MuZWFzaW5nVHlwZSA9IHRhZ3MubGFiZWw7IHNob3V0KCdhYlRyYWNrTWVudVJlc2V0Jyk7IiwgImZvcm1BZGRyZXNzIjogImFycm93X3JpZ2h0IiwgImxhYmVsIjogInF1YXJ0aWMifSwKeyJvbkNsaWNrIjogIkAgbGlua3MubWFuYWdlci50YWdzLmVhc2luZ1R5cGUgPSB0YWdzLmxhYmVsOyBzaG91dCgnYWJUcmFja01lbnVSZXNldCcpOyIsICJmb3JtQWRkcmVzcyI6ICJhcnJvd19yaWdodCIsICJsYWJlbCI6ICJxdWludGljIn0sCnsib25DbGljayI6ICJAIGxpbmtzLm1hbmFnZXIudGFncy5lYXNpbmdUeXBlID0gdGFncy5sYWJlbDsgc2hvdXQoJ2FiVHJhY2tNZW51UmVzZXQnKTsiLCAiZm9ybUFkZHJlc3MiOiAiYXJyb3dfcmlnaHQiLCAibGFiZWwiOiAic2ludXNvaWRhbCJ9LAp7Im9uQ2xpY2siOiAiQCBsaW5rcy5tYW5hZ2VyLnRhZ3MuZWFzaW5nVHlwZSA9IHRhZ3MubGFiZWw7IHNob3V0KCdhYlRyYWNrTWVudVJlc2V0Jyk7IiwgImZvcm1BZGRyZXNzIjogImFycm93X3JpZ2h0IiwgImxhYmVsIjogImV4cG9uZW50aWFsIn0sCnsib25DbGljayI6ICJAIGxpbmtzLm1hbmFnZXIudGFncy5lYXNpbmdUeXBlID0gdGFncy5sYWJlbDsgc2hvdXQoJ2FiVHJhY2tNZW51UmVzZXQnKTsiLCAiZm9ybUFkZHJlc3MiOiAiYXJyb3dfcmlnaHQiLCAibGFiZWwiOiAiY2lyY3VsYXIifSwKeyJvbkNsaWNrIjogIkAgbGlua3MubWFuYWdlci50YWdzLmVhc2luZ1R5cGUgPSB0YWdzLmxhYmVsOyBzaG91dCgnYWJUcmFja01lbnVSZXNldCcpOyIsICJmb3JtQWRkcmVzcyI6ICJhcnJvd19yaWdodCIsICJsYWJlbCI6ICJlbGFzdGljIn1dJwCQqeLhAZV9D21vZGVBQlRyYWNrTWVudQIEAJCp4uEBuK0BmgPwn6esW3sib25DbGljayI6ICJAIGxpbmtzLm1hbmFnZXIudGFncy5lYXNpbmdNb2RlID0gdGFncy5sYWJlbDsgc2hvdXQoJ2FiVHJhY2tNZW51UmVzZXQnKTsiLCAiZm9ybUFkZHJlc3MiOiAiYXJyb3dfcmlnaHQiLCAibGFiZWwiOiAiaW4ifSwKeyJvbkNsaWNrIjogIkAgbGlua3MubWFuYWdlci50YWdzLmVhc2luZ01vZGUgPSB0YWdzLmxhYmVsOyBzaG91dCgnYWJUcmFja01lbnVSZXNldCcpOyIsICJmb3JtQWRkcmVzcyI6ICJhcnJvd19yaWdodCIsICJsYWJlbCI6ICJvdXQifSwKeyJvbkNsaWNrIjogIkAgbGlua3MubWFuYWdlci50YWdzLmVhc2luZ01vZGUgPSB0YWdzLmxhYmVsOyBzaG91dCgnYWJUcmFja01lbnVSZXNldCcpOyIsICJmb3JtQWRkcmVzcyI6ICJhcnJvd19yaWdodCIsICJsYWJlbCI6ICJpbm91dCJ9XScAkKni4QGVfRNhcHBseU1vZFRvVHJhY2tOb2RlAgQAkKni4QHRsAH1AUBsZXQgYm90TW9kID0gdGhhdC5kcmFnQm90LnRhZ3MubW9kczsKCnRhZ3MubW9kcyA9IGJvdE1vZDsKdGFncy5jb2xvciA9IHRhZ3Muc3Ryb2tlQ29sb3I7CnRhZ3MuZm9ybSA9ICJzcHJpdGUiOwp0YWdzLmZvcm1BZGRyZXNzID0gImh0dHBzOi8vYnVpbGRlci1sdG0tZmlsZXMuczMuYW1hem9uYXdzLmNvbS9iNjM1MmVkYjg4NTk4YTE5NjlhNjQ4ZjdkZDZkNDE4MjMzZWYxMTU5YmQ3OGI3MzdjZjIwYTNkYTU0MDVkMWM0LnBuZyI7JwCQqeLhAZV9D2FiTWVudVNvcnRPcmRlcgIEAJCp4uEBx7IBATInAQRib3RzJGViNzVmNTVhLTJiYjktNDM3Mi1iZjhjLWNjYmFjODYzOTBmZgEnAJCp4uEBybIBBWNvbG9yAgQAkKni4QHKsgEHIzdCNjRGRicAkKni4QHJsgEJZGltZW5zaW9uAgQAkKni4QHSsgEEaG9tZScAkKni4QHJsgEEZm9ybQIEAJCp4uEB17IBA2hleCgAkKni4QHJsgEFc2NhbGUBfQInAJCp4uEBybIBBnNjYWxlWgIEAJCp4uEB3LIBBDAuNzUnAJCp4uEBybIBB29uQ2xpY2sCBACQqeLhAeGyARpAdGhpc0JvdC5vcGVuUG9ydGFsKHRoYXQpOycAkKni4QHJsgEOb25Qb2ludGVyRW50ZXICBACQqeLhAfyyARNAbWFza3Muc2NhbGUgPSAyLjE7JwCQqeLhAcmyAQtvbkRyb3BFbnRlcgIEAJCp4uEBkLMBaEBpZiAodGhhdC5kcmFnQm90LmlkICE9IHRoaXNCb3QuaWQpIC8vTUFZQkUgTUFLRSBBIFdBWSBGT1IgQUIgVE8gTk9UIElOVEVSQUNUCnsKICAgIHRoaXNCb3Qub25DbGljaygpOwp9JwCQqeLhAcmyAQZzeXN0ZW0CBACQqeLhAfmzARFhYi5mYWN0b3J5LnBvcnRhbCcAkKni4QHJsgENb25Qb2ludGVyRXhpdAIEAJCp4uEBi7QBFEBtYXNrcy5zY2FsZSA9IG51bGw7KACQqeLhAcmyAQxhYkJvdFZlcnNpb24BfQsnAJCp4uEBybIBCWFiRmFjdG9yeQIEAJCp4uEBobQBBHRydWUnAJCp4uEBybIBCGFiSWdub3JlAgQAkKni4QGmtAEEdHJ1ZScAkKni4QHJsgELdG9vbE1hbmFnZXICBACQqeLhAau0ASjwn5SXMTRlMWZkYWMtY2ZkNy00ZTdlLWJkZDEtOTY3YTQwODVhNzU1JwCQqeLhAcmyAQlsaXN0ZW5pbmcCBACQqeLhAdK0AQVmYWxzZScAkKni4QHJsgELZmFjdG9yeUljb24CBACQqeLhAdi0AQV0b3BpYycAkKni4QHJsgEKb3BlblBvcnRhbAIEAJCp4uEB3rQBpTBAY29uc3QgY3VycmVudERpbSA9IGNvbmZpZ0JvdC50YWdzLm1hcFBvcnRhbCA/IGNvbmZpZ0JvdC50YWdzLm1hcFBvcnRhbCA6IGNvbmZpZ0JvdC50YWdzLmdyaWRQb3J0YWw7CmNvbnN0IGEgPSBNYXRoLlBJIC8gNjsKY29uc3QgaGV4U2NhbGUgPSA1Owpjb25zdCBwb3J0YWxEaW1lbnNpb24gPSB0YWdzLnBvcnRhbEFkZHJlc3M7CgpsZXQgaGV4ID0ge307CmxldCBoZXhOdW0gPSAxOwoKaGV4LnNwYWNlID0gInRlbXBMb2NhbCI7CmhleC5wb3J0YWxSZXNldCA9ICJAIGRlc3Ryb3kodGhpc0JvdCk7IjsKaGV4LmZvcm0gPSAiaGV4IjsKaGV4LmNvbG9yID0gdGFncy5jb2xvcjsKaGV4Lm9yaWdpbiA9IHRoaXNCb3QuaWQ7CmhleC5wb3J0YWxIZXggPSB0cnVlOwpoZXhbY3VycmVudERpbSsiWiJdID0gLTE7CmhleC5hbmNob3JQb2ludCA9ICJ0b3AiOwpoZXguc2NhbGUgPSA0LjU7CmhleFtjdXJyZW50RGltXSA9IHRydWU7CmhleC5wb2ludGFibGUgPSBmYWxzZTsKaGV4LnNjYWxlWiA9IDAuMDE7CmhleC5hbmltYXRlID0gYEAgYW5pbWF0ZVRhZyh0aGlzQm90LCAic2NhbGUiLCB7CiAgICBmcm9tVmFsdWU6IHRhZ3Muc2NhbGUsCiAgICB0b1ZhbHVlOiBbdGhhdF0sCiAgICBlYXNpbmc6IHsKICAgICAgICB0eXBlOiAicXVhZHJhdGljIiwKICAgICAgICBtb2RlOiAib3V0IgogICAgfSwKICAgIGR1cmF0aW9uOiAwLjMKfSkuY2F0Y2goZSA9PiB7IH0pO2A7CgpsZXQgZGltZW5zaW9uQm90cyA9IGdldEJvdHMocG9ydGFsRGltZW5zaW9uLCB0cnVlKTsKbGV0IHJpbmdOdW07CgppZiAoZGltZW5zaW9uQm90cy5sZW5ndGggPiAwKQp7CiAgICBsZXQgeFBhcmFtZXRlciA9IGRpbWVuc2lvbkJvdHMuc29ydCgoYSwgYik9PiBNYXRoLmFicyhiLnRhZ3NbcG9ydGFsRGltZW5zaW9uKyJYIl0pIC0gTWF0aC5hYnMoYS50YWdzW3BvcnRhbERpbWVuc2lvbisiWCJdKSlbMF0udGFnc1twb3J0YWxEaW1lbnNpb24rIlgiXTsKICAgIGxldCB5UGFyYW1ldGVyID0gZGltZW5zaW9uQm90cy5zb3J0KChhLCBiKT0+IE1hdGguYWJzKGIudGFnc1twb3J0YWxEaW1lbnNpb24rIlkiXSkgLSBNYXRoLmFicyhhLnRhZ3NbcG9ydGFsRGltZW5zaW9uKyJZIl0pKVswXS50YWdzW3BvcnRhbERpbWVuc2lvbisiWSJdOwoKCiAgICBsZXQgZGlzdGFuY2UgPSBNYXRoLmZsb29yKE1hdGguc3FydChNYXRoLnBvdyhNYXRoLmZsb29yKE1hdGguYWJzKHhQYXJhbWV0ZXIgLSAwKSksIDIpICsgTWF0aC5wb3coTWF0aC5mbG9vcihNYXRoLmFicyh5UGFyYW1ldGVyIC0gMCkpLCAyKSkgLyBoZXhTY2FsZSkgKyAxOwogICAgcmluZ051bSA9IDYgKiAoZGlzdGFuY2UpKihkaXN0YW5jZSsxKS8yICsgMTsKCiAgICBpZiAocmluZ051bSA+IDM5NykKICAgIHsKICAgICAgICByaW5nTnVtID0gMzk3OwogICAgfQp9CmVsc2UKewogICAgcmluZ051bSA9IDc7Cn0KCm1hc2tzLnNjYWxlID0gMC4xOwptYXNrcy5wb2ludGFibGUgPSBmYWxzZTsKCmxldCBwcmV2aW91c0hleDsKCmZvciAobGV0IGkgPSAwOyBpIDwgcmluZ051bTsgaSsrKQp7CiAgICBpZiAoaSAhPSAwKQogICAgewogICAgICAgIGxldCBlbXB0eVBvcyA9IGF3YWl0IGNoZWNrSGV4UG9zKHByZXZpb3VzSGV4LCBjdXJyZW50RGltKTsKCiAgICAgICAgaWYgKGVtcHR5UG9zID09IDAgfHwgZW1wdHlQb3MgPT0gMykKICAgICAgICB7CiAgICAgICAgICAgIHZhciB4ID0gcHJldmlvdXNIZXgudGFnc1tjdXJyZW50RGltKyJYIl07CiAgICAgICAgICAgIAogICAgICAgICAgICB2YXIgZmxpcFggPSAxOwogICAgICAgICAgICAKICAgICAgICAgICAgaWYgKGVtcHR5UG9zID09IDApCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgIHZhciBmbGlwWSA9IDA7CiAgICAgICAgICAgICAgICB2YXIgeSA9IHByZXZpb3VzSGV4LnRhZ3NbY3VycmVudERpbSsiWSJdICsgaGV4U2NhbGU7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgZWxzZQogICAgICAgICAgICB7CiAgICAgICAgICAgICAgICB2YXIgZmxpcFkgPSAtMTsKICAgICAgICAgICAgICAgIHZhciB5ID0gcHJldmlvdXNIZXgudGFnc1tjdXJyZW50RGltKyJZIl0gLSBoZXhTY2FsZS8yOwogICAgICAgICAgICB9CiAgICAgICAgfQogICAgICAgIGVsc2UKICAgICAgICB7CiAgICAgICAgICAgIHZhciB4ID0gcHJldmlvdXNIZXgudGFnc1tjdXJyZW50RGltKyJYIl0gKyAoaGV4U2NhbGUgKiAwLjg1KTsKICAgICAgICAgICAgdmFyIHkgPSBwcmV2aW91c0hleC50YWdzW2N1cnJlbnREaW0rIlkiXTsKCiAgICAgICAgICAgIGlmIChlbXB0eVBvcyA9PSAxKQogICAgICAgICAgICB7CiAgICAgICAgICAgICAgICB2YXIgZmxpcFggPSAxOwogICAgICAgICAgICAgICAgdmFyIGZsaXBZID0gMTsKICAgICAgICAgICAgfQogICAgICAgICAgICBlbHNlIGlmIChlbXB0eVBvcyA9PSAyKQogICAgICAgICAgICB7CiAgICAgICAgICAgICAgICB2YXIgZmxpcFggPSAxOwogICAgICAgICAgICAgICAgdmFyIGZsaXBZID0gLTE7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgZWxzZSBpZiAoZW1wdHlQb3MgPT0gNCkKICAgICAgICAgICAgewogICAgICAgICAgICAgICAgeCA9IHByZXZpb3VzSGV4LnRhZ3NbY3VycmVudERpbSsiWCJdIC0gKGhleFNjYWxlICogMC44NSk7CgogICAgICAgICAgICAgICAgdmFyIGZsaXBYID0gMTsKICAgICAgICAgICAgICAgIHZhciBmbGlwWSA9IC0xOwogICAgICAgICAgICB9CiAgICAgICAgICAgIGVsc2UgaWYgKGVtcHR5UG9zID09IDUpCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgIHggPSBwcmV2aW91c0hleC50YWdzW2N1cnJlbnREaW0rIlgiXSAtIChoZXhTY2FsZSAqIDAuODUpOwogICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICB2YXIgZmxpcFggPSAxOwogICAgICAgICAgICAgICAgdmFyIGZsaXBZID0gMTsKICAgICAgICAgICAgfQogICAgICAgIH0KCiAgICAgICAgaGV4W2N1cnJlbnREaW0rIlgiXSA9IHggKiBmbGlwWDsKICAgICAgICBoZXhbY3VycmVudERpbSsiWSJdID0geSArIGZsaXBZICogaGV4U2NhbGUvMjsKICAgIH0KICAgIGVsc2UKICAgIHsKICAgICAgICBoZXhbY3VycmVudERpbSsiWCJdID0gdGFnc1tjdXJyZW50RGltKyJYIl07CiAgICAgICAgaGV4W2N1cnJlbnREaW0rIlkiXSA9IHRhZ3NbY3VycmVudERpbSsiWSJdOwogICAgfQoKICAgIGhleC5oZXhOdW0gPSBoZXhOdW07CgogICAgbGV0IG5lYXJieVBvcnRhbEJvdCA9IGdldEJvdChieU1vZCh7Ly9iZWluZyBtaXJyb3JlZCByaWdodCBub3cKICAgICAgICBbcG9ydGFsRGltZW5zaW9uXTogdHJ1ZSwKICAgICAgICBbcG9ydGFsRGltZW5zaW9uKyJYIl06IHggPT4geCA+IChoZXhbY3VycmVudERpbSsiWCJdIC0gdGFnc1tjdXJyZW50RGltKyJYIl0pIC0gaGV4U2NhbGUgJiYgeCA8IChoZXhbY3VycmVudERpbSsiWCJdIC0gdGFnc1tjdXJyZW50RGltKyJYIl0pICsgaGV4U2NhbGUsCiAgICAgICAgW3BvcnRhbERpbWVuc2lvbisiWSJdOiB5ID0+IHkgPiAoaGV4W2N1cnJlbnREaW0rIlkiXSAtIHRhZ3NbY3VycmVudERpbSsiWSJdKSAtIGhleFNjYWxlICYmIHkgPCAoaGV4W2N1cnJlbnREaW0rIlkiXSAtIHRhZ3NbY3VycmVudERpbSsiWSJdKSArIGhleFNjYWxlCiAgICB9KSk7CgogICAgaWYgKG5lYXJieVBvcnRhbEJvdCB8fCBpIDwgNykKICAgIHsKICAgICAgICBoZXgub25Qb3J0YWxDb21wbGV0ZSA9IGZhbHNlOwogICAgICAgIGhleC5jb2xvciA9IHRhZ3MuY29sb3I7CiAgICB9CiAgICBlbHNlCiAgICB7CiAgICAgICAgaGV4Lm9uUG9ydGFsQ29tcGxldGUgPSB0cnVlOwogICAgICAgIGhleC5jb2xvciA9ICJjbGVhciI7CiAgICB9CgogICAgaGV4TnVtKys7CgogICAgcHJldmlvdXNIZXggPSBhd2FpdCBjcmVhdGUoaGV4KTsKfQoKbGV0IG5vblBvcnRhbEhleGVzID0gZ2V0Qm90cygib25Qb3J0YWxDb21wbGV0ZSIsIHRydWUpOwpsZXQgcG9ydGFsSGV4ZXMgPSBnZXRCb3RzKCJvblBvcnRhbENvbXBsZXRlIiwgZmFsc2UpOwoKZm9yIChsZXQgbiA9IDA7IG4gPCBub25Qb3J0YWxIZXhlcy5sZW5ndGg7IG4rKykKewogICAgZGVzdHJveShub25Qb3J0YWxIZXhlc1tuXSk7Cn0KCndoaXNwZXIocG9ydGFsSGV4ZXMsICJhbmltYXRlIiwgaGV4U2NhbGUpOwoKbWFza3MuZm9ybSA9ICJwb3J0YWwiOwptYXNrcy5mb3JtQWRkcmVzcyA9IHRhZ3MucG9ydGFsQWRkcmVzczsKbWFza3MucG9ydGFsSGV4Qm90cyA9IGdldExpbmsocG9ydGFsSGV4ZXMpOwoKdGhpc0JvdC5wb3J0YWxNZW51KCk7CgpmdW5jdGlvbiBjaGVja0hleFBvcyhoZXgsIGRpbWVuc2lvbikKewogICAgbGV0IHNjYWxlVmFyID0gaGV4U2NhbGUvMjsKICAgIGxldCB4UG9zID0gaGV4LnRhZ3NbZGltZW5zaW9uKyJYIl07CiAgICBsZXQgeVBvcyA9IGhleC50YWdzW2RpbWVuc2lvbisiWSJdOwogICAgbGV0IGhleE1hdGhWYXIgPSBNYXRoLlBJIC8gNjsKICAgIGxldCB4U3BhY2luZ1BsdXMgPSB4UG9zICsgc2NhbGVWYXIgKyAoMSArIE1hdGguY29zKGhleE1hdGhWYXIpKTsKICAgIGxldCB4U3BhY2luZ01pbnVzID0geFBvcyAtIChzY2FsZVZhciArICgxICsgTWF0aC5jb3MoaGV4TWF0aFZhcikpKTsKICAgIGxldCB5U3BhY2luZ1RvcCA9IE1hdGguZmxvb3IoaGV4LnRhZ3Muc2NhbGUpICsgeVBvczsKICAgIGxldCB5U3BhY2luZ1VwID0geVBvcyArIHNjYWxlVmFyICogTWF0aC5zaW4oaGV4TWF0aFZhcik7CiAgICBsZXQgeVNwYWNpbmdEb3duID0geVBvcyAtIHNjYWxlVmFyICogTWF0aC5zaW4oaGV4TWF0aFZhcik7CiAgICBsZXQgeVNwYWNpbmdCb3R0b20gPSB5UG9zIC0gTWF0aC5mbG9vcihoZXgudGFncy5zY2FsZSk7CiAgICBsZXQgeENoZWNrID0gW3hQb3MsIHhTcGFjaW5nUGx1cywgeFNwYWNpbmdQbHVzLCB4UG9zLCB4U3BhY2luZ01pbnVzLCB4U3BhY2luZ01pbnVzXTsKICAgIGxldCB5Q2hlY2sgPSBbeVNwYWNpbmdUb3AsIHlTcGFjaW5nVXAsIHlTcGFjaW5nRG93biwgeVNwYWNpbmdCb3R0b20sIHlTcGFjaW5nRG93biwgeVNwYWNpbmdVcF07CiAgICBsZXQgdG90YWxOZWlnaGJvcnMgPSAwOwogICAgbGV0IG5laWdoYm9yQXJyYXkgPSBbXQoKICAgIGZvciAobGV0IGkgPSAwOyBpIDwgNjsgaSsrKQogICAgewogICAgICAgIGxldCBoZXhOZWlnaGJvciA9IGdldEJvdChieU1vZCh7CiAgICAgICAgICAgIFtkaW1lbnNpb25dOiB0cnVlLCAKICAgICAgICAgICAgW2RpbWVuc2lvbisiWCJdOiB4ID0+IHggPiB4Q2hlY2tbaV0gLSBzY2FsZVZhciAmJiB4IDwgeENoZWNrW2ldICsgc2NhbGVWYXIsIAogICAgICAgICAgICBbZGltZW5zaW9uKyJZIl06IHkgPT4geSA+IHlDaGVja1tpXSAtIHNjYWxlVmFyICYmIHkgPCB5Q2hlY2tbaV0gKyBzY2FsZVZhciwKICAgICAgICAgICAgb3JpZ2luOiBoZXgudGFncy5vcmlnaW4sCiAgICAgICAgICAgIHBvcnRhbEhleDogdHJ1ZQogICAgICAgIH0pKTsKCiAgICAgICAgaWYgKCFoZXhOZWlnaGJvcikKICAgICAgICB7CiAgICAgICAgICAgIG5laWdoYm9yQXJyYXkucHVzaCgiZW1wdHkiKTsKICAgICAgICB9CiAgICAgICAgZWxzZQogICAgICAgIHsKICAgICAgICAgICAgbmVpZ2hib3JBcnJheS5wdXNoKGhleE5laWdoYm9yKTsKICAgICAgICAgICAgdG90YWxOZWlnaGJvcnMrKzsKICAgICAgICB9CiAgICB9CgogICAgaWYgKHRvdGFsTmVpZ2hib3JzID09IDApCiAgICB7CiAgICAgICAgdmFyIHRhcmdldCA9IDA7CiAgICB9CiAgICBlbHNlCiAgICB7CiAgICAgICAgdmFyIGVtcHR5ID0gZmFsc2U7CgogICAgICAgIGZvciAobGV0IGogPSAwOyBqIDwgNjsgaisrKQogICAgICAgIHsKICAgICAgICAgICAgbGV0IG5leHRFbXB0eSA9IG5laWdoYm9yQXJyYXlbal07CgogICAgICAgICAgICBpZiAobmV4dEVtcHR5ID09ICJlbXB0eSIpCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgIGVtcHR5ID0gdHJ1ZTsKCiAgICAgICAgICAgICAgICBpZiAoaiA9PSA1KQogICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgIHZhciB0YXJnZXQgPSA1OwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9CiAgICAgICAgICAgIGlmKG5leHRFbXB0eSAhPSAiZW1wdHkiICYmIGVtcHR5KQogICAgICAgICAgICB7CiAgICAgICAgICAgICAgICB2YXIgdGFyZ2V0ID0gai0xOwogICAgICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICAgIH0KICAgICAgICB9CiAgICB9CiAgICByZXR1cm4gdGFyZ2V0Owp9JwCQqeLhAcmyAQlwb2ludGFibGUCBACQqeLhAYTlAQR0cnVlJwCQqeLhAcmyAQtvbkdyaWRDbGljawIEAJCp4uEBieUBkwFAaWYgKHRhZ3MuZm9ybSAhPSAicG9ydGFsIikKewogICAgcmV0dXJuOwp9CgpsZXQgcG9ydGFsQ2xpY2sgPSB0aGlzQm90LnBvcnRhbFBvc2l0aW9uQ2hlY2sodGhhdCk7CgppZiAoIXBvcnRhbENsaWNrKQp7CiAgICB0aGlzQm90LmNsb3NlUG9ydGFsKCk7Cn0nAJCp4uEBybIBC2Nsb3NlUG9ydGFsAgQAkKni4QGd5gFqQHdoaXNwZXIobGlua3MucG9ydGFsSGV4Qm90cywgInBvcnRhbFJlc2V0Iik7Cgpjb25maWdCb3QubWFza3MubWVudVBvcnRhbCA9IG51bGw7CgpjbGVhclRhZ01hc2tzKHRoaXNCb3QpOycAkKni4QHJsgEKcG9ydGFsTWVudQIEAJCp4uEBiOcB4gdAc2hvdXQoImFiUG9ydGFsTWVudVJlc2V0Iik7Cgpjb25maWdCb3QubWFza3MubWVudVBvcnRhbCA9ICJhYlBvcnRhbE1lbnUiOwoKbGV0IG1lbnVCdXR0b24gPSB7fTsKCm1lbnVCdXR0b24uc3BhY2UgPSAidGVtcExvY2FsIjsKbWVudUJ1dHRvbi5hYlBvcnRhbE1lbnUgPSB0cnVlOwptZW51QnV0dG9uLmFiUG9ydGFsTWVudVJlc2V0ID0gIkAgZGVzdHJveSh0aGlzQm90KTsiOwptZW51QnV0dG9uLmNvbG9yID0gdGFncy5jb2xvcjsKbWVudUJ1dHRvbi5tYW5hZ2VyID0gZ2V0TGluayh0aGlzQm90KTsKbWVudUJ1dHRvbi5tZW51SXRlbVN0eWxlID0gYPCfp6wgeyJib3JkZXItcmFkaXVzIjogIjlweCA5cHggOXB4IDlweCIsICJtYXJnaW4tdG9wIjogIjZweCJ9YDsKbWVudUJ1dHRvbi5sYWJlbEFsaWdubWVudCA9ICJjZW50ZXIiOwptZW51QnV0dG9uLmxhYmVsID0gdGFncy5wb3J0YWxBZGRyZXNzOwoKY3JlYXRlKG1lbnVCdXR0b24pOwoKbWVudUJ1dHRvbi5mb3JtQWRkcmVzcyA9ICJlZGl0IjsKbWVudUJ1dHRvbi5sYWJlbEFsaWdubWVudCA9ICJsZWZ0IjsKbWVudUJ1dHRvbi5sYWJlbCA9ICJlZGl0IGRpbWVuc2lvbiI7Cm1lbnVCdXR0b24udGFyZ2V0ID0gdGhpc0JvdC5pZDsKbWVudUJ1dHRvbi5vbkNsaWNrID0gYEAgbGlua3MubWFuYWdlci5wb3J0YWxDaGFuZ2VEaW1lbnNpb24oKTtgOwoKY3JlYXRlKG1lbnVCdXR0b24pOwoKbWVudUJ1dHRvbi5mb3JtQWRkcmVzcyA9ICJhcnJvd19mb3J3YXJkIjsKbWVudUJ1dHRvbi5sYWJlbEFsaWdubWVudCA9ICJsZWZ0IjsKbWVudUJ1dHRvbi5sYWJlbCA9ICJnbyB0byBkaW1lbnNpb24iOwptZW51QnV0dG9uLnRhcmdldCA9IHRhZ3MuZm9ybUFkZHJlc3M7Cm1lbnVCdXR0b24ub25DbGljayA9IGBAIHNob3V0KCJhYlBvcnRhbE1lbnVSZXNldCIpOwoKY29uZmlnQm90LnRhZ3MuZ3JpZFBvcnRhbCA9IGxpbmtzLm1hbmFnZXIudGFncy5wb3J0YWxBZGRyZXNzO2A7CgpjcmVhdGUobWVudUJ1dHRvbik7JwCQqeLhAcmyAQhvbkNyZWF0ZQIEAJCp4uEB6e4BPkBpZiAoIXRhZ3MucG9ydGFsQWRkcmVzcykKewogICAgdGFncy5wb3J0YWxBZGRyZXNzID0gdXVpZCgpOwp9JwCQqeLhAcmyARNwb3J0YWxQb3NpdGlvbkNoZWNrAgQAkKni4QGo7wGkFkBsZXQgY3VycmVudERpbSA9IHRoYXQuZGltZW5zaW9uID8gdGhhdC5kaW1lbnNpb24gOiB0aGF0LnRvLmRpbWVuc2lvbjsKbGV0IHBvc1kgPSB0aGF0LnBvc2l0aW9uID8gdGhhdC5wb3NpdGlvbi55IDogdGhhdC50by55OwpsZXQgcG9zWCA9IHRoYXQucG9zaXRpb24gPyB0aGF0LnBvc2l0aW9uLnggOiB0aGF0LnRvLng7CmxldCBwb3J0YWxIZXhCb3RzID0gbGlua3MucG9ydGFsSGV4Qm90czsKbGV0IHBvcnRhbEVudHJ5ID0gZmFsc2U7Cgpmb3IgKGxldCBpID0gMDsgaSA8IHBvcnRhbEhleEJvdHMubGVuZ3RoOyBpKyspIAp7CiAgICBsZXQgY3VycmVudEhleCA9IHBvcnRhbEhleEJvdHNbaV07CiAgICBsZXQgbWF4WSA9IGN1cnJlbnRIZXgudGFnc1tjdXJyZW50RGltICsgIlkiXSArIGN1cnJlbnRIZXgudGFncy5zY2FsZSAvIDI7CiAgICBsZXQgbWluWSA9IGN1cnJlbnRIZXgudGFnc1tjdXJyZW50RGltICsgIlkiXSAtIGN1cnJlbnRIZXgudGFncy5zY2FsZSAvIDI7CgogICAgaWYgKHBvc1kgPD0gbWF4WSAmJiBwb3NZID49IG1pblkpIHsKCiAgICAgICAgLy9TRVRVUCBBIENIRUNLIEZPUiBXSEVOIFggPSBERUNLIFgKICAgICAgICBsZXQgbWF4WCA9IGN1cnJlbnRIZXgudGFnc1tjdXJyZW50RGltICsgIlgiXSArIGN1cnJlbnRIZXgudGFncy5zY2FsZSAvIDIgKyAwLjU7CiAgICAgICAgbGV0IG1pblggPSBjdXJyZW50SGV4LnRhZ3NbY3VycmVudERpbSArICJYIl0gLSBjdXJyZW50SGV4LnRhZ3Muc2NhbGUgLyAyIC0gMC41OwoKICAgICAgICBpZiAocG9zWCA8PSBtYXhYICYmIHBvc1ggPj0gbWluWCkgewogICAgICAgICAgICBpZiAocG9zWCA8PSBjdXJyZW50SGV4LnRhZ3NbY3VycmVudERpbSArICJYIl0gKyAwLjMgJiYgcG9zWCA+PSBjdXJyZW50SGV4LnRhZ3NbY3VycmVudERpbSArICJYIl0gLSAwLjMpLy9ub3QgcGVyZmVjdCBwYXJ0IG9mIGFsZwogICAgICAgICAgICB7CiAgICAgICAgICAgICAgICBpZiAocG9zWSA+PSBjdXJyZW50SGV4LnRhZ3NbY3VycmVudERpbSArICJZIl0gLSBjdXJyZW50SGV4LnRhZ3Muc2NhbGUgLyAyICYmIHBvc1kgPD0gY3VycmVudEhleC50YWdzW2N1cnJlbnREaW0gKyAiWSJdICsgY3VycmVudEhleC50YWdzLnNjYWxlIC8gMikgCiAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgcG9ydGFsRW50cnkgPSB0cnVlOwoKICAgICAgICAgICAgICAgICAgICBicmVhazsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfQoKICAgICAgICAgICAgbGV0IG1pZFggPSBjdXJyZW50SGV4LnRhZ3NbY3VycmVudERpbSArICJYIl07CiAgICAgICAgICAgIGxldCBtaWRZID0gY3VycmVudEhleC50YWdzW2N1cnJlbnREaW0gKyAiWSJdOwogICAgICAgICAgICBjb25zdCBhID0gTWF0aC5wb3coY3VycmVudEhleC50YWdzLnNjYWxlIC8gMiwgMik7CiAgICAgICAgICAgIGNvbnN0IGIgPSBNYXRoLnBvdyhhIC8gMiwgMik7CiAgICAgICAgICAgIGNvbnN0IG1heERpc3RhbmNlID0gTWF0aC5zcXJ0KE1hdGguYWJzKGEgLSBiKSk7CiAgICAgICAgICAgIGxldCBzbG9wZTsKCiAgICAgICAgICAgIGlmICgocG9zWCA+IG1pZFggJiYgcG9zWSA+IG1pZFkpIHx8IChwb3NYIDwgbWlkWCAmJiBwb3NZIDwgbWlkWSkpIAogICAgICAgICAgICB7CiAgICAgICAgICAgICAgICBzbG9wZSA9IChtYXhZIC0gbWluWSkgLyAobWF4WCAtIG1pblgpOwogICAgICAgICAgICB9CiAgICAgICAgICAgIGVsc2UgewogICAgICAgICAgICAgICAgaWYgKHBvc1ggPiBtaWRYKQogICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgIHNsb3BlID0gKG1heFggLSBtaW5YKSAvIChtYXhZIC0gbWluWSk7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICBlbHNlIAogICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgIHNsb3BlID0gMSAvIChtYXhYIC0gbWluWCkgLyAobWF4WSAtIG1pblkpOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9CgogICAgICAgICAgICBsZXQgYzEgPSBtYXhZIC0gKG1heFggKiBzbG9wZSk7CiAgICAgICAgICAgIGxldCBjMiA9IHBvc1kgLSAocG9zWCAqIHNsb3BlKTsKICAgICAgICAgICAgbGV0IGFjdHVhbERpc3RhbmNlID0gTWF0aC5hYnMoYzIgLSBjMSkgLyBNYXRoLnNxcnQoTWF0aC5wb3coc2xvcGUsIDIpICsgMSk7CgogICAgICAgICAgICBpZiAoYWN0dWFsRGlzdGFuY2UgPD0gbWF4RGlzdGFuY2UpIAogICAgICAgICAgICB7ICAgCiAgICAgICAgICAgICAgICBwb3J0YWxFbnRyeSA9IHRydWU7CgogICAgICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICAgIH0KICAgICAgICB9CiAgICB9CgogICAgLy9OT1QgU1VSRSBPRiBUSElTIENPREVTIE5FRUQ/CiAgICAvLyBpZiAodGhhdC5wb3J0YWxJRCkgCiAgICAvLyB7CiAgICAvLyAgICAgaWYgKHRoYXQucG9ydGFsSUQgPT0gY3VycmVudEhleC50YWdzLm9yaWdpbikgCiAgICAvLyAgICAgewogICAgLy8gICAgICAgICBwb3J0YWxFbnRyeSA9IHRydWU7CgogICAgLy8gICAgICAgICBicmVhazsKICAgIC8vICAgICB9CiAgICAvLyB9Cn0KCi8vIGxldCBwb3J0YWxCb3RzID0gZ2V0Qm90cygicG9ydGFsSGV4Qm90cyIpOy8vQ0hFQ0sgVE8gU0VFIElGIFRIRVJFIEFSRSBPVEhFUiBPUEVOIFBPUlRBTCAobm90IHN1cmUgSSBuZWVkIHRoaXMpCgovLyBmb3IgKGxldCBpID0gMDsgaSA8IHBvcnRhbEJvdHMubGVuZ3RoOyBpKyspIAovLyB7Ci8vICAgICBpZiAocG9ydGFsQm90c1tpXS5pZCAhPSB0aGlzQm90LmlkKSAKLy8gICAgIHsKLy8gICAgICAgICB3aGlzcGVyKHBvcnRhbEJvdHNbaV0sICJjbG9zZVBvcnRhbCIpOwovLyAgICAgfQovLyB9CgpyZXR1cm4gcG9ydGFsRW50cnk7JwCQqeLhAcmyAQxvbkFueUJvdERyb3ACBACQqeLhAc2FAtUEQGlmICh0aGF0LmRyYWdCb3QuaWQgPT0gdGhpc0JvdC5pZCkKewogICAgY2xlYXJJbnRlcnZhbCh0YWdzLmludGVydmFsKTsKCiAgICBtYXNrcy5pbnRlcnZhbCA9IG51bGw7CgogICAgcmV0dXJuOwp9CgppZiAodGFncy5mb3JtICE9ICJwb3J0YWwiKQp7CiAgICByZXR1cm47Cn0KCmNvbnN0IGN1cnJlbnREaW0gPSB0aGF0LnRvLmRpbWVuc2lvbjsKY29uc3QgcG9ydGFsRHJvcCA9IGF3YWl0IHRoaXNCb3QucG9ydGFsUG9zaXRpb25DaGVjayh0aGF0KTsKCmlmIChwb3J0YWxEcm9wKSAKewogICAgbGV0IG5ld0RpbSA9IHRhZ3MucG9ydGFsQWRkcmVzczsKCiAgICB0aGF0LmRyYWdCb3QudGFnc1tuZXdEaW1dID0gdHJ1ZTsKICAgIHRoYXQuZHJhZ0JvdC50YWdzW25ld0RpbSArICJYIl0gPSB0aGF0LmRyYWdCb3QudGFnc1tjdXJyZW50RGltICsgIlgiXSAtIHRhZ3NbY3VycmVudERpbSArICJYIl07CiAgICB0aGF0LmRyYWdCb3QudGFnc1tuZXdEaW0gKyAiWSJdID0gdGhhdC5kcmFnQm90LnRhZ3NbY3VycmVudERpbSArICJZIl0gLSB0YWdzW2N1cnJlbnREaW0gKyAiWSJdOwogICAgdGhhdC5kcmFnQm90LnRhZ3NbY3VycmVudERpbV0gPSBudWxsOwp9JwCQqeLhAcmyAQZvbkRyYWcCBACQqeLhAaOKAl5AaWYgKCF0YWdzLmludGVydmFsKQp7CiAgICBtYXNrcy5pbnRlcnZhbCA9IHNldEludGVydmFsKCgpID0+IHRoaXNCb3QucG9zaXRpb25DaGVjaygpLCAxMDApOwp9JwCQqeLhAcmyARVwb3J0YWxDaGFuZ2VEaW1lbnNpb24CBACQqeLhAYKLAr4BQGNvbnN0IG5ld0RpbWVuc2lvbiA9IGF3YWl0IG9zLnNob3dJbnB1dCh0YWdzLnBvcnRhbEFkZHJlc3MsIHsKICAgIHRpdGxlOiAiZWRpdCBkaW1lbnNpb24iCn0pOwoKaWYgKCFuZXdEaW1lbnNpb24pCnsKICAgIHJldHVybjsKfTsKCnRhZ3MucG9ydGFsQWRkcmVzcyA9IG5ld0RpbWVuc2lvbjsKCnRoaXNCb3QucG9ydGFsTWVudSgpOycAkKni4QHJsgENcG9zaXRpb25DaGVjawIEAJCp4uEBwYwCqAxAbGV0IGhlaWdodCA9IGdyaWRQb3J0YWxCb3QudGFncy5waXhlbEhlaWdodDsKbGV0IGJvdFRoaXJkID0gaGVpZ2h0IC0gKGhlaWdodCAvIDgpOwpsZXQgcG9pbnRlclkgPSBncmlkUG9ydGFsQm90LnRhZ3MucG9pbnRlclBpeGVsWTsKCmlmIChwb2ludGVyWSA+IGJvdFRoaXJkKQp7CiAgICBpZiAoY29uZmlnQm90LnRhZ3MubWluaUdyaWRQb3J0YWwgIT0gdGFncy5wb3J0YWxBZGRyZXNzKQogICAgewogICAgICAgIGNvbmZpZ0JvdC50YWdzLm1pbmlHcmlkUG9ydGFsID0gdGFncy5wb3J0YWxBZGRyZXNzOwoKICAgICAgICBtaW5pR3JpZFBvcnRhbEJvdC50YWdzLm1pbmlQb3J0YWxXaWR0aCA9IDE7CgogICAgICAgIG1pbmlHcmlkUG9ydGFsQm90LnRhZ3MucG9ydGFsQ29sb3IgPSB0YWdzLmNvbG9yOwogICAgfQp9CmVsc2UKewogICAgaWYgKGNvbmZpZ0JvdC50YWdzLm1pbmlHcmlkUG9ydGFsID09IHRhZ3MucG9ydGFsQWRkcmVzcykKICAgIHsKICAgICAgICBjb25maWdCb3QudGFncy5taW5pR3JpZFBvcnRhbCA9IG51bGw7CiAgICAgICAgbWluaUdyaWRQb3J0YWxCb3QudGFncy5wb3J0YWxDb2xvciA9IG51bGw7CiAgICAgICAgbWluaUdyaWRQb3J0YWxCb3QudGFncy5taW5pUG9ydGFsV2lkdGggPSBudWxsOwogICAgfQp9CgoKCgovLyBpZiAodGhhdC5ib3QudGFncy5wcmltaXRpdmVJRCkKLy8gewovLyAgICAgaWYgKHRoYXQuYm90LnRhZ3MucHJpbWl0aXZlSUQgPT0gInBvcnRhbCIpCi8vICAgICB7Ci8vICAgICAgICAgbGV0IHBvcnRhbEJvdCA9IHRoYXQuYm90OwoKLy8gICAgICAgICBjbGVhckludGVydmFsKHBvcnRhbEJvdC5tYXNrcy5pbnRlcnZhbCk7Ci8vICAgICAgICAgY2xlYXJUYWdNYXNrcyhwb3J0YWxCb3QpOwoKLy8gICAgICAgICBpZiAodGhhdC50by5kaW1lbnNpb24gIT0gdGhhdC5mcm9tLmRpbWVuc2lvbikKLy8gICAgICAgICB7Ci8vICAgICAgICAgICAgIGlmICh0aGF0LnRvLmRpbWVuc2lvbiA9PSBwb3J0YWxCb3QudGFncy5wb3J0YWxBZGRyZXNzKQovLyAgICAgICAgICAgICB7Ci8vICAgICAgICAgICAgICAgICBjb25maWdCb3QudGFncy5taW5pR3JpZFBvcnRhbCA9IHBvcnRhbEJvdC50YWdzLnBvcnRhbEFkZHJlc3M7CgovLyAgICAgICAgICAgICAgICAgbWluaUdyaWRQb3J0YWxCb3QudGFncy5taW5pUG9ydGFsV2lkdGggPSAxOwoKLy8gICAgICAgICAgICAgICAgIHBvcnRhbEJvdC50YWdzW3RoYXQudG8uZGltZW5zaW9uICsgIlgiXSA9IDA7Ci8vICAgICAgICAgICAgICAgICBwb3J0YWxCb3QudGFnc1t0aGF0LnRvLmRpbWVuc2lvbiArICJZIl0gPSAwOwovLyAgICAgICAgICAgICB9Ci8vICAgICAgICAgICAgIGVsc2UgaWYgKGNvbmZpZ0JvdC50YWdzLm1pbmlHcmlkUG9ydGFsID09IHBvcnRhbEJvdC50YWdzLnBvcnRhbEFkZHJlc3MgJiYgdGhhdC50by5kaW1lbnNpb24gIT0gcG9ydGFsQm90LnRhZ3MucG9ydGFsQWRkcmVzcykKLy8gICAgICAgICAgICAgewovLyAgICAgICAgICAgICAgICAgY29uZmlnQm90LnRhZ3MubWluaUdyaWRQb3J0YWwgPSBudWxsOwovLyAgICAgICAgICAgICB9Ci8vICAgICAgICAgfQovLyAgICAgfQovLyB9JwCQqeLhAcmyAQ9hYk1lbnVTb3J0T3JkZXICBACQqeLhAeqYAgEwAA=="}]}