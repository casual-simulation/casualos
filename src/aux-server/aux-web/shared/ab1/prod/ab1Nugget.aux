{"version":1,"state":{"304c0cfb-7dbb-4847-9225-49d02cf45577":{"id":"304c0cfb-7dbb-4847-9225-49d02cf45577","space":"shared","tags":{"ab1":true,"ab1ID":"nugget","ab1LoadNugget":"@let nuggetName = that.nuggetName;\nlet formattedNuggetAB = \"nug_\"+nuggetName;\nlet loadedNugget = await shout(\"ab1LTMSearch\", {abID: formattedNuggetAB, abVersion: that.version, returnType: \"data\"})[0];\n\nloadedNugget = loadedNugget.state[nuggetName].nugget;\n\nreturn loadedNugget;","ab1MenuLabel":"nugget manager","ab1PublishNugget":"@//shout(\"ab1PublishNugget\", {nug: \"nugName\", data: data});  ADD EGG ID EVENTUALLY\nlet testNugget = that.data;\nlet formattedNugget = {id: that.nug, nugget: testNugget};\nlet testNuggetName = that.nug;\nlet formattedNuggetAB = \"nug_\"+testNuggetName;\n\nmasks.nuggetToPublish = formattedNuggetAB;\n\nshout(\"ab1PublishAB\", {ab: formattedNuggetAB, target: formattedNugget});","ab1Skill":"true","ab1UpdateID":"7d7a05ef-fc61-4198-875a-d09d97fa9d25","ab1X":4,"ab1Y":-4,"ab1Z":0,"abIDOrigin":"nuggetManager","color":"#908BFC","destroyable":false,"implementNugget":"@let nuggetName = that.nugget;\nlet nuggetVersionCheck = nuggetName.indexOf(\".v\");\nlet version;\n\nif (nuggetVersionCheck != -1)\n{\n    nuggetName = nuggetName.substring(0, nuggetVersionCheck);\n\n    let versionCheck = that.nugget.substring(nuggetVersionCheck + 2);\n\n    if (isNaN(versionCheck))\n    {\n        console.log(versionCheck, \"version is not a number\");\n    }\n    else\n    {\n        version = Number(versionCheck);\n    }\n}\nconsole.log(nuggetName, version);\nlet nugData = await thisBot.ab1LoadNugget({nuggetName: nuggetName, version: version});\n\nif (nugData == \"abID not found\")\n{\n    os.toast(\"nugget not found\");\n}\nelse\n{\n    let targetBot = getBot(\"id\", that.bot);\n    let targetTag = targetBot.raw[that.tag].toString();\n    let targetNug = \"{\" + that.nugget + \"}\"; \n    let nugPos = targetTag.indexOf(targetNug);\n\n    deleteTagText(targetBot, that.tag, nugPos, targetNug.length);\n    insertTagText(targetBot, that.tag, nugPos, nugData);\n}","nuggetButton":"@let tagValue = that.tagValue;\nlet regex = /\\n/gi;\nlet breakCheck;\nlet breakArray = [0];\n//let createdButtons = [];\n\nwhile (breakCheck = regex.exec(tagValue))\n{\n    breakArray.push(breakCheck.index);\n}\n\nlet newNuggetButton = {};\n\nnewNuggetButton.space = \"tempLocal\";\nnewNuggetButton.form = \"codeButton\";\nnewNuggetButton.targetBot = that.bot.id;\nnewNuggetButton.targetTag = that.tag;\nnewNuggetButton.label = \"load nugget\";\nnewNuggetButton.nuggetReset = \"@ destroy(thisBot);\";\nnewNuggetButton[that.bot.id + \".\" + that.tag] = true;\nnewNuggetButton.nuggetManager = \"ðŸ”—\" + thisBot.id;\nnewNuggetButton.onClick = `@ links.nuggetManager.implementNugget({bot: tags.targetBot, nugget: tags.targetNugget, tag: tags.targetTag});\n\ndestroy(thisBot);`;\n\nfor (let nugs = 0; nugs < that.nugget.length; nugs++)\n{\n    let currentNugget = that.nugget[nugs];\n    //let buttonCheck = createdButtons.indexOf(currentNugget.nugName);\n\n    if (!currentNugget || currentNugget == undefined) //|| buttonCheck != -1\n    {\n        continue;\n    }\n\n    if (currentNugget.nugPublish)\n    {\n        newNuggetButton.onClick = `@ links.nuggetManager.packageNugget({bot: tags.targetBot, nugget: tags.targetNugget, tag: tags.targetTag});\n\n        destroy(thisBot);`;\n\n        newNuggetButton.label = \"publish \" + currentNugget.nugName + \" nugget\";\n    }\n    else\n    {\n        newNuggetButton.label = \"load \" + currentNugget.nugName + \" nugget\";\n    }\n\n    newNuggetButton.targetNugget = currentNugget.nugName;\n    newNuggetButton[that.bot.id + \".\" + that.tag + \"Start\"] = currentNugget.nugStart;\n\n    create(newNuggetButton);\n\n    //createdButtons.push(currentNugget.nugName);\n}\n\nreturn;","nuggetParse":"@const originalTagValue = that.editedBot.raw[that.editedTag];\nlet tagValue = originalTagValue;\n\nif (!tagValue) \n{\n    return;\n}\nelse if (typeof tagValue !== \"string\") \n{\n    tagValue = tagValue.toString();\n}\n\nlet initialPossibleNugPos = 0;\n\nif (initialPossibleNugPos == -1) \n{\n    return;\n}\nelse\n{\n    tagValue = tagValue.substring(initialPossibleNugPos);\n}\n\nlet possibleNugs = originalTagValue.replace(/[^{]/g, \"\").length;\nlet totalNugBreaks = originalTagValue.replace(/[^\\n]/g, \"\").length;\nlet breakLevel = 0;\nlet nugsToCheck = [];\n\nfor (let i = 0; i < possibleNugs; i++)\n{\n    let initialNugPos = tagValue.indexOf(\"{\") + 1;\n    let possibleNugEnd = tagValue.indexOf(\"}\");\n    let possibleNug = tagValue.substring(initialNugPos, possibleNugEnd);\n\n    if (possibleNug.indexOf(\" \") == -1 && /\\n/g.test(possibleNug) != true && possibleNug.length > 0 && possibleNug.indexOf(\":\") == -1)\n    {\n        let nugBreaks = tagValue.substring(0, tagValue.indexOf(\"{\"+possibleNug+\"}\")).replace(/[^\\n]/g, \"\").length;\n        let publishCheck = tagValue.substring(initialNugPos - 6, initialNugPos - 2);\n        let nugPublish = null;\n\n        if (publishCheck == \".nug\")\n        {\n            nugPublish = true;\n        }\n\n        breakLevel += nugBreaks;\n\n        nugBreaks = totalNugBreaks - (totalNugBreaks - breakLevel);\n        \n        //CHECK IF $ before nugget\n        if (tagValue.substring(initialNugPos - 2, initialNugPos - 1) != \"$\")\n        {\n            nugsToCheck.push({nugName: possibleNug, nugStart: nugBreaks + 1, nugPublish: nugPublish});\n        }\n    }\n    else\n    {\n        let nugBreaks = tagValue.substring(0, tagValue.indexOf(\"}\")).replace(/[^\\n]/g, \"\").length;\n\n        breakLevel += nugBreaks;\n\n        nugBreaks = totalNugBreaks - (totalNugBreaks - breakLevel);\n    }\n\n    tagValue = tagValue.substring(possibleNugEnd + 1);\n}\n\nthisBot.nuggetButton({ nugget: nugsToCheck, bot: that.editedBot, tag: that.editedTag, tagValue: originalTagValue});","onABPublished":"@console.log(that.ab, tags.nuggetToPublish)\n\nif (that.ab == tags.nuggetToPublish)\n{\n    os.toast(\"nugget published\");\n\n    masks.nuggetToPublish = null;\n\n    configBot.masks.abVersion = null;\n}","onAnyBotsChanged":"@if (configBot && that[0].bot.id != thisBot.id) \n{\n    if (!configBot.tags.editingBot) return; // Ignore if the configBot isn't ready yet.\n\n    if (!configBot.tags.sheetPortal && !configBot.tags.tagPortal && !configBot.tags.systemPortal) return;\n\n    const editedBotID = configBot.tags.editingBot.replace(\"ðŸ”—\", \"\");\n\n    if (!that.find(x => x.bot.id == editedBotID)) return; // If the bot changed wasn't being edited by the user ignore it.\n\n    const editedTag = configBot.tags.editingTag;\n    const editedBot = getBot(\"id\", editedBotID);\n\n    if (editedBot && editedTag) \n    {\n        shout(\"nuggetReset\");\n\n        thisBot.nuggetParse({ editedBot, editedTag });\n    }\n}","packageNugget":"@const targetBot = getBot(\"id\", that.bot);\nconst tagText = targetBot.raw[that.tag];\n\nif (configBot.tags.cursorStartIndex || configBot.tags.cursorEndIndex)\n{\n    let startPos = configBot.tags.cursorStartIndex;\n    let endPos = configBot.tags.cursorEndIndex;\n\n    if (startPos == endPos)\n    {\n        return;\n    }\n    else if (startPos > endPos)\n    {\n        let newStartPos = endPos;\n        let newEndPos = startPos;\n\n        startPos = newStartPos;\n        endPos = newEndPos;\n    }\n\n    let data = tagText.substring(startPos, endPos + 1);\n\n    shout(\"ab1PublishNugget\", {nug: that.nugget, data: data});\n\n    os.toast(\"nug is publishing\", 10);\n\n    let targetNug = \".nug {\" + that.nugget + \"}\"; \n    let nugPos = targetBot.raw[that.tag].indexOf(targetNug);\n\n    deleteTagText(targetBot, that.tag, nugPos, targetNug.length);\n}\nelse\n{\n    os.toast(\"cannot read nugget to be published\")\n}","scale":"1","scaleX":"0.8","scaleY":"0.8","scaleZ":"1.6","strokeColor":"orange","system":"ab1.memory.nugget","onCreate":"@tags.listening = false;\n\nsetTagMask(thisBot, \"listening\", true, \"local\");","listening":false}}}}