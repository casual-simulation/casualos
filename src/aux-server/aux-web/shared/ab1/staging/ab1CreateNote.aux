{"version":1,"state":{"dbc9a20c-a00f-43f5-8a01-d5c634ddf909":{"id":"dbc9a20c-a00f-43f5-8a01-d5c634ddf909","space":"shared","tags":{"creator":"89c3ab4e-5e4e-4d21-8c6f-4977a9bc438d","ab1":true,"strokeColor":"orange","scaleZ":"1.6","scaleY":"0.8","scaleX":"0.8","color":"#55E679","ab1X":-5,"ab1Y":0,"ab1Icon":"sticky_note_2","ab1MenuLabel":"note","clickLogic":"@const state = os.getInputState(\"keyboard\", \"Shift\");\n\nif (state)\n{\n    return;\n}\nelse\n{\n    if (tags.LODState == null || tags.LODState == \"Note\") \n    {\n        var currentLOD = \"Note\";\n        var textLOD = \"note\";\n    }\n    else \n    {\n        var currentLOD = \"Details\";\n        var textLOD = \"details\";\n    }\n\n    const newLabel = await os.showInput(tags[currentLOD], \n    {\n        title: `edit ${textLOD} text`\n    });\n\n    if (currentLOD == \"Note\" && tags.Details)\n    {\n        setTagMask(thisBot, \"label\", \"+\" + newLabel, \"tempLocal\");\n    }\n    else if (currentLOD == \"Note\")\n    {\n        setTagMask(thisBot, \"label\", newLabel, \"tempLocal\");\n    }\n    else if (currentLOD == \"Details\")\n    {\n        setTagMask(thisBot, \"label\", \"*\" + newLabel, \"tempLocal\");\n    }\n    else\n    {\n        setTagMask(thisBot, \"label\", newLabel, \"tempLocal\");\n    }\n\n    tags[currentLOD] = newLabel;\n}","ab1ID":"createNewNote","refreshNoteLogic":"@function map(input, min1, max1, min2, max2) {\n    return (input - min1) * (max2 - min2) / (max1 - min1) + min2;\n}\n\nif (tags.LODState == \"Note\" || tags.LODState == null) \n{\n    if (tags.Details && tags.Note) \n    {\n        var newLabel = \"+\" + tags.Note;\n    }\n    else if (tags.Note) \n    {\n        var newLabel = tags.Note;\n    }\n    else if (tags.Details) \n    {\n        var newLabel = \"+\";\n    }\n    else \n    {\n        var newLabel = \" \";\n    }\n}\nelse if (tags.LODState == \"Details\") \n{\n    if (tags.Details) \n    {\n        var newLabel = \"*\" + tags.Details;\n    }\n    else if (tags.Note)\n    {\n        var newLabel = \"*\" + tags.Note;\n    }\n    else\n    {\n        var newLabel = \"*\";\n    }\n}\n\nif (newLabel)\n{\n    setTagMask(thisBot, \"label\", newLabel);\n\n    let lengthTest = newLabel.length;\n\n    if(!newLabel.includes(\" \")) tags.labelFontSize = map(lengthTest, 1, 25, .7, .2) * tags.scale;\n    else if(lengthTest < 40) tags.labelFontSize = map(lengthTest, 1, 30, .8, .3) * tags.scale;\n    else tags.labelFontSize = null;\n    if(tags.labelFontSize <= 0) tags.labelFontSize = .1;\n    \n}","ab1GridAction":"@let positionInfo = getBot(\"ab1ID\", \"instMemory\").tags.ab1FocusData;\nlet newBot = {};\n\nnewBot.creator = null;\nnewBot[positionInfo.dimension] = true;\nnewBot[positionInfo.dimension+\"X\"] = positionInfo.x;\nnewBot[positionInfo.dimension+\"Y\"] = positionInfo.y;\nnewBot.ab1Note = true; //for identification purposes\nnewBot.scaleX = 1;\nnewBot.scaleY = 1;\nnewBot.scale = 1;\nnewBot.orientationMode = \"billboard\";\nnewBot.color = \"#FCC400\";\nnewBot.maxLODThreshold = 0.1;\nnewBot.onCreate = `@ setTimeout(() => whisper(thisBot, 'ab1NoteRefresh'), 25);`;\nnewBot.onMaxLODEnter = `@\nsetTagMask(thisBot, \"LODState\", \"Details\", \"tempLocal\");\nwhisper(thisBot, \"ab1NoteRefresh\");\n`;\nnewBot.onMaxLODExit = `@\nsetTagMask(thisBot, \"LODState\", \"Note\", \"tempLocal\");\nwhisper(thisBot, \"ab1NoteRefresh\");\n`;\nnewBot.onBotChanged = `@\nlet change = that.tags[0];\n\nif (change == \"Note\" || change == \"Details\") \n{\n    whisper(thisBot, \"ab1NoteRefresh\");\n}`;\nnewBot.labelWordWrapMode = \"breakWords\";\nnewBot.onClick = getBot(\"ab1ID\", \"createNewNote\").tags.clickLogic;\nnewBot.ab1NoteRefresh = getBot(\"ab1ID\", \"createNewNote\").tags.refreshNoteLogic;\nnewBot.onDestroy = \"@ destroy(getBots('transformer', thisBot.id));\";\n\nlet createBot = create(newBot);\nshout(\"ab1Refresh\");","ab1MenuLabelBotFocus":"scale","onMenuCreate":"@if (ab1InstMemory.tags.ab1Focus == \"ab1BotAction\")\n{\n    let selectedBot = getBot(\"id\", ab1InstMemory.tags.ab1FocusData);\n\n    if (selectedBot.tags.ab1Note != true)\n    {\n        destroy(thisBot);\n    }  \n}","scale":1,"auxCodeOrigin":"ab1CreateNote","ab1BotAction":"@let selectedBot = getBot(\"id\", ab1InstMemory.tags.ab1FocusData);\n\nlet value = await os.showInput(selectedBot.tags.scale, {\n    title: \"set new scale\"\n});\n\nif(value != null) {\n    setTag(selectedBot, \"scale\", value);\n    setTag(selectedBot, \"maxLODThreshold\", value/10);\n    setTag(selectedBot, \"scaleX\", 1);\n    setTag(selectedBot, \"scaleY\", 1);\n} \n\nshout(\"ab1Click\");","onInstStreaming":"@shout(\"ab1NoteRefresh\");","ab1Skill":"true","ab1UpdateID":"0b08de86-fa0b-4b11-9971-f2f05ace4c83","destroyable":false,"ab1Z":0,"system":"ab1.action.createNote","abIDOrigin":"ab1CreateNote"}}}}