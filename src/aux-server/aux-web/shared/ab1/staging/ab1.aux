{"version":2,"updates":[{"id":0,"timestamp":1687976803388,"update":"Ad4Bt5HOvgoAJwEEYm90cyQwMjgzNjVhNC0wMzZmLTQxZDAtOWFmMS03MTVhZDRmMmFhN2EBJwC3kc6+CgAGc3lzdGVtAgQAt5HOvgoBEGFiLmNvcmUucmVndWxhdGUnALeRzr4KAARmb3JtAgQAt5HOvgoSB25vdGhpbmcnALeRzr4KAAZhYkNvcmUCBAC3kc6+ChoEdHJ1ZScAt5HOvgoADG9uQW55Qm90RHJhZwIEALeRzr4KH7sBQC8vY29udHJvbHMgZ3JpZCBzbmFwCmlmIChsaW5rcy5yZW1lbWJlci50YWdzLmFiR3JpZFNuYXBTdGF0ZSkKewogICAgb3MuYWRkRHJvcFNuYXAoImdyaWQiKTsKfQoKLy9jb250cm9scyBib3Qgc25hcAppZiAobGlua3MucmVtZW1iZXIudGFncy5hYkJvdFNuYXBTdGF0ZSkKewogICAgb3MuYWRkRHJvcFNuYXAoImZhY2UiKTsKfScAt5HOvgoACHJlbWVtYmVyAgQAt5HOvgrbASjwn5SXZTUzODBhNmItOGI0ZC00YThiLThiMDQtNThlMWViMDNlNWU3JwC3kc6+CgAIYWJJZ25vcmUCBAC3kc6+CoICBHRydWUoALeRzr4KAAxhYkJvdFZlcnNpb24BfTInAQRib3RzJDM0YzNjMjEwLTViZjEtNDljZi1iMTUxLWVlMmQwN2YwZTY3MwEnALeRzr4KiAIGc3lzdGVtAgQAt5HOvgqJAg5hYi5jb3JlLmNyZWF0ZSgAt5HOvgqIAgZhYkNvcmUBeCcAt5HOvgqIAgRmb3JtAgQAt5HOvgqZAgdub3RoaW5nJwC3kc6+CogCC2Rlc2NyaXB0aW9uAgQAt5HOvgqhAj1Cb3QgdXNlZCB0byBjcmVhdGUvbWFuaWZlc3QgYm90cyBpbnRvIGFuIGFjdHVhbCBzY2VuZS9wb3J0YWwuJwC3kc6+CogCDGFiQ3JlYXRlQm90cwIEALeRzr4K3wKAGkAvL0RFViBOT1RFOiBORUVEIFRPIFVOREVSU1RBTkQgV0hBVCBUTyBETyBJRiBBTiBBUlJBWSBJUyBHSVZFTgoKLy9jaGVja3MgZm9yIGluaXRpYWwgYm9vdCBib29sZWFuCmxldCBpbml0aWFsQm9vdCA9IHRoYXQuaW5pdGlhbEJvb3Q7Ci8vYm90cyB0byBiZSBnZW5lcmF0ZWQKbGV0IGJvdERhdGEgPSB0aGF0LmJvdHM7Ci8vd2hlcmUgZGlkIHRoZSBkYXRhIGNvbWUgZnJvbSAob3B0aW9uYWwpCmxldCBvcmlnaW4gPSB0aGF0Lm9yaWdpbjsKLy92ZXJzaW9uIG9mIHRoZSBkYXRhIChvcHRpb25hbCkKbGV0IHZlcnNpb24gPSB0aGF0LnZlcnNpb247Ci8vaWRNYXAgYW5kIG5ld0JvdHMgYXJlIHVzZWQgdG8gbWFuYWdlIHRoZSBpbmNvbWluZyBib3QgZGF0YQpsZXQgaWRNYXAgPSBuZXcgTWFwKCk7CmxldCBuZXdCb3RzID0gW107CgovL3RoaXMgbG9vcCBjcmVhdGVzIHRoZSBuZXcgYm90cyBhbmQgdGhlbiBwYWNrYWdlcyB0aGVtIGZvciBhZGRpdGlvbmFsIHByb2Nlc3NpbmcsIHdoaWxlIGFkZGluZyBhbnkgbmVlZGVkIGFkZGl0aW9uYWwgdGFncwpmb3IgKGNvbnN0IHByb3BlcnR5IGluIGJvdERhdGEpCnsKICAgIGNvbnN0IG5ld0JvdCA9IGJvdERhdGFbcHJvcGVydHldOwogICAgY29uc3QgYm90VG90YWwgPSBPYmplY3Qua2V5cyhib3REYXRhKS5sZW5ndGg7CiAgICBjb25zdCBhYklET3JpZ2luID0ge2FiSURPcmlnaW46IG9yaWdpbn07CiAgICBjb25zdCBhYkdyaWRGb2N1cyA9IGxpbmtzLnJlbWVtYmVyLnRhZ3MuYWJHcmlkRm9jdXM7CgogICAgaWYgKG5ld0JvdC50YWdzKSAKICAgIHsKICAgICAgICBpZiAobmV3Qm90LnRhZ3MuY3JlYXRvcikgCiAgICAgICAgewogICAgICAgICAgICBhYklET3JpZ2luLm9sZENyZWF0b3IgPSBuZXdCb3QudGFncy5jcmVhdG9yOwogICAgICAgIH0KCiAgICAgICAgbGV0IHRhcmdldFBvc2l0aW9uOwoKICAgICAgICB0cnkgCiAgICAgICAgewogICAgICAgICAgICBpZiAoYm90VG90YWwgPCAyICYmIGFiR3JpZEZvY3VzKSAKICAgICAgICAgICAgewogICAgICAgICAgICAgICAgbGV0IHRhcmdldERpbWVuc2lvbiA9IGFiR3JpZEZvY3VzLmRpbWVuc2lvbjsKICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgdGFyZ2V0UG9zaXRpb24gPSB7IFt0YXJnZXREaW1lbnNpb25dOiB0cnVlLCBbdGFyZ2V0RGltZW5zaW9uICsgIlgiXTogYWJHcmlkRm9jdXMucG9zaXRpb24ueCwgW3RhcmdldERpbWVuc2lvbiArICJZIl06IGFiR3JpZEZvY3VzLnBvc2l0aW9uLnkgfTsKICAgICAgICAgICAgfQoKICAgICAgICAgICAgbGV0IGIgPSBjcmVhdGUobmV3Qm90LnRhZ3MsIHRhcmdldFBvc2l0aW9uLCBhYklET3JpZ2luKTsKCiAgICAgICAgICAgIGlkTWFwLnNldChwcm9wZXJ0eSwgYi5pZCk7CiAgICAgICAgICAgIG5ld0JvdHMucHVzaChiKTsKCiAgICAgICAgICAgIGlmIChiLnRhZ3MuY3JlYXRvciA9PSB0aGlzQm90LmlkKSAKICAgICAgICAgICAgewogICAgICAgICAgICAgICAgYi50YWdzLmNyZWF0b3IgPSBudWxsOwogICAgICAgICAgICB9CiAgICAgICAgfQogICAgICAgIGNhdGNoIChlcnJvcikgCiAgICAgICAgewogICAgICAgICAgICBjb25zb2xlLmxvZygiaW52YWxpZCBib3QiLCBlcnJvcik7CiAgICAgICAgfQogICAgfQogICAgZWxzZSAKICAgIHsKICAgICAgICBjb25zb2xlLmxvZygic2tpcHBlZCBib3Q6ICIgKyBuZXdCb3QpOwogICAgfQp9CgovL2FycmF5IG9mIHRhZyByZWxhdGlvbnNoaXBzIHRvIGJlIHByZXNlcnZlZApsZXQgbGlua1RhZ3MgPSBbImxpbmsiLCAiY3JlYXRvciIsICJjb25maWdCb3QiLCAibGluZVRvIiwgInRyYW5zZm9ybWVyIl07CgovL3RoaXMgbG9vcCBjb250YWlucyB0aGUgbG9naWMgZm9yIHByZXNlcnZpbmcgdGhlIGxpbmtUYWdzCmZvciAobGV0IG5ld0JvdCBvZiBuZXdCb3RzKSAKewogICAgZm9yIChsZXQgdGFnIG9mIGxpbmtUYWdzKSAKICAgIHsKICAgICAgICBsZXQgdmFsdWUgPSBuZXdCb3QudGFnc1t0YWddOwoKICAgICAgICBpZiAodGFnID09ICJjcmVhdG9yIikgCiAgICAgICAgewogICAgICAgICAgICB2YWx1ZSA9IG5ld0JvdC50YWdzLm9sZENyZWF0b3I7CiAgICAgICAgICAgIG5ld0JvdC50YWdzLm9sZENyZWF0b3IgPSBudWxsOwogICAgICAgIH0KCiAgICAgICAgdXBkYXRlQm90TGlua3MobmV3Qm90LCBpZE1hcCk7CgogICAgICAgIGlmICh2YWx1ZSkgCiAgICAgICAgewogICAgICAgICAgICBpZiAoQXJyYXkuaXNBcnJheSh2YWx1ZSkpIAogICAgICAgICAgICB7CiAgICAgICAgICAgICAgICBsZXQgbmV3VmFsdWUgPSB2YWx1ZS5tYXAoaWQgPT4gewogICAgICAgICAgICAgICAgICAgIHJldHVybiBpZE1hcC5nZXQoaWQpIHx8IGlkOwogICAgICAgICAgICAgICAgfSkKCiAgICAgICAgICAgICAgICBuZXdCb3QucmF3W3RhZ10gPSBuZXdWYWx1ZTsKICAgICAgICAgICAgfQogICAgICAgICAgICBlbHNlIAogICAgICAgICAgICB7CiAgICAgICAgICAgICAgICBjb25zdCBuZXdJRCA9IGlkTWFwLmdldCh2YWx1ZSk7CgogICAgICAgICAgICAgICAgaWYgKG5ld0lEKSAKICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICBuZXdCb3QucmF3W3RhZ10gPSBuZXdJRDsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfQogICAgICAgIH0KICAgIH0KfQoKLy90b2FzdHMgZm9yIGhhdGNoZXMsIGJ1dCBvbmx5IG9uIGJ1aWxkZXIKaWYgKGNvbmZpZ0JvdC50YWdzLmFiU2lsZW50TW9kZSA9PSBudWxsICYmICFjb25maWdCb3QudGFncy5waCAmJiBidWlsZGVyVmVyc2lvbiA9PSAiYnVpbGRlciIpIAp7CiAgICBvcy50b2FzdCgiaGF0Y2hlZCAiICsgb3JpZ2luICsgIiB2IiArIHZlcnNpb24pOwp9CgovL2FkZGl0aW9uYWwgaGF0Y2ggZGF0YQpjb25maWdCb3QudGFncy5sYXN0RWdnSGF0Y2hlZCA9IG9yaWdpbjsKCi8vaW5pdGlhbCBib290IGxvZ2ljCmlmIChpbml0aWFsQm9vdCkgCnsKICAgIGxldCBwcmVoYXRjaCA9IGF3YWl0IHNob3V0KCJvblByZUhhdGNoIiwgeyBhYjogb3JpZ2luIH0pWzBdOwoKICAgIGlmICghcHJlaGF0Y2gpIAogICAgewogICAgICAgIGFiSW5zdE1lbW9yeS50YWdzLmJhc2VBQiA9IG9yaWdpbjsKICAgIH0KICAgIGxpbmtzLnJlbWVtYmVyLnRhZ3MuYmFzZUFCID0gb3JpZ2luOwp9CgovL29uRWdnSGF0Y2ggZm9yIGFsbCBqdXN0IGhhdGNoZWQgYm90cwp3aGlzcGVyKG5ld0JvdHMsICJvbkVnZ0hhdGNoIiwge2FiOiBvcmlnaW4sIHZlcnNpb246IHZlcnNpb259KTsKCi8vb25BYkFkZGVkIGZvciBhbGwgYm90cyBpbiB0aGUgZXhwZXJpZW5jZQpzaG91dCgib25BYkFkZGVkIiwge2FiOiBvcmlnaW4sIHZlcnNpb246IHZlcnNpb259KTsnALeRzr4KiAIIcmVtZW1iZXICBAC3kc6+CuAcKPCflJdlNTM4MGE2Yi04YjRkLTRhOGItOGIwNC01OGUxZWIwM2U1ZTcnALeRzr4KiAIJb25BYkFkZGVkAgQAt5HOvgqHHXJALy9zaG91dCgib25BYkFkZGVkIiwge2FiOiBvcmlnaW4sIHZlcnNpb246IHZlcnNpb259KTsKCmNvbnNvbGUubG9nKCJhYjogIiArIHRoYXQuYWIsICJ2ZXJzaW9uOiAiICsgdGhhdC52ZXJzaW9uKTsnALeRzr4KiAIIYWJJZ25vcmUCBAC3kc6+CvodBHRydWUoALeRzr4KiAIMYWJCb3RWZXJzaW9uAX0yJwEEYm90cyQ2NjU3Yjg2NS1lOTgzLTQ0MDEtOWZjOS1mNTQxOGQxOGE3ZjcBJwC3kc6+CoAeBnN5c3RlbQIEALeRzr4KgR4NYWIuY29yZS5sZWFybicAt5HOvgqAHgRhYklEAgQAt5HOvgqPHgVsZWFybicAt5HOvgqAHgRmb3JtAgQAt5HOvgqVHgdub3RoaW5nJwC3kc6+CoAeBmFiQm9vdAIEALeRzr4KnR7CEUAvL2luc3QgbW9kZSAocGxheWVyIG9yIGJ1aWxkZXIpCmxldCBpbnN0TW9kZUNoZWNrID0gYXdhaXQgb3MudmVyc2lvbigpLnBsYXllck1vZGU7Ci8vY2hlY2sgc2VsZiBmb3IgaW5pdGlhbCBib290IGRhdGEKbGV0IGluaXRpYWxCb290ID0gbGlua3MucmVtZW1iZXIudGFncy5pbml0aWFsQm9vdCA/IHRydWUgOiBmYWxzZTsKLy9jaGVjayB1cmwgZm9yIHBvc3NpYmxlIGFiJ3MgdG8gbG9hZApsZXQgYm9vdEZsYWcgPSBjb25maWdCb3QudGFncy5hYiA/IGNvbmZpZ0JvdC50YWdzLmFiIDogY29uZmlnQm90LnRhZ3MuYXV0b0xvYWQgPyBjb25maWdCb3QudGFncy5hdXRvTG9hZCA6IGNvbmZpZ0JvdC50YWdzLmF1eENvZGU7CgovL2luaXRpYWxpemluZyBvZiBnbG9iYWwgdmFyaWFibGVzCmdsb2JhbFRoaXMuYnVpbGRlclZlcnNpb24gPSBpbnN0TW9kZUNoZWNrID09ICJidWlsZGVyIiA/IHRydWUgOiBmYWxzZTsKZ2xvYmFsVGhpcy5hYkluc3RNZW1vcnkgPSBsaW5rcy5yZW1lbWJlcjsKZ2xvYmFsVGhpcy5hYlJlbWVtYmVyID0gbGlua3MucmVtZW1iZXI7Cmdsb2JhbFRoaXMuYWJMb25nVGVybU1lbW9yeVNlYXJjaCA9IGxpbmtzLnNlYXJjaDsKZ2xvYmFsVGhpcy5hYlNlYXJjaCA9IGxpbmtzLnNlYXJjaDsKZ2xvYmFsVGhpcy5hYlB1Ymxpc2ggPSBsaW5rcy5zdG9yZTsKZ2xvYmFsVGhpcy5hYlN0b3JlID0gbGlua3Muc3RvcmU7Cmdsb2JhbFRoaXMuYWIgPSB0aGlzQm90OwoKLy9pbml0aWFsIGJvb3QgY2xlYW4gdXAgaWYgbmVjZXNzYXJ5CmlmIChpbml0aWFsQm9vdCkgCnsKICAgIGxldCBwcmV2aW91c0JvdHMgPSBnZXRCb3RzKGJ5TW9kKHsgInNwYWNlIjogInNoYXJlZCIsICJhYkNvcmUiOiBudWxsIH0pKTsKCiAgICBpZiAocHJldmlvdXNCb3RzKQogICAgewogICAgICAgIGRlc3Ryb3kocHJldmlvdXNCb3RzKTsKICAgIH0KfQoKLy9wb3B1bGF0ZSBib290ZmxhZyBhYgppZiAoaW5pdGlhbEJvb3QgJiYgYm9vdEZsYWcpCnsKICAgIGF3YWl0IGxpbmtzLnNlYXJjaC5vbkxvb2t1cEFCRWdncyh7YWJJRDogYm9vdEZsYWcsIGluaXRpYWxCb290OiB0cnVlLCBhdXRvSGF0Y2g6IHRydWV9KTsKfQoKLy9UaGlzIGNoZWNrcyBmb3IgdGhlIGFwcHJvcHJpYXRlIGFycmF5IG9mIHNraWxscyBhbmQgaW5pdGlhbGl6ZXMgdGhlbQphd2FpdCB0aGlzQm90LmFiU2tpbGxJbml0aWFsaXphdGlvbihpbnN0TW9kZUNoZWNrKTsKCi8vYnVpbGRlciBlbnZpcm9ubWVudCBzZXR1cAppZiAoaW5zdE1vZGVDaGVjayA9PSAiYnVpbGRlciIpCnsKICAgIGxldCBzdXBwb3J0c0FSID0gb3MuZGV2aWNlKCkuc3VwcG9ydHNBUjsKICAgIGxldCBzdXBwb3J0c1ZSID0gb3MuZGV2aWNlKCkuc3VwcG9ydHNWUjsKCiAgICAvL3N1cHBvcnQgYnVpbGRlciBWUi9BUgogICAgaWYgKHN1cHBvcnRzQVIgfHwgc3VwcG9ydHNWUiB8fCBjb25maWdCb3QudGFncy5kZXZWUikKICAgIHsKICAgICAgICBhd2FpdCB0aGlzQm90LmFiQWRhcHQoImFiSW1tZXJzaXZlIik7CiAgICAgICAgCiAgICAgICAgY29uZmlnQm90LnRhZ3MuZ3JpZFBvcnRhbCA9ICJpbW1lcnNlIjsKICAgIH0KCiAgICAvL2tlZXAgYWIgYXdha2UKICAgIGxpbmtzLnJlbWVtYmVyLnRhZ3MuYWJBd2FrZVN0YXRlID0gdHJ1ZTsKCiAgICAvL3dha2UgdXAgYnVpbGRlcgogICAgaWYgKGluaXRpYWxCb290ICYmICFib290RmxhZykKICAgIHsKICAgICAgICBsaW5rcy5tYW5pZmVzdGF0aW9uLmFiTWFuaWZlc3RCb3Qoe2RpbWVuc2lvbjogY29uZmlnQm90LnRhZ3MuZ3JpZFBvcnRhbCwgcG9zaXRpb246e3g6MCx5OjB9fSk7CgogICAgICAgIGxpbmtzLnJlbWVtYmVyLnRhZ3MuYmFzZUFCID0gdXVpZCgpOwoKICAgICAgICBpZiAoIXN1cHBvcnRzQVIgJiYgIXN1cHBvcnRzVlIgJiYgIWNvbmZpZ0JvdC50YWdzLmRldlZSKQogICAgICAgIHsKICAgICAgICAgICAgbGlua3MubWVudS5hYkluaXRpYWxCb290TWVudSgpOwogICAgICAgIH0KICAgIH0KICAgIGVsc2UgaWYgKGluaXRpYWxCb290KQogICAgewogICAgICAgIGxpbmtzLnJlbWVtYmVyLnRhZ3MuYmFzZUFCID0gYm9vdEZsYWc7CiAgICB9Cn0KCi8vc2V0IGluaXRpYWwgYm9vdCBkYXRhCmlmIChpbml0aWFsQm9vdCkKewogICAgbGlua3MucmVtZW1iZXIudGFncy5pbml0aWFsQm9vdCA9IGZhbHNlOwp9CgovL3BhdXNlIGZvciBhYiBsb2FkaW5nCmF3YWl0IG9zLnNsZWVwKDUwMCk7CgovL2luaXRpYWxpemF0aW9uIHNob3V0CnNob3V0KCJvbkFCSW5pdGlhbGl6ZWQiKTsoALeRzr4KgB4GYWJDb3JlAXgnALeRzr4KgB4HYWJBZGFwdAIEALeRzr4K4S/IBkAvL25hbWUgb2YgdGhlIHNraWxsCmNvbnN0IHN5c3RlbUlEID0gdGhhdDsKLy9ib290c3RyYXAgdXJsCmNvbnN0IGJvb3RTdHJhcCA9IG9zLmdldEFCMUJvb3RzdHJhcFVSTCgpCi8vY29uc3RydWN0ZWQgdXJsCmNvbnN0IHNraWxsRmlsZSA9IGJvb3RTdHJhcC5zbGljZSgwLCBib290U3RyYXAubGVuZ3RoLTcpICsgc3lzdGVtSUQgKyIuYXV4IjsKCi8vd2ViaG9vayB0byBkb3dubG9hZCB0aGUgc2tpbGwgdXBkYXRlCnRyeQp7CiAgICBjb25zdCByZXNwb25zZSA9IGF3YWl0IHdlYmhvb2soewogICAgICAgIG1ldGhvZDogIkdFVCIsCiAgICAgICAgdXJsOiBza2lsbEZpbGUKICAgIH0pOwoKICAgIGlmIChyZXNwb25zZS5zdGF0dXMgIT09IDIwMCkgewogICAgICAgIGNvbnNvbGUubG9nKCdbYWIgYm9vdHN0cmFwXSBDb3VsZCBub3QgZG93bmxvYWQgc2tpbGwuJyk7CiAgICAgICAgcmV0dXJuOwogICAgfQoKICAgIGNvbnN0IHVwZGF0ZXMgPSByZXNwb25zZS5kYXRhLnVwZGF0ZXM7CiAgICBjb25zdCBzdGF0ZSA9IGF3YWl0IG9zLmdldEluc3RTdGF0ZUZyb21VcGRhdGVzKHVwZGF0ZXMpOwogICAgY29uc3QgaWRzID0gT2JqZWN0LmtleXMoc3RhdGUpOwogICAgCiAgICBhd2FpdCBvcy5hcHBseVVwZGF0ZXNUb0luc3QodXBkYXRlcyk7CgogICAgd2hpc3BlcihpZHMsIHRhZ05hbWUsIGNvbmZpZ0JvdC50YWdzLmluc3QpOwoKICAgIC8vYWIubG9nKCJhYiBhZGFwdCIpOwogICAgY29uc29sZS5sb2coImFiIGFkYXB0Iik7CgogICAgcmV0dXJuIHRydWU7Cn0KY2F0Y2gKewogICAgY29uc29sZS5sb2coJ1thYiBib290c3RyYXBdIENvdWxkIG5vdCBkb3dubG9hZCBza2lsbC4nKTsKfScAt5HOvgqAHgtkZXNjcmlwdGlvbgIEALeRzr4KqjZPVGhpcyBza2lsbCBpcyBkZXNpZ25lZCB0byBoYW5kbGUgYm90aCByZWNvbmZpZ3VyYXRpb24gb2YgYWIgYW5kIGluaXRpYWxpemF0aW9uLicAt5HOvgqAHgpvbkJvdEFkZGVkAgQAt5HOvgr6No0BQC8vaW5pdGlhbGl6aW5nIHBhdXNlIHRvIGVuc3VyZSBhbGwgdGVtcExvY2FsIHVzZXIgYm90cyBhcmUgZnVsbHkgYWRkZWQKY29uc29sZS5sb2coImFiIFNUQVJUIFVQIik7CgpzZXRUaW1lb3V0KCgpID0+IHRoaXNCb3QuYWJCb290KCksIDUwMCk7JwC3kc6+CoAeCHJlbWVtYmVyAgQAt5HOvgqIOCjwn5SXZTUzODBhNmItOGI0ZC00YThiLThiMDQtNThlMWViMDNlNWU3JwC3kc6+CoAeA2xvZwIEALeRzr4KrzirAUAvL2FkZGl0aW9uYSBhYiBjb25zb2xlL2xvZwpsZXQgdXBkYXRlZExvZ3M7CgppZiAoIXRhZ3MuYWJMb2cpCnsKICAgIHVwZGF0ZWRMb2dzID0gdGhhdDsKfQplbHNlCnsKICAgIHVwZGF0ZWRMb2dzID0gdGFncy5hYkxvZyArICJcbiIgKyB0aGF0Owp9CgptYXNrcy5hYkxvZyA9IHVwZGF0ZWRMb2dzOycAt5HOvgqAHg1tYW5pZmVzdGF0aW9uAgQAt5HOvgrbOSjwn5SXZGNhNWQ5ODctYzRkOC00NmU0LWI2MGMtZGFhN2IyZjRkZGFkJwC3kc6+CoAeDGFiQ3JlYXRlSG9zdAIEALeRzr4KgjqaCEAvL3RoaXMgZnVuY3Rpb24gaGFuZGxlcyBjcmVhdGluZyBhIGZpbGUgZm9yIGpvaW4gY29kZXMKaWYgKGxpbmtzLnJlbWVtYmVyLnRhZ3MuaG9zdElEKQp7CiAgICBvcy50b2FzdCgiY29kZSBjb3BpZWQgdG8gY2xpcGJvYXJkIik7CgogICAgb3Muc2V0Q2xpcGJvYXJkKGxpbmtzLnJlbWVtYmVyLnRhZ3MuaG9zdElELnN1YnN0cmluZygwLDMpICsgIi0iICsgbGlua3MucmVtZW1iZXIudGFncy5ob3N0SUQuc3Vic3RyaW5nKDMpKTsKCiAgICByZXR1cm47Cn0KCmxldCBuZXdIb3N0SUQgPSB1dWlkKCkucmVwbGFjZUFsbCgiLSIsICIiKS5zdWJzdHJpbmcoMCw2KTsKbGV0IGRhdGUgPSBEYXRlVGltZS5ub3coKS50b01pbGxpcygpOwpsZXQgcmVjb3JkS2V5ID0gYXdhaXQgb3MuZ2V0RGF0YShsaW5rcy5yZW1lbWJlci50YWdzLmFiUmVjb3JkS2V5LCAiYjIwN2E1ZTQtZDUzMS00ODRmLWEwZDYtNjYyNmJlZjU5MDEzIiwgImh0dHBzOi8vcHVibGljb3MubGluayIpOwpsZXQgcmVjb3JkRGF0YSA9IGF3YWl0IG9zLnJlY29yZERhdGEocmVjb3JkS2V5LmRhdGEsIG5ld0hvc3RJRCwge3VybDogY29uZmlnQm90LnRhZ3MudXJsLCBkYXRlOiBkYXRlfSwgImh0dHBzOi8vcHVibGljb3MubGluayIpOwoKaWYgKHJlY29yZERhdGEuc3VjY2VzcykKewogICAgbGlua3MucmVtZW1iZXIudGFncy5ob3N0SUQgPSBuZXdIb3N0SUQuc3Vic3RyaW5nKDAsMykgKyAiLSIgKyBuZXdIb3N0SUQuc3Vic3RyaW5nKDMpOwoKICAgIG9zLnNldENsaXBib2FyZChsaW5rcy5yZW1lbWJlci50YWdzLmhvc3RJRCk7CgogICAgdGhhdC50YWdzLmxhYmVsID0gImpvaW4gY29kZTogIiArIG5ld0hvc3RJRC5zdWJzdHJpbmcoMCwzKSArICItIiArIG5ld0hvc3RJRC5zdWJzdHJpbmcoMyk7CgogICAgb3MudG9hc3QoImhvc3QgZ2VuZXJhdGVkLCBjb2RlIGNvcGllZCB0byBjbGlwYm9hcmQ6ICIgKyBuZXdIb3N0SUQpOwp9CmVsc2UKewogICAgb3MudG9hc3QoInNvbWV0aGluZyB3ZW50IHdyb25nLCBwbGVhc2UgdHJ5IGFnYWluIik7CgogICAgc2hvdXQoImFiTWVudVJlZnJlc2giKTsKfScAt5HOvgqAHgphYkpvaW5Ib3N0AgQAt5HOvgqdQtgGQC8vbG9naWMgZm9yIHVzaW5nIGEgam9pbiBjb2RlIChjaGVja3MgZm9yIGV4aXN0aW5nIGZpbGVzKQpzaG91dCgiYWJNZW51UmVmcmVzaCIpOwoKbGV0IGpvaW5Db2RlID0gdGhhdC50ZXh0LnJlcGxhY2VBbGwoIi0iLCAiIik7CmxldCByZWNvcmRLZXkgPSBhd2FpdCBvcy5nZXREYXRhKGxpbmtzLnJlbWVtYmVyLnRhZ3MuYWJSZWNvcmRLZXksICJiMjA3YTVlNC1kNTMxLTQ4NGYtYTBkNi02NjI2YmVmNTkwMTMiLCAiaHR0cHM6Ly9wdWJsaWNvcy5saW5rIik7CmxldCBnZXRSZWNvcmQgPSBhd2FpdCBvcy5nZXREYXRhKHJlY29yZEtleS5kYXRhLCBqb2luQ29kZSwgImh0dHBzOi8vcHVibGljb3MubGluay8iKTsKCmlmIChnZXRSZWNvcmQuc3VjY2VzcykKewogICAgbGV0IGRhdGUgPSBEYXRlVGltZS5ub3coKTsKICAgIGxldCBjcmVhdGVEYXRlID0gRGF0ZVRpbWUuZnJvbU1pbGxpcyhnZXRSZWNvcmQuZGF0YS5kYXRlKTsKICAgIGxldCBkaWZmZXJlbmNlID0gZGF0ZS5kaWZmKGNyZWF0ZURhdGUsICJkYXlzIikudG9PYmplY3QoKTsKCiAgICBkaWZmZXJlbmNlID0gTWF0aC5mbG9vcihkaWZmZXJlbmNlLmRheXMpOwoKICAgIGlmIChkaWZmZXJlbmNlIDwgOCkKICAgIHsKICAgICAgICBvcy50b2FzdCgiam9pbmluZyBob3N0IG5vdyIpOwogICAgCiAgICAgICAgb3MuZ29Ub1VSTChnZXRSZWNvcmQuZGF0YS51cmwpOwogICAgfQogICAgZWxzZQogICAgewogICAgICAgIG9zLnRvYXN0KCJqb2luIGNvZGUgb3V0IG9mIGRhdGUsIHBsZWFzZSBnZW5lcmF0ZSBhIG5ldyBqb2luIGNvZGUiKTsKICAgIH0KfQplbHNlCnsKICAgIG9zLnRvYXN0KCJjb2RlL2FiIGludmFsaWQsIHBsZWFzZSB0cnkgYWdhaW4iKTsKfScAt5HOvgqAHgZzZWFyY2gCBAC3kc6+CvZIKPCflJdkODM3MTQ0NC05MTU4LTQ0MzYtOGZjNy04NGNjOTFiN2Y1MjUnALeRzr4KgB4IYWJJZ25vcmUCBAC3kc6+Cp1JBHRydWUoALeRzr4KgB4MYWJCb3RWZXJzaW9uAX0yJwC3kc6+CoAeBG1lbnUCBAC3kc6+CqNJKPCflJdiMzBjNmM1ZC1hNGY3LTQyNjYtYmEzOC0zOTNkYzk1ZTFlY2InALeRzr4KgB4VYWJTa2lsbEluaXRpYWxpemF0aW9uAgQAt5HOvgrKSdABQC8vRmluZCB0aGUgYXBwcm9wcmlhdGUgYXJyYXkgYW5kIHBvcHVsYXRlIHNraWxscwpsZXQgc2tpbGxBcnJheSA9IGxpbmtzLnJlbWVtYmVyLnRhZ3NbdGhhdCArICJTa2lsbEFycmF5Il07Cgpmb3IgKGxldCBpID0gMDsgaSA8IHNraWxsQXJyYXkubGVuZ3RoOyBpKyspCnsKICAgIGF3YWl0IHRoaXNCb3QuYWJBZGFwdChza2lsbEFycmF5W2ldKTsKfQoKcmV0dXJuOycBBGJvdHMkNzZhZjA0OTEtMzkxOS00OTg0LWFhODItMjJjNzQyZjQyNjNmAScAt5HOvgqbSwZzeXN0ZW0CBAC3kc6+CpxLDWFiLmNvcmUuc3RvcmUoALeRzr4Km0sGYWJDb3JlAXgnALeRzr4Km0sEZm9ybQIEALeRzr4Kq0sHbm90aGluZycAt5HOvgqbSwtkZXNjcmlwdGlvbgIEALeRzr4Ks0s/VGhpcyBza2lsbCBpcyBtZWFudCB0byBiZSBhIGNvbmZpZ3VyYWJsZSBtZWFucyB0byBwdWJsaXNoIGRhdGEuJwC3kc6+CptLD2FiUHVibGlzaFJlY29yZAIEALeRzr4K80uDAkBsZXQgcmVjb3JkRGF0YSA9IHRoYXQuZGF0YTsKbGV0IHJlY29yZE5hbWUgPSB0aGF0LnJlY29yZE5hbWU7CgppZiAoIXJlY29yZERhdGEpCnsKICAgIHJldHVybiAibm8gZGF0YSBzdXBwbGllZCI7Cn0KCnJlY29yZERhdGEgPSBhd2FpdCBvcy5yZWNvcmREYXRhKGxpbmtzLnJlbWVtYmVyLnRhZ3MuYWJSZWNvcmRLZXksIHJlY29yZE5hbWUsIHJlY29yZERhdGEsIGxpbmtzLnJlbWVtYmVyLnRhZ3MuYWJFbmRwb2ludCk7CgpyZXR1cm4gcmVjb3JkRGF0YTsnALeRzr4Km0sNYWJQdWJsaXNoRmlsZQIEALeRzr4K902DA0BsZXQgZmlsZSA9IHRoYXQuZmlsZTsKbGV0IGZpbGVOYW1lID0gdGhhdC5maWxlTmFtZTsKbGV0IG1pbWVUeXBlID0gdGhhdC5taW1lVHlwZTsKbGV0IHJlY29yZEtleSA9IHRoYXQucmVjb3JkS2V5ID8gdGhhdC5yZWNvcmRLZXkgOiBsaW5rcy5yZW1lbWJlci50YWdzLmFiUmVjb3JkS2V5OwoKaWYgKCFmaWxlKQp7CiAgICByZXR1cm4gIm5vIGZpbGUgc3VwcGxpZWQiOwp9CgpsZXQgZmlsZVVwbG9hZCA9IGF3YWl0IG9zLnJlY29yZEZpbGUobGlua3MucmVtZW1iZXIudGFncy5hYlJlY29yZEtleSwgZmlsZSwge2Rlc2NyaXB0aW9uOiBmaWxlTmFtZSwgbWltZVR5cGU6IG1pbWVUeXBlfSwgbGlua3MucmVtZW1iZXIudGFncy5hYkVuZHBvaW50KTsKCnJldHVybiBmaWxlVXBsb2FkOycAt5HOvgqbSxBhYkNvcmVNZW51QWN0aW9uAgQAt5HOvgr7UDFALy9zZXQgdXAgdGhlIHB1Ymxpc2ggbWVudQp0aGlzQm90Lm9uU3RvcmVNZW51KCk7JwC3kc6+CptLC29uU3RvcmVNZW51AgQAt5HOvgqtUeI5QGxldCBwb3NzaWJsZVB1Ymxpc2hCb3QgPSBsaW5rcy5yZW1lbWJlci5saW5rcy5hYkJvdEZvY3VzOwoKc2hvdXQoImFiTWVudVJlZnJlc2giKTsKCmNvbmZpZ0JvdC5tYXNrcy5tZW51UG9ydGFsID0gImFiTWVudSI7CgpsaW5rcy5tZW51Lm1hc2tzLm9uR3JpZENsaWNrID0gIkAgc2hvdXQoJ2FiTWVudVJlZnJlc2gnKTsgbGlua3MubWFuaWZlc3RhdGlvbi5hYkNsaWNrKCk7IjsKCmNvbnN0IHV1YWIgPSBsaW5rcy5yZW1lbWJlci50YWdzLnV1YWIgPyB0cnVlIDogZmFsc2U7CgpsZXQgbWVudUJ1dHRvbiA9IHt9OwoKbWVudUJ1dHRvbi5hYk1lbnUgPSB0cnVlOwptZW51QnV0dG9uLmFiTWVudVNvcnRPcmRlciA9IDk7Cm1lbnVCdXR0b24uYWJNZW51UmVmcmVzaCA9ICJAIGRlc3Ryb3kodGhpc0JvdCk7IjsKbWVudUJ1dHRvbi5sYWJlbCA9ICJkb3dubG9hZCI7Cm1lbnVCdXR0b24uZm9ybUFkZHJlc3MgPSAiZ2V0X2FwcCI7Cm1lbnVCdXR0b24uY29sb3IgPSAiIzU1RTY3OSI7Cm1lbnVCdXR0b24ubWFuYWdlciA9ICLwn5SXIiArIHRoaXNCb3QuaWQ7Cm1lbnVCdXR0b24ubWFuaWZlc3RhdGlvbiA9IHRhZ3MubWFuaWZlc3RhdGlvbjsKbWVudUJ1dHRvbi5vbkNsaWNrID0gYEAgbGlua3MubWFuYWdlci5hYkRvd25sb2FkKCk7YDsKCi8vY3JlYXRlIGRvd25sb2FkIGJ1dHRvbgpsaW5rcy5tZW51LmFiQ3JlYXRlTWVudUJ1dHRvbihtZW51QnV0dG9uKTsKCmlmICghdXVhYikKewogICAgbWVudUJ1dHRvbi5sYWJlbCA9ICJwdWJsaXNoIGFiIjsgCiAgICBtZW51QnV0dG9uLmFiTWVudVNvcnRPcmRlciA9IDE7CiAgICBtZW51QnV0dG9uLmxhYmVsQWxpZ25tZW50ID0gImNlbnRlciI7CiAgICBtZW51QnV0dG9uLmZvcm1BZGRyZXNzID0gbnVsbDsKICAgIG1lbnVCdXR0b24ubWVudUl0ZW1TdHlsZSA9IGDwn6esIHsiYm9yZGVyLXJhZGl1cyI6ICI5cHggOXB4IDBweCAwcHgiLCAibWFyZ2luLXRvcCI6ICI2cHgifWA7CiAgICBtZW51QnV0dG9uLmNvbG9yID0gIiM5MDhCRkMiOwogICAgbWVudUJ1dHRvbi5wb2ludGFibGUgPSBmYWxzZTsKICAgIG1lbnVCdXR0b24ub25DbGljayA9IG51bGw7CiAgICBtZW51QnV0dG9uLnNjYWxlWSA9IDAuNzU7CiAgICAKICAgIC8vY3JlYXRlIHB1Ymxpc2ggbGFiZWwgYnV0dG9uCiAgICBsaW5rcy5tZW51LmFiQ3JlYXRlTWVudUJ1dHRvbihtZW51QnV0dG9uKTsKCiAgICBtZW51QnV0dG9uLmFiTWVudVNvcnRPcmRlciA9IDE7CiAgICBtZW51QnV0dG9uLmxhYmVsID0gImVuY3J5cHQiOwogICAgbWVudUJ1dHRvbi5sYWJlbEFsaWdubWVudCA9ICJsZWZ0IjsKICAgIG1lbnVCdXR0b24ubWVudUl0ZW1TdHlsZSA9IGDwn6esIHsiYm9yZGVyLXJhZGl1cyI6ICIwcHggMHB4IDBweCAwcHgiLCAibWFyZ2luLXRvcCI6ICIwcHgifWA7CiAgICBtZW51QnV0dG9uLmZvcm1BZGRyZXNzID0gImNoZWNrX2JveF9vdXRsaW5lX2JsYW5rIjsKICAgIG1lbnVCdXR0b24uZW5jcnlwdFN0YXRlID0gZmFsc2U7CiAgICBtZW51QnV0dG9uLmNvbG9yID0gIiM5MDhCRkMiOwogICAgbWVudUJ1dHRvbi5zY2FsZVkgPSAxOwogICAgbWVudUJ1dHRvbi5vbkNsaWNrID0gYEAgaWYodGFncy5lbmNyeXB0U3RhdGUpCiAgICB7CiAgICAgICAgdGFncy5lbmNyeXB0U3RhdGUgPSBmYWxzZTsKICAgICAgICB0YWdzLmZvcm1BZGRyZXNzID0gJ2NoZWNrX2JveF9vdXRsaW5lX2JsYW5rJzsKICAgICAgICBjb25maWdCb3QudGFncy5lbmNyeXB0aW9uID0gbnVsbDsKICAgIH0KICAgIGVsc2UKICAgIHsKICAgICAgICB0YWdzLmVuY3J5cHRTdGF0ZSA9IHRydWU7CiAgICAgICAgdGFncy5mb3JtQWRkcmVzcyA9ICdjaGVja19ib3gnOwogICAgICAgIGNvbmZpZ0JvdC50YWdzLmVuY3J5cHRpb24gPSB0cnVlOwogICAgfWA7CgogICAgLy9jcmVhdGUgZW5jcnlwdCBidXR0b24KICAgIGxpbmtzLm1lbnUuYWJDcmVhdGVNZW51QnV0dG9uKG1lbnVCdXR0b24pOwoKICAgIG1lbnVCdXR0b24uYWJNZW51ID0gbnVsbDsKICAgIG1lbnVCdXR0b24ubWVudUl0ZW1TdHlsZSA9IGDwn6esIHsiYm9yZGVyLXJhZGl1cyI6ICI5cHggOXB4IDlweCA5cHgiLCAibWFyZ2luLXRvcCI6ICI2cHgifWA7CiAgICBtZW51QnV0dG9uLmRpbWVuc2lvbiA9ICJhYk1lbnUiOwogICAgbWVudUJ1dHRvbi5vbktleURvd24gPSBgQAogICAgICAgIGlmICh0aGF0LmtleXNbMF0gPT0gIlNoaWZ0IikKICAgICAgICB7CiAgICAgICAgICAgIHRhZ3NbdGFncy5kaW1lbnNpb25dID0gdHJ1ZTsKICAgICAgICB9YDsKICAgIG1lbnVCdXR0b24ub25LZXlVcCA9IGBACiAgICAgICAgaWYgKHRoYXQua2V5c1swXSA9PSAiU2hpZnQiKQogICAgICAgIHsKICAgICAgICAgICAgdGFnc1t0YWdzLmRpbWVuc2lvbl0gPSBmYWxzZTsKICAgICAgICB9YDsKICAgIG1lbnVCdXR0b24uYWJNZW51U29ydE9yZGVyID0gLTE7CiAgICBtZW51QnV0dG9uLmJ1dHRvblN0YXRlID0gImF1dG9tYXRpYyI7CiAgICBtZW51QnV0dG9uLmNvbG9yID0gIiM5MDhCRkMiOwogICAgbWVudUJ1dHRvbi5mb3JtQWRkcmVzcyA9ICJjaGVja19ib3giOwogICAgbWVudUJ1dHRvbi5sYWJlbCA9ICJhdXRvbWF0aWMgdmVyc2lvbiI7CiAgICBtZW51QnV0dG9uLm9uQ2xpY2sgPSBgQAogICAgICAgIGlmKHRhZ3MuYnV0dG9uU3RhdGUgPT0gJ2F1dG9tYXRpYycpCiAgICAgICAgewogICAgICAgICAgICB0YWdzLmJ1dHRvblN0YXRlID0gJ21hbnVhbCc7CiAgICAgICAgICAgIHRhZ3MuZm9ybUFkZHJlc3MgPSAnY2hlY2tfYm94X291dGxpbmVfYmxhbmsnOwogICAgICAgICAgICBjb25maWdCb3QudGFncy52ZXJzaW9uRGVmaW5lZCA9IHRydWU7CiAgICAgICAgfQogICAgICAgIGVsc2UKICAgICAgICB7CiAgICAgICAgICAgIHRhZ3MuYnV0dG9uU3RhdGUgPSAnYXV0b21hdGljJzsKICAgICAgICAgICAgdGFncy5sYWJlbCA9ICdhdXRvbWF0aWMgdmVyc2lvbic7CiAgICAgICAgICAgIHRhZ3MuZm9ybUFkZHJlc3MgPSAnY2hlY2tfYm94JzsKICAgICAgICAgICAgY29uZmlnQm90LnRhZ3MudmVyc2lvbkRlZmluZWQgPSBudWxsOwogICAgICAgIH1gOwoKICAgIC8vY3JlYXRlIHZlcnNpb24gYnV0dG9uCiAgICBsaW5rcy5tZW51LmFiQ3JlYXRlTWVudUJ1dHRvbihtZW51QnV0dG9uKTsKfQoKbWVudUJ1dHRvbi5kaW1lbnNpb24gPSBudWxsOwptZW51QnV0dG9uLmFiTWVudSA9IHRydWU7Cm1lbnVCdXR0b24ub25LZXlEb3duID0gbnVsbDsKbWVudUJ1dHRvbi5vbktleVVwID0gbnVsbDsKbWVudUJ1dHRvbi5hYk1lbnVTb3J0T3JkZXIgPSAyOwptZW51QnV0dG9uLmJ1dHRvblN0YXRlID0gbnVsbDsKbWVudUJ1dHRvbi5jb2xvciA9ICIjOTA4QkZDIjsKbWVudUJ1dHRvbi5mb3JtQWRkcmVzcyA9ICJlZ2ciOwoKaWYgKHV1YWIpCnsKICAgIG1lbnVCdXR0b24uZm9ybUFkZHJlc3MgPSAicXJfY29kZV9zY2FubmVyIjsKICAgIG1lbnVCdXR0b24ub25DbGljayA9IGBACiAgICAgICAgdHJ5CiAgICAgICAgewogICAgICAgICAgICBjb25maWdCb3QudGFncy51dWFiU2NhbiA9IHRydWU7CgogICAgICAgICAgICBvcy5vcGVuUVJDb2RlU2Nhbm5lcigpOwoKICAgICAgICAgICAgb3MudG9hc3QoInBsZWFzZSBzY2FuIHlvdXIgcHJhY3RpY2UgcGVybWl0Iik7CiAgICAgICAgfQogICAgICAgIGNhdGNoCiAgICAgICAgewogICAgICAgICAgICBvcy50b2FzdCgicXIgY29kZSBzY2FuIG5vdCBzdXBwb3J0ZWQgb24gdGhpcyBkZXZpY2UiKTsKCiAgICAgICAgICAgIGNvbmZpZ0JvdC50YWdzLnV1YWJTY2FuID0gbnVsbDsKICAgICAgICB9CgogICAgICAgIHNob3V0KCJhYk1lbnVSZWZyZXNoIik7CgogICAgICAgIGxpbmtzLm1hbmlmZXN0YXRpb24uYWJDbGljaygpOwogICAgYDsKICAgIG1lbnVCdXR0b24ubGFiZWwgPSAicHVibGlzaCBhYiI7Cn0KZWxzZQp7CiAgICBtZW51QnV0dG9uLm1lbnVJdGVtU3R5bGUgPSBg8J+nrCB7ImJvcmRlci1yYWRpdXMiOiAiMHB4IDBweCA5cHggOXB4IiwgIm1hcmdpbi10b3AiOiAiMHB4In1gOwogICAgbWVudUJ1dHRvbi5mb3JtID0gImlucHV0IjsKICAgIG1lbnVCdXR0b24ubWVudUl0ZW1TaG93U3VibWl0V2hlbkVtcHR5ID0gdHJ1ZTsKICAgIG1lbnVCdXR0b24ubWVudUl0ZW1UZXh0ID0gIWxpbmtzLnJlbWVtYmVyLmxpbmtzLmFiQm90Rm9jdXMgPyBsaW5rcy5yZW1lbWJlci50YWdzLmJhc2VBQiA6IGxpbmtzLnJlbWVtYmVyLmxpbmtzLmFiQm90Rm9jdXMuaWQ7CiAgICBtZW51QnV0dG9uLnRhcmdldEJvdCA9IGdldExpbmsocG9zc2libGVQdWJsaXNoQm90KTsKICAgIG1lbnVCdXR0b24ub25TdWJtaXQgPSBgQCBjb25maWdCb3QudGFncy5tYW51YWxQdWJsaXNoID0gdHJ1ZTsgICAKCiAgICAgICAgaWYgKHRoYXQudGV4dCA9PSBudWxsICYmIGxpbmtzLnJlbWVtYmVyLnRhZ3MuYmFzZUFCICYmICFsaW5rcy5yZW1lbWJlci5saW5rcy5hYkJvdEZvY3VzKQogICAgICAgIHsKICAgICAgICAgICAgdGhhdC50ZXh0ID0gbGlua3MucmVtZW1iZXIudGFncy5iYXNlQUI7CiAgICAgICAgfQoKICAgICAgICBpZiAodGhhdC50ZXh0KQogICAgICAgIHsKICAgICAgICAgICAgbGlua3MubWFuYWdlci5hYlB1Ymxpc2hBQih7YWI6IHRoYXQudGV4dCwgbWFudWFsUHVibGlzaDogdHJ1ZSwgYm90OiBsaW5rcy50YXJnZXRCb3R9KTsKICAgICAgICB9CiAgICAgICAgZWxzZQogICAgICAgIHsKICAgICAgICAgICAgb3MudG9hc3QoImFiIG5vdCBzcGVjaWZpZWQiKTsKCiAgICAgICAgICAgIHNob3V0KCJhYk1lbnVSZWZyZXNoIik7CgogICAgICAgICAgICBsaW5rcy5tYW5pZmVzdGF0aW9uLmFiQ2xpY2soKTsKICAgICAgICB9CiAgICBgOwp9CgovL2NyZWF0ZSBwdWJsaXNoIGJ1dHRvbgpsaW5rcy5tZW51LmFiQ3JlYXRlTWVudUJ1dHRvbihtZW51QnV0dG9uKTsKCmlmIChsaW5rcy5yZW1lbWJlci5saW5rcy5hYkJvdEZvY3VzKQp7CiAgICBtZW51QnV0dG9uLmFiTWVudVNvcnRPcmRlciA9IDg7CiAgICBtZW51QnV0dG9uLmZvcm0gPSBudWxsOwogICAgbWVudUJ1dHRvbi5tZW51SXRlbVN0eWxlID0gYPCfp6wgeyJib3JkZXItcmFkaXVzIjogIjlweCA5cHggOXB4IDlweCIsICJtYXJnaW4tdG9wIjogIjZweCJ9YDsKICAgIG1lbnVCdXR0b24ubGFiZWwgPSAiY29weSB0byBjbGlwYm9hcmQiOwogICAgbWVudUJ1dHRvbi5mb3JtQWRkcmVzcyA9ICJmaWxlX2NvcHkiOwogICAgbWVudUJ1dHRvbi5jb2xvciA9ICIjNTVFNjc5IjsKICAgIG1lbnVCdXR0b24udGFyZ2V0Qm90ID0gbGlua3MucmVtZW1iZXIudGFncy5hYkJvdEZvY3VzOwogICAgbWVudUJ1dHRvbi5vbkNsaWNrID0gYEAgbGV0IHNlbGVjdGVkQm90ID0gbGlua3MudGFyZ2V0Qm90OwogICAgbGV0IHByZXBwZWRCb3QgPSBKU09OLnN0cmluZ2lmeShzZWxlY3RlZEJvdCk7CiAgICBsZXQgc3RhdGUgPSB7fQoKICAgIHN0YXRlW2FiSW5zdE1lbW9yeS50YWdzLmFiRm9jdXNEYXRhXSA9IHNlbGVjdGVkQm90OwoKICAgIGxldCBuZXdGaWxlID0ge30KICAgIG5ld0ZpbGUudmVyc2lvbiA9IDE7CiAgICBuZXdGaWxlLnN0YXRlID0gc3RhdGU7CgogICAgdmFyIGZvcm1hdHRlZEZpbGUgPSBKU09OLnN0cmluZ2lmeShuZXdGaWxlKTsKCiAgICBvcy5zZXRDbGlwYm9hcmQoZm9ybWF0dGVkRmlsZSk7CgogICAgb3MudG9hc3QoImJvdCBjb3BpZWQgdG8gY2xpcGJvYXJkIik7CgogICAgc2hvdXQoImFiTWVudVJlZnJlc2giKTsKCiAgICBsaW5rcy5tYW5pZmVzdGF0aW9uLmFiQ2xpY2soKTsKICAgIGA7CiAgICAKICAgIC8vY3JlYXRlICBjb3B5IHRvIGNsaXBib2FyZCBidXR0b24KICAgIGxpbmtzLm1lbnUuYWJDcmVhdGVNZW51QnV0dG9uKG1lbnVCdXR0b24pOwp9CmVsc2UgaWYgKCF1dWFiKQp7CiAgICBtZW51QnV0dG9uLmFiTWVudVNvcnRPcmRlciA9IDEwOwogICAgbWVudUJ1dHRvbi5mb3JtID0gbnVsbDsKICAgIG1lbnVCdXR0b24ubWVudUl0ZW1TdHlsZSA9IGDwn6esIHsiYm9yZGVyLXJhZGl1cyI6ICI5cHggOXB4IDlweCA5cHgiLCAibWFyZ2luLXRvcCI6ICI2cHgifWA7CiAgICBtZW51QnV0dG9uLmxhYmVsID0gInNjYW4iOwogICAgbWVudUJ1dHRvbi5mb3JtQWRkcmVzcyA9ICJxcl9jb2RlX3NjYW5uZXIiOwogICAgbWVudUJ1dHRvbi5jb2xvciA9ICIjOTA4QkZDIjsKICAgIG1lbnVCdXR0b24ub25DbGljayA9IGBAIGNvbmZpZ0JvdC50YWdzLnB1Ymxpc2hTY2FuID0gdHJ1ZTsgb3Mub3BlblFSQ29kZVNjYW5uZXIoKTtgOwoKICAgIC8vY3JlYXRlICBzY2FuIGJ1dHRvbgogICAgbGlua3MubWVudS5hYkNyZWF0ZU1lbnVCdXR0b24obWVudUJ1dHRvbik7CgogICAgLy9ORUVEIFRPIFVQREFURQogICAgaWYgKGNvbmZpZ0JvdC50YWdzLmdpZykKICAgIHsKICAgICAgICBtZW51QnV0dG9uLmFiTWVudVNvcnRPcmRlciA9IC01OwogICAgICAgIG1lbnVCdXR0b24ubWVudUl0ZW1TdHlsZSA9IGDwn6esIHsiYm9yZGVyLXJhZGl1cyI6ICI5cHggOXB4IDlweCA5cHgiLCAibWFyZ2luLXRvcCI6ICI2cHgifWA7CiAgICAgICAgbWVudUJ1dHRvbi5sYWJlbCA9ICJzdWJtaXQgZ2lnIjsKICAgICAgICBtZW51QnV0dG9uLmZvcm1BZGRyZXNzID0gInNlbmQiOwogICAgICAgIG1lbnVCdXR0b24uY29sb3IgPSAiIzkwOEJGQyI7CiAgICAgICAgbWVudUJ1dHRvbi5vbkNsaWNrID0gYEAgc2hvdXQoImFiQ29sbGFiU3VibWl0Iik7YDsKCiAgICAgICAgbGlua3MubWVudS5hYkNyZWF0ZU1lbnVCdXR0b24obWVudUJ1dHRvbik7CiAgICB9Cn0KCmxldCBob3N0QnV0dG9uID0ge307CgppZiAobGlua3MucmVtZW1iZXIudGFncy5ob3N0SUQpCnsKICAgIGhvc3RCdXR0b24ubGFiZWwgPSAiam9pbiBjb2RlOiAiICsgbGlua3MucmVtZW1iZXIudGFncy5ob3N0SUQuc3Vic3RyaW5nKDAsMykgKyAiLSIgKyBsaW5rcy5yZW1lbWJlci50YWdzLmhvc3RJRC5zdWJzdHJpbmcoMyk7Cn0KZWxzZQp7CiAgICBob3N0QnV0dG9uLmxhYmVsID0gImdlbmVyYXRlIGpvaW4gY29kZSI7Cn0KCmhvc3RCdXR0b24uYWJNZW51ID0gdHJ1ZTsKaG9zdEJ1dHRvbi5hYk1lbnVTb3J0T3JkZXIgPSA1MDsKaG9zdEJ1dHRvbi5hYk1lbnVSZWZyZXNoID0gIkAgZGVzdHJveSh0aGlzQm90KTsiOwpob3N0QnV0dG9uLmZvcm1BZGRyZXNzID0gImdyb3VwX2FkZCI7Cmhvc3RCdXR0b24uY29sb3IgPSAiIzkwOEJGQyI7Cmhvc3RCdXR0b24ubGVhcm4gPSB0YWdzLmxlYXJuOwpob3N0QnV0dG9uLnJlbWVtYmVyID0gdGFncy5yZW1lbWJlcjsKaG9zdEJ1dHRvbi5vbkNsaWNrID0gYEAgbGlua3MubGVhcm4uYWJDcmVhdGVIb3N0KHRoaXNCb3QpOwoKaWYgKCFsaW5rcy5yZW1lbWJlci50YWdzLmhvc3RJRCkKewogICAgdGFncy5sYWJlbCA9ICdnZW5lcmF0aW5nIGNvZGUgbm93JzsKfWA7CgpsaW5rcy5tZW51LmFiQ3JlYXRlTWVudUJ1dHRvbihob3N0QnV0dG9uKTsvL2dlbmVyYXRlIGEgaG9zdCBidXR0b24nALeRzr4Km0sOYWJDb3JlTWVudUljb24CBAC3kc6+CoCLAQlpb3Nfc2hhcmUnALeRzr4Km0sPYWJDb3JlTWVudUxhYmVsAgQAt5HOvgqKiwEFc2hhcmUnALeRzr4Km0sTYWJDb3JlTWVudVNvcnRPcmRlcgIEALeRzr4KkIsBATMnALeRzr4Km0sIcmVtZW1iZXICBAC3kc6+CpKLASjwn5SXZTUzODBhNmItOGI0ZC00YThiLThiMDQtNThlMWViMDNlNWU3JwC3kc6+CptLC2FiUHVibGlzaEFCAgQAt5HOvgq5iwG0K0AvL3Nob3V0KCJhYlB1Ymxpc2hBQiIsIHthYjogIiIsIGtleTogIiIsIHRhcmdldDogIiJ9KTsKYWIubG9nKCJhYiBwdWJsaXNoIik7CgpsZXQgcHJvZ3Jlc3NCdXR0b247CgpzaG91dCgiYWJNZW51UmVmcmVzaCIpOwoKLy9jbGVhciBhYiBidWlsZGVyCmlmIChsaW5rcy5tYW5pZmVzdGF0aW9uKQp7CiAgICBpZiAobGlua3MubWFuaWZlc3RhdGlvbi5saW5rcy5hYkJvdCkKICAgIHsKICAgICAgICBkZXN0cm95KGxpbmtzLm1hbmlmZXN0YXRpb24ubGlua3MuYWJCb3QpOwogICAgfQp9CgovL3Byb2dyZXNzIGJhciBmb3IgbWFudWFsIHB1Ymxpc2hpbmcgY29uZmlybWF0aW9uCmlmIChjb25maWdCb3QudGFncy5tYW51YWxQdWJsaXNoKQp7CiAgICBjb25maWdCb3QubWFza3MubWVudVBvcnRhbCA9ICJhYk1lbnUiOwoKICAgIGxldCBtZW51QnV0dG9uID0ge307CgogICAgbWVudUJ1dHRvbi5hYk1lbnUgPSB0cnVlOwogICAgbWVudUJ1dHRvbi50cmFja051bSA9IC0xOwogICAgbWVudUJ1dHRvbi5vbkNyZWF0ZSA9IGBACiAgICBpZiAodGFncy50cmFja051bSA9PSAyKQogICAgewogICAgICAgIHRhZ3MudHJhY2tOdW0gPSAwOwogICAgfQogICAgZWxzZQogICAgewogICAgICAgIHRhZ3MudHJhY2tOdW0rKzsKICAgIH0KCiAgICB0YWdzLmxhYmVsID0gdGFnc1sibGFiZWwiK3RhZ3MudHJhY2tOdW1dOwogICAgdGFncy5mb3JtQWRkcmVzcyA9IHRhZ3NbImZvcm0iK3RhZ3MudHJhY2tOdW1dOwoKICAgIHNldFRpbWVvdXQoKCkgPT4gd2hpc3Blcih0aGlzQm90LCAib25DcmVhdGUiKSwgNTAwKTtgOwogICAgbWVudUJ1dHRvbi5sYWJlbDAgPSAidXBsb2FkaW5nLiI7CiAgICBtZW51QnV0dG9uLmxhYmVsMSA9ICJ1cGxvYWRpbmcuLiI7CiAgICBtZW51QnV0dG9uLmxhYmVsMiA9ICJ1cGxvYWRpbmcuLi4iOwogICAgbWVudUJ1dHRvbi5mb3JtMCA9ICJob3VyZ2xhc3NfYm90dG9tIjsKICAgIG1lbnVCdXR0b24uZm9ybTEgPSAiaG91cmdsYXNzX3RvcCI7CiAgICBtZW51QnV0dG9uLmZvcm0yID0gImhvdXJnbGFzc19ib3R0b20iOwogICAgbWVudUJ1dHRvbi5jb2xvciA9ICIjOTA4QkZDIjsKICAgIG1lbnVCdXR0b24ub25EZXN0cm95ID0gIkAgY29uZmlnQm90Lm1hc2tzLm1lbnVQb3J0YWwgPSBudWxsOyI7CgogICAgcHJvZ3Jlc3NCdXR0b24gPSBsaW5rcy5tZW51LmFiQ3JlYXRlTWVudUJ1dHRvbihtZW51QnV0dG9uKTsKfQoKLy9hYiB2YXJpYWJsZXMKbGV0IGFiSUQgPSB0aGF0LmFiOwpsZXQga2V5ID0gdGhhdC5rZXk7CmxldCB0YXJnZXQgPSB0aGF0LnRhcmdldDsKbGV0IHJldHVyblR5cGUgPSB0aGF0LnJldHVyblR5cGU7CmxldCBzdGF0ZSA9IHt9OwpsZXQgZm9ybWF0dGVkRmlsZSA9IHt9OwoKLy90aGlzIGxvZ2ljIGZvcm1hdHMgdGhlIHNwZWNpZmllZCBib3RzIGFuZCBwYWNrYWdlcyB0aGVtIGZvciBwdWJsaXNoaW5nCmlmICghQXJyYXkuaXNBcnJheSh0aGF0LmJvdCkpCnsKICAgIHRhcmdldCA9IHRoYXQuYm90Owp9CmVsc2UgaWYgKCF0YXJnZXQpCnsKICAgIHRhcmdldCA9IGdldEJvdHMoYnlNb2Qoe3NwYWNlOiAic2hhcmVkIiwgYWJJZ25vcmU6IG51bGx9KSk7CgogICAgaWYgKHRhcmdldC5sZW5ndGggPCAxKQogICAgewogICAgICAgIG9zLnRvYXN0KCJObyBib3RzIGZvdW5kIHRvIHB1Ymxpc2giKTsKCiAgICAgICAgc2hvdXQoImFiTWVudVJlZnJlc2giKTsKCiAgICAgICAgbGlua3MubWFuaWZlc3RhdGlvbi5hYkNsaWNrKCk7CgogICAgICAgIHJldHVybjsKICAgIH0KfQoKLy90aGlzIGxvZ2ljIGhhbmRsZXMgZ2VuZXJhdGluZyBhIGtleSBmb3IgZW5jcnlwdGlvbiAob3B0aW9uYWwpCmlmIChjb25maWdCb3QudGFncy5lbmNyeXB0aW9uKQp7CiAgICBsZXQga2V5Q2hlY2s7CgogICAgY29uZmlnQm90LnRhZ3MuZW5jcnlwdGlvbiA9IG51bGw7CgogICAga2V5ID0gYXdhaXQgb3Muc2hvd0lucHV0KCIiLCB7CiAgICAgICAgdHlwZTogJ3NlY3JldCcsCiAgICAgICAgdGl0bGU6ICdlbnRlciBhIHNlY3JldCBrZXknCiAgICB9KTsKCiAgICBpZiAoa2V5KQogICAgewogICAgICAgIGtleUNoZWNrID0gYXdhaXQgb3Muc2hvd0lucHV0KCIiLCB7CiAgICAgICAgICAgIHR5cGU6ICdzZWNyZXQnLAogICAgICAgICAgICB0aXRsZTogJ2NvbmZpcm0gc2VjcmV0IGtleScKICAgICAgICB9KTsKICAgIH0KCiAgICBpZiAoa2V5ICE9IGtleUNoZWNrKSB7CiAgICAgICAgaWYgKCFrZXlDaGVjaykKICAgICAgICB7CiAgICAgICAgICAgIG9zLnRvYXN0KCJubyBrZXkgZW50ZXJlZCIpOwogICAgICAgIH0KICAgICAgICBlbHNlCiAgICAgICAgewogICAgICAgICAgICBvcy50b2FzdCgia2V5cyBkbyBub3QgbWF0Y2giKTsKICAgICAgICB9CgogICAgICAgIHNob3V0KCJhYk1lbnVSZWZyZXNoIik7CgogICAgICAgIGxpbmtzLm1hbmlmZXN0YXRpb24uYWJDbGljaygpOwoKICAgICAgICByZXR1cm47CiAgICB9Cn0KCi8vZm9ybWF0dGluZyBib3RzIGZvciBmaWxlIHN0b3JhZ2UKaWYgKEFycmF5LmlzQXJyYXkodGFyZ2V0KSkgCnsKICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdGFyZ2V0Lmxlbmd0aDsgaSsrKSB7CiAgICAgICAgbGV0IGN1cnJlbnRCb3RJRCA9IHRhcmdldFtpXS5pZDsKICAgICAgICBsZXQgY3VycmVudEJvdCA9IHRhcmdldFtpXTsKICAgICAgICAKICAgICAgICBzdGF0ZVtjdXJyZW50Qm90SURdID0gY3VycmVudEJvdDsKICAgIH0KfQplbHNlIAp7CiAgICBzdGF0ZVt0YXJnZXQuaWRdID0gdGFyZ2V0Owp9CgovL2NoZWNrcyBmb3IgcHJldmlvdXMgZWdncyBhbmQgcmV0dXJucyBkYXRhIGZvciBwcmV2aW91c2x5IHB1Ymxpc2hlZCBhYidzCmxldCBlZ2dDaGVjayA9IGF3YWl0IHRoaXNCb3QuYWJQcmV2aW91c0VnZ0NoZWNrKHthYklEOiBhYklEfSk7CgovL2FkZGl0aW9uYWwgZmlsZSBkYXRhCmZvcm1hdHRlZEZpbGUudmVyc2lvbiA9IDE7CmZvcm1hdHRlZEZpbGUuc2lnbmF0dXJlID0gZWdnQ2hlY2suc2lnbmF0dXJlOwpmb3JtYXR0ZWRGaWxlLnN0YXRlID0gc3RhdGU7CgovL2FjdHVhbCBlbmNyeXB0aW9uIGlmIGNob3NlbgppZiAoa2V5KSAKewogICAgZm9ybWF0dGVkRmlsZSA9IEpTT04uc3RyaW5naWZ5KGZvcm1hdHRlZEZpbGUpOwoKICAgIGZvcm1hdHRlZEZpbGUgPSBjcnlwdG8uZW5jcnlwdChrZXksIGZvcm1hdHRlZEZpbGUpOwp9CgovL3B1Ymxpc2ggdGhlIGZpbGUKbGV0IHB1Ymxpc2hGaWxlID0gYXdhaXQgdGhpc0JvdC5hYlB1Ymxpc2hGaWxlKHtmaWxlOiBmb3JtYXR0ZWRGaWxlLCBmaWxlTmFtZTogYWJJRH0pOwoKLy9nYXRoZXIgYWRkaW9uYWwgZWdnIGRhdGEKZWdnQ2hlY2suZWdnRGF0YS5lZ2dWZXJzaW9uSGlzdG9yeS5wdXNoKHB1Ymxpc2hGaWxlLnVybCk7CmVnZ0NoZWNrLmVnZ0RhdGEubWF4VmVyc2lvbiA9IGVnZ0NoZWNrLmVnZ0RhdGEuZWdnVmVyc2lvbkhpc3RvcnkubGVuZ3RoOwplZ2dDaGVjay5lZ2dEYXRhLnRhcmdldFZlcnNpb24gPSBlZ2dDaGVjay5lZ2dEYXRhLmVnZ1ZlcnNpb25IaXN0b3J5Lmxlbmd0aDsKCi8vcHVibGlzaCBlZ2cvYWIgcmVjb3JkCmxldCBwdWJsaXNoUmVjb3JkID0gYXdhaXQgdGhpc0JvdC5hYlB1Ymxpc2hSZWNvcmQoe2RhdGE6IGVnZ0NoZWNrLmVnZ0RhdGEsIHJlY29yZE5hbWU6IGFiSUR9KTsKbGV0IHNpdGVPcmlnaW4gPSBuZXcgVVJMKGNvbmZpZ0JvdC50YWdzLnVybCkub3JpZ2luOwoKLy9wdWJsaXNoaW5nIHNob3V0CnNob3V0KCJvbkFCUHVibGlzaGVkIiwge3N1Y2Nlc3M6IHB1Ymxpc2hGaWxlLnN1Y2Nlc3MsIGFiOiBhYklELCBmaWxlQWRkcmVzczogcHVibGlzaEZpbGUudXJsfSkKCi8vc2VuZCBkYXRhIGFuZCBmb3JtYXQgdXJsIGlmIGRhdGEgc3VjY2Vzc2Z1bGx5IHNlbnQKaWYgKHB1Ymxpc2hSZWNvcmQuc3VjY2VzcykKewogICAgbGV0IGdpZ0FCID0gY29uZmlnQm90LnRhZ3MuYWIgfHwgY29uZmlnQm90LnRhZ3MuYXV0b0xvYWQgfHwgY29uZmlnQm90LnRhZ3MuYXV4Q29kZTsKICAgIGxldCBnaWdLZXkgPSBnaWdBQiA/IGdpZ0FCLnN1YnN0cmluZyg3KSA6ICJub25lIjsKICAgIGxldCBnaWdGb3JtYXQgPSAiY29sbGFiXyI7CiAgICBsZXQgZ2lnRm9ybWF0Q2hlY2sgPSBhYklELmluY2x1ZGVzKGdpZ0Zvcm1hdCk7CgogICAgaWYgKGdpZ0Zvcm1hdENoZWNrICYmIGtleSA9PSBnaWdLZXkgJiYga2V5KSAKICAgIHsKICAgICAgICBsZXQgY29sbGFiVVJMID0gc2l0ZU9yaWdpbiArICIvP2FiPSIgKyBhYklEICsgIiZrZXk9IiArIGtleTsKCiAgICAgICAgc2hvdXQoImFiU3VibWl0Q29sbGFiIiwgeyB1cmw6IGNvbGxhYlVSTCB9KQogICAgfQogICAgZWxzZSBpZiAoa2V5ICYmIGNvbmZpZ0JvdC50YWdzLm1hbnVhbFB1Ymxpc2gpIAogICAgewogICAgICAgIG9zLnNldENsaXBib2FyZChzaXRlT3JpZ2luICsgIi8/YWI9IiArIGFiSUQgKyAiJmtleT0iICsga2V5KTsKCiAgICAgICAgb3MudG9hc3QoInVybCBjb3BpZWQgdG8gY2xpcGJvYXJkIik7CiAgICB9CiAgICBlbHNlIGlmIChjb25maWdCb3QudGFncy5tYW51YWxQdWJsaXNoKQogICAgewogICAgICAgIG9zLnNldENsaXBib2FyZChzaXRlT3JpZ2luICsgIi8/YWI9IiArIGFiSUQpOwoKICAgICAgICBvcy50b2FzdCgidXJsIGNvcGllZCB0byBjbGlwYm9hcmQiKTsKICAgIH0KCiAgICBpZiAoa2V5KSAKICAgIHsKICAgICAgICB3ZWJob29rLnBvc3QoImh0dHBzOi8vcW5oY2EyczdpYy5leGVjdXRlLWFwaS51cy1lYXN0LTEuYW1hem9uYXdzLmNvbS9zbGFjay9UMDI5QVA0Q1EvQjAxS05UQjgyMDEvZ0NPUGxxUUhzUlAzdEJLOVBZSEpCbU5wIiwgeyAidGV4dCI6IGBQUklWQVRFICR7YWJJRH0gdiR7ZWdnQ2hlY2suZWdnRGF0YS5lZ2dWZXJzaW9uSGlzdG9yeS5sZW5ndGh9IHJlY29yZCAke3B1Ymxpc2hGaWxlLnNoYTI1Nkhhc2h9YCB9LCBgT3JpZ2luOiAke3NpdGVPcmlnaW59YCk7CiAgICB9CiAgICBlbHNlIAogICAgewogICAgICAgIHdlYmhvb2sucG9zdCgiaHR0cHM6Ly9xbmhjYTJzN2ljLmV4ZWN1dGUtYXBpLnVzLWVhc3QtMS5hbWF6b25hd3MuY29tL3NsYWNrL1QwMjlBUDRDUS9CMDFLTlRCODIwMS9nQ09QbHFRSHNSUDN0Qks5UFlISkJtTnAiLCB7ICJ0ZXh0IjogYCR7YWJJRH0gdiR7ZWdnQ2hlY2suZWdnRGF0YS5lZ2dWZXJzaW9uSGlzdG9yeS5sZW5ndGh9IHJlY29yZCAke3B1Ymxpc2hGaWxlLnNoYTI1Nkhhc2h9YCB9LCBgT3JpZ2luOiAke3NpdGVPcmlnaW59YCk7CiAgICB9CgogICAgdHJ5IAogICAgewogICAgICAgIGF3YWl0IGFuYWx5dGljcy5yZWNvcmRFdmVudCgnYWJfZWdnX3B1Ymxpc2gnLCB7IGFiOiBhYklELCB2ZXJzaW9uOiBlZ2dDaGVjay5lZ2dEYXRhLmVnZ1ZlcnNpb25IaXN0b3J5Lmxlbmd0aCB9KTsKICAgIH0KICAgIGNhdGNoIChlKSAKICAgIHsKICAgICAgICBjb25zb2xlLmxvZyhlKTsKICAgIH0KfQplbHNlCnsKICAgIGNvbnNvbGUubG9nKHB1Ymxpc2hSZWNvcmQpOwp9CgovL2NsZWFyIHByb2dyZXNzIGJhcgppZiAocHJvZ3Jlc3NCdXR0b24pCnsKICAgIGRlc3Ryb3kocHJvZ3Jlc3NCdXR0b24pOwp9Cgpjb25maWdCb3QudGFncy5tYW51YWxQdWJsaXNoID0gbnVsbDsKCnJldHVybiBwdWJsaXNoUmVjb3JkOycAt5HOvgqbSwhhYklnbm9yZQIEALeRzr4K7rYBBHRydWUnALeRzr4Km0sKYWJEb3dubG9hZAIEALeRzr4K87YByANALy9kb3dubG9hZCBib3RzIChlaXRoZXIgc2VsZWN0ZWQgb3IgYWxsIGV4cGVyaWVuY2UpCmxldCBkb3dubG9hZEJvdHM7CgppZiAobGlua3MucmVtZW1iZXIubGlua3MuYWJCb3RGb2N1cykKewogICAgZG93bmxvYWRCb3RzID0gW2xpbmtzLnJlbWVtYmVyLmxpbmtzLmFiQm90Rm9jdXNdOwoKICAgIGFiLmxvZygiZG93bmxvYWRpbmcgYm90Iik7Cn0KZWxzZQp7CiAgICBkb3dubG9hZEJvdHMgPSBnZXRCb3RzKGJ5TW9kKHsiYWJJZ25vcmUiOiBudWxsLCAic3BhY2UiOiAic2hhcmVkIn0pKTsKCiAgICBhYi5sb2coImRvd25sb2FkaW5nIGluc3QiKTsKfQoKbGV0IGN1cnJlbnRJbnN0ID0gb3MuZ2V0Q3VycmVudEluc3QoKTsKCm9zLmRvd25sb2FkQm90cyhkb3dubG9hZEJvdHMsIGN1cnJlbnRJbnN0KTsKCnNob3V0KCJhYk1lbnVSZWZyZXNoIik7CgpsaW5rcy5tYW5pZmVzdGF0aW9uLmFiQ2xpY2soKTsnALeRzr4Km0sNbWFuaWZlc3RhdGlvbgIEALeRzr4KvLoBKPCflJdkY2E1ZDk4Ny1jNGQ4LTQ2ZTQtYjYwYy1kYWE3YjJmNGRkYWQnALeRzr4Km0sEbWVudQIEALeRzr4K47oBKPCflJdiMzBjNmM1ZC1hNGY3LTQyNjYtYmEzOC0zOTNkYzk1ZTFlY2InALeRzr4Km0sSYWJQcmV2aW91c0VnZ0NoZWNrAgQAt5HOvgqKuwHhDUAvL3RoaXMgZnVuY3Rpb24gY2hlY2tzIGZvciBwcmV2aW91cyBlZ2dzIGF0IGEgc3BlY2lmaWVkIGFiLCByZXR1cm5pbmcgYW55IGRhdGEgdGhhdCBpdCBmaW5kcwpjb25zdCBhYklEID0gdGhhdC5hYklEOwoKbGV0IGVnZ0hpc3Rvcnk7CmxldCBlZ2dJRDsKbGV0IHRhcmdldFZlcnNpb25OdW07CmxldCBsYXN0SGFzaDsKbGV0IG1heFZlcnNpb25OdW07CmxldCByZWNvcmRMb29rdXAgPSBhd2FpdCBvcy5nZXREYXRhKGxpbmtzLnJlbWVtYmVyLnRhZ3MuYWJSZWNvcmRLZXksIGFiSUQsICJodHRwczovL3B1YmxpY29zLmxpbmsvIikuY2F0Y2goZSA9PiB7fSk7CgppZiAocmVjb3JkTG9va3VwLnN1Y2Nlc3MpIAp7CiAgICBlZ2dIaXN0b3J5ID0gcmVjb3JkTG9va3VwLmRhdGEuZWdnVmVyc2lvbkhpc3Rvcnk7CiAgICBlZ2dJRCA9IHJlY29yZExvb2t1cC5kYXRhLmVnZ0lEOwogICAgdGFyZ2V0VmVyc2lvbk51bSA9IGVnZ0hpc3RvcnkubGVuZ3RoICsgMTsKICAgIGxhc3RIYXNoID0gZWdnSGlzdG9yeVt0YXJnZXRWZXJzaW9uTnVtIC0gMV07CiAgICBtYXhWZXJzaW9uTnVtID0gZWdnSGlzdG9yeS5sZW5ndGggKyAxOwp9IAplbHNlIAp7CiAgICBlZ2dIaXN0b3J5ID0gW107CiAgICBlZ2dJRCA9IHV1aWQoKTsKICAgIHRhcmdldFZlcnNpb25OdW0gPSAxOwogICAgbGFzdEhhc2ggPSAibm9uZSI7CiAgICBtYXhWZXJzaW9uTnVtID0gMTsKfQoKaWYgKGNvbmZpZ0JvdC50YWdzLnZlcnNpb25EZWZpbmVkKSAKewogICAgY29uc3QgZGVmaW5lZFZlcnNpb24gPSBhd2FpdCBvcy5zaG93SW5wdXQobWF4VmVyc2lvbk51bSwgewogICAgICAgIHRpdGxlOiAnc2V0IGRlZmF1bHQgdmVyc2lvbicsCiAgICAgICAgcGxhY2Vob2xkZXI6IGAxIHRvICR7bWF4VmVyc2lvbk51bX0gKGxlYXZlIGFzICR7bWF4VmVyc2lvbk51bX0gZm9yIGxhdGVzdClgCiAgICB9KTsKCiAgICB0YXJnZXRWZXJzaW9uTnVtID0gZGVmaW5lZFZlcnNpb247CiAgICBjb25maWdCb3QudGFncy52ZXJzaW9uRGVmaW5lZCA9IG51bGw7Cn0KZWxzZSBpZiAoY29uZmlnQm90LnRhZ3MudGFyZ2V0VmVyc2lvbikgCnsKICAgIHRhcmdldFZlcnNpb25OdW0gPSBjb25maWdCb3QudGFncy50YXJnZXRWZXJzaW9uOwogICAgY29uZmlnQm90LnRhZ3MudGFyZ2V0VmVyc2lvbiA9IG51bGw7Cn0KCmxldCBlZ2cgPSB7fTsKCmVnZy5lZ2dWZXJzaW9uSGlzdG9yeSA9IGVnZ0hpc3Rvcnk7CmVnZy5lZ2dGb3JtYXRWZXJzaW9uID0gZWdnSUQ7CmVnZy50YXJnZXRWZXJzaW9uID0gdGFyZ2V0VmVyc2lvbk51bTsKZWdnLm1heFZlcnNpb24gPSBtYXhWZXJzaW9uTnVtOwplZ2cubGFiZWwgPSAidiIrdGFyZ2V0VmVyc2lvbk51bTsKZWdnLmFiSUQgPSBhYklEOwoKbGV0IHNpZ25hdHVyZSA9IHt9OwpsZXQgZGF0ZSA9IG5ldyBEYXRlKCk7CmxldCB0aW1lID0gZGF0ZS5nZXRUaW1lKCk7CgpzaWduYXR1cmUucHJldmlvdXNIYXNoID0gbGFzdEhhc2g7CnNpZ25hdHVyZS5hYlZlcnNpb24gPSBsaW5rcy5yZW1lbWJlci50YWdzLmFiQ29yZVZlcnNpb24rIi4iK2xpbmtzLnJlbWVtYmVyLnRhZ3MuYWJDb3JlSXRlcmF0aW9uOwpzaWduYXR1cmUuZWdnVmVyc2lvbiA9IHRhZ3MuZWdnVVVJRDsKc2lnbmF0dXJlLmVnZ1ZlcnNpb25OdW0gPSB0YWdzLm92b1ZlcnNpb247CnNpZ25hdHVyZS50aW1lU3RhbXAgPSB0aW1lOwpzaWduYXR1cmUuY2FzdWFsT1NWZXJzaW9uID0gW29zLnZlcnNpb24oKV07CgpyZXR1cm4ge3NpZ25hdHVyZTogc2lnbmF0dXJlLCBlZ2dEYXRhOiBlZ2d9OygAt5HOvgqbSwxhYkJvdFZlcnNpb24BfTInALeRzr4Km0sPYWJCb3RNZW51QWN0aW9uAgQAt5HOvgrtyAExQC8vc2V0IHVwIHRoZSBwdWJsaXNoIG1lbnUKdGhpc0JvdC5vblN0b3JlTWVudSgpOycAt5HOvgqbSw5hYkJvdE1lbnVMYWJlbAIEALeRzr4Kn8kBBXNoYXJlJwC3kc6+CptLDWFiQm90TWVudUljb24CBAC3kc6+CqXJAQlpb3Nfc2hhcmUnALeRzr4Km0sSYWJCb3RNZW51U29ydE9yZGVyAgQAt5HOvgqvyQEBMycAt5HOvgqbSwVsZWFybgIEALeRzr4KsckBKPCflJc2NjU3Yjg2NS1lOTgzLTQ0MDEtOWZjOS1mNTQxOGQxOGE3ZjcnALeRzr4Km0sNYWJQdWJsaXNoVVVBQgIEALeRzr4K2MkB5w9AY29uZmlnQm90LnRhZ3MudXVhYlNjYW4gPSBudWxsOwoKbGV0IHV1YWJDb25maWcgPSBhd2FpdCBsaW5rcy5zZWFyY2gub25Mb29rdXBBQkVnZ3Moe2FiSUQ6IGNvbmZpZ0JvdC50YWdzLnV1YWIsIHJldHVyblR5cGU6ICJkYXRhIn0pOwoKbGV0IHBpbiA9IGF3YWl0IG9zLnNob3dJbnB1dChudWxsLHsKICAgIHRpdGxlOiAiZW50ZXIgcGluIiwKICAgIHR5cGU6ICJzZWNyZXQiCn0pOwoKaWYgKHBpbikKewogICAgbGV0IHBoID0gY3J5cHRvLnNoYTI1NihwaW4pLnN1YnN0cmluZygwLDQpOwoKICAgIGlmIChwaCA9PSBjb25maWdCb3QudGFncy5waCkKICAgIHsKICAgICAgICBsZXQgcmVjb3JkS2V5OwogICAgICAgIGxldCBlZ2dEYXRhQ2hlY2s7CiAgICAgICAgbGV0IGVnZ0RhdGE7CgogICAgICAgIGZvciAodGFnIGluIHV1YWJDb25maWcuc3RhdGUpCiAgICAgICAgewogICAgICAgICAgICBpZiAodGFnKQogICAgICAgICAgICB7CiAgICAgICAgICAgICAgICByZWNvcmRLZXkgPSB1dWFiQ29uZmlnLnN0YXRlW3RhZ10udGFncy5yZWNvcmRLZXk7CiAgICAgICAgICAgIH0KICAgICAgICB9CgogICAgICAgIGlmICh0aGF0KQogICAgICAgIHsKICAgICAgICAgICAgZWdnRGF0YUNoZWNrID0gYXdhaXQgb3MuZ2V0RGF0YShyZWNvcmRLZXksIHRoYXQudGFyZ2V0UmVjb3JkLCBsaW5rcy5yZW1lbWJlci50YWdzLmFiRW5kcG9pbnQpOwoKICAgICAgICAgICAgaWYgKGVnZ0RhdGFDaGVjay5zdWNjZXNzKQogICAgICAgICAgICB7CiAgICAgICAgICAgICAgICBpZiAoZWdnRGF0YUNoZWNrLmRhdGEuZWdncykKICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICB0cnkKICAgICAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgICAgIGVnZ0RhdGEgPSBKU09OLnBhcnNlKGVnZ0RhdGFDaGVjay5kYXRhLmVnZ3MpOwoKICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGVnZ0RhdGEubGVuZ3RoID49IDEyKQogICAgICAgICAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBvcy50b2FzdCgicHJhY3RpY2UgcGVybWl0IGZ1bGwiKTsKCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzaG91dCgiYWJSZWZyZXNoIik7CgogICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuOwogICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgIGNhdGNoCiAgICAgICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmxvZygiZWdnIGRhdGEgbm90IHJlYWRhYmxlIik7CgogICAgICAgICAgICAgICAgICAgICAgICBlZ2dEYXRhID0gW107CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgfSAKICAgICAgICAgICAgfQogICAgICAgIH0KCiAgICAgICAgbGlua3MucmVtZW1iZXIubWFza3MuYWJSZWNvcmRLZXkgPSByZWNvcmRLZXk7CgogICAgICAgIGNvbmZpZ0JvdC50YWdzLm1hbnVhbFB1Ymxpc2ggPSB0cnVlOwoKICAgICAgICB0aGlzQm90LmFiUHVibGlzaEFCKHthYjogY29uZmlnQm90LnRhZ3MuYWIsIGtleTogY29uZmlnQm90LnRhZ3Mua2V5fSk7CgogICAgICAgIGVnZ0RhdGEucHVzaChjb25maWdCb3QudGFncy5hYik7CgogICAgICAgIGVnZ0RhdGFUb1B1Ymxpc2ggPSB7ZWdnczogSlNPTi5zdHJpbmdpZnkoZWdnRGF0YSl9OwoKICAgICAgICBhd2FpdCBvcy5yZWNvcmREYXRhKHJlY29yZEtleSwgdGhhdC50YXJnZXRSZWNvcmQsIGVnZ0RhdGFUb1B1Ymxpc2gsIGxpbmtzLnJlbWVtYmVyLnRhZ3MuYWJFbmRwb2ludCk7CiAgICB9CiAgICBlbHNlCiAgICB7CiAgICAgICAgYXdhaXQgb3MudG9hc3QoInBpbiBkb2VzIG5vdCBtYXRjaCIsIDIpOwoKICAgICAgICBzaG91dCgiYWJSZWZyZXNoIik7CiAgICB9Cn0KZWxzZQp7CiAgICBhd2FpdCBvcy50b2FzdCgibm8gcGluIGdpdmVuIiwgMik7CgogICAgc2hvdXQoImFiUmVmcmVzaCIpOwoKICAgIHJldHVybgp9JwC3kc6+CptLC2FiUVJQdWJsaXNoAgQAt5HOvgrA2QHvBEBjb25maWdCb3QudGFncy5wdWJsaXNoU2NhbiA9IG51bGw7CgpsZXQgc2Nhbm5lZFVSTDsKCnRyeSAKewogICAgc2Nhbm5lZFVSTCA9IG5ldyBVUkwodGhhdCk7Cn0KY2F0Y2ggKGUpIHsKICAgIHNob3V0KCJhYlB1Ymxpc2hBQiIsIHthYjogdGhhdH0pOwoKICAgIHRoaXNCb3QuYWJQdWJsaXNoQUIoe2FiOiB0aGF0fSk7CgogICAgcmV0dXJuOwp9CgppZiAoc2Nhbm5lZFVSTC5zZWFyY2hQYXJhbXMuZ2V0KCJwaCIpKSAKewogICAgbGV0IHRhcmdldFJlY29yZCA9IHNjYW5uZWRVUkwuc2VhcmNoUGFyYW1zLmdldCgiaW5zdCIpOwoKICAgIGNvbmZpZ0JvdC50YWdzLnV1YWIgPSBzY2FubmVkVVJMLnNlYXJjaFBhcmFtcy5nZXQoImFiIik7CiAgICBjb25maWdCb3QudGFncy5waCA9IHNjYW5uZWRVUkwuc2VhcmNoUGFyYW1zLmdldCgicGgiKTsKICAgIGNvbmZpZ0JvdC50YWdzLmFiID0gdXVpZCgpOwogICAgY29uZmlnQm90LnRhZ3Mua2V5ID0gc2Nhbm5lZFVSTC5zZWFyY2hQYXJhbXMuZ2V0KCJwaCIpOwoKICAgIHRoaXNCb3QuYWJQdWJsaXNoVVVBQih7dGFyZ2V0UmVjb3JkOiB0YXJnZXRSZWNvcmR9KTsKfQplbHNlIAp7CiAgICBvcy50b2FzdCgidW5zdXBwb3J0ZWQgdXJsIGZvcm1hdCIpOwp9JwC3kc6+CptLBnNlYXJjaAIEALeRzr4KsN4BKPCflJdkODM3MTQ0NC05MTU4LTQ0MzYtOGZjNy04NGNjOTFiN2Y1MjUnAQRib3RzJGQ4MzcxNDQ0LTkxNTgtNDQzNi04ZmM3LTg0Y2M5MWI3ZjUyNQEnALeRzr4K194BBnN5c3RlbQIEALeRzr4K2N4BDmFiLmNvcmUuc2VhcmNoJwC3kc6+CtfeAQRmb3JtAgQAt5HOvgrn3gEHbm90aGluZycAt5HOvgrX3gEGYWJDb3JlAgQAt5HOvgrv3gEEdHJ1ZScAt5HOvgrX3gEOYWJSZXRyaWV2ZUZpbGUCBAC3kc6+CvTeAYIBQC8vcHVsbCBkb3duIGZpbGUgZGF0YQppZiAoIXRoYXQudXJsKQp7CiAgICByZXR1cm4gIm5vIGZpbGUgdXJsIHN1cHBsaWVkIjsKfQoKbGV0IGRhdGEgPSBhd2FpdCBvcy5nZXRGaWxlKHRoYXQudXJsKTsKCnJldHVybiBkYXRhOycAt5HOvgrX3gEQYWJSZXRyaWV2ZVJlY29yZAIEALeRzr4K998BhANALy9yZXRyaWV2ZSBzcGVjaWZpZWQgcmVjb3JkCmxldCByZWNvcmROYW1lID0gdGhhdC5yZWNvcmROYW1lOwpsZXQgcmVjb3JkS2V5ID0gdGhhdC5yZWNvcmRLZXkgPyB0aGF0LnJlY29yZEtleSA6IGxpbmtzLnJlbWVtYmVyLnRhZ3MuYWJSZWNvcmRLZXk7CmxldCByZWNvcmRFbmRwb2ludCA9IHRoYXQucmVjb3JkRW5kcG9pbnQgPyB0aGF0LnJlY29yZEVuZHBvaW50IDogImh0dHBzOi8vcHVibGljb3MubGluayI7CgppZiAoIXJlY29yZE5hbWUpCnsKICAgIHJldHVybiAibm8gcmVjb3JkIG5hbWUgc3VwcGxpZWQiOwp9CgpsZXQgZ2V0UmVjb3JkID0gYXdhaXQgb3MuZ2V0RGF0YShyZWNvcmRLZXksIHJlY29yZE5hbWUsIHJlY29yZEVuZHBvaW50KTsKCnJldHVybiBnZXRSZWNvcmQ7JwC3kc6+CtfeAQhyZW1lbWJlcgIEALeRzr4K/OIBKPCflJdlNTM4MGE2Yi04YjRkLTRhOGItOGIwNC01OGUxZWIwM2U1ZTcnALeRzr4K194BDW1hbmlmZXN0YXRpb24CBAC3kc6+CqPjASjwn5SXZGNhNWQ5ODctYzRkOC00NmU0LWI2MGMtZGFhN2IyZjRkZGFkJwC3kc6+CtfeAQ5vbkxvb2t1cEFCRWdncwIEALeRzr4KyuMBlyBALy9zaG91dCgib25Mb29rdXBBQkVnZ3MiLCB7YWJJRDogYWJJRCwga2V5OiBrZXksIGF1dG9IYXRjaDogYm9vbGVhbiwgcmV0dXJuVHlwZTogZGF0YS9udWxsfSk7CmFiLmxvZygiYWIgYWIgbG9hZCAiICsgdGhhdCk7CgovL2NsZWFyIGFiLTEKaWYgKGxpbmtzLm1hbmlmZXN0YXRpb24pCnsKICAgIGxpbmtzLm1hbmlmZXN0YXRpb24uYWJDbGljaygpOwp9CgovL2NvbnN0YW50cyBpbiByZWdhcmRzIHRvIHRoZSBhYiB0byBiZSBsb29rZWQgdXAKY29uc3QgYWJJRCA9IHRoYXQuYWJJRDsKY29uc3QgaW5pdGlhbEJvb3QgPSB0aGF0LmluaXRpYWxCb290Owpjb25zdCBhdXRvSGF0Y2ggPSB0aGF0LmF1dG9IYXRjaDsKY29uc3QgZ2V0UmVjb3JkID0gYXdhaXQgb3MuZ2V0RGF0YShsaW5rcy5yZW1lbWJlci50YWdzLmFiUmVjb3JkS2V5LCBhYklELCBsaW5rcy5yZW1lbWJlci50YWdzLmFiRW5kcG9pbnQpOwoKLy92YXJpYWJsZXMgZm9yIGVnZy9hYiBoYXRjaGluZwpsZXQgcmV0dXJuVHlwZSA9IHRoYXQucmV0dXJuVHlwZTsKbGV0IGtleSA9IHRoYXQua2V5OwpsZXQgbmV3RWdnOwoKLy90aGlzIGxvZ2ljIGhhbmRsZXMgdGhlIHJldHJpZXZlZCBkYXRhLCBzZWFyY2hlcyBhZ2FpbiBpZiBub25lIGNhbWUgdGhyb3VnLCBvciBzZXRzIHVwIGEgY29sbGFiIGZvciBnaWdzCmlmICghZ2V0UmVjb3JkLnN1Y2Nlc3MgJiYgY29uZmlnQm90LnRhZ3MuZ2lnKQp7CiAgICAvL2dyYWIgdGhlIGNvbGxhYiBib3QgaWYgbm9uZSBleGlzdHMKICAgIGxldCBjb2xsYWJCb3QgPSBnZXRCb3QoImFiSURPcmlnaW4iLCAiY29sbGFiU2V0dXAiKTsKCiAgICBpZiAoIWNvbGxhYkJvdCkKICAgIHsKICAgICAgICB0aGlzQm90Lm9uTG9va3VwQUJFZ2dzKHthYklEOiAiY29sbGFiU2V0dXAiLCBhdXRvSGF0Y2g6IHRydWV9KTsKICAgIH0KfQplbHNlIGlmICghZ2V0UmVjb3JkLnN1Y2Nlc3MpCnsKICAgIC8vY2hlY2sgb2xkIHN5c3RlbXMgZm9yIHRoZSByZWNvcmQvZmlsZQogICAgY29uc29sZS5sb2coZ2V0UmVjb3JkLCAiY2hlY2tpbmcgb2xkIFNUTSIpOwoKICAgIGxldCBmaWxlbmFtZWhhc2ggPSBjcnlwdG8uc2hhMjU2KGFiSUQpOwogICAgbGV0IGZpbGV1cmxoYXNoID0gImF1eF8iICsgZmlsZW5hbWVoYXNoICsgJy5hdXgnOwogICAgbGV0IHRhcmdldFVSTCA9ICJodHRwczovL2J1aWxkZXItc3RtLWZpbGVzLnMzLmFtYXpvbmF3cy5jb20vIiArIGZpbGV1cmxoYXNoOwogICAgbGV0IG8gPSB7fTsKICAgIG8ubWV0aG9kID0gIkdFVCI7CiAgICBvLnVybCA9IHRhcmdldFVSTDsKCiAgICB0cnkgCiAgICB7CiAgICAgICAgbGV0IGx0bVJlc3BvbnNlID0gYXdhaXQgd2ViaG9vayhvKTsKCiAgICAgICAgbmV3RWdnID0gbHRtUmVzcG9uc2UuZGF0YS5zdGF0ZTsKCiAgICAgICAgZm9yIChjb25zdCBwcm9wZXJ0eSBpbiBuZXdFZ2cpCiAgICAgICAgewogICAgICAgICAgICBjb25zdCBuZXdNT0QgPSBuZXdFZ2dbcHJvcGVydHldOwoKICAgICAgICAgICAgbmV3RWdnID0gbmV3TU9EOwogICAgICAgIH0KICAgIH0gCiAgICBjYXRjaCAoZSkgCiAgICB7CgogICAgICAgIG9zLnRvYXN0KGBubyBkYXRhIGZvdW5kIGluICR7YWJJRH1gKTsKCiAgICAgICAgc2hvdXQoImFiTWVudVJlZnJlc2giKTsKCiAgICAgICAgY29uc29sZS5sb2coZSk7CiAgICAgICAgcmV0dXJuICJhYklEIG5vdCBmb3VuZCI7CiAgICB9Cn0KZWxzZQp7CiAgICAvL3BhY2thZ2UgdGhlIHJlY29yZCBkYXRhCiAgICBuZXdFZ2cgPSBnZXRSZWNvcmQuZGF0YTsKfQoKLy90aGlzIGxvZ2ljIHBhcnNlcyB0aGUgZGF0YSBkZXBlbmRhbnQgb24gaG93IGl0IHdhcyBhY2Nlc3NlZC9nYWluZWQKaWYgKHJldHVyblR5cGUgPT0gImRhdGEiICYmIGdldFJlY29yZC5zdWNjZXNzKQp7CiAgICBsZXQgdmVyc2lvbiA9IGdldFJlY29yZC5kYXRhLnRhcmdldFZlcnNpb24gLSAxOwoKICAgIGlmICh0aGF0LmFiVmVyc2lvbikKICAgIHsKICAgICAgICBpZiAoIWlzTmFOKHRoYXQuYWJWZXJzaW9uKSkKICAgICAgICB7CiAgICAgICAgICAgIHZlcnNpb24gPSB0aGF0LmFiVmVyc2lvbiAtIDE7CiAgICAgICAgfQogICAgfQoKICAgIGxldCBlZ2dEYXRhVVJMID0gZ2V0UmVjb3JkLmRhdGEuZWdnVmVyc2lvbkhpc3RvcnlbdmVyc2lvbl07CiAgICBsZXQgcmV0dXJuRGF0YSA9IGF3YWl0IG9zLmdldEZpbGUoZWdnRGF0YVVSTCk7CgogICAgcmV0dXJuIHJldHVybkRhdGE7Cn0KZWxzZSBpZiAocmV0dXJuVHlwZSA9PSAiZGF0YSIpCnsKICAgIGxldCB2ZXJzaW9uQXJyYXkgPSBKU09OLnBhcnNlKG5ld0VnZy5lZ2dWZXJzaW9uSGlzdG9yeSk7CiAgICBsZXQgZmlsZVVVSUQgPSB2ZXJzaW9uQXJyYXlbbmV3RWdnLm1heFZlcnNpb24gLSAxXTsKICAgIGxldCBmaWxlbmFtZWhhc2hMVE0gPSBjcnlwdG8uc2hhMjU2KGZpbGVVVUlEKTsKICAgIGxldCBmaWxldXJsaGFzaExUTSA9ICJhdXhfIiArIGZpbGVuYW1laGFzaExUTSArICcuYXV4JzsKICAgIGxldCB0YXJnZXRMVE1VUkwgPSAiaHR0cHM6Ly9idWlsZGVyLWx0bS1maWxlcy5zMy5hbWF6b25hd3MuY29tLyIgKyBmaWxldXJsaGFzaExUTTsKICAgIGxldCBvID0ge307CiAgICBvLm1ldGhvZCA9ICJHRVQiOwogICAgby51cmwgPSB0YXJnZXRMVE1VUkw7CgogICAgZmlsZUdldCA9IGF3YWl0IHdlYmhvb2sobyk7CgogICAgaWYgKGZpbGVHZXQuc3RhdHVzICE9IDIwMCkKICAgIHsKICAgICAgICBvcy50b2FzdCgibm8gZmlsZSBmb3VuZCIpOwoKICAgICAgICBzaG91dCgiYWJSZWZyZXNoIik7CgogICAgICAgIHJldHVybjsKICAgIH0KICAgIGVsc2UKICAgIHsKICAgICAgICBmaWxlR2V0ID0gZmlsZUdldC5kYXRhOwogICAgfQoKICAgIHJldHVybiBmaWxlR2V0Owp9CgovL2FiIHNwZWNpZmljIHZhcmlhYmxlcyBmb3IgdW5kZXJzdGFuZGluZyBpZiBhIHBvc2l0aW9uIGlzIHNwZWNpZmllZApsZXQgY3VycmVudERpbTsKbGV0IHNwYWNlTW9kOwpsZXQgZGltZW5zaW9uWDsKbGV0IGRpbWVuc2lvblk7CmxldCBkaW1Nb2Q7CgovL2hhbmRsZSBkaW1lbnNpb24gaWRlbnRpZmljYXRpb24KaWYgKGxpbmtzLm1hbmlmZXN0YXRpb24pCnsKICAgIGlmIChsaW5rcy5tYW5pZmVzdGF0aW9uLmxpbmtzLmFiQm90KQogICAgewogICAgICAgIGNvbnN0IGFiQm90ID0gbGlua3MubWFuaWZlc3RhdGlvbi5saW5rcy5hYkJvdDsKCiAgICAgICAgY3VycmVudERpbSA9IGFiQm90LnRhZ3MuZGltZW5zaW9uOwogICAgfQp9CmVsc2UKewogICAgY3VycmVudERpbSA9IG9zLmdldEN1cnJlbnREaW1lbnNpb24oKTsKfQoKLy9jaGVja3MgZm9yIGdyaWQgZm9jdXMKaWYgKCFsaW5rcy5yZW1lbWJlci50YWdzLmFiR3JpZEZvY3VzKSAKewogICAgZGltZW5zaW9uWCA9IG51bGw7CiAgICBkaW1lbnNpb25ZID0gbnVsbDsKfQplbHNlCnsKICAgIGxldCBoYXRjaFBvaW50ID0gbGlua3MucmVtZW1iZXIudGFncy5hYkdyaWRGb2N1czsKCiAgICBjdXJyZW50RGltID0gaGF0Y2hQb2ludC5kaW1lbnNpb247CiAgICBkaW1lbnNpb25YID0gaGF0Y2hQb2ludC5wb3NpdGlvbi54OwogICAgZGltZW5zaW9uWSA9IGhhdGNoUG9pbnQucG9zaXRpb24ueTsKICAgIHNwYWNlTW9kID0ge3NwYWNlOiAic2hhcmVkIn07Cn0KCi8vdGhpcyBsb2dpYyBoYW5kbGVzIGxvZ2ljIGFyb3VuZCBhdXRvSGF0Y2ggdnMgbWFudWFsIGhhdGNoaW5nCmlmICghYXV0b0hhdGNoICYmIGNvbmZpZ0JvdC50YWdzLmFiID09IG51bGwpCnsKICAgIGRpbU1vZCA9IHtbY3VycmVudERpbV06IHRydWUsIFtjdXJyZW50RGltKyJYIl06IGRpbWVuc2lvblgsIFtjdXJyZW50RGltKyJZIl06IGRpbWVuc2lvblksIGRpbWVuc2lvbjogY3VycmVudERpbX07Cn0KZWxzZQp7CiAgICBpZiAoY29uZmlnQm90LnRhZ3Mua2V5ICYmICF0aGF0LmtleSkKICAgIHsKICAgICAgICBrZXkgPSBjb25maWdCb3QudGFncy5rZXkKICAgIH0KCiAgICBkaW1Nb2QgPSB7YXV0b0hhdGNoOiB0cnVlLCBrZXk6IGtleX07Cn0KCi8vY2FsbCBmb3Igb3ZvIHdpdGggaW5mb3JtYXRpb24gcHJvdmlkZWQKdGhpc0JvdC5tYW5pZmVzdE92byh7YWJJRDogYWJJRCwgZGltTW9kOiBkaW1Nb2QsIHNwYWNlTW9kOiBzcGFjZU1vZCwgZWdnRGF0YTogbmV3RWdnLCBpbml0aWFsQm9vdDogaW5pdGlhbEJvb3R9KTsnALeRzr4K194BC21hbmlmZXN0T3ZvAgQAt5HOvgrigwLnCkAvL2VnZyB2aXN1YWxpemF0aW9uCnNob3V0KCJhYk1lbnVSZXNldCIpOwoKaWYgKGxpbmtzLm1hbmlmZXN0YXRpb24pCnsKICAgIGlmIChsaW5rcy5tYW5pZmVzdGF0aW9uLmxpbmtzLmFiQm90KQogICAgewogICAgICAgIGRlc3Ryb3kobGlua3MubWFuaWZlc3RhdGlvbi5saW5rcy5hYkJvdCk7CiAgICB9Cn0KCmlmIChsaW5rcy5vdm9Cb3QpCnsKICAgIGRlc3Ryb3kobGlua3Mub3ZvQm90KTsKfQoKbGV0IHNwYWNlTW9kID0gdGhhdC5zcGFjZU1vZDsKbGV0IGRpbU1vZCA9IHRoYXQuZGltTW9kOwpsZXQgZWdnRGF0YSA9IHRoYXQuZWdnRGF0YTsKbGV0IGVnZ01vZCA9IHt9OwoKZWdnTW9kLnNwYWNlID0gInRlbXBMb2NhbCI7CmVnZ01vZC5pbml0aWFsVGltZXIgPSB0cnVlOwplZ2dNb2QuYWJJRCA9IHRoYXQuYWJJRDsKZWdnTW9kLmluaXRpYWxCb290ID0gdGhhdC5pbml0aWFsQm9vdDsKZWdnTW9kLm1hbmFnZXIgPSAi8J+UlyIgKyB0aGlzQm90LmlkOwplZ2dNb2Qub25DbGljayA9IGBAIGxpbmtzLm1hbmFnZXIuaW50ZXJhY3RPdm8oKTtgOwplZ2dNb2Qub25DcmVhdGUgPSBgQCBpZiAodGFncy5hdXRvSGF0Y2gpCnsKICAgIGxpbmtzLm1hbmFnZXIuaGF0Y2hPdm8odGhpc0JvdCk7Cn0KZWxzZQp7CiAgICB0YWdzLnByb2dyZXNzQmFyID0gMDsgCgogICAgc2V0VGltZW91dCgoKSA9PiB7d2hpc3Blcih0aGlzQm90LCAiZWdnVGltZXIiKTt9LCA3NSk7Cn1gOwplZ2dNb2QuZm9ybSA9ICJlZ2ciOwplZ2dNb2QucHJvZ3Jlc3NCYXJDb2xvciA9ICIjQkY1RTY2IjsKZWdnTW9kLnByb2dyZXNzQmFyQmFja2dyb3VuZENvbG9yID0gIiM1OTI5ODkiOwplZ2dNb2QubGFiZWxTaXplID0gMC41OwplZ2dNb2QubGFiZWxDb2xvciA9ICIjNDA0MDQwIjsKZWdnTW9kLm9uUG9pbnRlckVudGVyID0gIkAgb3MudG9hc3QodGFncy5hYklEICsgJyB2Jyt0YWdzLnRhcmdldFZlcnNpb24pOyI7CmVnZ01vZC5sYWJlbFBvc2l0aW9uID0gImZyb250IjsKZWdnTW9kLm9yaWVudGF0aW9uTW9kZSA9ICJiaWxsYm9hcmRGcm9udCI7CmVnZ01vZC5vbkRlc3Ryb3kgPSBgQCBsaW5rcy5tYW5hZ2VyLm1hc2tzLm92b0JvdCA9IG51bGw7YDsKZWdnTW9kLmVnZ1RpbWVyID0gYEAgaWYgKHRhZ3MucHJvZ3Jlc3NCYXIgPCAxKSAKewogICAgdGFncy5wcm9ncmVzc0JhciArPSAwLjE7CgogICAgc2V0VGltZW91dCgoKSA9PiB7d2hpc3Blcih0aGlzQm90LCAiZWdnVGltZXIiKTt9LCA3NSk7Cn0KZWxzZQp7CiAgICB0aGlzQm90Lm9uQ2xpY2soKTsKICAgIAogICAgdGFncy5wcm9ncmVzc0JhciA9IG51bGw7Cn1gOwoKbGV0IG92byA9IGNyZWF0ZShlZ2dEYXRhLCBlZ2dNb2QsIGRpbU1vZCwgc3BhY2VNb2QpOwoKbWFza3Mub3ZvQm90ID0gIvCflJciICsgb3ZvLmlkOycAt5HOvgrX3gEJb25LZXlEb3duAgQAt5HOvgrGjgLaBUAvL2hpZGRlbiB2ZXJzaW9uIGJ1dHRvbiBmb3IgaGF0Y2ggbWVudQppZiAoIWxpbmtzLm92b0JvdCB8fCBjb25maWdCb3QudGFncy5tZW51UG9ydGFsICE9ICJvdm8iKQp7CiAgICByZXR1cm47Cn0KCmlmICh0aGF0LmtleXMgPT0gIlNoaWZ0IikKewogICAgbGV0IHZlcnNpb25CdXR0b24gPSB7fTsKCiAgICB2ZXJzaW9uQnV0dG9uLm92byA9IHRydWU7CiAgICB2ZXJzaW9uQnV0dG9uLm92b1NvcnRPcmRlciA9IC0xOwogICAgdmVyc2lvbkJ1dHRvbi5tYXhWZXJzaW9uID0gbGlua3Mub3ZvQm90LnRhZ3MubWF4VmVyc2lvbjsKICAgIHZlcnNpb25CdXR0b24ubWFuYWdlciA9ICLwn5SXIiArIHRoaXNCb3QuaWQ7CiAgICB2ZXJzaW9uQnV0dG9uLmxhYmVsID0gImNoYW5nZSBlZ2cgdmVyc2lvbiI7CiAgICB2ZXJzaW9uQnV0dG9uLmxhYmVsQWxpZ25tZW50ID0gImNlbnRlciI7CiAgICB2ZXJzaW9uQnV0dG9uLm92b01lbnVSZXNldCA9ICJAIGRlc3Ryb3kodGhpc0JvdCk7IjsKICAgIHZlcnNpb25CdXR0b24uY29sb3IgPSAiI0ZGRkZGRiI7CiAgICB2ZXJzaW9uQnV0dG9uLm9uS2V5VXAgPSAiQCBpZih0aGF0LmtleXMgPT0gJ1NoaWZ0Jyl7ZGVzdHJveSh0aGlzQm90KX07IjsKICAgIHZlcnNpb25CdXR0b24ub25DbGljayA9ICJAIGxpbmtzLm1hbmFnZXIuY2hhbmdlT3ZvVmVyc2lvbigpOyI7CgogICAgbGlua3MubWVudS5hYkNyZWF0ZU1lbnVCdXR0b24odmVyc2lvbkJ1dHRvbik7Cn0nALeRzr4K194BCGhhdGNoT3ZvAgQAt5HOvgqflALqDkAvL2xvZ2ljIGZvciBoYXRjaGluZyBvZiBhbiBhYgpzaG91dCgnb3ZvTWVudVJlc2V0Jyk7CgovL2RhdGEgaW4gcmVnYXJkcyB0byB3aGF0IGFiIGlzIGdvaW5nIHRvIGJlIGhhdGNoZWQKY29uc3Qgb3ZvID0gdGhhdDsKCi8vaGF0Y2ggc3BlY2lmaWMgdmFyaWFibGVzCmxldCBpbml0aWFsQm9vdCA9IG92by50YWdzLmluaXRpYWxCb290OwpsZXQgdGFyZ2V0VmVyc2lvbiA9IGNvbmZpZ0JvdC50YWdzLmFiVmVyc2lvbiAmJiBjb25maWdCb3QudGFncy5hYiA9PSBvdm8udGFncy5hYklEID8gY29uZmlnQm90LnRhZ3MuYWJWZXJzaW9uIDogb3ZvLnRhZ3MudGFyZ2V0VmVyc2lvbjsKbGV0IHZlcnNpb25BcnJheSA9IG92by50YWdzLmVnZ1ZlcnNpb25IaXN0b3J5OwpsZXQgZmlsZVVSTCA9IHZlcnNpb25BcnJheVt0YXJnZXRWZXJzaW9uIC0gMV07CmxldCBrZXkgPSBvdm8udGFncy5rZXkgPyBvdm8udGFncy5rZXkgOiBjb25maWdCb3QudGFncy5rZXk7CmxldCBmaWxlR2V0OwoKLy9hY3R1YWwgZmlsZSByZXRyaWV2YWwKdHJ5CnsKICAgIGZpbGVHZXQgPSBhd2FpdCBvcy5nZXRGaWxlKGZpbGVVUkwpOwp9CmNhdGNoIChlcnJvcikKewogICAgLy9vbGQgc3lzdGVtIGNoZWNrCiAgICBjb25zb2xlLmxvZygiY2hlY2tpbmcgb2xkIExUTSIsIGVycm9yKTsKCiAgICB2ZXJzaW9uQXJyYXkgPSBKU09OLnBhcnNlKG92by50YWdzLmVnZ1ZlcnNpb25IaXN0b3J5KTsKCiAgICBsZXQgZmlsZVVVSUQgPSB2ZXJzaW9uQXJyYXlbb3ZvLnRhZ3MudGFyZ2V0VmVyc2lvbiAtIDFdOwogICAgbGV0IGZpbGVuYW1laGFzaCA9IGNyeXB0by5zaGEyNTYoZmlsZVVVSUQpOwogICAgbGV0IGZpbGV1cmxoYXNoID0gImF1eF8iICsgZmlsZW5hbWVoYXNoICsgJy5hdXgnOwogICAgbGV0IHRhcmdldFVSTCA9ICJodHRwczovL2J1aWxkZXItbHRtLWZpbGVzLnMzLmFtYXpvbmF3cy5jb20vIiArIGZpbGV1cmxoYXNoOwogICAgbGV0IG8gPSB7fTsKICAgIAogICAgby5tZXRob2QgPSAiR0VUIjsKICAgIG8udXJsID0gdGFyZ2V0VVJMOwoKICAgIGZpbGVHZXQgPSBhd2FpdCB3ZWJob29rKG8pOwoKICAgIGlmIChmaWxlR2V0LnN0YXR1cyAhPSAyMDApCiAgICB7CiAgICAgICAgb3MudG9hc3QoIm5vIGZpbGUgZm91bmQiKTsKCiAgICAgICAgcmV0dXJuOwogICAgfQogICAgZWxzZQogICAgewogICAgICAgIGZpbGVHZXQgPSBmaWxlR2V0LmRhdGE7CiAgICB9Cn0KCi8vaGFuZGxpbmcgZm9yIGVuY3J5cHRlZCBhYiBmaWxlCmlmIChjcnlwdG8uaXNFbmNyeXB0ZWQoZmlsZUdldCkpCnsKICAgIGlmICgha2V5KQogICAgewogICAgICAgIGtleSA9IGF3YWl0IG9zLnNob3dJbnB1dCgnJywgewogICAgICAgICAgICB0eXBlOiAnc2VjcmV0JywKICAgICAgICAgICAgdGl0bGU6ICdFbnRlciBrZXknCiAgICAgICAgfSk7CiAgICB9CgogICAgdHJ5CiAgICB7CiAgICAgICAgZmlsZUdldCA9IGNyeXB0by5kZWNyeXB0KGtleSwgZmlsZUdldCk7CiAgICB9CiAgICBjYXRjaCAoZXJyb3IpCiAgICB7CiAgICAgICAgY29uc29sZS5sb2coZXJyb3IpCgogICAgICAgIG9zLnRvYXN0KCJrZXkgZG9lcyBub3QgbWF0Y2ggZmlsZSIpOwoKICAgICAgICByZXR1cm47CiAgICB9CiAgIAogICAgZmlsZUdldCA9IEpTT04ucGFyc2UoZmlsZUdldCk7CgogICAgZmlsZUdldCA9IGZpbGVHZXQuc3RhdGU7Cn0KZWxzZQp7CiAgICBmaWxlR2V0ID0gZmlsZUdldC5zdGF0ZTsKfQoKLy9jbGVhbiB1cApkZXN0cm95KG92byk7CgovL2dlbmVyYXRlIGJvdHMgYmFzZWQgb24gdGhlIGZpbGUgcmV0cmlldmVkCmxpbmtzLmNyZWF0ZS5hYkNyZWF0ZUJvdHMoe2JvdHM6IGZpbGVHZXQsIG9yaWdpbjogb3ZvLnRhZ3MuYWJJRCwgdmVyc2lvbjogdGFyZ2V0VmVyc2lvbiwgaW5pdGlhbEJvb3Q6IGluaXRpYWxCb290fSk7JwC3kc6+CtfeAQtpbnRlcmFjdE92bwIEALeRzr4KiqMCjgdALy9tYW51YWwgaGF0Y2ggbWVudQpjb25zdCBvdm9Cb3QgPSB0aGF0ID8gdGhhdCA6IGxpbmtzLm92b0JvdDsKCmlmICghb3ZvQm90KQp7CiAgICByZXR1cm47Cn0KCnNob3V0KCJvdm9NZW51UmVzZXQiKTsKCmNvbmZpZ0JvdC5tYXNrcy5tZW51UG9ydGFsID0gIm92byI7CgptYXNrcy5vbkdyaWRDbGljayA9IGBAIHNob3V0KCJvdm9NZW51UmVzZXQiKTtgOwptYXNrcy5vdm9NZW51UmVzZXQgPSBgQCBtYXNrcy5vbkdyaWRDbGljayA9IG51bGw7Cm1hc2tzLm92b01lbnVSZXNldCA9IG51bGw7Cgpjb25maWdCb3QubWFza3MubWVudVBvcnRhbCA9IG51bGw7CmA7CgpsZXQgZWdnTWVudUJ1dHRvbiA9IHt9OwoKb3MudHdlZW5Ubyhvdm9Cb3QsIDE1LDQ1LDQ1LCA1KTsKCmVnZ01lbnVCdXR0b24ub3ZvID0gdHJ1ZTsKZWdnTWVudUJ1dHRvbi5tYW5hZ2VyID0gIvCflJciICsgdGhpc0JvdC5pZDsKZWdnTWVudUJ1dHRvbi5vdm9Cb3QgPSAi8J+UlyIgKyBvdm9Cb3QuaWQ7CmVnZ01lbnVCdXR0b24udGFyZ2V0VmVyc2lvbiA9IG92b0JvdC50YWdzLnRhcmdldFZlcnNpb247CmVnZ01lbnVCdXR0b24ubGFiZWwgPSAiaGF0Y2ggIiArIG92b0JvdC50YWdzLmFiSUQgKyAiIHYiICsgb3ZvQm90LnRhZ3MudGFyZ2V0VmVyc2lvbiArICIgb2YgIiArIG92b0JvdC50YWdzLm1heFZlcnNpb247CmVnZ01lbnVCdXR0b24ubGFiZWxBbGlnbm1lbnQgPSAiY2VudGVyIjsKZWdnTWVudUJ1dHRvbi5vdm9NZW51UmVzZXQgPSAiQCBkZXN0cm95KHRoaXNCb3QpOyI7CmVnZ01lbnVCdXR0b24uY29sb3IgPSAiI0ZGRkZGRiI7CmVnZ01lbnVCdXR0b24ub25DbGljayA9ICJAIGxpbmtzLm1hbmFnZXIuaGF0Y2hPdm8obGlua3Mub3ZvQm90KTsiOwoKbGlua3MubWVudS5hYkNyZWF0ZU1lbnVCdXR0b24oZWdnTWVudUJ1dHRvbik7JwC3kc6+CtfeAQZjcmVhdGUCBAC3kc6+CpWqAijwn5SXMzRjM2MyMTAtNWJmMS00OWNmLWIxNTEtZWUyZDA3ZjBlNjczJwC3kc6+CtfeAQthYkxUTVNlYXJjaAIEALeRzr4KvKoCM0AvL3N1cHBvcnQgb2xkIHN5bnRheAp0aGlzQm90Lm9uTG9va3VwQUJFZ2dzKHRoYXQpOycAt5HOvgrX3gEQY2hhbmdlT3ZvVmVyc2lvbgIEALeRzr4K8KoCygJALy9sb2dpYyBmb3IgdmVyc2lvbiBjaGFuZ2luZyB3aGVuIG1hbnVhbGx5IGhhdGNoaW5nIGFuIGFiCmNvbnN0IG92b0JvdCA9IGxpbmtzLm92b0JvdDsKCmxldCBuZXdWZXJzaW9uID0gYXdhaXQgb3Muc2hvd0lucHV0KG92b0JvdC50YWdzLnRhcmdldFZlcnNpb24sIHsKICAgIHBsYWNlaG9sZGVyOiAiZW50ZXIgYSB2ZXJzaW9uIGZyb20gMSB0byAiICsgb3ZvQm90LnRhZ3MubWF4VmVyc2lvbgp9KTsKCm92b0JvdC50YWdzLnRhcmdldFZlcnNpb24gPSBuZXdWZXJzaW9uOwpvdm9Cb3QudGFncy5sYWJlbCA9ICd2JysgbmV3VmVyc2lvbjsKCnNob3V0KCJvdm9NZW51UmVzZXQiKTsnALeRzr4K194BBG1lbnUCBAC3kc6+CrutAijwn5SXYjMwYzZjNWQtYTRmNy00MjY2LWJhMzgtMzkzZGM5NWUxZWNiJwC3kc6+CtfeAQhhYklnbm9yZQIEALeRzr4K4q0CBHRydWUoALeRzr4K194BDGFiQm90VmVyc2lvbgF9MicBBGJvdHMkZTUzODBhNmItOGI0ZC00YThiLThiMDQtNThlMWViMDNlNWU3AScAt5HOvgrorQIGc3lzdGVtAgQAt5HOvgrprQIQYWIuY29yZS5yZW1lbWJlcicAt5HOvgrorQIEZm9ybQIEALeRzr4K+q0CB25vdGhpbmcoALeRzr4K6K0CBmFiQ29yZQF4KAC3kc6+CuitAgxhYkF3YWtlU3RhdGUBeCcAt5HOvgrorQILZGVzY3JpcHRpb24CBAC3kc6+CoSuAitUaGlzIGlzIG1lYW50IHRvIGJlIHRoZSBsb2NhbCBzdGF0ZSBob2xkZXIuJwC3kc6+CuitAgthYlJlY29yZEtleQIEALeRzr4KsK4CLnZSSzEuWVdJdE1RPT0uTkhac1VHdG9ObUZHWTNGSmRqSlRNbXMxTkZscVVUMDknALeRzr4K6K0CEWFiQWN0aXZlRGltZW5zaW9uAgQAt5HOvgrfrgIEaG9tZScAt5HOvgrorQILYWJCYXNlQ29sb3ICBAC3kc6+CuSuAgcjOTA4QkZDKAC3kc6+CuitAg9hYkdyaWRTbmFwU3RhdGUBeCgAt5HOvgrorQIOYWJCb3RTbmFwU3RhdGUBeCcAt5HOvgrorQINYWJNZW51UmVmcmVzaAIEALeRzr4K7q4CM0AvL2NsZWFyIHRlbXBvcmFyeSB2YWlhYmxlcwpjbGVhclRhZ01hc2tzKHRoaXNCb3QpOygAt5HOvgrorQILaW5pdGlhbEJvb3QBeCcAt5HOvgrorQIKYWJFbmRwb2ludAIEALeRzr4Ko68CFmh0dHBzOi8vcHVibGljb3MubGluay8nALeRzr4K6K0CCGFiSWdub3JlAgQAt5HOvgq6rwIEdHJ1ZScAt5HOvgrorQINYWJDb3JlVmVyc2lvbgIEALeRzr4Kv68CATkoALeRzr4K6K0CDGFiQm90VmVyc2lvbgF9MigAt5HOvgrorQIPYWJDb3JlSXRlcmF0aW9uAX0yJwC3kc6+CuitAhlhYkxpc3RlbmluZ0ZvckZpbGVVcGxvYWRzAgQAt5HOvgrDrwIEdHJ1ZScAt5HOvgrorQIGYmFzZUFCAgQAt5HOvgrIrwIkMGJhZWI4MzQtMzFiOC00NjE4LTk3OTQtNTU4OWQxYjIyODE2JwC3kc6+CuitAhBwbGF5ZXJTa2lsbEFycmF5AgQAt5HOvgrtrwIG8J+nrFtdJwC3kc6+CuitAhFidWlsZGVyU2tpbGxBcnJheQIEALeRzr4K8q8CN/Cfp6xbImFiSW50ZXJmYWNlIiwgImFiRmFjdG9yeSIsICJhYkFjdGlvbiIsICJhYlRlc3RzIl0nALeRzr4K6K0CEWFiQnVpbGRlcklkZW50aXR5AgQAt5HOvgqosAIEYWItMScBBGJvdHMkZjg2MDI4NzgtYzJlZi00OGJkLTg1YTAtOGQ2MzUxZWI0MTIwAScAt5HOvgqtsAIGc3lzdGVtAgQAt5HOvgqusAINYWIuY29yZS5pbnB1dCcAt5HOvgqtsAIEZm9ybQIEALeRzr4KvLACB25vdGhpbmcnALeRzr4KrbACCW9uS2V5RG93bgIEALeRzr4KxLACakAvL2FsbG93IHB1bGxpbmcgdXAgY2hhdCBpbiBidWlsZGVyIHZlcnNpb24KaWYgKHRoYXQua2V5cyA9PSAiYCIgJiYgYnVpbGRlclZlcnNpb24pCnsKICAgIG9zLnNob3dDaGF0KCk7Cn0nALeRzr4KrbACBm9uQ2hhdAIEALeRzr4Kr7EC+xdALy9ub3Qgc3VwcG9ydGVkIG91dHNpZGUgb2YgYnVpbGRlciB2ZXJzaW9uCmlmICghYnVpbGRlclZlcnNpb24pCnsKICAgIHJldHVybjsKfQoKLy90aGlzIGxvb3AgaWRlbnRpZmllcyBwb3NzaWJsZSBhYiBzcGVjaWZpYyBtZXNzYWdlcywgYW5kIGNhbGxzIGEgc2V0IGxpc3Qgb2YgY29tbWFuZHMKaWYgKHRoYXQubWVzc2FnZVswXSA9PSAiLiIpIAp7CiAgICBvcy5oaWRlQ2hhdCgpOwoKICAgIHN3aXRjaCAodGhhdC5tZXNzYWdlKQogICAgewogICAgICAgIGNhc2UgJy5kb3dubG9hZEFCJzoKICAgICAgICAgICAgY2hhbmdlU3RhdGUobGlua3MubWFuaWZlc3RhdGlvbiwgIkFzbGVlcCIsICJhYk1hbmlmZXN0U3RhdGUiKTsKCiAgICAgICAgICAgIGNvbnN0IGdyb3VwID0gYXdhaXQgb3Muc2hvd0lucHV0KCJncm91cCIpOwoKICAgICAgICAgICAgaWYgKGdyb3VwID09ICJhYkNvcmUiKQogICAgICAgICAgICB7CiAgICAgICAgICAgICAgICBsaW5rcy5yZW1lbWJlci50YWdzLmFiQ29yZUl0ZXJhdGlvbisrOwogICAgICAgICAgICAgICAgbGlua3MucmVtZW1iZXIudGFncy5pbml0aWFsQm9vdCA9IHRydWU7CiAgICAgICAgICAgICAgICBsaW5rcy5yZW1lbWJlci50YWdzLmNvcmVBQiA9IG51bGw7CiAgICAgICAgICAgICAgICBsaW5rcy5yZW1lbWJlci50YWdzLmhvc3RJRCA9IG51bGw7CiAgICAgICAgICAgIH0KCiAgICAgICAgICAgIGNvbnN0IGFiR3JvdXAgPSBnZXRCb3RzKGdyb3VwKTsKCiAgICAgICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgYWJHcm91cC5sZW5ndGg7IGkrKykKICAgICAgICAgICAgewogICAgICAgICAgICAgICAgYWJHcm91cFtpXS50YWdzLmFiQm90VmVyc2lvbisrOwogICAgICAgICAgICB9CiAgICAgICAgICAgIAogICAgICAgICAgICBvcy5kb3dubG9hZEJvdHNBc0luaXRpYWx6YXRpb25VcGRhdGUoYWJHcm91cCwgZ3JvdXApOwogICAgICAgICAgICBicmVhazsKICAgICAgICBjYXNlIGAubG9hZFNraWxsYDoKICAgICAgICAgICAgbGV0IHNraWxsID0gYXdhaXQgb3Muc2hvd0lucHV0KCJza2lsbCIpOwoKICAgICAgICAgICAgbGlua3MubGVhcm4uYWJBZGFwdChza2lsbCk7CiAgICAgICAgICAgIGJyZWFrOwogICAgICAgIGNhc2UgYC5zeXN0ZW1gOgogICAgICAgICAgICBjb25maWdCb3QudGFncy5zeXN0ZW1Qb3J0YWwgPSB0cnVlOwoKICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgY2FzZSBgLnNoZWV0YDoKICAgICAgICAgICAgY29uZmlnQm90LnRhZ3Muc2hlZXRQb3J0YWwgPSAhY29uZmlnQm90LnRhZ3MubWFwUG9ydGFsID8gY29uZmlnQm90LnRhZ3MuZ3JpZFBvcnRhbCA6IGNvbmZpZ0JvdC50YWdzLm1hcFBvcnRhbDsKCiAgICAgICAgICAgIGJyZWFrOwogICAgICAgIGNhc2UgYC5tZW51U2hlZXRgOgogICAgICAgICAgICBjb25maWdCb3QudGFncy5zaGVldFBvcnRhbCA9IGNvbmZpZ0JvdC50YWdzLm1lbnVQb3J0YWw7CgogICAgICAgICAgICBicmVhazsKICAgICAgICBjYXNlIGAuZG93bmxvYWRgOgogICAgICAgICAgICBvcy5kb3dubG9hZEJvdHMoZ2V0Qm90cyhieU1vZCh7c3BhY2U6ICJzaGFyZWQiLCBhYklnbm9yZTogbnVsbH0pKSk7CgogICAgICAgICAgICBicmVhazsKICAgICAgICBjYXNlIGAudXBsb2FkYDoKICAgICAgICAgICAgb3Muc2hvd1VwbG9hZEF1eEZpbGUoKTsKCiAgICAgICAgICAgIGJyZWFrOwogICAgICAgIGNhc2UgYC5zbGVlcGA6CiAgICAgICAgICAgIGNoYW5nZVN0YXRlKGxpbmtzLm1hbmlmZXN0YXRpb24sICJBc2xlZXAiLCAiYWJNYW5pZmVzdFN0YXRlIik7CgogICAgICAgICAgICBicmVhazsKICAgICAgICBjYXNlIGAuLmA6CiAgICAgICAgICAgIGNoYW5nZVN0YXRlKGxpbmtzLm1hbmlmZXN0YXRpb24sICJBd2FrZSIsICJhYk1hbmlmZXN0U3RhdGUiKTsKCiAgICAgICAgICAgIGF3YWl0IHRoaXNCb3QuYWJBZGFwdCgiYWJJbnRlcmZhY2UiKTsKCiAgICAgICAgICAgIGJyZWFrOwogICAgICAgIGNhc2UgJy5sb2cnOgogICAgICAgICAgICBpZiAoY29uZmlnQm90LnRhZ3MudGFnUG9ydGFsID09IGFiLmlkICsgIi5hYkxvZyIpCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgIGNvbmZpZ0JvdC5tYXNrcy50YWdQb3J0YWwgPSBudWxsOwogICAgICAgICAgICAgICAgY29uZmlnQm90Lm1hc2tzLnRhZ1BvcnRhbFNwYWNlID0gbnVsbDsKCiAgICAgICAgICAgICAgICB0YWdQb3J0YWxCb3QubWFza3MudGFnUG9ydGFsQW5jaG9yUG9pbnQgPSBudWxsOwoKICAgICAgICAgICAgICAgIG9zLmhpZGVDaGF0KCk7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgZWxzZQogICAgICAgICAgICB7CiAgICAgICAgICAgICAgICBjb25maWdCb3QubWFza3MudGFnUG9ydGFsID0gYWIuaWQgKyAiLmFiTG9nIjsKICAgICAgICAgICAgICAgIGNvbmZpZ0JvdC5tYXNrcy50YWdQb3J0YWxTcGFjZSA9ICJ0ZW1wTG9jYWwiOwoKICAgICAgICAgICAgICAgIHRhZ1BvcnRhbEJvdC5tYXNrcy50YWdQb3J0YWxBbmNob3JQb2ludCA9ICJ0b3AiOwoKICAgICAgICAgICAgICAgIG9zLnNob3dDaGF0KCk7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgY2FzZSAnLmhpZGVMb2cnOgogICAgICAgICAgICBjb25maWdCb3QubWFza3MudGFnUG9ydGFsID0gbnVsbDsKICAgICAgICAgICAgY29uZmlnQm90Lm1hc2tzLnRhZ1BvcnRhbFNwYWNlID0gbnVsbDsKCiAgICAgICAgICAgIHRhZ1BvcnRhbEJvdC5tYXNrcy50YWdQb3J0YWxBbmNob3JQb2ludCA9IG51bGw7CgogICAgICAgICAgICBvcy5oaWRlQ2hhdCgpOwogICAgICAgICAgICBicmVhazsKICAgICAgICBkZWZhdWx0OgogICAgICAgICAgICBsZXQgbWVzc2FnZSA9IHRoYXQubWVzc2FnZTsKICAgICAgICAgICAgbGV0IGV4ZWN1dGFibGUgPSBtZXNzYWdlLnNsaWNlKDEpOwoKICAgICAgICAgICAgdHJ5CiAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgIG9zLnJ1bihleGVjdXRhYmxlKTsgIAogICAgICAgICAgICB9CiAgICAgICAgICAgIGNhdGNoIChlKQogICAgICAgICAgICB7CiAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhlKTsKICAgICAgICAgICAgfQogICAgfQp9KAC3kc6+Cq2wAgZhYkNvcmUBeCcAt5HOvgqtsAILZGVzY3JpcHRpb24CBAC3kc6+CqzJAkJUaGlzIGlzIG1lYW50IHRvIGhhbmRsZSBhbnkgbm9uZSBtZW51IHJlbGF0ZWQgaW5wdXRzL2ludGVyYWN0aW9ucy4nALeRzr4KrbACDG9uRmlsZVVwbG9hZAIEALeRzr4K78kC8xdALy9maWx0ZXIgb3V0IHRpbWVzIHdoZW4gZmlsZSBsb2FkaW5nIGlzIG5vdCBhbGxvd2VkCmlmICghYnVpbGRlclZlcnNpb24gfHwgbGlua3MucmVtZW1iZXIudGFncy5hYkxpc3RlbmluZ0ZvckZpbGVVcGxvYWRzICE9PSB0cnVlKQp7CiAgICByZXR1cm47Cn0KCi8vdmFyaW91cyBmaWxlIHNwZWNpZmljIHZhcmlhYmxlcwpsZXQgZmlsZUV4dGVuc2lvbiA9IHRoYXQuZmlsZS5uYW1lLnNwbGl0KCcuJykucG9wKCk7CmxldCBmaWxlTmFtZSA9IHRoYXQuZmlsZS5uYW1lLnNwbGl0KCcuJykuc2hpZnQoKTsKbGV0IHNpemUgPSB0aGF0LmZpbGUuc2l6ZTsKbGV0IG1pbWVUeXBlOwpsZXQgYm90SW5mbyA9IHt9OwoKLy9oYXJkIGxpbWl0IGJhc2VkIG9uIGZpbGUgc2l6ZQppZiAoc2l6ZSA+IDIwMDAwMDAwMCkKewogIG9zLnRvYXN0KCJtYXhpbXVtIGZpbGUgc2l6ZSBleGNlZWRlZCAoMjAwIG1iKSIpOwoKICByZXR1cm47Cn0KCi8vdGhpcyBzd2l0Y2ggaGFuZGxlcyBwb3NzaWJsZSBmaWxlcyBleHRlbnNpb25zLCB3aGlsZSByZWplY3RpbmcgYW55IGl0IGRvZXMgbm90IHJlY29nbml6ZQpzd2l0Y2goZmlsZUV4dGVuc2lvbikKewogIGNhc2UgJ2pwZyc6CiAgY2FzZSAnanBlZyc6CiAgY2FzZSAnd2VicCc6CiAgY2FzZSAnZ2lmJzoKICBjYXNlICdwbmcnOgogICAgbWltZVR5cGUgPSAiaW1hZ2UvIiArIGZpbGVFeHRlbnNpb247CiAgICBib3RJbmZvLmZvcm0gPSAic3ByaXRlIjsKICAgIGJyZWFrOwogIGNhc2UgJ3N2Zyc6CiAgICBtaW1lVHlwZSA9ICJpbWFnZS9zdmcreG1sIjsKICAgIGJvdEluZm8uZm9ybSA9ICJzcHJpdGUiOwogICAgYnJlYWs7CiAgY2FzZSAnZ2xiJzoKICBjYXNlICdnbHRmJzoKICAgIG1pbWVUeXBlID0gInRleHQveG1sIjsKICAgIGJvdEluZm8uZm9ybSA9ICJtZXNoIjsKICAgIGJvdEluZm8uZm9ybVN1YnR5cGUgPSAiZ2x0ZiI7CiAgICBicmVhazsKICBjYXNlICdhdXgnOgogIGNhc2UgJ3BkZic6CiAgICBsZXQgYm90RGF0YSA9IGZpbGVFeHRlbnNpb24gPT0gIi5hdXgiID8gSlNPTi5wYXJzZSh0aGF0LmZpbGUuZGF0YSkuc3RhdGUgOiBvcy5wYXJzZUJvdHNGcm9tRGF0YSh0aGF0LmZpbGUuZGF0YSk7CgogICAgbGlua3MuY3JlYXRlLmFiQ3JlYXRlQm90cyh7Ym90czogYm90RGF0YSwgb3JpZ2luOiBmaWxlTmFtZX0pOwoKICAgIHJldHVybjsKLy8gICBjYXNlICdwZGYnOgovLyAgICAgYnJlYWs7CiAgY2FzZSAnbXAzJzoKICAgIG1pbWVUeXBlID0gJ2F1ZGlvL21wZWcnOwogICAgYm90SW5mby5vbkNsaWNrID0gIkAgb3MucGxheVNvdW5kKHRhZ3MuZm9ybUFkZHJlc3MpOyI7CiAgICBib3RJbmZvLmxhYmVsID0gIkNsaWNrIHRvIFBsYXkiOwogICAgYnJlYWs7CiAgY2FzZSAnbXA0JzoKICAgIG1pbWVUeXBlID0gJ3ZpZGVvL21wNCc7CiAgICBib3RJbmZvLmZvcm0gPSAiaWZyYW1lIjsKICAgIGJvdEluZm8uZm9ybVN1YnR5cGUgPSAic3JjIjsKICAgIGJyZWFrOwogIGRlZmF1bHQ6CiAgICBsZXQgcmVzdWx0ID0gbmV3IEVycm9yKCJ1bmhhbmRsZWQgZmlsZSB0eXBlOiAiICsgZmlsZUV4dGVuc2lvbik7CiAgICBvcy50b2FzdCgiZmlsZSB0eXBlIG5vdCBzdXBwb3J0ZWQiKTsKICAgIGNvbnNvbGUud2FybihyZXN1bHQpCiAgICByZXR1cm4gcmVzdWx0Owp9CgovL3RoZSBmb2xsb3dpbmcgdmFyaWFibGVzIGFuZCBvYmplY3RzIHNldCB1cCBhIGxvYWRpbmcgYmFyIGJ1dHRvbgpjb25maWdCb3QubWFza3MubWVudVBvcnRhbCA9ICJhYk1lbnUiOwoKbGV0IHVwbG9hZFJlc3VsdDsKbGV0IG1lbnVCdXR0b24gPSB7fTsKCm1lbnVCdXR0b24uYWJNZW51ID0gdHJ1ZTsKbWVudUJ1dHRvbi50cmFja051bSA9IC0xOwptZW51QnV0dG9uLm9uQ3JlYXRlID0gYEAKICAgIGlmICh0YWdzLnRyYWNrTnVtID09IDIpCiAgICB7CiAgICAgICAgdGFncy50cmFja051bSA9IDA7CiAgICB9CiAgICBlbHNlCiAgICB7CiAgICAgICAgdGFncy50cmFja051bSsrOwogICAgfQoKICAgIHRhZ3MubGFiZWwgPSB0YWdzWyJsYWJlbCIrdGFncy50cmFja051bV07CiAgICB0YWdzLmZvcm1BZGRyZXNzID0gdGFnc1siZm9ybSIrdGFncy50cmFja051bV07CgogICAgc2V0VGltZW91dCgoKSA9PiB3aGlzcGVyKHRoaXNCb3QsICJvbkNyZWF0ZSIpLCA1MDApO2A7Cm1lbnVCdXR0b24ubGFiZWwwID0gInVwbG9hZGluZy4iOwptZW51QnV0dG9uLmxhYmVsMSA9ICJ1cGxvYWRpbmcuLiI7Cm1lbnVCdXR0b24ubGFiZWwyID0gInVwbG9hZGluZy4uLiI7Cm1lbnVCdXR0b24uZm9ybTAgPSAiaG91cmdsYXNzX2JvdHRvbSI7Cm1lbnVCdXR0b24uZm9ybTEgPSAiaG91cmdsYXNzX3RvcCI7Cm1lbnVCdXR0b24uZm9ybTIgPSAiaG91cmdsYXNzX2JvdHRvbSI7Cm1lbnVCdXR0b24uY29sb3IgPSAiIzkwOEJGQyI7Cm1lbnVCdXR0b24ub25EZXN0cm95ID0gIkAgY29uZmlnQm90Lm1hc2tzLm1lbnVQb3J0YWwgPSBudWxsOyI7Cgpwcm9ncmVzc0J1dHRvbiA9IGxpbmtzLm1lbnUuYWJDcmVhdGVNZW51QnV0dG9uKG1lbnVCdXR0b24pOwoKLy90aGlzIGlzIHRoZSBhY3R1YWwgdXBsb2FkIGZ1bmN0aW9uYWxpdHkKdXBsb2FkUmVzdWx0ID0gYXdhaXQgbGlua3Muc3RvcmUuYWJQdWJsaXNoRmlsZSh7ZmlsZTogdGhhdC5maWxlLmRhdGEsIGZpbGVOYW1lOiBmaWxlTmFtZSwgbWltZVR5cGU6IG1pbWVUeXBlfSk7CgovL2lmIHRoZSBmaWxlIHNob3VsZCBiZSBpbmNsdWRlZCBhcyBhIGJvdCB3aXRoIGEgbGluaywgdGhpcyBsb2dpYyBoYW5kbGVzIHRoYXQKaWYgKE9iamVjdC5rZXlzKGJvdEluZm8pLmxlbmd0aCA+IDApCnsKICAgIGJvdEluZm9bY29uZmlnQm90LnRhZ3MuZ3JpZFBvcnRhbF0gPSB0cnVlOwogICAgYm90SW5mby5mb3JtQWRkcmVzcyA9IHVwbG9hZFJlc3VsdC51cmwgPyB1cGxvYWRSZXN1bHQudXJsIDogdXBsb2FkUmVzdWx0LmV4aXN0aW5nRmlsZVVybDsKCiAgICBjcmVhdGUoYm90SW5mbyk7Cn0KCi8vY2xlYXIgdGhlIHByb2dyZXNzIGJhciBidXR0b24KY29uZmlnQm90Lm1hc2tzLm1lbnVQb3J0YWwgPSBudWxsOwoKZGVzdHJveShwcm9ncmVzc0J1dHRvbik7CgpyZXR1cm4gdXBsb2FkUmVzdWx0OycAt5HOvgqtsAIFbGVhcm4CBAC3kc6+CuPhAijwn5SXNjY1N2I4NjUtZTk4My00NDAxLTlmYzktZjU0MThkMThhN2Y3JwC3kc6+Cq2wAghyZW1lbWJlcgIEALeRzr4KiuICKPCflJdlNTM4MGE2Yi04YjRkLTRhOGItOGIwNC01OGUxZWIwM2U1ZTcnALeRzr4KrbACDW1hbmlmZXN0YXRpb24CBAC3kc6+CrHiAijwn5SXZGNhNWQ5ODctYzRkOC00NmU0LWI2MGMtZGFhN2IyZjRkZGFkJwC3kc6+Cq2wAghhYklnbm9yZQIEALeRzr4K2OICBHRydWUoALeRzr4KrbACDGFiQm90VmVyc2lvbgF9MicAt5HOvgqtsAIGY3JlYXRlAgQAt5HOvgre4gIo8J+UlzM0YzNjMjEwLTViZjEtNDljZi1iMTUxLWVlMmQwN2YwZTY3MycAt5HOvgqtsAIFc3RvcmUCBAC3kc6+CoXjAijwn5SXNzZhZjA0OTEtMzkxOS00OTg0LWFhODItMjJjNzQyZjQyNjNmJwC3kc6+Cq2wAgRtZW51AgQAt5HOvgqs4wIo8J+Ul2IzMGM2YzVkLWE0ZjctNDI2Ni1iYTM4LTM5M2RjOTVlMWVjYgA="}]}