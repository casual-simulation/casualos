{"version":1,"state":{"0886b19e-a831-41d6-90ad-eacbba0bbd3a":{"id":"0886b19e-a831-41d6-90ad-eacbba0bbd3a","space":"shared","tags":{"ab1":true,"scaleZ":"1.6","scaleY":"0.8","scaleX":"0.8","ab1UpdateID":"07901318-5cd0-4c69-996c-787f31987580","ab1SkillPositionCalculation":"@let skill = that.bots;\nlet sortedSkills = [];\n\nfor (let i = 0; i < skill.length; i++)\n{\n    let currentSkill = getBot(\"id\", skill[i].tags.originSkill);\n\n    if (skill[i].tags.weight)\n    {\n        var weightedSkill = {bot: skill[i], position: skill[i].tags.weight}\n    }\n    else\n    {\n        let xPos1 = tags.ab1X;\n        let yPos1 = tags.ab1Y;\n        let xPos2 = currentSkill.tags.ab1X;\n        let yPos2 = currentSkill.tags.ab1Y;\n        let distance = Math.round(Math.sqrt(Math.pow(xPos2-xPos1,2)+Math.pow(yPos2-yPos1,2)));\n        var weightedSkill = {bot: skill[i], position: distance};\n    }\n\n    sortedSkills.push(weightedSkill)\n}\n\nsortedSkills.sort((a, b) => a.position - b.position);\n\nreturn sortedSkills;","strokeColor":"orange","ab1MenuLabel":"learn","ab1ID":"learn","destroyable":false,"lineStyle":"line","lineColor":"#908BFC","color":"#20dcf5","onInstStreaming":"@whisper(this, \"onCreate\");","onPortalChanged":"@if ((that.portal == \"gridPortal\" || that.portal == \"miniGridPortal\") && getBot(\"ab1ID\", \"instMemory\").tags.ab1SleepState == false && that.dimension) {\n    if (that.dimension == \"ab1\") {\n        whisper(thisBot, \"ab1SkillNexus\", that);\n    }\n    else if (getBots(that.dimension).length < 1) {\n        shout(\"ab1Summon\", {\"type\": \"emptyDimension\", \"position\":that});\n    }\n}\n\nif (that.portal == \"systemPortal\" && configBot.tags.systemTagName == \"ab1Selection\" && that.dimension == null)\n{\n    configBot.tags.systemTagName = null;\n}","onCreate":"@console.log(\"ab-1 START UP\")\n\nsetTimeout(() => whisper(thisBot, \"ab1Boot\"), 500);","scale":1,"onAnyBotsAdded":"@let addedBots = that.bots;\n\nif (addedBots)\n{\n    for (let i = 0; i < addedBots.length; i++)\n    {\n        let currentBot = addedBots[i];\n\n        if (currentBot.tags.ab1Skill)\n        {\n            if (getBots(\"ab1ID\", currentBot.tags.ab1ID).length > 1)\n            {\n                destroy(currentBot);\n            }\n\n            //if hot loaded skill, activate that skill or action\n            if (configBot && !currentBot.tags.ab1ToolBoxSkill)\n            {\n                if (currentBot.tags.ab1Skill && configBot.tags.ab1Focus)\n                {\n                    let ab1Inst = configBot.tags.ab1Inst;\n\n                    shout(\"ab1Summon\", ab1Inst)\n\n                    setTagMask(ab1InstMemory, \"ab1Focus\", configBot.tags.ab1Focus);\n                    setTagMask(ab1InstMemory, \"ab1FocusData\", configBot.tags.ab1FocusData);\n\n                    configBot.tags.ab1Inst = null;\n                    configBot.tags.ab1Focus = null;\n                    configBot.tags.ab1FocusData = null;\n\n                    whisper(currentBot, ab1InstMemory.tags.ab1Focus);\n                }\n            }\n        }\n    }\n}","ab1Boot":"@globalThis.player = os;\nglobalThis.ovoNest = getBot(\"ab1ID\", \"ovo\");\nglobalThis.ab1AUXLoader = getBot(\"ab1ID\", \"auxLoader\");\nglobalThis.ab1InstMemory = getBot(\"ab1ID\", \"instMemory\");\nglobalThis.ab1LongTermMemory = getBot(\"ab1ID\", \"ltm\");\nglobalThis.ab1LongTermMemorySearch = getBot(\"ab1ID\", \"searchLTM\");\nglobalThis.ab1Command = getBot(\"ab1ID\", \"command\");\nglobalThis.ab1Publish = getBot(\"ab1ID\", \"publish\");\nglobalThis.ab1Librarian = getBot(\"ab1ID\", \"librarian\");\nglobalThis.ab1LocalMemory = ab1InstMemory;\nglobalThis.countdown = setInterval();\n\nlet bootFlag = configBot.tags.ab ? configBot.tags.ab : configBot.tags.autoLoad ? configBot.tags.autoLoad : configBot.tags.auxCode;\nlet ab1Flag = await os.version().playerMode;\nlet uuab = configBot.tags.uuab;\nlet currentInst = configBot.tags.inst;\n\nif (uuab && (uuab == currentInst))\n{\n    ab1InstMemory.tags.uuab = uuab;\n\n    bootFlag = uuab;\n}\n\nif (!bootFlag) \n{\n    if (configBot.tags.gridPortal == null && configBot.tags.sheetPortal == null && configBot.tags.mapPortal == null)\n    {\n        configBot.tags.gridPortal = \"home\";\n    }\n\n    let randomAB = uuid();\n\n    ab1InstMemory.tags.baseAB = randomAB;\n}\n\nif (bootFlag && ab1InstMemory.tags.baseAB == null) {\n    ab1InstMemory.tags.baseAB = bootFlag;\n\n    let hashCheck = RegExp(/aux_/);\n    let hashTest = hashCheck.test(bootFlag);\n\n    if (hashTest)\n    {\n        shout(\"ab1AUXFileImplement\", {hash: bootFlag});\n        return;\n    }\n\n    whisper(ab1LongTermMemorySearch, \"ab1LTMSearch\", {abID: bootFlag, autoHatch: true});\n}\n\nif (ab1Flag == \"builder\")\n{\n    shout(\"hatchAB1\");\n}","ab1SkillNexus":"@let skills = getBots(\"ab1Skill\");\nlet lineArray = [];\n\nfor (let i = 0; i < skills.length; i++)\n{\n    let currentSkill = '\"'+skills[i].id+'\"';\n    lineArray.push(currentSkill);\n}\n\nlet nexus = {};\n\nsetTagMask(thisBot, \"lineTo\", `ðŸ§¬ [${lineArray}]`);","ab1Skill":"true","ab1InitialLoad":"true","ab1Z":0,"ab1LoadSkill":"@const abID = that;\nconst actionType = ab1InstMemory.tags.ab1Focus;\nconst actionData = ab1InstMemory.tags.ab1FocusData;\nconst ab1 = getBot(\"ab1ID\", \"ab1\");\nconst ab1Dim  = ab1.tags.dimension;\n\nconfigBot.masks.ab1Inst = {dimension: ab1Dim, bot: {tags:{[ab1Dim+\"X\"]:ab1.tags[ab1Dim+\"X\"], [ab1Dim+\"Y\"]:ab1.tags[ab1Dim+\"Y\"]}}};\nconfigBot.masks.ab1Focus = actionType;\nconfigBot.masks.ab1FocusData = actionData;\n\nlet bootStrap = os.getAB1BootstrapURL();\n\nbootStrap = bootStrap.slice(0, bootStrap.length-7) + abID +\".aux\";\n\ntry\n{\n    const response = await webhook({\n        method: \"GET\",\n        url: bootStrap\n    });\n\n    if (response.status !== 200) {\n        console.log('[ab1 bootstrap] Could not download skill.');\n        return;\n    }\n\n    const dataOutput = response.data.state;\n    const newBots = [];\n\n    for (const property in dataOutput) {\n        const newBot = dataOutput[property];\n\n        if (newBot.space) {\n            let b = create(newBot.tags);\n            b.tags.creator = null;\n            newBots.push(b);\n        }\n        else {\n            console.log(\"skipped bot: \" + newBot);\n        }\n    }\n}\ncatch\n{\n    console.log('[ab1 bootstrap] Could not download skill.');\n}\n\nlet learn = getBot(\"ab1ID\", \"learn\");\nlet placeHolderArray = learn.tags.ab1SkillPlaceholderArray;\nlet otherArray = learn.tags.ab1SkillUsedArray;\n\nif (!otherArray)\n{\n    otherArray = [];\n}\n\nlet abIndex =  placeHolderArray.findIndex(ab => ab.abID == abID);\n\nif (abIndex > -1)\n{\n    let removedAB = placeHolderArray[abIndex];\n\n    otherArray.push(removedAB);\n\n    let updatedArray1 = placeHolderArray.slice(abIndex+1);\n    let updatedArray2 = placeHolderArray.slice(0, abIndex);\n    let updatedArray3 = updatedArray1.concat(updatedArray2);\n\n    learn.tags.ab1SkillPlaceholderArray = updatedArray3;\n    learn.tags.ab1SkillUsedArray = otherArray;\n}","ab1X":0,"ab1POV":"@let previousFrustum = getBot(\"frustumID\", configBot.id);\nlet currentDim = configBot.tags.gridPortal;\n\nif (previousFrustum)\n{\n    destroy(previousFrustum);\n}\nelse\n{\n    let frustumBot = {};\n \n    frustumBot.space = \"tempShared\";\n    frustumBot.frustumID = configBot.id;\n    frustumBot.form = \"frustum\";\n    frustumBot.pointable = false;\n    frustumBot.dimension = currentDim;\n    frustumBot[currentDim] = true;\n    frustumBot[currentDim+\"RotationX\"] = gridPortalBot.tags.cameraRotationX;\n    frustumBot[currentDim+\"RotationY\"] = gridPortalBot.tags.cameraRotationY;\n    frustumBot[currentDim+\"RotationZ\"] = gridPortalBot.tags.cameraRotationZ;\n    frustumBot[currentDim+\"X\"] = gridPortalBot.tags.cameraFocusX;\n    frustumBot[currentDim+\"Y\"] = gridPortalBot.tags.cameraFocusY;\n    frustumBot[currentDim+\"Z\"] = 80 / gridPortalBot.tags.cameraZoom;\n    frustumBot.onCreate = \"@ masks.interval = setInterval(() => whisper(thisBot, 'frustumUpdate'), 100);\";\n    frustumBot.onDestroy = \"@ clearInterval(tags.interval);\";\n    frustumBot.frustumUpdate = getBot(\"ab1ID\", \"learn\").tags.frustumUpdate;\n    frustumBot.onPortalChanged = `@ if (that.portal == 'gridPortal')\n    {\n        tags[tags.currentDim] = null;\n        tags[that.dimension] = true;\n        tags.dimension = that.dimension;\n    };`;\n\n    // let color = await os.showInput('white', {\n    //     type: 'color',\n    //     title: 'Enter a custom color'\n    // });\n\n    // frustumBot.color = color;\n\n    let newFrustum = create(frustumBot);\n\n    setTagMask(newFrustum, \"form\", \"none\");\n    setTagMask(newFrustum, \"color\", \"clear\");\n}\n\nshout(\"ab1Refresh\");","frustumUpdate":"@let currentDim = configBot.tags.gridPortal;\n\ntags.anchorPoint = [0, -3 * 80 / gridPortalBot.tags.cameraZoom, 0];\ntags[currentDim + \"RotationX\"] = gridPortalBot.tags.cameraRotationX;\ntags[currentDim + \"RotationY\"] = gridPortalBot.tags.cameraRotationY;\ntags[currentDim + \"RotationZ\"] = gridPortalBot.tags.cameraRotationZ;\ntags[currentDim + \"X\"] = gridPortalBot.tags.cameraFocusX;\ntags[currentDim + \"Y\"] = gridPortalBot.tags.cameraFocusY;\ntags[currentDim + \"Z\"] = 80 / gridPortalBot.tags.cameraZoom;","system":"ab1.manager.learn","ab1Y":0,"ab1SkillPlaceholderArray":[{"abID":"ab1Destroy","tags":{"ab1MenuLabelBotFocus":"destroy","weight":17,"ab1BotAction":true,"color":"#D66D5E","ab1Icon":"delete_outline"}},{"abID":"ab1ChangeColor","tags":{"ab1MenuLabelBotFocus":"color","weight":4,"ab1BotAction":true,"color":"#55E679","ab1Icon":"palette"}},{"abID":"ab1CreateNote","ab1BotActionDependencyTag":"ab1Note","tags":{"ab1MenuLabelBotFocus":"scale","ab1MenuLabelGridFocus":"note","weight":5,"ab1GridAction":true,"ab1BotAction":true,"color":"#55E679","ab1Icon":"sticky_note_2"}},{"abID":"ab1SharedEgg","ab1BotActionDependencyTag":"eggVersionHistory","tags":{"ab1MenuLabelBotFocus":"make stable","onMenuCreate":"@ let selectedBot = getBot('id', ab1InstMemory.tags.ab1FocusData); if(selectedBot.tags.space != 'tempLocal'){destroy(thisBot)};","weight":1,"ab1BotAction":true,"color":"#908BFC","ab1Icon":"egg"}},{"abID":"ab1Link","ab1BotActionDependencyTag":"ab1Note","tags":{"ab1MenuLabelBotFocus":"link","weight":16,"ab1BotAction":true,"ab1Icon":"add_link","color":"#55E679"}}]}},"179925b5-d199-4a6d-9d5d-e444c6cdfc6f":{"id":"179925b5-d199-4a6d-9d5d-e444c6cdfc6f","space":"shared","tags":{"system":"ab1.factory.manager","scaleX":"0.8","scaleY":"0.8","scaleZ":"1.6","color":"#55E679","strokeColor":"orange","ab1":true,"ab1Y":5,"ab1Z":0,"ab1ID":"factory","ab1Icon":"factory","ab1MenuLabel":"from factory","ab1Skill":"true","ab1UpdateID":"9ab8ddcf-e691-4112-af57-203b6661f88b","destroyable":false,"scale":"1","ab1BotAction":"@let currentDim = getBot(\"ab1ID\", \"ab1\").tags.dimension;\nlet selectedBot = getBot(\"id\", ab1InstMemory.tags.ab1FocusData);\n\nshout(\"ab1Refresh\");\n\nwhisper(getBot(\"ab1ID\", \"factory\"), \"ab1AddToFactory\", {dimension: currentDim, bot: selectedBot});","ab1GridAction":"@let toolBox = getBot(\"ab1ID\", \"createMod\");\n\nshout(\"ab1MenuReset\");\n\nif (!toolBox)\n{\n    shout(\"ab1LoadSkill\", \"ab1ToolBox\");\n\n    await os.sleep(500);\n}\n\nlet toolArray = getBot('ab1ID', 'factory').tags.toolBoxPrimitives; //{\"color\": \"#6250CC\", \"abID\": \"toolBox\", \"primitiveType\": \"palette\"},\nlet menuDim = os.getMenuDimension();\nlet menuButton = {};\n\nmenuButton.space = \"tempLocal\";\nmenuButton.ab1MenuButton = true;\nmenuButton[menuDim] = true;\nmenuButton.ab1MenuReset = \"@ destroy(thisBot);\";\nmenuButton.menuItemStyle = `ðŸ§¬ {\"border-radius\": \"9px 9px 9px 9px\", \"margin-top\": \"6px\"}`;\nmenuButton.ab1Click = \"@ destroy(thisBot);\";\nmenuButton.labelAlignment = \"left\";\nmenuButton.onClick = `@ whisper(getBot('ab1ID', tags.target), 'ab1ToolBoxAction');`;\n\nfor (let h = 0; h < toolArray.length; h++)\n{\n    let currentPrim = toolArray[h];\n\n    menuButton.color = currentPrim.color;\n    menuButton.target = currentPrim.abID;\n    menuButton.label = currentPrim.primitiveType;\n    menuButton.formAddress = currentPrim.icon;\n\n    create(menuButton);\n}\n\nmenuButton.onClick = `@ shout(\"ab1CreateFromFactory\", {factoryID: tags.label, position: ab1InstMemory.tags.ab1FocusData}); shout('ab1Refresh');`;\n\nlet factoryBots = getBots(\"ab1Factory\");\n\nif (factoryBots.length > 0)\n{ \n    for (let j = 0; j < factoryBots.length; j++)\n    {\n        let currentFactoryBot = factoryBots[j];\n        let currentSystemTag = currentFactoryBot.tags.system\n\n        menuButton.label = currentSystemTag.substring(12);\n        menuButton.color = currentFactoryBot.tags.color;\n        menuButton.formAddress = currentFactoryBot.tags.factoryIcon;\n\n        let newButton = create(menuButton);\n    }\n}","ab1MenuLabelBotFocus":"add to factory","ab1X":5,"auxCodeOrigin":"ab1Factory01","ab1AddToFactory":"@//shout(\"ab1AddToFactory\", {dimension: dimension, bot: bot, factoryID: factoryID});\nlet factoryID;\n\nif (that.factoryID)\n{\n    factoryID = that.factoryID;\n}\nelse\n{\n    factoryID = await os.showInput(null, {\n        title: 'Add factory id'\n    });\n}\n\nif (factoryID)\n{\n    let previousFactoryBot = getBot(\"system\", \"ab1.factory.\" + factoryID);\n    \n    if(previousFactoryBot)\n    {\n        destroy(previousFactoryBot);\n    }\n\n    let templateBot = that.bot;\n    let factoryMod = {};\n\n    factoryMod[that.dimension] = null;\n    factoryMod.system = \"ab1.factory.\" + factoryID;\n    factoryMod.listening = false;\n    factoryMod.ab1Factory = true;\n\n    create(templateBot, factoryMod);\n\n    os.toast(\"added \" + factoryID + \" to factory\");\n}","ab1CreateFromFactory":"@//shout(\"ab1CreateFromFactory\", {factoryID: \"factoryID\", position: {dimension: \"dimension\", x: \"x\", y: \"y\"}});\nlet fullName = \"ab1.factory.\" + that.factoryID;\nlet factoryTemplate = getMod(getBot('system', fullName));\nlet positionInfo = that.position;\n\nlet newBot = {}\n\nnewBot.creator = null;\nnewBot.ab1ID = null;\nnewBot.ab1InitialLoad = null;\nnewBot[positionInfo.dimension] = true;\nnewBot[positionInfo.dimension + \"X\"] = positionInfo.x;\nnewBot[positionInfo.dimension + \"Y\"] = positionInfo.y;\nnewBot.listening = null;\nnewBot.system = null;\nnewBot.ab1Factory = null;\n\ncreate(factoryTemplate, newBot);","onMenuCreate":null,"ab1InitialLoad":"true","toolBoxPrimitives":"ðŸ§¬[{\"color\": \"#7B64FF\", \"abID\": \"createPortal\", \"icon\": \"topic\", \"primitiveType\": \"portal\"}, \n{\"color\": \"#7B64FF\", \"abID\": \"createPad\", \"icon\": \"door_back\", \"primitiveType\": \"pad\"},\n{\"color\": \"gray\", \"abID\": \"createTrack\", \"icon\": \"timeline\", \"primitiveType\": \"track\"},\n{\"color\": \"white\", \"abID\": \"searchLTM\", \"icon\": \"egg\", \"primitiveType\": \"egg\"},\n{\"color\": \"#5E5880\", \"abID\": \"createMod\", \"icon\": \"helix\", \"primitiveType\": \"mod\"}\n]"}},"1cc79e6c-7963-4c2b-a5c5-d60b0f7abab4":{"id":"1cc79e6c-7963-4c2b-a5c5-d60b0f7abab4","space":"shared","tags":{"ab1":true,"ab1Y":2,"ab1Click":"@let ab1 = getBot(\"ab1ID\", \"ab1\");\nlet shiftCheck = os.getInputState(\"keyboard\", \"Shift\");\n\nif (shiftCheck && that)\n{\n  changeState(ab1, \"Open\", \"menuState\");\n\n  shout(\"ab1SelfSelect\");\n  \n  return;\n}\n\nif (ab1InstMemory.tags.ab1MenuState == true) \n{\n  shout(\"ab1Refresh\");\n  \n  configBot.tags.mode = null;\n}\nelse \n{\n  changeState(ab1, \"Open\", \"menuState\");\n\n  shout(\"ab1GenerateMenu\", {menu: ab1InstMemory.tags.ab1Focus, menuInfo: ab1InstMemory.tags.ab1FocusData});\n\n  setTagMask(ab1InstMemory, \"ab1MenuState\", true);\n}","ab1ID":"command","ab1MenuLabel":"command","ab1GenerateMenu":"@let buttonFunction = that.menu;\nlet skillBots = getBots(buttonFunction);\nlet possibleSkills = getBot(\"ab1ID\", \"learn\").tags.ab1SkillPlaceholderArray;\n\nfor (let h = 0; h < possibleSkills.length; h++)\n{\n    let currentPlaceholder = possibleSkills[h];\n\n    if (currentPlaceholder.tags[buttonFunction])\n    {\n        //Make sure we can filter out placeholders given the possiblities present\n        let botDependencyTag = currentPlaceholder[buttonFunction+\"DependencyTag\"];\n        let botDependencyValue = currentPlaceholder[buttonFunction+\"DependencyValue\"];\n\n        if (getBot(\"auxCodeOrigin\", currentPlaceholder.abID))//UPDATE THIS\n        {\n            continue;\n        }\n\n        if (buttonFunction == \"ab1BotAction\" && botDependencyTag)\n        {\n            let targetBot = getBot(\"id\", ab1InstMemory.tags.ab1FocusData);\n\n            if ((targetBot.tags[botDependencyTag] == botDependencyValue && botDependencyValue) || (targetBot.tags[botDependencyTag] && !botDependencyValue))\n            {\n                skillBots.push(currentPlaceholder);\n            }\n        }\n        else if (botDependencyTag)\n        {\n            let targetBot = getBot(botDependencyTag, botDependencyValue);\n\n            if (targetBot || (getBot(botDependencyTag) && !botDependencyValue))\n            {\n                skillBots.push(currentPlaceholder);\n            }\n        }\n        else\n        {\n            skillBots.push(currentPlaceholder);\n        }\n    }\n}\n\nconfigBot.masks.menuPortal = \"ab1Menu\";\n\nfor (let i = 0; i < skillBots.length; i++)\n{\n    let currentSkill = skillBots[i];\n    let menuButton = {};\n\n    menuButton.space = \"tempLocal\";\n    menuButton.ab1MenuButton = true;\n    menuButton.ab1MenuReset = \"@ destroy(thisBot);\";\n    menuButton.label = currentSkill.tags.ab1MenuLabel;\n    menuButton.color = currentSkill.tags.color;\n    menuButton.menuItemStyle = `ðŸ§¬ {\"border-radius\": \"9px 9px 9px 9px\", \"margin-top\": \"6px\"}`;\n    menuButton.ab1Click = \"@ destroy(thisBot);\";\n    menuButton.onCreate = currentSkill.tags.onMenuCreate;\n    menuButton.labelAlignment = \"left\";\n\n    if (currentSkill.abID)\n    {\n        //possible skills\n        menuButton.abID = currentSkill.abID;\n        menuButton.onClick = \"@ shout('ab1LoadSkill', tags.abID);\";\n        menuButton.weight = currentSkill.tags.weight;\n    }\n    else\n    {\n        //actual skills\n        menuButton.originSkill = currentSkill.id;\n        menuButton.onClick = currentSkill.tags[buttonFunction]; \n    }\n\n    if (currentSkill.tags.ab1MenuLabelAlternate)\n    {\n        menuButton.alternateLabel = currentSkill.tags.ab1MenuLabelAlternate;\n        menuButton.mainLabel = currentSkill.tags.ab1MenuLabel;\n        menuButton.onKeyDown = `@ if(that.keys == \"Shift\"){tags.label = tags.alternateLabel;}`;\n        menuButton.onKeyUp = `@ if(that.keys == \"Shift\"){tags.label = tags.mainLabel;}`;\n    }\n\n    if (currentSkill.tags.ab1Icon)\n    {\n        menuButton.formAddress = currentSkill.tags.ab1Icon;\n    }\n\n    if (currentSkill.tags.ab1MenuLabelBotFocus && that.menu == \"ab1BotAction\")\n    {\n        menuButton.label = currentSkill.tags.ab1MenuLabelBotFocus;\n    }\n    else if (currentSkill.tags.ab1MenuLabelGridFocus && buttonFunction == \"ab1GridAction\")\n    {\n        menuButton.label = currentSkill.tags.ab1MenuLabelGridFocus;\n    }\n\n    await create(menuButton);\n}\n\n//order logic goes here\nlet currentMenuBots = getBots(\"ab1MenuButton\", true);\nlet learnBot = getBot(\"ab1ID\", \"learn\");\nlet positionCalculatedBots = await whisper(learnBot, \"ab1SkillPositionCalculation\", {bots: currentMenuBots})[0];\n\nfor (let j = 0; j < positionCalculatedBots.length; j++)\n{\n    let currentButton = positionCalculatedBots[j].bot;\n    let currentWeight = positionCalculatedBots[j].position;\n\n    if (j < 4 || (j == 4 && positionCalculatedBots.length == 5))\n    {\n        currentButton.tags.ab1Menu = true;\n        currentButton.tags.ab1MenuSortOrder = currentWeight;\n    }\n    else if (j < 9 || (j == 9 && positionCalculatedBots.length == 10))\n    {\n        if (j == 4)\n        {\n            whisper(thisBot, \"ab1NextMenuButtonCreate\", 2);\n        }\n\n        currentButton.tags.ab1Menu2 = true;\n        currentButton.tags.ab1Menu2SortOrder = currentWeight;\n    }\n    else\n    {\n        if (j == 10)\n        {\n            whisper(thisBot, \"ab1NextMenu\", 3);\n        }\n\n        currentButton.tags.ab1Menu3 = true;\n        currentButton.tags.ab1Menu3SortOrder = currentWeight;\n    }\n}\n\n//timer for longer menu on quick menu re-open\nlet ab1TimerGenerator = getBot(\"ab1ID\", \"ab1TimerGenerator\");\n\nif (ab1TimerGenerator == null && that.menu != \"focus\"){\n    ab1TimerGenerator = {};\n\n    ab1TimerGenerator.space = \"tempLocal\";\n    ab1TimerGenerator.onDestroy = \"@ shout('ab1MenuTimer');\";\n    ab1TimerGenerator.ab1MenuReset = \"@ destroy(thisBot);\";\n    ab1TimerGenerator.ab1Click = \"@ destroy(thisBot);\";\n\n    create(ab1TimerGenerator);\n}","ab1MenuTimerCreate":"@let ab1MenuTimer = getBot(\"ab1ID\", \"ab1MenuTimer\");\n\nif (ab1MenuTimer == null)\n{\n    ab1MenuTimer = {}\n\n    ab1MenuTimer.space = \"tempLocal\";\n    ab1MenuTimer.ab1ID = \"ab1MenuTimer\";\n    ab1MenuTimer.onCreate = \"@ setTimeout(()=> destroy(thisBot), 500)\";\n\n    create(ab1MenuTimer);\n}","ab1NextMenuButtonCreate":"@let menuButton = {};\nlet ab1Color = ab1InstMemory.tags.ab1Color;\n\nif (that == 2)\n{\n    menuButton.ab1Menu = true;\n    menuButton.onClick = '@ configBot.masks.menuPortal = \"ab1Menu2\"';    \n}\nelse if (that == 3)\n{\n    menuButton.ab1Menu2 = true;\n    menuButton.onClick = '@ configBot.masks.menuPortal = \"ab1Menu3\"';\n}\n\nmenuButton.space = \"tempLocal\";\nmenuButton.ab1MenuSortOrder = 20;\nmenuButton.label = \" \";\nmenuButton.ab1MenuButton = true;\nmenuButton.formAddress = \"expand_more\";\nmenuButton.color = \"#55E679\";\nmenuButton.scale = 1;\nmenuButton.menuItemStyle = `ðŸ§¬ {\"border-radius\": \"9px 9px 9px 9px\", \"margin-top\": \"6px\"}`;\nmenuButton.ab1MenuReset = \"@ destroy(thisBot);\";\nmenuButton.ab1Click = \"@ destroy(thisBot);\"\n\ncreate(menuButton);","ab1ReminderTimer":"@if(ab1InstMemory.tags.ab1SleepState == false) \n{\n    clearInterval(countdown);\n    countdown = setInterval(() => {os.toast(\"don't forget to publish to an AB to save your work!\")}, 1200000);\n}\nelse \n{\n    clearInterval(countdown);\n}","ab1SelfSelect":"@let time = new Date();\nlet offset = time.getTimezoneOffset();\nlet hour = (32 - time.getHours())-Math.round(offset/60);\nlet minute = 60 - time.getMinutes();\n\nos.toast(hour + \" hours \" + minute + \" minutes until inst reset\", 1);\n\nconfigBot.masks.menuPortal = \"ab1Menu\";\n\nlet ab1Color = ab1InstMemory.tags.ab1Color;\nlet menuButton = {};\n\nmenuButton.space = \"tempLocal\";\nmenuButton.ab1Menu = true;\nmenuButton.ab1MenuReset = \"@ destroy(thisBot);\";\nmenuButton.menuItemStyle = `ðŸ§¬ {\"border-radius\": \"9px 9px 9px 9px\", \"margin-top\": \"6px\"}`;\nmenuButton.ab1Click = \"@ destroy(thisBot);\";\nmenuButton.labelAlignment = \"left\";\nmenuButton.color = ab1Color;\nmenuButton.onClick =`@ shout(\"ab1Reset\");`;\nmenuButton.label = \"hide\";\nmenuButton.formAddress = \"visibility_off\";\n\ncreate(menuButton);//hide ab-1\n\nmenuButton.label = \"color\";\nmenuButton.formAddress = \"palette\";\nmenuButton.onClick = `@\n    os.showInputForTag(ab1InstMemory, \"ab1Color\", {\n        type: 'color',\n        title: 'pick a color'\n    });\n\n    shout(\"ab1Reset\");`;\n\ncreate(menuButton);//ab-1 color\n\nlet sleepState = ab1InstMemory.tags.ab1SleepState;\n\nif (sleepState == false)\n{\n    menuButton.label = \"sleep\";\n    menuButton.onClick = `@ shout(\"ab1Sleep\", \"sleep\"); shout('ab1Reset');`;\n    menuButton.formAddress = \"nights_stay\";\n}\nelse \n{\n    menuButton.label = \"wake\";\n    menuButton.onClick = `@ shout(\"ab1Sleep\", \"wake\");`;\n    menuButton.formAddress = \"wb_sunny\";\n}\n\ncreate(menuButton);//ab-1 sleep\n\nlet previousFrustum = getBot(\"frustumID\", configBot.id);\n\nmenuButton.onClick = \"@ shout('ab1POV');\";\nmenuButton.label = \"collab pov\";\n\nif (previousFrustum)\n{\n    menuButton.formAddress = \"visibility\";\n}\nelse\n{\n    menuButton.formAddress = \"visibility_off\";\n}\n\ncreate(menuButton);//frustum visibility\n\nmenuButton.label = \"systems\";\nmenuButton.formAddress = \"settings_applications\";\nmenuButton.onKeyDown = \"@ \";\nmenuButton.onKeyUp = \"@ \";\nmenuButton.onClick = `@ let shiftCheck = os.getInputState(\"keyboard\", \"Shift\");\nlet currentInst = os.getCurrentInst();\n\nif (shiftCheck)\n{\n    os.openURL(\"/?inst=\"+currentInst+\"&systemPortal=true\");\n}\nelse\n{\n    configBot.tags.systemPortal = true;\n}\n\nshout('ab1Refresh');\n`;\n\ncreate(menuButton);//systems\n\n// menuButton.onClick = \"@ os.goToDimension('ab1'); shout('ab1Refresh');\";\n// menuButton.label = \"manage skills\";\n// menuButton.formAddress = \"settings\";\n\n// create(menuButton); //go to ab-1 dimension\n\nlet gridState = ab1InstMemory.tags.ab1GridSnapState;\n\nmenuButton.onClick = `@\nif (tags.gridState == true)\n{\n    changeState(thisBot, false, \"gridState\");\n}\nelse\n{\n    changeState(thisBot, true, \"gridState\");\n}`;\nmenuButton.label = \"grid snap\";\nmenuButton.gridStatetrueOnEnter = `@\ntags.formAddress = \"check_box\";\nab1InstMemory.tags.ab1GridSnapState = true;`;\nmenuButton.gridStatefalseOnEnter = `@\ntags.formAddress = \"check_box_outline_blank\";\nab1InstMemory.tags.ab1GridSnapState = false;`;\n\nmenuButton.onCreate = `@ changeState(thisBot, ${gridState}, \"gridState\");`;\n\ncreate(menuButton); //grid snap\n\nlet botSnapState = ab1InstMemory.tags.ab1BotSnapState;\n\nif (!botSnapState)\n{\n    menuButton.formAddress = \"check_box_outline_blank\";\n}\n\nmenuButton.onClick = `@\nif (tags.botSnapState == \"face\")\n{\n    changeState(thisBot, \"none\", \"botSnapState\");\n}\nelse\n{\n    changeState(thisBot, \"face\", \"botSnapState\");\n}`;\nmenuButton.label = \"bot snap\";\nmenuButton.botSnapStatefaceOnEnter = `@\ntags.formAddress = \"check_box\";\nab1InstMemory.tags.ab1BotSnapState = \"face\";`;\nmenuButton.botSnapStatenoneOnEnter = `@\ntags.formAddress = \"check_box_outline_blank\";\nab1InstMemory.tags.ab1BotSnapState = \"none\";`; \nmenuButton.onCreate = `@ changeState(thisBot, \"${botSnapState}\", \"botSnapState\");`;\n\ncreate(menuButton); //bot snap\n\nlet versionTag = ab1InstMemory.tags.ab1Version + \".\" + ab1InstMemory.tags.ab1Iteration;\n\nmenuButton.onClick = `@  shout(\"ab1Refresh\"); shout(\"ab1Reset\"); setTag(getBots(\"ab1\"), \"destroyable\", true);\n    setTimeout(() => destroy(getBots(\"ab1UpdateID\")), 1000);`;\nmenuButton.label = \"destroy v\"+versionTag;\nmenuButton.color = \"#D66D5E\";\nmenuButton.formAddress = \"delete_forever\";\n\ncreate(menuButton);","ab1SelectorDrop":"@if (that.to.bot == null) //grid focus\n{\n    var menuType = \"ab1GridAction\";\n\n    if (that.dimension)\n    {\n        //grid click arm (from long click?)\n        var focusData = {\"dimension\": that.dimension, \"x\": that.position.x, \"y\": that.position.y};\n    }\n    else\n    {\n        //drag arm\n        var focusData = {\"dimension\": that.to.dimension, \"x\": that.to.x, \"y\": that.to.y};\n    }\n}\nelse //bot focus\n{\n    var menuType = \"ab1BotAction\";\n    var focusData = that.to.bot.id;\n    \n    shout(\"ab1FocusLine\", that.to.bot);\n}\n\nsetTagMask(ab1InstMemory, \"ab1Focus\", menuType);\nsetTagMask(ab1InstMemory, \"ab1FocusData\", focusData);\n\nshout(\"ab1Click\");","ab1Sleep":"@if (that == \"sleep\")\n{\n    changeState(ab1InstMemory, true, \"ab1SleepState\");\n}\nelse\n{\n    changeState(ab1InstMemory, false, \"ab1SleepState\");\n}\n\nshout(\"ab1Refresh\");\nshout(\"ab1RemindTimer\");","ab1UpdateID":"23fe09b9-89bf-484d-af70-945383a370d0","ab1Refresh":"@configBot.masks.menuPortal = null;\n\nshout(\"ab1MenuReset\");\n\nclearTagMasks(ab1InstMemory);","ab1Skill":"true","onAnyBotClicked":"@let ab1 = getBot(\"ab1ID\", \"ab1\");\nconst state = os.getInputState(\"keyboard\", \"Shift\");\n\nif (ab1 != null && that.bot.tags.ab1ID != \"ab1\" && that.bot.tags.ab1MenuButton == null && state)\n{\n    //reset everything\n    shout(\"ab1Refresh\");\n\n    //focus on bot and pop menu\n    shout(\"ab1SelectorDopr\", {to: {bot: that.bot}});\n}","onAnyBotDropEnter":"@if (ab1InstMemory.tags.ab1BotSnapState == \"face\")\n{\n    os.addDropSnap(\"face\");\n}\n\nif (that.dragBot.tags.ab1ID == \"ab1Selector\")\n{\n    let ab1 = getBot(\"ab1ID\", \"ab1\");\n\n    that.dragBot.tags.strokeColor = \"clear\";\n    \n    ab1.tags.lineTo = that.to.bot.id;\n}","onAnyBotDropExit":"@if (that.dragBot.tags.ab1ID == \"ab1Selector\")\n{\n    let ab1 = getBot(\"ab1ID\", \"ab1\");\n\n    that.dragBot.tags.strokeColor = ab1InstMemory.tags.ab1Color;\n\n    ab1.tags.lineTo = that.dragBot.id;\n}","onAnyBotPointerEnter":"@if (that.bot.tags.ab1Skill)\n{\n    os.toast(that.bot.tags.ab1MenuLabel);\n    \n    that.bot.masks.scale = 1.2;\n}","onAnyBotPointerExit":"@if (that.bot.tags.ab1Skill)\n{\n    that.bot.masks.scale = 1;\n}","onChat":"@if (that.message[0] == \".\") \n{\n    os.hideChat();\n\n    switch (that.message)\n    {\n        case '.download':\n            setTag(getBot(\"label\", \"ab1 Installer\"), \"ab1ID\", \"here\");\n        \n            let downloadBots = getBots(byMod({\"ab1ID\": null, \"space\": \"shared\"}));\n            let currentInst = os.getCurrentInst();\n\n            os.downloadBots(downloadBots, currentInst);\n            shout(\"ab1Refresh\");\n            break;\n        case '.downloadAB1':\n            setTag(ab1InstMemory, \"ab1Iteration\", ab1InstMemory.tags.ab1Iteration+1);\n\n            shout(\"ab1Reset\");\n\n            ab1InstMemory.tags.baseAB = null;\n\n            let learn = getBot(\"ab1ID\", \"learn\");\n            \n            if (learn.tags.ab1SkillUsedArray)\n            {\n                let placeholders = learn.tags.ab1SkillPlaceholderArray;\n                let usedSkills = learn.tags.ab1SkillUsedArray;\n                let combinedArray = usedSkills.concat(placeholders);\n\n                learn.tags.ab1SkillPlaceholderArray = combinedArray;\n                learn.tags.ab1SkillUsedArray = null;\n            }\n\n            if (ab1InstMemory.tags.ab1SleepState == false)\n            {\n                shout(\"ab1Sleep\", \"sleep\"); \n            }\n            \n            let ab1Bots = getBots(\"ab1InitialLoad\");\n            \n            os.downloadBots(ab1Bots, \"ab1 v\"+ ab1InstMemory.tags.ab1Version + \".\" + ab1InstMemory.tags.ab1Iteration);\n            break;\n        case '.upload':\n            os.showUploadAuxFile();\n            break;\n        case '.sleep':\n            shout(\"ab1Reset\");\n\n            shout(\"ab1Sleep\", \"sleep\");  \n            break;\n        case '..':\n            if (ab1InstMemory.tags.ab1SleepState)\n            {\n                shout(\"ab1Sleep\", \"wake\");\n                shout(\"ab1Summon\", {type: \"emptyDimension\", position: {dimension: configBot.tags.gridPortal}});     \n            } \n            break;\n        case '.ab1Kill':\n            shout(\"ab1Reset\");\n            setTag(getBots(\"ab1\"), \"destroyable\", true);\n            setTimeout(() => destroy(getBots(\"ab1UpdateID\")), 1000);    \n            break;\n        case '':\n\n            break;\n        default:\n            let message = that.message;\n            let executable = message.slice(1);\n\n            try\n            {\n                os.run(executable);  \n            }\n            catch (e)\n            {\n                console.log(e);\n            }\n    }\n}","onKeyDown":"@if (that.keys == \"`\"){\n    let ab1Color = ab1InstMemory.tags.ab1Color;\n\n    os.showChat({\n        placeholder: \"ping\",\n        placeholderColor: ab1Color\n    });\n}","onTapCode":"@if (that == \"3342\" && ab1InstMemory.tags.ab1SleepState == false)\n{\n    whisper(thisBot, \"ab1Sleep\", \"sleep\");\n}\nelse if (that == \"3342\")\n{\n    whisper(thisBot, \"ab1Sleep\", \"wake\");\n    shout(\"ab1Summon\", {\"type\": \"emptyDimension\", \"data\":that});\n}","scale":"1","scaleX":"0.8","scaleY":"0.8","scaleZ":"1.6","strokeColor":"orange","color":"#20dcf5","ab1InitialLoad":"true","ab1Reset":"@let ab1 = getBot(\"ab1ID\", \"ab1\");\n\nshout(\"ab1MenuReset\");\n\nif (ab1)\n{\n    destroy(ab1);\n}","ab1Z":0,"ab1X":-2,"destroyable":false,"system":"ab1.manager.command","ab1GenerateMenuButton":"@//whisper(ab1Command, 'ab1GenerateMenuButton', {mods});\nlet additionalTags = that;\nlet newMenuButton = {};\n\nconfigBot.masks.menuPortal = \"ab1Menu\";\n\nnewMenuButton.ab1Menu = true;\nnewMenuButton.space = \"tempLocal\";\nnewMenuButton.color = \"#55E679\";\nnewMenuButton.labelAlignment = \"left\";\nnewMenuButton.menuItemStyle = { \"border-radius\":\"8px\", \"margin-top\":\"3px\"};\nnewMenuButton.menuReset = \"@ destroy(thisBot);\";\n\nfor (const tag in additionalTags)\n{\n    newMenuButton[tag] = additionalTags[tag];\n}\n\nnewMenuButton = create(newMenuButton);\n\nreturn newMenuButton;"}},"412841ed-9d46-436d-9842-9b8cdc556202":{"id":"412841ed-9d46-436d-9842-9b8cdc556202","space":"shared","tags":{"ab1":true,"ab1ID":"summon","destroyable":false,"scaleZ":"1.6","scaleY":"0.8","scaleX":"0.8","ab1UpdateID":"ed3217b2-074c-4b71-bd2e-c39a457c37d0","onGridClick":"@let ab1 = getBot(\"ab1ID\", \"ab1\");\n\nif (ab1InstMemory.tags.ab1SleepState == false && ab1 || that.dimension == \"ab1\" && ab1) \n{\n    const state = os.getInputState(\"keyboard\", \"Shift\");\n\n    if (state)\n    {\n        clearTagMasks(ab1InstMemory);\n        shout(\"ab1GridSelector\", that);\n        return;\n    }\n}\n\nif (ab1InstMemory.tags.ab1SleepState == false || that.dimension == \"ab1\") \n{\n    shout(\"ab1FootprintCreate\", that);\n}","strokeColor":"orange","onAnyBotDrag":"@if (that.bot.tags.ab1ID == \"ab1\")\n{\n    let state = that.bot.tags.menuState == \"Open\";\n    let menuState = ab1InstMemory.tags.ab1FocusData == null;\n\n    shout(\"ab1Refresh\");\n\n    let previousSelection = getBots(\"ab1Selection\");\n\n    setTagMask(previousSelection, \"ab1Selection\", null);\n    \n    let ab1 = getBot(\"ab1ID\", \"ab1\");\n    let selectorMod = {};\n\n    selectorMod.space = \"tempLocal\";\n    selectorMod.color = \"clear\";\n    selectorMod.strokeColor = that.bot.tags.strokeColor;\n    selectorMod.lineColor = that.bot.tags.strokeColor;\n    selectorMod.labelColor = that.bot.tags.strokeColor;\n    selectorMod.scaleZ = 0.01;\n    selectorMod.ab1 = getLink(ab1);\n    selectorMod.ab1ID = \"ab1Selector\";\n    selectorMod.ab1Refresh = \"@ destroy(thisBot);\";\n    selectorMod.onDrop = `@ if (that.to.bot)\n        {\n            destroy(thisBot);\n            if (that.to.bot.tags.ab1ID == \"ab1\")\n            {\n                shout(\"ab1SelfSelect\");\n            }\n            else\n            {\n                shout('ab1SelectorDrop', that);\n            }\n        }\n        else\n        {\n            tags.draggable = false;\n            shout('ab1SelectorDrop', that);\n        }`;\n    selectorMod.onClick = \"@ shout('ab1Summon', {'bot': bot, 'dimension': that.dimension}); shout('ab1Refresh');\";\n\n    let selectorBot = create(selectorMod);\n    \n    that.bot.tags.lineTo = selectorBot.id;\n\n    if (state && menuState)\n    {\n        changeState(that.bot, \"Open\", \"menuState\");\n\n        selectorBot.tags.form = \"circle\";\n\n        selectorBot.tags.color = selectorBot.tags.strokeColor;\n\n        that.bot.tags.onDrop = `@ \n\n        destroy(links.selector);\n\n        if (!getBot('ab1Selection'))\n        {\n            shout('ab1Refresh');\n            \n            return;\n        }\n\n        whisper(ab1Command, 'ab1GenerateMenuButton', {\n            label: 'open group selection', \n            formAddress: 'select_all',\n            ab1Refresh: \"@ destroy(thisBot);\",\n            onClick: \"@ configBot.tags.systemTagName = 'ab1Selection'; configBot.tags.systemPortal = true; shout('ab1Refresh');\"\n        }); \n\n        setTagMask(thisBot, \"ab1MenuState\", true);`;\n\n        selectorLink = getLink(selectorBot);\n\n        masks.selector = selectorLink;\n\n        that.bot.tags.selector = selectorLink;\n\n        os.enableCustomDragging();\n    }\n    else\n    {   \n        await os.replaceDragBot(selectorBot);\n    }\n}\n\nif (ab1InstMemory.tags.ab1GridSnapState == true)\n{\n    os.addDropSnap(\"grid\");\n}","ab1Summon":"@shout(\"ab1Reset\");\n\nif (!ab1InstMemory)\n{\n    var ab1InstMemory = getBot(\"ab1ID\", \"instMemory\");\n}\n\nlet ab1Color = ab1InstMemory.tags.ab1Color;\nlet ab1 = {};\n\nif (that.type == null)\n{\n    ab1.dimension = that.dimension;\n    ab1.onClick = \"@ shout('ab1Click', {'dimension': that.dimension});\";\n    ab1[that.dimension] = true;\n    ab1[that.dimension+\"X\"] = that.bot.tags[that.dimension+\"X\"];\n    ab1[that.dimension+\"Y\"] = that.bot.tags[that.dimension+\"Y\"];\n}\nelse if (that.type == \"emptyDimension\")\n{\n    ab1.dimension = that.position.dimension;\n    ab1[that.position.dimension] = true;\n    ab1[that.position.dimension + \"X\"] = 0;\n    ab1[that.position.dimension + \"Y\"] = 0;\n}\nelse if (that.type == \"initial\")\n{\n    ab1.dimension = that.dimension[0];\n    ab1[that.dimension] = true;\n    ab1[that.dimension + \"X\"] = 0;\n    ab1[that.dimension + \"Y\"] = 0;\n}\n\n//constant ab1 features\nab1.space = \"tempLocal\";\nab1.color = \"clear\";\nab1.onClick = \"@ shout('ab1Click', {'dimension': that.dimension});\";\nab1.strokeColor = ab1Color;\nab1.onDrag = \"@ whisper(ab1Command, 'ab1Refresh')\";\nab1.ab1ID = \"ab1\";\nab1.lineStyle = \"line\";\nab1.lineColor = ab1Color;\nab1.menuStateClosedOnEnter = `@ tags.interval = setInterval(() => {whisper(thisBot, \"spin\");}, 2000);\ntags.scale = 1;\nlet rotZ = os.getCurrentDimension()+\"RotationZ\";\n\nanimateTag(thisBot, rotZ, {\n    duration: 1.98,\n    fromValue: 0,\n    toValue: 6.3\n}).catch(error => {});\n\ntry{\n    await animateTag(thisBot, \"scale\", {\n        duration: 1.98,\n        tagMaskSpace: false,\n        toValue: 0.65\n    });\n}\ncatch (e){};`;\nab1.menuStateOpenOnEnter = `@ let rotZ = os.getCurrentDimension()+\"RotationZ\";\n\nclearInterval(tags.interval); \ntags.interval = null;\n\nanimateTag(thisBot, rotZ, null).catch();\n\nanimateTag(thisBot, rotZ, {\n    duration: 0.5,\n    toValue: 0\n}).catch(error => { });\n\nanimateTag(thisBot, \"scale\", null).catch();\n\nanimateTag(thisBot, \"scale\", {\n    duration: 0.5,\n    tagMaskSpace: false,\n    toValue: 1,\n    easing: {\n                type: \"quadratic\",\n                mode: \"inout\"\n            }\n}).catch(error => {});`;\nab1.spin = `@ let rotZ = os.getCurrentDimension()+\"RotationZ\";\n\nif (tags.scale <= 0.651)\n{\n    var targetScale = 0.95;\n}\nelse\n{\n    var targetScale = 0.65;\n}\n\nanimateTag(thisBot, rotZ, \n{\n    duration: 1.98,\n    fromValue: 0,\n    toValue: 6.3,\n}).catch(error => {});\n\ntry\n{\n    await animateTag(thisBot, \"scale\", {\n        duration: 1.98,\n        tagMaskSpace: false,\n        toValue: targetScale,\n        easing: {\n                type: \"quadratic\",\n                mode: \"inout\"\n            }\n    });\n}\ncatch (e){};`;\nab1.ab1Refresh = \"@ tags.lineTo = null; changeState(thisBot, 'Closed', 'menuState');\";\nab1.ab1Reset = \"@destroy(thisBot);\";\n\nlet ab1Bot = create(ab1);\n\nchangeState(ab1Bot, \"Closed\", \"menuState\");","ab1MenuLabel":"summon","color":"#20dcf5","ab1Y":-2,"ab1X":-2,"scale":1,"ab1InitialLoad":"true","ab1Skill":"true","ab1FocusLine":"@let ab1 = getBot(\"ab1ID\", \"ab1\");\n\nif (ab1)\n{\n    ab1.tags.lineColor = ab1.tags.strokeColor;\n    ab1.tags.lineStyle = \"line\";\n    ab1.tags.lineTo = that.id;\n}","ab1GridSelector":"@shout(\"ab1Refresh\");\n\nlet ab1 = getBot(\"ab1ID\", \"ab1\");\n\nlet selectorMod = {};\n\nselectorMod.space = \"tempLocal\";\nselectorMod[that.dimension] = true;\nselectorMod.draggable = false;\nselectorMod[that.dimension + \"X\"] = that.position.x;\nselectorMod[that.dimension + \"Y\"] = that.position.y;\nselectorMod.color = \"clear\";\nselectorMod.strokeColor = ab1.tags.strokeColor;\nselectorMod.lineColor = ab1.tags.strokeColor;\nselectorMod.scaleZ = 0.01;\nselectorMod.position = that;\nselectorMod.lineTo = ab1.id;\nselectorMod.lineStyle = \"line\";\nselectorMod.ab1ID = \"ab1Selector\";\nselectorMod.ab1Refresh = \"@ destroy(thisBot);\";\nselectorMod.onCreate = `@ setTagMask(ab1InstMemory, \"ab1Focus\", \"ab1GridAction\"); setTagMask(ab1InstMemory, \"ab1FocusData\", {dimension: \"${that.dimension}\", position: {x: ${that.position.x}, y: ${that.position.y}}}); shout(\"ab1Click\");`;\nselectorMod.onClick = \"@ shout('ab1Refresh'); shout('ab1Summon', {'bot': bot, 'dimension': [that.dimension]});\"\nselectorMod.ab1Refresh = \"@ destroy(thisBot);\"\n\nlet newSelector = create(selectorMod);","ab1FootprintCreate":"@if (that) \n{\n    shout(\"ab1Refresh\");\n\n    let previousFootPrint = getBot(byMod({ab1ID: \"footPrint\", [that.dimension + \"X\"]: that.position.x, [that.dimension + \"Y\"]: that.position.y}));\n\n    if(!previousFootPrint)\n    {\n        let ab1Color = ab1InstMemory.tags.ab1Color;\n        let focusPoint = {}\n\n        focusPoint.space = \"tempLocal\";\n        focusPoint.scaleZ = 0.01;\n        focusPoint.positioningMode = \"absolute\";\n        focusPoint.draggable = false;\n        focusPoint.ab1ID = \"footPrint\";\n        focusPoint.color = \"clear\";\n        focusPoint.strokeColor = ab1Color;\n        focusPoint.onCreate = `@ setTimeout(() => destroy(thisBot), 700);\n        \n        animateTag(thisBot, \"scaleX\", {\n            fromValue: 0.5,\n            toValue: 1.1,\n            duration: 0.5,\n            easing: {\n                type: \"elastic\",\n                mode: \"out\"\n            }\n        }).catch(e => {});\n\n        await animateTag(thisBot, \"scaleY\", {\n            fromValue: 0.5,\n            toValue: 1.1,\n            duration: 0.5,\n            easing: {\n                type: \"elastic\",\n                mode: \"out\"\n            }\n        }).catch(e => {});`;\n        focusPoint.onClick = \"@ shout('ab1Summon', {'bot': bot, 'dimension': that.dimension}); tags[that.dimension] = false;\";\n        focusPoint[that.dimension] = true;\n        focusPoint[that.dimension + \"X\"] = that.position.x;\n        focusPoint[that.dimension + \"Y\"] = that.position.y;\n\n        create(focusPoint);\n    }\n}","ab1Z":0,"system":"ab1.manager.summon","onAnyBotDragging":"@if (links.selector)\n{\n    let ab1 = getBot(\"ab1ID\", \"ab1\");\n    let currentDim = that.to.dimension;\n    let dimBots = getBots(currentDim);\n    let selectorX = links.selector.tags[currentDim+\"X\"];\n    let selectorY = links.selector.tags[currentDim+\"Y\"];\n    let xDist = selectorX - ab1.tags[currentDim+\"X\"];\n    let yDist = selectorY - ab1.tags[currentDim+\"Y\"]\n    let m = yDist / xDist;\n    let b = ab1.tags[currentDim+\"Y\"] - (m * ab1.tags[currentDim+\"X\"]);\n\n    links.selector.tags[currentDim] = true;\n    links.selector.tags[currentDim+\"X\"] = that.to.x;\n    links.selector.tags[currentDim+\"Y\"] = that.to.y;\n\n    let possibleLineBots = [];\n    let maxDist = Math.sqrt((xDist * xDist) + (yDist * yDist));\n\n    for (let i = 0; i < dimBots.length; i++)\n    {\n        let currentBot = dimBots[i];\n\n        if (currentBot.id == thisBot.id || currentBot.id == links.selector.id)\n        {\n            continue;\n        }\n        else\n        {\n            xDist = selectorX - currentBot.tags[currentDim+\"X\"];\n            yDist = selectorY - currentBot.tags[currentDim+\"Y\"];\n\n            let footDist = Math.sqrt((xDist * xDist) + (yDist * yDist));\n\n            xDist = ab1.tags[currentDim+\"X\"] - currentBot.tags[currentDim+\"X\"];\n            yDist = ab1.tags[currentDim+\"Y\"] - currentBot.tags[currentDim+\"Y\"];\n\n            let baseDist = Math.sqrt((xDist * xDist) + (yDist * yDist));\n            let comboDist = baseDist + footDist;\n            let justBelow = (maxDist - 1) <= comboDist;\n            let justAbove = comboDist <= (maxDist + 1);\n\n            if (justBelow && justAbove)\n            {\n                if (m == \"Infinity\" || m == \"-Infinity\")\n                {\n                    if (currentBot.tags[currentDim + \"X\"] == that.to.x)\n                    {\n                        possibleLineBots.push(currentBot);\n                    }\n\n                    continue;\n                }\n\n                let botIntercept = (m * currentBot.tags[currentDim+\"X\"]) + b;\n                \n                if (botIntercept - 1 <= currentBot.tags[currentDim+\"Y\"] && currentBot.tags[currentDim+\"Y\"] <= botIntercept + 1)\n                {\n                    possibleLineBots.push(currentBot);\n                }\n            }\n        }\n    }\n\n    if (possibleLineBots.length > 0)\n    {\n        let lines = ab1.tags.lineTo;\n\n        if(!Array.isArray(lines))\n        {\n            lines = [lines];\n        }\n\n        for (let j = 0; j < possibleLineBots.length; j++)\n        {\n            let currentBot = possibleLineBots[j]\n            let currentID = currentBot.id;\n\n            lineLoop:\n            for (let k = 0; k < lines.length; k++)\n            {\n                if (currentID == lines[k] || currentID == ab1.id)\n                {\n                    break lineLoop;\n                }\n\n                if (k == lines.length - 1)\n                {\n                    lines.push(currentID);\n\n                    currentBot.masks.ab1Selection = \"ab1Selection.\" + currentBot.id;\n                }\n            }\n        }\n        ab1.tags.lineTo = lines;\n    }\n}","ab1Refresh":"@clearTagMasks(thisBot);","onPortalChanged":"@"}},"4eb27b1a-5034-4aeb-9b30-de13b2b110e6":{"id":"4eb27b1a-5034-4aeb-9b30-de13b2b110e6","space":"shared","tags":{"ab1":true,"ab1X":12,"ab1ID":"copy","ab1Icon":"file_copy","ab1MenuLabel":"copy","ab1MenuLabelBotFocus":"copy to clipboard","color":"#55E679","onPaste":"@let copyBot = JSON.parse(that.text);\nlet botTemplate;\n\nif(!copyBot.state)\n{\n    botTemplate = {[copyBot.id]: copyBot};\n}\nelse\n{\n    botTemplate = copyBot.state;\n}\n\nlet positionInfo = ab1InstMemory.tags.ab1FocusData;\nlet dimMod = {};\n\nif (positionInfo)\n{\n    dimMod[positionInfo.dimension] = true;\n    dimMod[positionInfo.dimension+\"X\"] = positionInfo.x;\n    dimMod[positionInfo.dimension+\"Y\"] = positionInfo.y;\n}\n\nfor (const property in botTemplate) {\n    const newBot = botTemplate[property];\n\n    if (newBot.tags.ab1UpdateID)\n    {\n        newBot.tags.ab1UpdateID = null;\n        newBot.tags.destroyable = null;\n    }\n    \n    var createBot = create(newBot, dimMod)\n}\n\nos.toast(\"bot added to inst\");\nshout(\"ab1Refresh\");","strokeColor":"orange","scaleZ":"1.6","scaleY":"0.8","scaleX":"0.8","scale":"1","ab1InitialLoad":"true","ab1Skill":"true","ab1Refresh":"@configBot.tags.publishTarget = null;","ab1Z":0,"ab1Y":0,"destroyable":false,"system":"ab1.action.copy","ab1UpdateID":"f1fcb19f-3101-4848-a32e-d2204047174d"}},"75323bc2-1d06-4a87-94c3-6603a28f842b":{"id":"75323bc2-1d06-4a87-94c3-6603a28f842b","space":"shared","tags":{"ab1":true,"ab1UpdateID":"e6ebfdc8-2828-4519-b7f4-c0c8f7a51c57","ab1ID":"openSheet","strokeColor":"orange","scaleZ":"1.6","scaleY":"0.8","scaleX":"0.8","color":"#55E679","ab1Action":"@let currentInst = os.getCurrentInst();\nlet currentDim = getBot(\"ab1ID\", \"ab1\").tags.dimension;\n\nconst state = os.getInputState(\"keyboard\", \"Shift\");\n\nif (state) \n{\n    os.openURL(`/?inst=${currentInst}&sheetPortal=${currentDim}`);\n}\nelse\n{\n    configBot.tags.sheetPortal = currentDim;\n}\n\nshout(\"ab1Reset\");","ab1MenuLabel":"sheet","destroyable":false,"ab1MenuLabelAlternate":"sheet new tab","ab1X":0,"ab1Icon":"table_view","ab1Y":3,"scale":1,"ab1BotAction":"@let currentInst = os.getCurrentInst();\nlet currentDim = os.getCurrentDimension();\nlet selectedBot = ab1InstMemory.tags.ab1FocusData;\n\nconst state = os.getInputState(\"keyboard\", \"Shift\");\n\nif (state)\n{\n    os.openURL(`/?inst=${currentInst}&gridPortal=${currentDim}&sheetPortal=${selectedBot}`);\n}\nelse\n{\n    configBot.tags.sheetPortal = selectedBot;\n}\n\nshout(\"ab1Reset\");","ab1InitialLoad":"true","ab1Skill":"true","ab1Z":0,"system":"ab1.action.openSheet"}},"888e614b-9a3b-4737-8b61-eb62edd3234f":{"id":"888e614b-9a3b-4737-8b61-eb62edd3234f","space":"shared","tags":{"listeningForFileUploads":"true","scaleX":"0.8","scaleY":"0.8","scaleZ":"1.6","strokeColor":"orange","ab1":true,"ab1UpdateID":"1a04103a-35f4-44a1-b1a2-1058f5d2667e","onFileUpload":"@let fileExtension = that.file.name.split('.').pop();\nlet fileName = that.file.name.split('.').shift();\nlet size = that.file.size;\nlet mimeType;\nlet botInfo = {};\n\nif (size > 200000000)\n{\n  os.toast(\"maximum file size exceeded (200 mb)\");\n\n  shout(\"ab1Refresh\");\n\n  return;\n}\n\nswitch(fileExtension)\n{\n  case 'jpg':\n  case 'jpeg':\n  case 'webp':\n  case 'gif':\n  case 'png':\n    mimeType = \"image/\" + fileExtension;\n    botInfo.form = \"sprite\";\n    break;\n  case 'svg':\n    mimeType = \"image/svg+xml\";\n    botInfo.form = \"sprite\";\n    break;\n  case 'glb':\n  case 'gltf':\n    mimeType = \"text/xml\";\n    botInfo.form = \"mesh\";\n    botInfo.formSubtype = \"gltf\";\n    break;\n  case 'aux':\n    break;\n  case 'pdf':\n    break;\n  case 'mp3':\n    mimeType = 'audio/mpeg';\n    botInfo.onClick = \"@ os.playSound(tags.formAddress);\";\n    botInfo.label = \"Click to Play\";\n    break;\n  case 'mp4':\n    mimeType = 'video/mp4';\n    botInfo.form = \"iframe\";\n    botInfo.formSubtype = \"src\";\n    break;\n  default:\n    let result = new Error(\"unhandled file type: \" + fileExtension);\n    os.toast(\"file type not supported\");\n    console.warn(result)\n    return result;\n}\n\nif(thisBot.tags.listeningForFileUploads === true)\n{\n  if (fileExtension == \"aux\") \n  {\n    whisper(ab1LongTermMemory, \"ab1AUXFileImplement\", that);\n  }\n  else if (fileExtension == \"pdf\")\n  {\n    whisper(thisBot, \"ab1PDFUpload\", that);\n  }\n  else \n  {\n    os.toast(fileExtension + \" is uploading to ltm\");\n\n    whisper(ab1LongTermMemory, \"ab1FileUpload\", {file: that.file.data, fileName: fileName, mimeType: mimeType, botInfo: botInfo});\n  }\n}","ab1ID":"auxLoader","ab1MenuLabel":"aux loader","ab1Y":2,"color":"#20dcf5","ab1X":2,"scale":1,"ab1InitialLoad":"true","ab1Skill":"true","ab1AUXFileImplement":"@let origin;\nlet auxFile;\n\nif (crypto.isEncrypted(that.file))\n{\n    auxFile = that.file;\n\n    origin = \"encrypted\";\n}\nelse if (that.file) \n{\n    let unformattedFile = JSON.parse(that.file.data);\n    auxFile = unformattedFile.state;\n    origin = that.file.name;\n}\nelse if (that.record)\n{\n    auxFile = that.record;\n    origin = that.abID;\n}\nelse if (that.hash)\n{\n    let url = \"https://builder-ltm-files.s3.amazonaws.com/\" + that.hash;\n\n    let response = await web.hook({\n        method: \"GET\",\n        url: url\n    });\n\n    auxFile = response.data.state;\n    origin = that.hash;\n}\n\nthisBot.ab1PopulateBots({\"bots\": auxFile, \"origin\": origin});","ab1PDFUpload":"@let fileData = that.file.data;\nlet formattedData = os.parseBotsFromData(fileData);\n\nfor (const property in formattedData) \n{\n    const newBot = formattedData[property];\n    const ab1FocusPoint = ab1InstMemory.tags.ab1FocusPoint;\n    const botTotal = Object.keys(formattedData).length;\n\n    if (newBot.tags) \n    {\n        try \n        {\n            if (botTotal > 1 || ab1FocusPoint == null) \n            {\n                var b = create(newBot.tags);\n            }\n            else \n            {\n                let targetDimension = ab1FocusPoint.dimension;\n                let targetPosition = { [targetDimension]: true, [targetDimension + \"X\"]: ab1FocusPoint.x, [targetDimension + \"Y\"]: ab1FocusPoint.y }\n\n                var b = create(newBot.tags, targetPosition);\n            }\n\n            idMap.set(property, b.id);\n            newBots.push(b);\n\n            if (b.tags.creator == thisBot.id) \n            {\n                b.tags.creator = null;\n            }\n        }\n        catch (error) \n        {\n            console.log(\"invalid bot\", error);\n        }\n    }\n    else \n    {\n        console.log(\"skipped bot: \" + newBot);\n    }\n}","ab1Z":0,"destroyable":false,"onKeyDown":"@if (that.keys == \"c\")\n{\n    var metaInput = os.getInputState(\"keyboard\", \"Meta\");\n    var selectedBot = getBot(\"id\", ab1InstMemory.tags.ab1FocusData);\n\n    if(metaInput && selectedBot)\n    {\n        let state = {}\n\n        state[ab1InstMemory.tags.ab1FocusData] = selectedBot;\n\n        let newFile = {}\n        newFile.version = 1;\n        newFile.state = state;\n\n        var formattedFile = JSON.stringify(newFile);\n\n        os.setClipboard(formattedFile);\n        os.toast(\"bot copied to clipboard\");\n    }\n}","system":"ab1.manager.auxLoader","ab1PopulateBots":"@let botData = that.bots;\nlet origin = that.origin;\nlet version = that.version;\nlet egg = that.egg;\nlet oldLTM = that.oldLTM;\nlet autoHatch = that.autoHatch;\nlet idMap = new Map();\nlet newBots = [];\nlet abBotID;\n\nif (crypto.isEncrypted(botData))\n{\n    let key = configBot.tags.key;\n\n    if (!key)\n    {\n        key = await os.showInput('', {\n            type: 'secret',\n            title: 'Enter key'\n        });\n    }\n\n    try\n    {\n        botData = crypto.decrypt(key, botData);\n    }\n    catch (error)\n    {\n        console.log(error)\n\n        os.toast(\"key does not match file\");\n\n        shout(\"ab1Refresh\");\n\n        return;\n    }\n   \n    botData = JSON.parse(botData);\n    console.log(botData)\n    botData = botData.state;\n}\n\nif (egg)\n{\n    abBotID = await whisper(ovoNest, \"ovoAbSetup\", {abID: tags.abID, version: tags.targetVersion})[0];\n}\n\nfor (const property in botData) \n{\n    const newBot = botData[property];\n    const ab1FocusPoint = getBot(\"ab1ID\", \"instMemory\").tags.ab1FocusData;\n    const botTotal = Object.keys(botData).length;\n    const abIDOrigin = {abIDOrigin: tags.abID};\n\n    if (newBot.tags) \n    {\n        if (newBot.tags.creator) \n        {\n            abIDOrigin.oldCreator = newBot.tags.creator;\n        }\n\n        try \n        {\n            if (botTotal > 1 || ab1FocusPoint == null) \n            {\n                var b = create(newBot.tags, abIDOrigin);\n            }\n            else \n            {\n                let targetDimension = ab1FocusPoint.dimension;\n                let targetPosition = { [targetDimension]: true, [targetDimension + \"X\"]: ab1FocusPoint.x, [targetDimension + \"Y\"]: ab1FocusPoint.y }\n\n                var b = create(newBot.tags, targetPosition, abIDOrigin);\n            }\n\n            idMap.set(property, b.id);\n            newBots.push(b);\n\n            if (b.tags.creator == thisBot.id || b.tags.creator == null) \n            {\n                setTagMask(b, \"creator\", abBotID, \"shared\");\n            }\n        }\n        catch (error) \n        {\n            console.log(\"invalid bot\", error);\n        }\n    }\n    else \n    {\n        console.log(\"skipped bot: \" + newBot);\n    }\n}\n\nlet linkTags = [\"link\", \"creator\", \"configBot\", \"lineTo\", \"transformer\"];\n\nfor (let newBot of newBots) \n{\n    for (let tag of linkTags) \n    {\n        let value = newBot.tags[tag];\n\n        if (tag == \"creator\") \n        {\n            value = newBot.tags.oldCreator;\n            newBot.tags.oldCreator = null;\n        }\n\n        updateBotLinks(newBot, idMap);\n\n        if (value) \n        {\n            if (Array.isArray(value)) \n            {\n                let newValue = value.map(id => {\n                    return idMap.get(id) || id;\n                })\n\n                newBot.raw[tag] = newValue;\n            }\n            else \n            {\n                const newID = idMap.get(value);\n\n                if (newID) \n                {\n                    newBot.raw[tag] = newID;\n                }\n            }\n        }\n    }\n}\n\nif (configBot.tags.ab1SilentMode == null && egg) \n{\n    os.toast(\"hatched \" + origin + \" v\" + version);\n}\n\nconfigBot.tags.lastEggHatched = origin;\n\nif (!autoHatch || !egg) \n{\n    shout(\"ab1Refresh\");\n}\n\nwhisper(newBots, \"onEggHatch\", { dimension: tags.dimension, position: { x: tags[tags.dimension + \"X\"], y: tags[tags.dimension + \"Y\"] } });"}},"8f660b46-dd5e-4e62-986c-c0f2fb55f04d":{"id":"8f660b46-dd5e-4e62-986c-c0f2fb55f04d","space":"shared","tags":{"ab1":true,"strokeColor":"orange","scaleZ":"1.6","scaleY":"0.8","scaleX":"0.8","ab1UpdateID":"40938eb1-eef3-4c69-afb8-d25a403bceb4","ab1ID":"createBot","ab1MenuLabel":"bot","destroyable":false,"color":"#55E679","ab1X":-3,"ab1Y":0,"ab1Icon":"cube","ab1GridAction":"@let positionInfo = ab1InstMemory.tags.ab1FocusData;\nconsole.log(positionInfo)\nlet newBot = {}\n\nnewBot.creator = null;\nnewBot[positionInfo.dimension] = true;\nnewBot[positionInfo.dimension+\"X\"] = positionInfo.x;\nnewBot[positionInfo.dimension+\"Y\"] = positionInfo.y;\nnewBot.color = \"#7B64FF\";\n\nlet createBot = create(newBot);\nlet ab1 = getBot(\"ab1ID\", \"ab1\");\n\nshout(\"ab1Refresh\");\n\nab1InstMemory.masks.ab1Focus = \"ab1BotAction\";\nab1InstMemory.masks.ab1FocusData = createBot.id;\n\nif (ab1)\n{\n    ab1.tags.lineTo = createBot.id;\n}\n\nshout(\"ab1Click\");","scale":1,"ab1Skill":"true","auxCodeOrigin":"ab1CreateBot","ab1Z":0,"ab1InitialLoad":"true","system":"ab1.action.createBot"}},"d9db9b53-f811-442c-91d7-20cd6d52d875":{"id":"d9db9b53-f811-442c-91d7-20cd6d52d875","space":"shared","tags":{"system":"ab1.library.librarian","ab1ID":"librarian","ab1InitialLoad":"true","ab1CreateLibrary":"@//whisper(ab1Librarian, \"ab1CreateLibrary\", {libraryName: \"name\", libraryURL: \"googleSpreadsheetURL\"});\n\nlet libraryName = that.libraryName;\nlet libraryURL = that.libraryURL;\nlet libraryBot = getBot(\"system\", \"ab1.library.\"+libraryName);\n\nif (!libraryBot)\n{\n    libraryBot = {};\n\n    libraryBot.system = \"ab1.library.\"+libraryName;\n    libraryBot.ab1LibraryBot = true;\n    libraryBot.ab1LibraryURL = libraryURL;\n\n    libraryBot = create(libraryBot);\n}\n\ntags[libraryName] = getLink(libraryBot);\n\nif (tags.constantSync)\n{\n    thisBot.ab1UpdateLibrary({libraryName})\n}\n\nos.toast(libraryName + \" added\");","ab1UpdateLibrary":"@//whisper(ab1Librarian, \"ab1UpdateLibrary\", ?libraryName);\nlet libraryBots;\n\nif(that)\n{\n    libraryBots = getBot(\"system\", \"ab1.library.\" + that);\n}\nelse\n{\n    libraryBots = getBots(\"ab1LibraryBot\");\n}\n\nfor (let j = 0; j < libraryBots.length; j++)\n{\n    let currentLibrary = libraryBots[j];\n    let sheetLink = currentLibrary.tags.ab1LibraryURL;\n    let sheetURL_converted = sheetLink.substring(0, sheetLink.indexOf('='));\n    let sheetID = sheetLink.substring(sheetLink.indexOf('='));\n    let replaceText = \"gviz/tq?tqx=out:json&gid\" + sheetID;\n\n    sheetURL_converted = sheetURL_converted.replace(\"edit#gid\", replaceText);\n\n    const response = await web.hook({\n        method: 'GET',\n        url: sheetURL_converted\n    });\n\n    ///Convert the resulting string into a JSON object\n    let res = unescape(escape(response.data)).replace(\"/*O_o*/\\n\", \"\");\n    res = res.replace(\"google.visualization.Query.setResponse(\", \"\");\n    res = res.replace(\");\", \"\");\n\n    res = JSON.parse(res);\n\n    //In the loop, r represents the row and c represents the column.\n    for (let row = 0; row < res.table.rows.length; row++) {\n        let currentRow = {};\n        for (let col = 0; col < res.table.rows[0].c.length; col++) {\n            if (res.table.rows[row].c[col] && res.table.rows[0].c[col]) {\n                currentRow[res.table.rows[0].c[col].v] = res.table.rows[row].c[col].v;\n            }\n        }\n\n        if (currentRow[\"ID\"]) {\n            currentLibrary.tags[currentRow[\"ID\"]] = currentRow[\"URL\"];\n        }\n    }\n}\n\nthisBot.ab1MaskAssets();","onInstStreaming":"@if (tags.constantSync)\n{\n    thisBot.ab1UpdateLibrary();\n}","constantSync":"false","ab1AddLibraryLinks":"@//whisper(ab1Librarian, \"ab1AddLibraryLinks\");\n\nlet libraryBots = getBots(\"ab1LibraryBot\");\n\nfor (let i = 0; i < libraryBots.length; i++)\n{\n    let currentLibrary = libraryBots[i].tags.system;\n\n    currentLibrary = currentName.substring(12);\n\n    thisBot({libraryName: currentLibrary});\n}","ab1MaskAssets":"@let assetBots = getBots(\"ab1Asset\", true);\n\nfor (let i = 0; i < assetBots.length; i++)\n{\n    let currentBot = assetBots[i];\n    let targetAddress = currentBot.tags.formAddress.split(':');\n    let targetLibrary = targetAddress[0];\n    let targetAsset = targetAddress[1];\n    \n    currentBot.masks.formAddress = links[targetLibrary].tags[targetAsset];   \n}","color":"clear"}},"ec65229f-9843-4bcf-a433-4c2e77a28536":{"id":"ec65229f-9843-4bcf-a433-4c2e77a28536","space":"shared","tags":{"ab1RecordSystem":true,"ab1":true,"ab1Action":"@shout(\"ab1MenuReset\");\n\nsetTagMask(thisBot, \"ab1Scan\", true);\n\nos.openQRCodeScanner();","ab1ID":"scan","ab1Icon":"qr_code_scanner","ab1InitialLoad":"true","ab1MenuLabel":"scan","ab1UpdateID":"cd0ca749-86ff-4539-b538-acc2b3052829","ab1X":8,"ab1Y":8,"ab1Z":0,"color":"#908BFC","scale":"1","scaleX":"0.8","destroyable":false,"scaleY":"0.8","scaleZ":"1.6","strokeColor":"orange","ab1Skill":"true","system":"ab1.memory.scan","onQRCodeScanned":"@//UPDATE\nif (configBot.tags.uuabScan)\n{\n    os.closeQRCodeScanner();\n\n    shout(\"ab1PublishUUAB\", that);\n}\nelse if (tags.ab1Scan)\n{\n    os.closeQRCodeScanner();\n    \n    let menuDim = os.getMenuDimension();\n    let menuButton = {};\n\n    menuButton.space = \"tempLocal\";\n    menuButton.ab1MenuButton = true;\n    menuButton[menuDim] = true;\n    menuButton.target = that;\n    menuButton.ab1MenuReset = \"@ destroy(thisBot);\";\n    menuButton.color = \"#908BFC\";\n    menuButton.menuItemStyle = `ðŸ§¬ {\"border-radius\": \"9px 9px 9px 9px\", \"margin-top\": \"6px\"}`;\n    menuButton.ab1Click = \"@ destroy(thisBot);\";\n    menuButton.labelAlignment = \"left\";\n    menuButton.onClick = \"@ shout('ab1MenuReset'); shout('ab1QRSearch', tags.target);\";\n    menuButton.type = \"search\";\n    menuButton.label = \"load from uuab\";\n    menuButton.formAddress = \"egg\";\n\n    create(menuButton);\n\n    menuButton.type = \"publish\";\n    menuButton.label = \"publish to uuab\";\n    menuButton.onClick = \"@ shout('ab1MenuReset'); shout('ab1QRPublish', tags.target);\";\n\n    create(menuButton);\n}","ab1Refresh":"@clearTagMasks(thisBot);"}},"f04bf0f7-25ab-4a0d-8cb2-59cec86057d8":{"id":"f04bf0f7-25ab-4a0d-8cb2-59cec86057d8","space":"shared","tags":{"ab1":true,"ab1ID":"instMemory","destroyable":false,"scaleZ":"1.6","scaleY":"0.8","scaleX":"0.8","ab1UpdateID":"3fcf5414-0b26-49c9-8c16-42c1d8f7ebf9","ab1SleepStateAsleepOnEnter":"@shout(\"ab1Reset\")","strokeColor":"orange","ab1Y":-2,"ab1X":2,"ab1MenuLabel":"inst memory","color":"#20dcf5","ab1Color":"#908BFC","scale":1,"ab1BotSnapState":"face","ab1GridSnapState":true,"ab1SleepState":true,"ab1Version":"8","ab1InitialLoad":"true","ab1Skill":"true","ab1Reset":"@clearTagMasks(thisBot, \"tempLocal\");","ab1Iteration":82,"ab1Z":0,"ab1Focus":"ab1Action","ab1RecordState":false,"system":"ab1.manager.instMemory","ab1MenuState":"false"}},"f3283217-c321-4a05-9aa0-2fa4550d67ac":{"id":"f3283217-c321-4a05-9aa0-2fa4550d67ac","space":"shared","tags":{"ab1":true,"strokeColor":"orange","scaleZ":"1.6","scaleY":"0.8","scaleX":"0.8","destroyable":false,"ab1UpdateID":"fa250b7e-3542-41c1-889c-fd16e33616ed","ab1ID":"searchLTM","ab1Action":"@let abID = that.text;\n\nshout(\"ab1LTMSearch\", {abID: abID, ab1: true});","color":"#908BFC","ab1Y":-5,"ab1Icon":"search","ab1MenuLabel":"search","ab1LTMSearch":"@//shout(\"ab1LTMSearch\", {abID: abID, key: key, autoHatch: boolean, returnType: data/null});\nif (that.ab1)\n{\n    shout(\"ab1MenuReset\");\n}\n\nlet abID = that.abID;\nlet key = that.key;\nlet autoHatch = that.autoHatch;\nlet returnType = that.returnType;\nlet newEgg;\nlet getRecord = await os.getData(ab1LongTermMemory.tags.ab1RecordKey, abID, \"https://publicos.link/\");\n\nif (!getRecord.success)\n{\n    console.log(getRecord, \"checking old STM\");\n\n    let filenamehash = crypto.sha256(abID);\n    let fileurlhash = \"aux_\" + filenamehash + '.aux';\n    let targetURL = \"https://builder-stm-files.s3.amazonaws.com/\" + fileurlhash;\n    let o = {};\n    o.method = \"GET\";\n    o.url = targetURL;\n\n    try \n    {\n        ltmResponse = await webhook(o);\n\n        newEgg = ltmResponse.data.state;\n\n        for (const property in newEgg)\n        {\n            const newMOD = newEgg[property];\n\n            newEgg = newMOD;\n        }\n    } \n    catch (e) \n    {\n        os.toast(\"abID not found\");\n\n        shout(\"ab1Reset\");\n\n        console.log(e);\n        return;\n    }\n}\nelse\n{\n    newEgg = getRecord.data;\n}\n\nif (returnType == \"data\" && getRecord.success)\n{\n    //return bots here after grabbing latest version\n}\n\nlet ab1 = getBot(\"ab1ID\", \"ab1\");\nlet currentDim;\nlet spaceMod;\nlet dimensionX;\nlet dimensionY;\nlet dimMod;\n\nif (ab1)\n{\n    currentDim = ab1.tags.dimension;\n}\nelse\n{\n    currentDim = os.getCurrentDimension();\n}\n\nif (!ab1InstMemory.tags.ab1FocusData) \n{\n    dimensionX = null;\n    dimensionY = null;\n}\nelse //THIS MAY NEED UPDATING\n{\n    let hatchPoint = ab1InstMemory.tags.ab1FocusData;\n\n    currentDim = hatchPoint.dimension;\n    dimensionX = hatchPoint.x;\n    dimensionY = hatchPoint.y;\n    spaceMod = {space: \"shared\"};\n}\n\nif (!autoHatch && configBot.tags.ab == null)\n{\n    dimMod = {[currentDim]: true, [currentDim+\"X\"]: dimensionX, [currentDim+\"Y\"]: dimensionY, dimension: currentDim}\n}\nelse\n{\n    if (configBot.tags.key)\n    {\n        key = configBot.tags.key\n    }\n\n    dimMod = {onCreate: `@whisper(thisBot, 'ovoHatch', {key: '${key}', autoHatch: true});`};\n}\n\nlet eggMod = {};\n\neggMod.space = \"tempLocal\";\neggMod.initialTimer = true;\neggMod.abID = abID;\neggMod.ovoHatch = ovoNest.tags.ovoHatchLogic;\neggMod.onClick = ovoNest.tags.ab1EggClick;\neggMod.onKeyDown = ovoNest.tags.ab1EggOnKeyDown;\neggMod.onSaveInput = \"@ tags.label = 'v'+tags.targetVersion;\";\neggMod.onCreate = `@ tags.progressBar = 0;tags.interval = setInterval(() => {whisper(thisBot, \"eggTimer\");}, 75);`;\neggMod.form = \"egg\";\neggMod.progressBarColor = \"#BF5E66\";\neggMod.progressBarBackgroundColor = \"#592989\";\neggMod.labelSize = 0.5;\neggMod.labelColor = \"#404040\";\neggMod.onPointerEnter = \"@ os.toast(tags.abID + ' v'+tags.targetVersion);\";\neggMod.labelPosition = \"front\";\neggMod.orientationMode = \"billboardFront\";\neggMod.eggTimer = `@ if (tags.progressBar < 1) \n{\n    tags.progressBar += 0.1;\n}\nelse\n{\n    clearTimeout(tags.interval);\n    tags.interval = null;\n    whisper(thisBot, \"onClick\");\n    tags.progressBar = null;\n}`;\n\ncreate(newEgg, eggMod, dimMod, spaceMod);\n\nif (that.ab1)\n{\n    shout(\"ab1Reset\");\n}","ab1MenuLabelGridFocus":"egg","scale":1,"ab1InitialLoad":"true","ab1Skill":"true","ab1Z":0,"ab1X":-5,"onMenuCreate":"@tags.form = \"input\";\ntags.onSubmit = tags.onClick;","ab1ToolBoxAction":"@whisper(getBot(\"ab1ID\", \"ovo\"), \"ovoMenu\");\n\nlet auxCodeField = {}\n\nauxCodeField.space = \"tempLocal\";\nauxCodeField.ovoMenu = true;\nauxCodeField.ab1MenuReset = \"@ destroy(thisBot);\";\nauxCodeField.ovoMenuSortOrder = 0;\nauxCodeField.form = \"input\";\nauxCodeField.color = \"#908BFC\";\nauxCodeField.formAddress = \"egg\";\nauxCodeField.label = \"enter id\";\nauxCodeField.onSubmit = \"@ whisper(ab1LongTermMemorySearch, 'ab1LTMSearch', {abID: that.text});\";\nauxCodeField.menuItemStyle = `ðŸ§¬ {\"border-radius\": \"9px 9px 9px 9px\", \"margin-top\": \"6px\"}`;\nauxCodeField.ab1Click = \"@ destroy(thisBot);\";\nauxCodeField.labelAlignment = \"left\";\n\nlet newBot = create(auxCodeField);\n\nconsole.log(newBot)","ab1RecordSystem":"true","ab1Refresh":"@clearTagMasks(thisBot);","system":"ab1.memory.searchLTM","ab1QRSearch":"@//UPDATE\nlet currentVariable = that;\nlet testVal = RegExp(/\\.com/);\nlet webTest = testVal.test(currentVariable);\n\nif (webTest) \n{\n    setTagMask(ab1InstMemory, \"autoHatch\", true);\n\n    let urlFormat = new URL(currentVariable);\n    let auxCode = urlFormat.searchParams.get(\"auxCode\");\n    let ab = urlFormat.searchParams.get(\"AB\");\n    let autoLoad = urlFormat.searchParams.get(\"autoLoad\");\n    let key = urlFormat.searchParams.get(\"auxKey\");\n    let auxKey = urlFormat.searchParams.get(\"auxKey\");\n\n    if (auxCode || ab || autoLoad) \n    {\n        if (ab) {\n            currentVariable = crypto.sha256(ab);\n        }\n        else if (autoLoad) {\n            currentVariable = crypto.sha256(autoLoad);\n        }\n        else if (auxCode) {\n            currentVariable = crypto.sha256(auxCode);\n        }\n    }\n    else \n    {\n        var targetURL = currentVariable.replace(\"/?\", \"/webhook/?\");\n        var webSite = true;\n    }\n\n    if (key) \n    {\n        configBot.masks.auxKey = key;\n    }\n    else if (auxKey) \n    {\n        configBot.masks.auxKey = auxKey;\n    }\n}\n\nwhisper(thisBot, \"ab1LTMSearch\", {abID: currentVariable});\n\nshout(\"ab1Refresh\");"}},"f39f8f6f-a60e-447f-837c-bfb7b862a89f":{"id":"f39f8f6f-a60e-447f-837c-bfb7b862a89f","space":"shared","tags":{"ab1":true,"ab1UpdateID":"c10ba8db-570b-41ee-9016-d5afc5bfd9db","scaleX":"0.8","scaleY":"0.8","scaleZ":"1.6","strokeColor":"orange","hatchAB1":"@shout(\"ab1Sleep\");\n\nshout(\"ab1Summon\", {type: \"initial\", dimension: [os.getCurrentDimension()]});\n\nshout(\"ab1RemindTimer\");","ovoMenu":"@configBot.masks.menuPortal = \"ovoMenu\";\n\nwhisper(thisBot, \"ovo\");","ovo":"@let ovo = getBot(\"ab1ID\", \"ovo\")\n\nif (ovo == null)\n{\n    let ovoMod = {};\n    let currentDim = os.getCurrentDimension();\n\n    ovoMod.space = \"tempLocal\";\n    ovoMod.form = \"egg\";\n    ovoMod[currentDim] = true;\n    ovoMod.draggable = false;\n    ovoMod.label = \"ovo\";\n    ovoMod.ab1ID = \"ovo\";\n    ovoMod.labelPosition = \"front\";\n    ovoMod.positioningMode = \"absolute\";\n    ovoMod.onPortalChanged = \"@ if(that.portal == 'gridPortal' || that.portal == 'sheetPortal'){shout('ab1Reset')};\";\n    ovoMod.ab1Reset = \"@ destroy(thisBot);\"\n    ovoMod.labelSize = 0.5;\n    ovoMod.orientationMode = \"billboardFront\";\n    ovoMod.scale = 0.0001;\n    ovoMod.ovoSetup = `@\n    if(tags.scale < 1)\n    {\n        await animateTag(thisBot, 'scale',{\n            toValue: 1,\n            duration: 0.5\n        });\n    }\n\n    os.tweenTo(thisBot, 12, 60, 45, 1);\n\n    setTimeout(() => whisper(getBot('ab1ID', 'searchLTM'), \"ab1Action\"), 200);`;\n    ovoMod.ab1MenuReset = \"@ destroy(thisBot);\";\n    ovoMod.onCreate = `@     await animateTag(thisBot, 'scale',{\n        toValue: 1,\n        duration: 0.5\n    });`;\n\n    create(ovoMod);\n}","destroyable":false,"color":"#908BFC","ovoVersion":"5","eggUUID":"ccb8c8c5-6872-4bde-9d3b-c87a1c78ed89","ab1EggClick":"@tags.initialTimer = null;\n//NEED TO CLEAR INTERVAL?\nlet eggMenuButton = {};\n\nos.tweenTo(thisBot, 15,45,45, 5);\n\nconfigBot.masks.menuPortal = 'ab1EggMenu';\n\nsetTagMask(ab1InstMemory, \"ab1MenuState\", true);\n\nshout(\"eggMenuReset\");\n\neggMenuButton.space = \"tempLocal\";\neggMenuButton.ab1EggMenu = true;\neggMenuButton.egg = getID(thisBot);\neggMenuButton.targetVersion = tags.targetVersion;\neggMenuButton.menuItemStyle = 'ðŸ§¬ {\"border-radius\": \"9px 9px 9px 9px\", \"margin-top\": \"6px\"}';\neggMenuButton.label = \"hatch \" + tags.abID + \" v\" + tags.targetVersion + \" of \" + tags.maxVersion;\neggMenuButton.eggMenuReset = \"@ destroy(thisBot);\";\neggMenuButton.onGridClick = \"@ destroy(thisBot);\";\neggMenuButton.color = \"#FFFFFF\";\neggMenuButton.onClick = \"@ await shout('eggMenuReset'); whisper(getBot('id', tags.egg), 'ovoHatch');\";\n\ncreate(eggMenuButton);","ab1EggOnKeyDown":"@if (that.keys == \"Shift\")\n{\n    let versionButton = {};\n\n    versionButton.space = \"tempLocal\";\n    versionButton.ab1EggMenu = true;\n    versionButton.maxVersion = tags.maxVersion;\n    versionButton.egg = getID(thisBot);\n    versionButton.menuItemStyle = 'ðŸ§¬ {\"border-radius\": \"9px 9px 9px 9px\", \"margin-top\": \"6px\"}';\n    versionButton.label = \"change egg version\";\n    versionButton.eggMenuReset = \"@ destroy(thisBot);\";\n    versionButton.onGridClick = \"@ destroy(thisBot);\";\n    versionButton.color = \"#FFFFFF\";\n    versionButton.onKeyUp = \"@ if(that.keys == 'Shift'){destroy(thisBot)};\";\n    versionButton.onClick = \"@ os.showInputForTag(getBot('id', tags.egg), 'targetVersion', {'placeholder': 'enter a version from 1 to ' + tags.maxVersion}); shout('eggMenuReset');\";\n\n    create(versionButton);\n}","ab1MenuLabel":"share egg","ab1Icon":"ios_share","onMenuCreate":"@let selectedBot = getBot(\"id\", ab1InstMemory.tags.ab1FocusData);\n\nif (selectedBot.tags.auxCode == null || selectedBot.tags.eggFormatVersion == null)\n{\n    destroy(thisBot);\n}","ab1X":0,"scale":1,"ab1InitialLoad":"true","ab1Skill":"true","ab1ID":"ovo","ab1BotAction":"@let selectedBot = getBot(\"id\", ab1InstMemory.tags.ab1FocusData);\n\nshout(\"ab1MenuReset\");\n\nlet shareEgg = {};\n\nshareEgg.label = \"copy URL to clipboard\";\nshareEgg.formAddress = \"link\";\nshareEgg.ab1Refresh = \"@ destroy(thisBot);\";\nshareEgg.color = \"#908BFC\";\nshareEgg.onClick = `@ \n    let siteOrigin = new URL(configBot.tags.url).origin;\n\n    try \n    {\n        await os.share({ url: siteOrigin+\"/?ab=${selectedBot.tags.auxCode}\"});\n    }\n    catch (error) \n    {\n        os.setClipboard(siteOrigin+\"/?ab=${selectedBot.tags.auxCode}\");\n        os.toast(\"id copied to clipboard\");\n    }\n    \n    shout(\"ab1Refresh\");`;\n\nwhisper(ab1Command, \"ab1GenerateMenuButton\", shareEgg);\n\nshareEgg.label = \"copy embed code to clipboard\";\nshareEgg.formAddress = \"code\";\nshareEgg.onClick = `@ \n    let siteOrigin = new URL(configBot.tags.url).origin;\n\n    try \n    {\n        await os.share({ url: \"<iframe width='560' height='315' src='\"+siteOrigin+\"/?ab=${selectedBot.tags.auxCode}\" + \"' title='YouTube video player' frameborder='0' allow='accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture' allowfullscreen></iframe>\"});\n    }\n    catch (error) \n    {\n        os.setClipboard(\"<iframe width='560' height='315' src='\" + siteOrigin+\"/?ab=${selectedBot.tags.auxCode}\" + \"' title='YouTube video player' frameborder='0' allow='accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture' allowfullscreen></iframe>\");\n        os.toast(\"id copied to clipboard\");\n    }\n    \n    shout(\"ab1Refresh\");`;\n\nwhisper(ab1Command, \"ab1GenerateMenuButton\", shareEgg);","ab1Reset":"@clearTagMasks(thisBot);","ab1Z":0,"ab1Y":-2,"system":"ab1.memory.ovo","ovoAbSetup":"@let currentABS = getBots(\"ab\").length;\nlet ab = {}\n\nab.ab1ID = \"abEgg\";\nab.eggVersionHistory = true;\nab.creator = null;\nab.abID = \"abEgg\";\nab.space = \"shared\";\nab.onClick = tags.ovoABLogic;\nab.form = \"egg\";\nab.ab = true;\nab.abX = currentABS;\nab.abVersion = that.version;\nab.label = that.abID + \" v\" + that.version;\nab.targetAB = that.abID;\nab.labelColor = \"#404040\";\nab.labelPosition = \"front\";\nab.orientationMode = \"billboardFront\";\nab.auxCodeOrigin = that.abID;\n\nlet abBot = create(ab);\n\nreturn abBot.id;","ovoABLogic":"@let menuDim = os.getMenuDimension();\n\nshout(\"abButtonReset\");\n\nconfigBot.masks.menuPortal = \"ovoMenu\";\n\nlet abMenuButton = {};\n\nabMenuButton.space = \"tempLocal\";\nabMenuButton.ab1MenuReset = \"@ destroy(thisBot);\";\nabMenuButton.color = \"red\";\nabMenuButton[menuDim] = true;\nabMenuButton.menuItemStyle = `ðŸ§¬ {\"border-radius\": \"9px 9px 9px 9px\", \"margin-top\": \"6px\"}`;\nabMenuButton.ab1Click = \"@ destroy(thisBot);\";\nabMenuButton.labelAlignment = \"left\";\nabMenuButton.label = \"remove \" + tags.targetAB + \" ab\";\nabMenuButton.targetAB = thisBot.id;\nabMenuButton.formAddress = \"egg\";\nabMenuButton.abButtonReset = \"@ destroy(thisBot);\"\nabMenuButton.onClick = `@ destroy(getBot('id', tags.targetAB)); shout('abButtonReset');`;\n\ncreate(abMenuButton);","ovoEggCheck":"@let abID = that.abID;\nlet botHash = that.botHash;\nlet key = that.key;\nlet eggHistory;\nlet eggID;\nlet targetVersionNum;\nlet lastHash;\nlet maxVersionNum;\nlet recordLookup = await os.getData(ab1LongTermMemory.tags.ab1RecordKey, abID);\n\nif (recordLookup.success) \n{\n    eggHistory = recordLookup.data.eggVersionHistory;\n    eggID = recordLookup.data.eggID;\n    targetVersionNum = eggHistory.length + 1;\n    lastHash = eggHistory[targetVersionNum - 1];\n    maxVersionNum = eggHistory.length + 1;\n} \nelse \n{\n    eggHistory = [];\n    eggID = uuid();\n    targetVersionNum = 1;\n    lastHash = \"none\";\n    maxVersionNum = 1;\n}\n\nif (configBot.tags.versionDefined) \n{\n    const definedVersion = await os.showInput(maxVersionNum, {\n        title: 'set default version',\n        placeholder: `1 to ${maxVersionNum} (leave as ${maxVersionNum} for latest)`\n    });\n\n    targetVersionNum = definedVersion;\n    configBot.tags.versionDefined = null;\n}\nelse if (configBot.tags.targetVersion) \n{\n    targetVersionNum = configBot.tags.targetVersion;\n    configBot.tags.targetVersion = null;\n}\n\nlet egg = {};\n\negg.eggVersionHistory = eggHistory;\negg.eggFormatVersion = eggID;\negg.targetVersion = targetVersionNum;\negg.maxVersion = maxVersionNum;\negg.label = \"v\"+targetVersionNum;\negg.abID = abID;\n\nlet signature = {};\nlet date = new Date();\nlet time = date.getTime();\n\nsignature.previousHash = lastHash;\nsignature.ab1Version = ab1InstMemory.tags.ab1Version+\".\"+ab1InstMemory.tags.ab1Iteration;\nsignature.eggVersion = tags.eggUUID;\nsignature.eggVersionNum = tags.ovoVersion;\nsignature.timeStamp = time;\nsignature.casualOSVersion = [os.version()];\n\nreturn {signature: signature, eggData: egg};","ovoHatchLogic":"@shout(\"eggEnd\");\n\nlet versionArray = tags.eggVersionHistory;\nlet fileURL = versionArray[tags.targetVersion - 1];\nlet fileGet;\nlet autoHatch;\n\nif (that)\n{\n    if (that.autoHatch)\n    {\n        autoHatch = true;\n    }\n}\n\ntry\n{\n    fileGet = await os.getFile(fileURL);\n}\ncatch (error)\n{\n    console.log(\"checking old LTM\", error);\n\n    let versionArray = JSON.parse(tags.eggVersionHistory);\n    let fileUUID = versionArray[tags.targetVersion - 1];\n    let filenamehash = crypto.sha256(fileUUID);\n    let fileurlhash = \"aux_\" + filenamehash + '.aux';\n    let targetURL = \"https://builder-ltm-files.s3.amazonaws.com/\" + fileurlhash;\n    let o = {};\n    o.method = \"GET\";\n    o.url = targetURL;\n\n    fileGet = await webhook(o);\n\n    if (fileGet.status != 200)\n    {\n        os.toast(\"no file found\");\n\n        shout(\"ab1Refresh\");\n\n        return;\n    }\n    else\n    {\n        fileGet = fileGet.data;\n    }\n}\n\nif (!crypto.isEncrypted(fileGet))\n{\n    fileGet = fileGet.state;\n}\n\nwhisper(ab1AUXLoader, \"ab1PopulateBots\", {\"bots\": fileGet, \"egg\": true, \"origin\": tags.abID, \"autoHatch\": autoHatch, \"version\": tags.targetVersion});\n\ndestroy(thisBot);"}},"f4c1ced8-1247-4924-8f8c-e4fd9744d7e8":{"id":"f4c1ced8-1247-4924-8f8c-e4fd9744d7e8","space":"shared","tags":{"ab1":true,"ab1ID":"ltm","ab1UpdateID":"6fcf0097-4a38-4114-b29e-048e77d1ef3c","destroyable":false,"scaleX":"0.8","scaleY":"0.8","scaleZ":"1.6","strokeColor":"orange","ab1MenuLabel":"long term memory","ab1Y":-6,"color":"#20dcf5","scale":1,"ab1Skill":"true","ab1InitialLoad":"true","ab1Z":0,"ab1X":-6,"system":"ab1.memory.ltm","ab1FileUpload":"@let file = that.file;\nlet fileName = that.fileName;\nlet abID = that.abID;\nlet key = that.key;\nlet eggData = that.eggData;\nlet mimeType = that.mimeType;\nlet botInfo = that.botInfo;\nlet returnType;\nlet uploadURL;\nlet fileUpload = await os.recordFile(tags.ab1RecordKey, file, {description: fileName, mimeType: mimeType}, \"https://publicos.link\");\n\nif (abID)\n{\n    if (fileUpload.success) \n    {\n        uploadURL = fileUpload.url;\n\n        shout(\"onABPublished\", {ab: abID, fileAddress: uploadURL});\n\n        let siteOrigin = new URL(configBot.tags.url).origin;\n\n        let eggUpdate = await whisper(thisBot, \"ab1RecordUpload\", {key: key, abID: abID, eggData: eggData, uploadURL: uploadURL})[0];\n\n        if (configBot.tags.manualPublish && eggUpdate)\n        {\n            if (ab1InstMemory.tags.uuab)\n            {\n                os.setClipboard(siteOrigin+\"/?uuab=\"+abID+\"&key=\"+key+\"&inst=\"+abID+\"&gridPortal=home\");\n            }\n            else if (key)\n            {\n                os.setClipboard(siteOrigin+\"/?ab=\"+abID+\"&key=\"+key);\n            }\n            else\n            {\n                os.setClipboard(siteOrigin+\"/?ab=\"+abID);\n            }\n\n            os.toast(abID + \" published, URL copied to clipboard\");\n\n            configBot.tags.manualPublish = null;\n        }\n        else if (!eggUpdate)\n        {\n            return false;\n        }\n\n        return eggUpdate;\n    }\n    else \n    {\n        os.toast(\"Failed \" + fileUpload.errorMessage);\n\n        return false;\n    }\n}\nelse\n{\n    if (fileUpload.success)\n    {\n        uploadURL = fileUpload.url;\n    }\n    // else if () need to handle if a file was uploaded that's the same as another\n    // {\n\n    // }\n    else\n    {\n        return false;\n    }\n\n    if (returnType == \"link\")\n    {\n        os.setClipboard(uploadURL);\n\n        os.toast(\"file link copied to clipboard\");\n\n        return uploadURL;\n    }\n    else\n    {\n        let newBot = {};\n\n        newBot[configBot.tags.gridPortal] = true,\n        newBot.formAddress = uploadURL;\n\n        let mediaBot = create(newBot, botInfo);\n\n        return mediaBot;\n    }\n}","ab1RecordUpload":"@let eggData = that.eggData;\nlet eggHistory = eggData.eggVersionHistory;\n\neggHistory.push(that.uploadURL);\n\nlet recordData = await os.recordData(tags.ab1RecordKey, that.abID, eggData, \"https://publicos.link\");\n\nshout(\"ab1Refresh\");\n\nif (recordData.success)\n{   \n    return true;\n}\nelse\n{\n    console.log(recordData);\n\n    return false;\n}","ab1RecordKey":"vRK1.YWItMQ==.NHZsUGtoNmFGY3FJdjJTMms1NFlqUT09"}},"ffe7fcfd-4ed8-418b-939a-4d0d1b0f3b6c":{"id":"ffe7fcfd-4ed8-418b-939a-4d0d1b0f3b6c","space":"shared","tags":{"ab1":true,"strokeColor":"orange","scaleZ":"1.6","scaleY":"0.8","scaleX":"0.8","destroyable":false,"ab1Action":"@shout(\"ab1MenuReset\");\n\nif (ab1InstMemory.tags.uuab)\n{\n    try\n    {\n        configBot.tags.uuabScan = true;\n\n        os.openQRCodeScanner();\n\n        os.toast(\"please scan your practice permit\");\n    }\n    catch\n    {\n        os.toast(\"qr code scan not supported on this device\");\n\n        configBot.tags.uuabScan = null;\n    }\n\n    return;\n}\n\nlet menuDim = os.getMenuDimension();\nlet menuButton = {};\n\nmenuButton.space = \"tempLocal\";\nmenuButton[menuDim] = true;\nmenuButton.ab1MenuReset = \"@ destroy(thisBot);\";\nmenuButton.ab1Click = \"@ destroy(thisBot);\";\nmenuButton.menuItemStyle = `ðŸ§¬ {\"border-radius\": \"9px 9px 9px 9px\", \"margin-top\": \"6px\"}`;\nmenuButton.labelAlignment = \"left\";\nmenuButton.ab1MenuButton = true;\nmenuButton[menuDim+\"SortOrder\"] = 11;\n\nmenuButton.label = \"download\";\nmenuButton.formAddress = \"get_app\";\nmenuButton.color = \"#55E679\";\nmenuButton.onClick = `@ \nlet downloadBots;\n\nif (ab1InstMemory.tags.ab1Focus == \"ab1BotAction\")\n{\n    downloadBots = [getBot(\"id\", ab1InstMemory.tags.ab1FocusData)];\n}\nelse\n{\n    downloadBots = getBots(byMod({\"ab1ID\": null, \"ab1Ignore\": null, \"space\": \"shared\"}));\n}\n\nconsole.log(downloadBots);\n\nlet currentInst = os.getCurrentInst();\n\nos.downloadBots(downloadBots, currentInst);\n\nshout(\"ab1Refresh\");`;\n\n//create download button\ncreate(menuButton);\n\nmenuButton[menuDim+\"SortOrder\"] = 1;\nmenuButton.label = \"encrypt\";\nmenuButton.menuItemStyle = `ðŸ§¬ {\"border-radius\": \"9px 9px 0px 0px\", \"margin-top\": \"6px\"}`;\nmenuButton.formAddress = \"check_box_outline_blank\";\nmenuButton.encryptState = false;\nmenuButton.color = \"#908BFC\";\nmenuButton.onClick = `@ if(tags.encryptState)\n    {\n        tags.encryptState = false;\n        tags.formAddress = 'check_box_outline_blank';\n        configBot.tags.encryption = null;\n    }\n    else\n    {\n        tags.encryptState = true;\n        tags.formAddress = 'check_box';\n        configBot.tags.encryption = true;\n    }`;\n\n//create encrypt button\ncreate(menuButton);\n\nmenuButton[menuDim] = null;\nmenuButton.menuItemStyle = `ðŸ§¬ {\"border-radius\": \"9px 9px 9px 9px\", \"margin-top\": \"6px\"}`;\nmenuButton.dimension = menuDim;\nmenuButton.onKeyDown = `@\n    if (that.keys[0] == \"Shift\")\n    {\n        tags[tags.dimension] = true;\n    }`;\nmenuButton.onKeyUp = `@\n    if (that.keys[0] == \"Shift\")\n    {\n        tags[tags.dimension] = false;\n    }`;\nmenuButton[menuDim + \"SortOrder\"] = -1;\nmenuButton.buttonState = \"automatic\";\nmenuButton.color = \"#908BFC\";\nmenuButton.formAddress = \"check_box\";\nmenuButton.label = \"automatic version\";\nmenuButton.onClick = `@\n    if(tags.buttonState == 'automatic')\n    {\n        tags.buttonState = 'manual';\n        tags.formAddress = 'check_box_outline_blank';\n        configBot.tags.versionDefined = true;\n    }\n    else\n    {\n        tags.buttonState = 'automatic';\n        tags.label = 'automatic version';\n        tags.formAddress = 'check_box';\n        configBot.tags.versionDefined = null;\n    }`;\n\n//create version button\ncreate(menuButton);\n\nmenuButton[menuDim] = true;\nmenuButton.dimension = null;\nmenuButton.menuItemStyle = `ðŸ§¬ {\"border-radius\": \"0px 0px 9px 9px\", \"margin-top\": \"0px\"}`;//{\"border-radius\": \"9px 9px 0px 0px\", \"margin-top\": \"6px\"}`;\nmenuButton.onKeyDown = null;\nmenuButton.onKeyUp = null;\nmenuButton[menuDim+\"SortOrder\"] = 2;\nmenuButton.buttonState = null;\nmenuButton.color = \"#908BFC\";\nmenuButton.form = \"input\";\nmenuButton.menuItemShowSubmitWhenEmpty = true;\nmenuButton.formAddress = \"egg\";\nmenuButton.label = (ab1InstMemory.tags.baseAB && ab1InstMemory.tags.ab1Focus != \"ab1BotAction\") ? \"save as \" + ab1InstMemory.tags.baseAB : \"publish\";\nmenuButton.onSubmit = `@ configBot.tags.manualPublish = true;   \n\n    if (that.text == null && ab1InstMemory.tags.baseAB && ab1InstMemory.tags.ab1Focus != \"ab1BotAction\")\n    {\n        that.text = ab1InstMemory.tags.baseAB;\n    }\n\n    if (that.text)\n    {\n        shout('ab1PublishAB', {ab: that.text, manualPublish: true});\n    }\n    else\n    {\n        os.toast(\"ab not specified\");\n        shout(\"ab1Refresh\");\n    }\n`;\n\ncreate(menuButton);\n\nif (that.ab1BotAction)\n{\n    menuButton[menuDim+\"SortOrder\"] = 8;\n    menuButton.form = null;\n    menuButton.menuItemStyle = `ðŸ§¬ {\"border-radius\": \"9px 9px 9px 9px\", \"margin-top\": \"6px\"}`;\n    menuButton.label = \"copy to clipboard\";\n    menuButton.formAddress = \"file_copy\";\n    menuButton.color = \"#55E679\";\n    menuButton.onClick = `@ let selectedBot = getBot(\"id\", ab1InstMemory.tags.ab1FocusData);\n    let preppedBot = JSON.stringify(selectedBot);\n    let state = {}\n\n    state[ab1InstMemory.tags.ab1FocusData] = selectedBot;\n\n    let newFile = {}\n    newFile.version = 1;\n    newFile.state = state;\n\n    var formattedFile = JSON.stringify(newFile);\n\n    os.setClipboard(formattedFile);\n    os.toast(\"bot copied to clipboard\");\n    shout(\"ab1Refresh\");`;\n\n    //create \n    create(menuButton);\n}","ab1UpdateID":"ccd8a3b3-fca7-4f39-8139-52a4ac82b92d","ab1ID":"publish","ab1MenuLabel":"share","ab1Icon":"ios_share","color":"#908BFC","ab1X":7,"scale":1,"ab1Skill":"true","ab1InitialLoad":"true","ab1BotAction":"@let selectedBot = ab1InstMemory.tags.ab1FocusData;\n\nconfigBot.tags.publishTarget = selectedBot;\n\nwhisper(ab1Publish, \"ab1Action\", {ab1BotAction: true});\n\nconfigBot.tags.manualPublish = true;","ab1Reset":"@configBot.tags.publishTarget = null;\nconfigBot.tags.versionDefined = null;\nconfigBot.tags.encryption = null;","ab1Z":0,"ab1Y":7,"ab1RecordSystem":"true","system":"ab1.memory.publish","ab1QRPublish":"@//UPDATE\nlet currentVariable = that;\nlet testVal = RegExp(/\\.com/);\nlet webTest = testVal.test(currentVariable);\nlet abID;\nlet key;\n\nif (webTest) {\n    let urlFormat = new URL(currentVariable);\n    let auxCode = urlFormat.searchParams.get(\"auxCode\");\n    let ab = urlFormat.searchParams.get(\"AB\");\n    let autoLoad = urlFormat.searchParams.get(\"autoLoad\");\n    let auxKey = urlFormat.searchParams.get(\"auxKey\");\n    let key = urlFormat.searchParams.get(\"key\");\n\n    if (ab) {\n        abID = ab;\n    }\n    else if (autoLoad) {\n        abID = autoLoad;\n    }\n    else if (auxCode) {\n        abID = auxCode;\n    }\n\n    if (auxKey) {\n        key = auxKey;\n    }\n    else if (key) {\n        key = key;\n    }\n}\nelse if (auxCodeValidTest) {\n    abID = that;\n}\n\nwhisper(thisBot, \"ab1InitiatePublish\", { fileName: abID, key: key });\n\nshout(\"ab1Refresh\");","ab1PublishAB":"@//shout(\"ab1PublishAB\", {ab: \"\", key: \"\", target: \"\"});\nshout(\"ab1MenuReset\");\n\nif (configBot.tags.manualPublish)\n{\n    let menuDim = os.getMenuDimension();\n    let menuButton = {};\n\n    menuButton.space = \"tempLocal\";\n    menuButton[menuDim] = true;\n    menuButton.ab1MenuReset = \"@ destroy(thisBot);\";\n    menuButton.ab1Click = \"@ destroy(thisBot);\";\n    menuButton.menuItemStyle = `ðŸ§¬ {\"border-radius\": \"9px 9px 9px 9px\", \"margin-top\": \"6px\"}`;\n    menuButton.labelAlignment = \"left\";\n    menuButton.ab1MenuButton = true;\n    menuButton.trackNum = -1;\n    menuButton.onCreate = `@\n    if (tags.trackNum == 2)\n    {\n        tags.trackNum = 0;\n    }\n    else\n    {\n        tags.trackNum++;\n    }\n\n    tags.label = tags[\"label\"+tags.trackNum];\n    tags.formAddress = tags[\"form\"+tags.trackNum];\n\n    setTimeout(() => whisper(thisBot, \"onCreate\"), 500);`;\n    menuButton.label0 = \"uploading.\";\n    menuButton.label1 = \"uploading..\";\n    menuButton.label2 = \"uploading...\";\n    menuButton.form0 = \"hourglass_bottom\";\n    menuButton.form1 = \"hourglass_top\";\n    menuButton.form2 = \"hourglass_bottom\";\n    menuButton.color = \"#908BFC\";\n\n    create(menuButton);\n}\n\nlet abID = that.ab;\nlet key = that.key;\nlet target = that.target;\nlet state = {};\nlet formattedFile = {}\n\nif (!target && ab1InstMemory.tags.ab1Focus == \"ab1BotAction\")\n{\n    target = getBot(\"id\", ab1InstMemory.tags.ab1FocusData);\n}\nelse if (!target)\n{\n    target = getBots(byMod({space: \"shared\", ab1ID: null, ab1Ignore: null}));\n\n    if (target.length < 1)\n    {\n        os.toast(\"No bots found to publish\");\n\n        shout(\"ab1Refresh\");\n\n        return;\n    }\n}\n\nif (configBot.tags.encryption)\n{\n    let keyCheck;\n\n    configBot.tags.encryption = null;\n\n    key = await os.showInput(\"\", {\n        type: 'secret',\n        title: 'enter a secret key'\n    });\n\n    if (key)\n    {\n        keyCheck = await os.showInput(\"\", {\n            type: 'secret',\n            title: 'confirm secret key'\n        });\n    }\n\n    if (key != keyCheck) {\n        if (!keyCheck)\n        {\n            os.toast(\"no key entered\");\n        }\n        else\n        {\n            os.toast(\"keys do not match\");\n        }\n\n        shout(\"ab1Refresh\");\n\n        return;\n    }\n}\n\nif (Array.isArray(target)) \n{\n    for (let i = 0; i < target.length; i++) {\n        let currentBotID = target[i].id;\n        let currentBot = target[i];\n        \n        state[currentBotID] = currentBot;\n    }\n}\nelse \n{\n    state[target.id] = target;\n}\n\nlet botHash = crypto.sha256(state);\nlet eggCheck = await whisper(ovoNest, \"ovoEggCheck\", {abID: abID, botHash: botHash, key: key})[0];\n\nformattedFile.version = 1;\nformattedFile.signature = eggCheck.signature;\nformattedFile.state = state;\n\nif (key) \n{\n    formattedFile = JSON.stringify(formattedFile);\n\n    formattedFile = crypto.encrypt(key, formattedFile);\n}\n\nlet publishUpdate = await whisper(ab1LongTermMemory, \"ab1FileUpload\", {file: formattedFile, abID: abID, key: key, eggData: eggCheck.eggData})[0];\n\nreturn publishUpdate","ab1PublishUUAB":"@configBot.tags.uuabScan = null;\n\nlet uuabConfig = getBot(byMod({uuabConfig: true, uuabID: configBot.tags.inst}));\nlet uuabParams = (new URL(that)).searchParams;\nlet uuabEncryptionKey = uuabParams.get('inst');\nlet uuabPH = uuabParams.get('ph');\n\nlet pin = await os.showInput(null,{\n    title: \"enter pin\",\n    type: \"secret\"\n});\n\nif (pin)\n{\n    let ph = crypto.sha256(pin).substring(0,4);\n\n    if (ph == uuabConfig.tags.ph && ph == uuabPH)\n    {\n        ab1InstMemory.masks.ab1RecordKey = uuabConfig.tags.uuabKey;\n\n        configBot.tags.manualPublish = true;\n\n        shout('ab1PublishAB', {ab: configBot.tags.inst, key: uuabEncryptionKey});\n    }\n    else\n    {\n        await os.toast(\"pin does not match\", 2);\n\n        shout(\"ab1Refresh\");\n    }\n}\nelse\n{\n    await os.toast(\"no pin given\", 2);\n\n    shout(\"ab1Refresh\");\n\n    return\n}"}}}}