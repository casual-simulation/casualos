# This is the SAM template that represents the architecture of your serverless application
# https://docs.aws.amazon.com/serverless-application-model/latest/developerguide/serverless-sam-template-basics.html

# The AWSTemplateFormatVersion identifies the capabilities of the template
# https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/format-version-structure.html
AWSTemplateFormatVersion: 2010-09-09
Description: >-
    aws

# Transform section specifies one or more macros that AWS CloudFormation uses to process your template
# https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/transform-section-structure.html
Transform:
    - AWS::Serverless-2016-10-31

Parameters:
    FileRecordsS3StorageClassParameter:
        Type: String
        Description: The S3 Storage Class that should be used for file records.
    AllowedOriginsParameter:
        Type: String
        Description: The allowed origin domains that are able to make requests for the internal auth site APIs. This value should be a space-separated string that includes the origins that the auth site is hosted on.
    AllowedApiOriginsParameter:
        Type: String
        Description: The allowed origin domains that are able to make requests for the records APIs. This value should be a space-separated string that includes the origins that are allowed to request/publish records to this site.
    ServerConfigParameter:
        Type: String
        Description: The JSON configuration that should be used.
    SESIdentityNameParameter:
        Type: String
        Description: The Simple Email Service (SES) Identity that the lambda function should be allowed to send emails from.
        Default: ''

Conditions:
    UseSESCrud: !Not [!Equals [!Ref SESIdentityNameParameter, '']]

Globals:
    Api:
        # enable CORS; to make more specific, change the origin wildcard
        # to a particular domain name, e.g. "'www.example.com'"
        # TODO: add a CORS policy to the API Gateway
        Cors:
            AllowMethods: "'*'"
            AllowHeaders: "'*'"
            AllowOrigin: "'*'"

# Resources declares the AWS resources that you want to include in the stack
# https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/resources-section-structure.html
Resources:
    # Each Lambda function is defined by properties:
    # https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction

    # This is a Lambda function config associated with the source code: services.js
    handleRecords:
        Type: AWS::Serverless::Function
        Properties:
            Handler: Records.handleRecords
            CodeUri: dist/handlers
            Runtime: nodejs18.x
            MemorySize: 256
            Timeout: 100
            Description: A function that publishes and retreives records for the user.
            Policies:
                # Give Create/Read/Update/Delete Permissions to the Bucket
                - S3CrudPolicy:
                      BucketName: !Sub '${AWS::StackName}-filesbucket-${AWS::AccountId}'
                - !If [
                      UseSESCrud,
                      !Ref SESIdentityNameParameter,
                      !Ref 'AWS::NoValue',
                  ]
            Environment:
                Variables:
                    REGION: !Ref 'AWS::Region'
                    FILES_BUCKET: !Sub '${AWS::StackName}-filesbucket-${AWS::AccountId}'
                    FILES_STORAGE_CLASS: !Ref FileRecordsS3StorageClassParameter
                    ALLOWED_ORIGINS: !Ref AllowedOriginsParameter
                    ALLOWED_API_ORIGINS: !Ref AllowedApiOriginsParameter
            Events:
                HandleApiV2:
                    Type: Api
                    Properties:
                        Path: /api/v2/{extra+}
                        Method: Any
                MarkFileUploaded:
                    Type: S3
                    Properties:
                        Bucket: !Ref FilesBucket
                        Events: s3:ObjectCreated:Put
                GetMetadata:
                    Type: Api
                    Properties:
                        Path: /api/{userId}/metadata
                        Method: GET
                PutMetadata:
                    Type: Api
                    Properties:
                        Path: /api/{userId}/metadata
                        Method: PUT
                GetSubscriptions:
                    Type: Api
                    Properties:
                        Path: /api/{userId}/subscription
                        Method: GET
                ManageSubscriptions:
                    Type: Api
                    Properties:
                        Path: /api/{userId}/subscription/manage
                        Method: POST
                StripeWebhook:
                    Type: Api
                    Properties:
                        Path: /api/stripeWebhook
                        Method: POST
    HandleRecordsLogGroup:
        Type: AWS::Logs::LogGroup
        Properties:
            LogGroupName: !Sub '/aws/lambda/${handleRecords}'
            RetentionInDays: 14

    # Simple syntax to create a DynamoDB table with a single attribute primary key, more in
    # https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlesssimpletable

    FilesBucket:
        Type: AWS::S3::Bucket
        DeletionPolicy: Retain
        Properties:
            BucketName: !Sub '${AWS::StackName}-filesbucket-${AWS::AccountId}'
            CorsConfiguration:
                CorsRules:
                    - AllowedHeaders:
                          - '*'
                      AllowedMethods:
                          - GET
                          - PUT
                          - POST
                      AllowedOrigins:
                          - '*'
                      ExposedHeaders: []
                      MaxAge: 3000
            PublicAccessBlockConfiguration:
                BlockPublicAcls: false
                BlockPublicPolicy: false
                IgnorePublicAcls: false
                RestrictPublicBuckets: false
            OwnershipControls:
                Rules:
                    - ObjectOwnership: BucketOwnerPreferred

    WebsocketsApi:
        Type: AWS::ApiGatewayV2::Api
        Properties:
            Name: !Sub '${AWS::StackName}-websockets'
            ProtocolType: WEBSOCKET
            RouteSelectionExpression: '$request.body.action'
    ConnectRoute:
        Type: AWS::ApiGatewayV2::Route
        Properties:
            ApiId: !Ref WebsocketsApi
            RouteKey: $connect
            AuthorizationType: NONE
            OperationName: ConnectRoute
            Target: !Join
                - '/'
                - - 'integrations'
                  - !Ref ConnectIntegration
    ConnectIntegration:
        Type: AWS::ApiGatewayV2::Integration
        Properties:
            ApiId: !Ref WebsocketsApi
            Description: Connect Integration
            IntegrationType: AWS_PROXY
            IntegrationUri:
                Fn::Sub: arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${HandleConnectFunction.Arn}/invocations
    DisconnectRoute:
        Type: AWS::ApiGatewayV2::Route
        Properties:
            ApiId: !Ref WebsocketsApi
            RouteKey: $disconnect
            AuthorizationType: NONE
            OperationName: DisconnectRoute
            Target: !Join
                - '/'
                - - 'integrations'
                  - !Ref DisconnectIntegration
    DisconnectIntegration:
        Type: AWS::ApiGatewayV2::Integration
        Properties:
            ApiId: !Ref WebsocketsApi
            Description: Disconnect Integration
            IntegrationType: AWS_PROXY
            IntegrationUri:
                Fn::Sub: arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${HandleDisconnectFunction.Arn}/invocations
    DefaultRoute:
        Type: AWS::ApiGatewayV2::Route
        Properties:
            ApiId: !Ref WebsocketsApi
            RouteKey: $default
            AuthorizationType: NONE
            OperationName: DefaultRoute
            Target: !Join
                - '/'
                - - 'integrations'
                  - !Ref DefaultIntegration
    DefaultIntegration:
        Type: AWS::ApiGatewayV2::Integration
        Properties:
            ApiId: !Ref WebsocketsApi
            Description: Default Integration
            IntegrationType: AWS_PROXY
            IntegrationUri:
                Fn::Sub: arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${HandleMessageFunction.Arn}/invocations
    Deployment:
        Type: AWS::ApiGatewayV2::Deployment
        DependsOn:
            - ConnectRoute
            - DefaultRoute
            - DisconnectRoute
        Properties:
            ApiId: !Ref WebsocketsApi
    Stage:
        Type: AWS::ApiGatewayV2::Stage
        Properties:
            StageName: Prod
            Description: Prod Stage
            DeploymentId: !Ref Deployment
            ApiId: !Ref WebsocketsApi

    ExecutionRole:
        Type: AWS::IAM::Role
        Properties:
            RoleName: !Sub '${AWS::StackName}-websockets-execute-api-role'
            AssumeRolePolicyDocument:
                Version: '2012-10-17'
                Statement:
                    - Effect: Allow
                      Principal:
                          Service:
                              - lambda.amazonaws.com
                      Action:
                          - sts:AssumeRole
            Policies:
                - PolicyName: !Sub '${AWS::StackName}-websockets-logs-policy'
                  PolicyDocument:
                      Version: 2012-10-17
                      Statement:
                          - Effect: Allow
                            Action:
                                - 'logs:CreateLogStream'
                                - 'logs:CreateLogGroup'
                                - 'logs:PutLogEvents'
                            Resource:
                                - !Sub arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/${AWS::StackName}*:*
                                - !Sub arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/${AWS::StackName}*:*:*
                - PolicyName: !Sub '${AWS::StackName}-websockets-s3-crud-policy'
                  PolicyDocument:
                      Version: 2012-10-17
                      Statement:
                          - Effect: Allow
                            Action:
                                - 's3:GetObject'
                                - 's3:ListBucket'
                                - 's3:GetBucketLocation'
                                - 's3:GetObjectVersion'
                                - 's3:PutObject'
                                - 's3:PutObjectAcl'
                                - 's3:GetLifecycleConfiguration'
                                - 's3:PutLifecycleConfiguration'
                                - 's3:DeleteObject'
                            Resource:
                                - !Sub 'arn:${AWS::Partition}:s3:::${MessagesBucket}'
                                - !Sub 'arn:${AWS::Partition}:s3:::${MessagesBucket}/*'
                - PolicyName: !Sub '${AWS::StackName}-websockets-execute-api-policy'
                  PolicyDocument:
                      Version: 2012-10-17
                      Statement:
                          - Effect: Allow
                            Action:
                                - 'execute-api:ManageConnections'
                            Resource:
                                - !Sub 'arn:${AWS::Partition}:execute-api:*:*:${WebsocketsApi}/Prod/*/@connections/*'

    HandleConnectFunction:
        Type: AWS::Serverless::Function
        Properties:
            Handler: websockets.connect
            CodeUri: dist/handlers
            Runtime: nodejs18.x
            MemorySize: 256
            Timeout: 100
            Description: A function handles websocket connections
            Role: !GetAtt
                - ExecutionRole
                - Arn
            Environment:
                Variables:
                    MESSAGES_BUCKET: !Ref MessagesBucket
                    WEBSOCKET_URL: !Sub 'https://${WebsocketsApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/'
    HandleConnectPermission:
        Type: AWS::Lambda::Permission
        DependsOn:
            - WebsocketsApi
        Properties:
            Action: lambda:InvokeFunction
            FunctionName: !Ref HandleConnectFunction
            Principal: apigateway.amazonaws.com
    HandleConnectLogGroup:
        Type: AWS::Logs::LogGroup
        DeletionPolicy: Delete
        Properties:
            LogGroupName: !Sub '/aws/lambda/${HandleConnectFunction}'
            RetentionInDays: 14

    HandleDisconnectFunction:
        Type: AWS::Serverless::Function
        Properties:
            Handler: websockets.disconnect
            CodeUri: dist/handlers
            Runtime: nodejs18.x
            MemorySize: 256
            Timeout: 100
            Description: A function that handles websocket disconnections.
            Role: !GetAtt
                - ExecutionRole
                - Arn
            Environment:
                Variables:
                    MESSAGES_BUCKET: !Ref MessagesBucket
                    WEBSOCKET_URL: !Sub 'https://${WebsocketsApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/'
    HandleDisconnectPermission:
        Type: AWS::Lambda::Permission
        DependsOn:
            - WebsocketsApi
        Properties:
            Action: lambda:InvokeFunction
            FunctionName: !Ref HandleDisconnectFunction
            Principal: apigateway.amazonaws.com
    HandleDisconnectLogGroup:
        Type: AWS::Logs::LogGroup
        DeletionPolicy: Delete
        Properties:
            LogGroupName: !Sub '/aws/lambda/${HandleDisconnectFunction}'
            RetentionInDays: 14

    HandleMessageFunction:
        Type: AWS::Serverless::Function
        Properties:
            Handler: websockets.message
            CodeUri: dist/handlers
            Runtime: nodejs18.x
            MemorySize: 256
            Timeout: 100
            Description: A function handle websocket messages.
            Role: !GetAtt
                - ExecutionRole
                - Arn
            Environment:
                Variables:
                    MESSAGES_BUCKET: !Ref MessagesBucket
                    WEBSOCKET_URL: !Sub 'https://${WebsocketsApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/'
    HandleMessagePermission:
        Type: AWS::Lambda::Permission
        DependsOn:
            - WebsocketsApi
        Properties:
            Action: lambda:InvokeFunction
            FunctionName: !Ref HandleMessageFunction
            Principal: apigateway.amazonaws.com
    HandleMessageLogGroup:
        Type: AWS::Logs::LogGroup
        DeletionPolicy: Delete
        Properties:
            LogGroupName: !Sub '/aws/lambda/${HandleMessageFunction}'
            RetentionInDays: 14

    HandleWebhooksFunction:
        Type: AWS::Serverless::Function
        Properties:
            Handler: websockets.webhook
            CodeUri: dist/handlers
            Runtime: nodejs18.x
            MemorySize: 256
            Timeout: 100
            Description: A function handle webhook requests.
            Role: !GetAtt
                - ExecutionRole
                - Arn
            Environment:
                Variables:
                    MESSAGES_BUCKET: !Ref MessagesBucket
                    WEBSOCKET_URL: !Sub 'https://${WebsocketsApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/'
            Events:
                Webhook:
                    Type: Api
                    Properties:
                        Path: /webhook
                        Method: ANY
    HandleWebhooksLogGroup:
        Type: AWS::Logs::LogGroup
        DeletionPolicy: Delete
        Properties:
            LogGroupName: !Sub '/aws/lambda/${HandleWebhooksFunction}'
            RetentionInDays: 14

    HandleInstDataFunction:
        Type: AWS::Serverless::Function
        Properties:
            Handler: websockets.instData
            CodeUri: dist/handlers
            Runtime: nodejs18.x
            MemorySize: 256
            Timeout: 100
            Description: A function handle inst data requests.
            Role: !GetAtt
                - ExecutionRole
                - Arn
            Environment:
                Variables:
                    MESSAGES_BUCKET: !Ref MessagesBucket
                    WEBSOCKET_URL: !Sub 'https://${WebsocketsApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/'
            Events:
                DataPortal:
                    Type: Api
                    Properties:
                        Path: /instData
                        Method: GET
    HandleInstDataLogGroup:
        Type: AWS::Logs::LogGroup
        DeletionPolicy: Delete
        Properties:
            LogGroupName: !Sub '/aws/lambda/${HandleInstDataFunction}'
            RetentionInDays: 14

    # S3 Bucket to large messages
    MessagesBucket:
        Type: 'AWS::S3::Bucket'
        Properties:
            AccessControl: Private
            LifecycleConfiguration:
                Rules:
                    - Id: CleanupRule
                      Prefix: ''
                      Status: Enabled
                      ExpirationInDays: 1
            CorsConfiguration:
                CorsRules:
                    - Id: AllowReadWriteCorsRule
                      AllowedMethods:
                          - GET
                          - PUT
                      AllowedOrigins:
                          - '*'
                      AllowedHeaders:
                          - '*'
                      MaxAge: '3600'
            PublicAccessBlockConfiguration:
                BlockPublicAcls: false
                BlockPublicPolicy: false
                IgnorePublicAcls: false
                RestrictPublicBuckets: false
            OwnershipControls:
                Rules:
                    - ObjectOwnership: BucketOwnerPreferred
    MessagesBucketPolicy:
        Type: AWS::S3::BucketPolicy
        Properties:
            Bucket: !Ref MessagesBucket
            PolicyDocument:
                Version: 2012-10-17
                Statement:
                    - Action:
                          - 's3:GetObject'
                      Effect: Allow
                      Resource: !Sub arn:${AWS::Partition}:s3:::${MessagesBucket}/*
                      Principal: '*'

Outputs:
    WebEndpoint:
        Description: 'API Gateway endpoint URL for Prod stage'
        Value: !Sub 'https://${ServerlessRestApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/'
