// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  binaryTargets = ["native", "rhel-openssl-1.0.x", "debian-openssl-3.0.x", "linux-arm64-openssl-3.0.x"]
  output   = "../prisma/generated"
  previewFeatures = ["tracing"]
}

datasource db {
  provider = "cockroachdb"
  url      = env("DATABASE_URL")
}

// Auth
model User {
    id String @id
    name String? @db.String(128)
    email String? @unique @db.String(128)
    phoneNumber String? @unique @db.String(64)
    avatarPortraitUrl String?
    avatarUrl String?
    allSessionRevokeTime DateTime?
    currentLoginRequestId String? @unique
    currentLoginRequest LoginRequest? @relation("CurrentLoginRequest", fields: [currentLoginRequestId], references: [requestId])
    currentWebAuthnChallenge String?
    banTime DateTime?
    banReason String? @db.String(128)

    privoServiceId String? @unique
    privoParentServiceId String?
    privoConsentUrl String?

    subscriptionInfoId String? @unique @db.Uuid
    subscriptionInfo Subscription? @relation(fields: [subscriptionInfoId], references: [id])

    subscriptionStatus String?
    stripeCustomerId String? @unique
    subscriptionId String?
    subscriptionPeriodStart DateTime?
    subscriptionPeriodEnd DateTime?

    allowPublishData Boolean?
    allowPublicData Boolean?
    allowAI Boolean?
    allowPublicInsts Boolean?

    role String?

    loginRequests LoginRequest[]
    webauthnLoginRequests WebAuthnLoginRequest[]
    sessions AuthSession[]
    records Record[]
    recordKeys RecordKey[]
    roleAssignments RoleAssignment[]
    // TODO: Support global permissions
    // globalPermissionAssignments GlobalPermissionAssignment[]
    resourcePermissionAssignments ResourcePermissionAssignment[]
    markerPermissionAssignments MarkerPermissionAssignment[]

    publishedDataRecords DataRecord[] @relation("PublishedDataRecords")
    subjectDataRecords DataRecord[] @relation("SubjectDataRecords")

    publishedManualDataRecords ManualDataRecord[] @relation("PublishedManualDataRecords")
    subjectManualDataRecords ManualDataRecord[] @relation("SubjectManualDataRecords")

    publishedFileRecords FileRecord[] @relation("PublishedFileRecords")
    subjectFileRecords FileRecord[] @relation("SubjectFileRecords")

    studios StudioAssignment[]
    aiChatMetrics AiChatMetrics[]
    aiImageMetrics AiImageMetrics[]
    aiSkyboxMetrics AiSkyboxMetrics[]
    aiSloydMetrics AiSloydMetrics[]

    instReports UserInstReport[]
    comIdRequests StudioComIdRequest[]
    authenticators UserAuthenticator[]

    webhookRecords WebhookRecord[]
    pushSubscriptions PushSubscriptionUser[]
    notificationSubscriptions NotificationSubscription[]
    sentNotifications SentPushNotification[]

    xpUser XpUser?
    isXpAdmin Boolean?

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model UserAuthenticator {
    id String @id @db.Uuid

    userId String
    user User @relation(fields: [userId], references: [id], onDelete: Cascade, map: "UserAuthenticator_userId_fkey1")

    credentialId String @db.String(512) @unique
    credentialPublicKey Bytes @db.Bytes()

    counter Int
    credentialDeviceType String @db.String(32)
    credentialBackedUp Boolean

    aaguid String @db.Uuid
    registeringUserAgent String? @db.String(512)

    transports String[]

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model LoginRequest {
    requestId String @id
    userId String
    user User @relation(fields: [userId], references: [id], onDelete: Cascade, map: "LoginRequest_userId_fkey1")
    
    secretHash String?

    requestTime DateTime
    expireTime DateTime
    completedTime DateTime?
    
    attemptCount Int
    address String
    addressType String
    ipAddress String

    // oidCodeVerifier String?
    // oidCodeMethod String?
    // oidProvider String?
    // oidRedirectUrl String?
    // oidScope String?
    
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    sessions AuthSession[]
    activeUser User? @relation("CurrentLoginRequest")
}

model AuthSession {
    sessionId String @id
    userId String
    user User @relation(fields: [userId], references: [id], onDelete: Cascade, map: "AuthSession_userId_fkey1")

    secretHash String
    connectionSecret String?

    oidProvider String?
    oidAccessToken String?
    oidTokenType String?
    oidIdToken String?
    oidRefreshToken String?
    oidScope String?
    oidExpiresAtMs BigInt?

    grantedTime DateTime
    expireTime DateTime?
    revokeTime DateTime?

    revocable  Boolean?

    requestId String?
    request LoginRequest? @relation(fields: [requestId], references: [requestId])

    oidRequestId String? @db.Uuid
    oidRequest OpenIDLoginRequest? @relation(fields: [oidRequestId], references: [requestId], map: "AuthSession_oidRequestId_fkey1")

    webauthnRequestId String? @db.Uuid
    webauthnRequest WebAuthnLoginRequest? @relation(fields: [webauthnRequestId], references: [requestId], map: "AuthSession_webauthnRequestId_fkey1")

    previousSessionId String? @unique
    previousSession AuthSession? @relation("PreviousSession", fields: [previousSessionId], references: [sessionId])
    previousSession1 AuthSession? @relation("PreviousSession")

    nextSessionId String? @unique
    nextSession AuthSession? @relation("NextSession", fields: [nextSessionId], references: [sessionId])
    nextSession1 AuthSession? @relation("NextSession")

    ipAddress String?

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model OpenIDLoginRequest {
    requestId String @id @db.Uuid
    state String? @unique @db.Uuid

    provider String
    codeVerifier String
    codeMethod String
    authorizationUrl String
    redirectUrl String
    scope String

    requestTime DateTime
    expireTime DateTime
    completedTime DateTime?
    ipAddress String

    authorizationCode String?
    authorizationTime DateTime?

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    authSessions AuthSession[]
}

model WebAuthnLoginRequest {
    requestId String @id @db.Uuid
    challenge String

    userId String?
    user User? @relation(fields: [userId], references: [id], onDelete: Cascade, map: "WebAuthnLoginRequest_userId_fkey1")

    requestTime DateTime
    expireTime DateTime
    completedTime DateTime?
    ipAddress String

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    authSessions AuthSession[]
}

model EmailRule {
    id BigInt @id @default(autoincrement())
    type String
    pattern String
}

model SmsRule {
    id BigInt @id @default(autoincrement())
    type String
    pattern String
}

// Records
model Studio {
    id String @id
    displayName String @db.String(128)

    // The comId for this studio. (i.e. a name/uuid that can be used to access this studio as a comId)
    comId String? @unique

    logoUrl String? @db.String(512)

    // The comId that this studio belongs to. (i.e. The comId of the studio that this studio belongs to)
    ownerStudioComId String?
    ownerStudio Studio? @relation(fields: [ownerStudioComId], references: [comId], onUpdate: Cascade, onDelete: SetNull, map: "Studio_ownerStudioComId_fkey1", name: "OwnerStudio")

    // The player web config for this studio.
    playerConfig Json?

    // The comId config for this studio.
    comIdConfig Json?

    // The loom app id and private key for this studio.
    loomConfig Json?

    // The hume apiKey and secretKey for this studio.
    humeConfig Json?

    records Record[]
    assignments StudioAssignment[]

    subscriptionInfoId String? @unique @db.Uuid
    subscriptionInfo Subscription? @relation(fields: [subscriptionInfoId], references: [id])

    subscriptionStatus String?
    stripeCustomerId String? @unique
    subscriptionId String?
    subscriptionPeriodStart DateTime?
    subscriptionPeriodEnd DateTime?

    aiChatMetrics AiChatMetrics[]
    aiImageMetrics AiImageMetrics[]
    aiSkyboxMetrics AiSkyboxMetrics[]
    aiSloydMetrics AiSloydMetrics[]

    childStudios Studio[] @relation("OwnerStudio")
    comIdRequests StudioComIdRequest[]

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model StudioAssignment {
    @@id([studioId, userId])

    studioId String
    studio Studio @relation(fields: [studioId], references: [id])

    userId String
    user User @relation(fields: [userId], references: [id])

    isPrimaryContact Boolean
    role String

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model Record {
    name String @id @db.String(128)
    ownerId String?
    owner User? @relation(fields: [ownerId], references: [id], map: "Record_ownerId_fkey1")

    studioId String?
    studio Studio? @relation(fields: [studioId], references: [id])

    secretHashes String[]
    secretSalt String

    recordKeys RecordKey[]
    policies Policy[]
    roles Role[]
    roleAssignments RoleAssignment[]

    dataRecords DataRecord[]
    manualDataRecords ManualDataRecord[]
    fileRecords FileRecord[]
    eventRecords EventRecord[]
    instRecords InstRecord[]
    instBranches InstBranch[]
    branchUpdates BranchUpdate[]
    webhookRecords WebhookRecord[] @relation("WebhookRecord")
    targetWebhookRecords WebhookRecord[] @relation("TargetWebookRecord")
    webhookRuns WebhookRun[]

    notificationRecords NotificationRecord[]
    notificationSubscriptions NotificationSubscription[]
    sentNotifications SentNotification[]

    resourceAssignments ResourcePermissionAssignment[]
    markerAssignments MarkerPermissionAssignment[]

    userInstReports UserInstReport[]

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model RecordKey {
    @@id([recordName, secretHash])

    recordName String @db.String(128)
    record Record @relation(fields: [recordName], references: [name], onDelete: Cascade, map: "RecordKey_recordName_fkey1")

    secretHash String
    policy String
    creatorId String
    creator User @relation(fields: [creatorId], references: [id])

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

// Policies
model Policy {
    @@id([recordName, marker])

    recordName String @db.String(128)
    record Record @relation(fields: [recordName], references: [name], onDelete: Cascade, map: "Policy_recordName_fkey1")
    marker String @db.String(128)
    document Json
    markers String[]

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model Role {
    @@id([recordName, name])
    recordName String @db.String(128)
    record Record @relation(fields: [recordName], references: [name], onDelete: Cascade, map: "Role_recordName_fkey1")

    name String @db.String(128)
    markers String[]

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model RoleAssignment {
    @@id([recordName, roleId, subjectId])

    recordName String @db.String(128)
    record Record @relation(fields: [recordName], references: [name], onDelete: Cascade, map: "RoleAssignment_recordName_fkey1")
    roleId String @db.String(128)

    subjectId String
    type String
    expireTime DateTime?

    userId String?
    user User? @relation(fields: [userId], references: [id])

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@index([recordName, subjectId])
    @@index([recordName, roleId])
}

// TODO: Support global permissions
// model GlobalPermissionAssignment {
//     // The ID of the assignment
//     id String @db.Uuid @id

//     // The kind of the resource.
//     // If null, then permission for all resource kinds is granted.
//     resourceKind String?

//     // The action that the assignment grants.
//     // If null, then the assignment grants every action to the resource.
//     action String?

//     // The options that the assignment grants.
//     options Json?

//     // The ID of the subject that the assignment grants permission to.
//     // This can be the ID of the user or the ID of the inst that permission is granted to.
//     subjectId String

//     // The type of the subject that the assignment grants permission to.
//     // This can be "user", "inst" or "role"
//     // If "role", then all users/insts that have the role in the record are granted permission.
//     // If "inst" or "user", then the given user/inst is granted permission across all records.
//     subjectType String

//     // The ID of the user that the assignment grants permission to.
//     // Null if the subjectType is "role" or "inst"
//     userId String?
//     user User? @relation(fields: [userId], references: [id], onDelete: Cascade, map: "GlobalPermissionAssignment_userId_fkey1")

//     // The time that the assignment expires.
//     // Null means that the assignment never expires.
//     expireTime DateTime?

//     createdAt DateTime @default(now())
//     updatedAt DateTime @updatedAt

//     @@index([subjectType, subjectId])
//     @@index([resourceKind, action, subjectType, subjectId])
// }

model ResourcePermissionAssignment {
    // The ID of the assignment
    id String @db.Uuid @id

    // The name of the record.
    recordName String
    record Record @relation(fields: [recordName], references: [name], onDelete: Cascade, map: "ResourcePermissionAssignment_recordName_fkey1")

    // The kind of the resource.
    resourceKind String

    // The ID of the resource.
    resourceId String

    // The action that the assignment grants.
    // If null, then the assignment grants every action to the resource.
    action String?

    // The options that the assignment grants.
    options Json?

    // The ID of the subject that the assignment grants permission to.
    // This can be the ID of the user or the ID of the inst that permission is granted to.
    subjectId String

    // The type of the subject that the assignment grants permission to.
    // This can be "user", "inst" or "role"
    subjectType String

    // The ID of the user that the assignment grants permission to.
    // Null if the subjectType is "role" or "inst"
    userId String?
    user User? @relation(fields: [userId], references: [id], onDelete: Cascade, map: "ResourcePermissionAssignment_userId_fkey1")

    // The time that the assignment expires.
    // Null means that the assignment never expires.
    expireTime DateTime?

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@index([subjectType, subjectId, recordName])
    @@index([recordName, resourceKind, resourceId, action, subjectType, subjectId])
}

// Example query:
// SELECT * FROM "ResourcePermissionAssignment"
// WHERE "recordName" = recordName AND "resourceKind" = resourceKind
// AND "resourceId" = resourceId AND "action" = action
// AND (
//    ("subjectId" = subjectId AND "subjectType" = subjectType) OR 
//    ("subjectType" = 'role' AND "subjectId" IN (SELECT "roleId" FROM "RoleAssignment" WHERE "recordName" = recordName AND "subjectId" = subjectId AND "subjectType" = subjectType)))

model MarkerPermissionAssignment {
    // The ID of the assignment
    id String @db.Uuid @id

    // The name of the record.
    recordName String
    record Record @relation(fields: [recordName], references: [name], onDelete: Cascade, map: "MarkerPermissionAssignment_recordName_fkey1")

    // The marker of the resources that the assignment grants.
    // If null, then the assignment grants permission for a resource instead.
    marker String @db.String(128)

    // The resource kind that this assignment is for.
    // If null, then the assignment is for all resource kinds.
    resourceKind String?

    // The action that the assignment grants.
    // If null, then the assignment grants every action to the resource.
    action String?

    // The options that the assignment grants.
    options Json?

    // The ID of the subject that the assignment grants permission to.
    // This can be the ID of the user or the ID of the inst that permission is granted to.
    subjectId String

    // The type of the subject that the assignment grants permission to.
    // This can be "user", "inst" or "role"
    subjectType String

    // The ID of the user that the assignment grants permission to.
    // Null if the subjectType is "role" or "inst"
    userId String?
    user User? @relation(fields: [userId], references: [id], onDelete: Cascade, map: "MarkerPermissionAssignment_userId_fkey1")

    // The time that the assignment expires.
    // Null means that the assignment never expires.
    expireTime DateTime?

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@index([subjectType, subjectId, recordName])
    @@index([recordName, marker, action, subjectType, subjectId])
}

// Example query:
// SELECT * FROM "ResourcePermissionAssignment"
// WHERE "recordName" = recordName AND "marker" = marker AND "action" = action
// AND (
//    ("subjectId" = subjectId AND "subjectType" = subjectType) OR 
//    ("subjectType" = 'role' AND "subjectId" IN (SELECT "roleId" FROM "RoleAssignment" WHERE "recordName" = recordName AND "subjectId" = subjectId AND "subjectType" = subjectType)))

// Data
model DataRecord {
    @@id([recordName, address])

    recordName String @db.String(128)
    record Record @relation(fields: [recordName], references: [name], onDelete: Cascade, map: "DataRecord_recordName_fkey1")
    
    address String @db.String(512)
    data Json
    
    publisherId String
    publisher User @relation("PublishedDataRecords", fields: [publisherId], references: [id])

    subjectId String?
    subject User? @relation("SubjectDataRecords", fields: [subjectId], references: [id])

    updatePolicy Json
    deletePolicy Json

    markers String[]

    targetWebhookRecords WebhookRecord[]

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

// ManualData
model ManualDataRecord {
    @@id([recordName, address])

    recordName String @db.String(128)
    record Record @relation(fields: [recordName], references: [name], onDelete: Cascade, map: "ManualDataRecord_recordName_fkey1")
    
    address String @db.String(512)
    data Json
    
    publisherId String
    publisher User @relation("PublishedManualDataRecords", fields: [publisherId], references: [id])

    subjectId String?
    subject User? @relation("SubjectManualDataRecords", fields: [subjectId], references: [id])

    updatePolicy Json
    deletePolicy Json

    markers String[]

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model FileRecord {
    @@id([recordName, fileName])

    recordName String @db.String(128)

    // Don't cascade FileRecord deletes because they have storage in other places besides the database
    record Record @relation(fields: [recordName], references: [name])
    fileName String @db.String(512)

    publisherId String
    publisher User @relation("PublishedFileRecords", fields: [publisherId], references: [id])

    subjectId String?
    subject User? @relation("SubjectFileRecords", fields: [subjectId], references: [id])

    sizeInBytes BigInt
    description String? @db.String(128)

    bucket String?

    uploadedAt DateTime?

    markers String[]

    targetWebhookRecords WebhookRecord[]

    webhookRuns WebhookRun[]

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model EventRecord {
    @@id([recordName, name])

    recordName String @db.String(128)
    record Record @relation(fields: [recordName], references: [name], onDelete: Cascade, map: "EventRecord_recordName_fkey1")
    name String @db.String(128)

    count BigInt
    markers String[]

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model InstRecord {
    @@id([recordName, name])

    recordName String @db.String(128)
    record Record @relation(fields: [recordName], references: [name], onDelete: Cascade, map: "InstRecord_recordName_fkey1")

    name String @db.String(128)

    markers String[]

    branches InstBranch[]
    updates BranchUpdate[]
    userInstReports UserInstReport[]
    webhookRecords WebhookRecord[]

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model InstBranch {
    @@id([recordName, instName, name])

    recordName String @db.String(128)
    record Record @relation(fields: [recordName], references: [name], onDelete: Cascade, map: "InstBranch_recordName_fkey1")

    instName String @db.String(128)
    inst InstRecord @relation(fields: [recordName, instName], references: [recordName, name], onDelete: Cascade, map: "InstBranch_instName_fkey1")

    name String @db.String(512)
    temporary Boolean

    updates BranchUpdate[]

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model BranchUpdate {
    id String @id @db.Uuid()

    recordName String @db.String(128)
    record Record @relation(fields: [recordName], references: [name], onDelete: Cascade, map: "BranchUpdate_recordName_fkey1")

    instName String @db.String(128)
    inst InstRecord @relation(fields: [recordName, instName], references: [recordName, name], onDelete: Cascade, map: "BranchUpdate_instName_fkey1")

    branchName String @db.String(512)
    branch InstBranch @relation(fields: [recordName, instName, branchName], references: [recordName, instName, name], onDelete: Cascade, map: "BranchUpdate_branchName_fkey1")

    sizeInBytes Int
    updateData String

    createdAt DateTime @default(now())
    updated DateTime @updatedAt

    @@index([recordName, instName, branchName, id])
}

model WebhookRecord {
    @@id([recordName, address])

    recordName String @db.String(128)
    record Record @relation("WebhookRecord", fields: [recordName], references: [name], onDelete: Cascade, map: "WebhookRecord_recordName_fkey1")

    address String @db.String(512)

    markers String[]

    targetRecordName String? @db.String(128)
    targetRecord Record? @relation("TargetWebookRecord", fields: [targetRecordName], references: [name], onDelete: SetNull, map: "WebhookRecord_targetRecordName_fkey1")

    targetDataRecordAddress String? @db.String(512)
    targetDataRecord DataRecord? @relation(fields: [targetRecordName, targetDataRecordAddress], references: [recordName, address], onDelete: SetNull, map: "WebhookRecord_targetDataRecordAddress_fkey1")

    targetFileRecordFileName String? @db.String(512)
    targetFileRecord FileRecord? @relation(fields: [targetRecordName, targetFileRecordFileName], references: [recordName, fileName], onDelete: SetNull, map: "WebhookRecord_targetFileRecordFileName_fkey1")

    targetInstRecordName String? @db.String(128)
    targetInstRecord InstRecord? @relation(fields: [targetRecordName, targetInstRecordName], references: [recordName, name], onDelete: SetNull, map: "WebhookRecord_targetInstRecordName_fkey1")

    targetPublicInstRecordName String? @db.String(128)

    userId String?
    user User? @relation(fields: [userId], references: [id])

    runs WebhookRun[]

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model WebhookRun {
    id String @id @db.Uuid

    recordName String @db.String(128)
    record Record @relation(fields: [recordName], references: [name], onDelete: Cascade, map: "WebhookRun_recordName_fkey1")

    webhookAddress String @db.String(512)
    webhook WebhookRecord @relation(fields: [recordName, webhookAddress], references: [recordName, address], onDelete: Cascade, map: "WebhookRun_webhookAddress_fkey1")

    statusCode Int?
    stateSha256 String @db.String(64)

    requestTime DateTime
    responseTime DateTime

    errorResult Json?

    infoFileRecordName String? @db.String(128)
    infoFileName String? @db.String(512)
    infoFile FileRecord? @relation(fields: [infoFileRecordName, infoFileName], references: [recordName, fileName], onDelete: SetNull, map: "WebhookRun_infoFile_fkey1")
    
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model NotificationRecord {
    @@id([recordName, address])

    recordName String @db.String(128)
    record Record @relation(fields: [recordName], references: [name], onDelete: Cascade, map: "NotificationRecord_recordName_fkey1")

    address String @db.String(512)

    description String? @db.String(2048)

    markers String[]

    subscriptions NotificationSubscription[]
    sentNotifications SentNotification[]

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model PushSubscription {
    id String @id @db.Uuid

    endpoint String @db.String(1024)
    keys Json

    active Boolean

    users PushSubscriptionUser[]
    sentNotifications SentPushNotification[]
    subscriptions NotificationSubscription[]

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@index([active])
}

model PushSubscriptionUser {
    @@id([pushSubscriptionId, userId])

    pushSubscriptionId String @db.Uuid
    pushSubscription PushSubscription @relation(fields: [pushSubscriptionId], references: [id], onDelete: Cascade, map: "PushSubscriptionUser_pushSubscriptionId_fkey1")

    userId String
    user User @relation(fields: [userId], references: [id], onDelete: Cascade, map: "PushSubscriptionUser_userId_fkey1")

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model NotificationSubscription {
    id String @id @db.Uuid

    recordName String @db.String(128)
    record Record @relation(fields: [recordName], references: [name], onDelete: Cascade, map: "NotificationSubscription_recordName_fkey1")

    notificationAddress String @db.String(512)
    notification NotificationRecord @relation(fields: [recordName, notificationAddress], references: [recordName, address], onDelete: Cascade, map: "NotificationSubscription_notificationAddress_fkey1")

    userId String?
    user User? @relation(fields: [userId], references: [id])

    pushSubscriptionId String? @db.Uuid
    pushSubscription PushSubscription? @relation(fields: [pushSubscriptionId], references: [id])

    sentNotifications SentPushNotification[]

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@unique([recordName, notificationAddress, userId])
    @@unique([recordName, notificationAddress, pushSubscriptionId])
}

model SentNotification {
    id String @id @db.Uuid

    recordName String @db.String(128)
    record Record @relation(fields: [recordName], references: [name], onDelete: Cascade, map: "SentNotification_recordName_fkey1")

    notificationAddress String @db.String(512)
    notification NotificationRecord @relation(fields: [recordName, notificationAddress], references: [recordName, address], onDelete: Cascade, map: "SentNotification_notificationAddress_fkey1")

    title String @db.String(128)
    body String @db.String(512)
    icon String? @db.String(1024)
    badge String? @db.String(1024)
    silent Boolean?

    tag String? @db.String(128)
    topic String? @db.String(128)

    defaultAction Json
    actions Json
    sentTime DateTime

    sentToDevices SentPushNotification[]

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model SentPushNotification {
    id String @id @db.Uuid

    sentNotificationId String @db.Uuid
    sentNotification SentNotification @relation(fields: [sentNotificationId], references: [id], onDelete: Cascade, map: "SentNotificationUser_sentNotificationId_fkey1")

    subscriptionId String? @db.Uuid
    subscription NotificationSubscription? @relation(fields: [subscriptionId], references: [id], onDelete: SetNull, map: "SentNotificationUser_subscriptionId_fkey1")

    userId String?
    user User? @relation(fields: [userId], references: [id], onDelete: Cascade, map: "SentNotificationUser_userId_fkey1")

    pushSubscriptionId String? @db.Uuid
    pushSubscription PushSubscription? @relation(fields: [pushSubscriptionId], references: [id], onDelete: SetNull, map: "SentNotificationUser_pushSubscriptionId_fkey1")

    success Boolean
    errorCode String?

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model Configuration {
    key String @id
    data Json
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model Subscription {
    id String @id @db.Uuid
    stripeSubscriptionId String @unique

    userId String? @unique
    user User? @relation()

    studioId String? @unique
    studio Studio? @relation()

    subscriptionStatus String?
    stripeCustomerId String? @unique
    subscriptionId String?

    currentPeriodStart DateTime?
    currentPeriodEnd DateTime?

    periods SubscriptionPeriod[]
    invoices Invoice[]

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model SubscriptionPeriod {
    id String @id @db.Uuid

    subscriptionId String @db.Uuid
    subscription Subscription @relation(fields: [subscriptionId], references: [id], onDelete: Cascade, map: "SubscriptionPeriod_subscriptionId_fkey1")

    invoiceId String @unique @db.Uuid
    invoice Invoice?

    periodStart DateTime
    periodEnd DateTime

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model Invoice {
    id String @id @db.Uuid
    stripeInvoiceId String @unique

    subscriptionId String @db.Uuid
    subscription Subscription @relation(fields: [subscriptionId], references: [id], onDelete: Cascade, map: "Invoice_subscriptionId_fkey1")

    periodId String @unique @db.Uuid
    period SubscriptionPeriod @relation(fields: [periodId], references: [id], onDelete: Cascade, map: "Invoice_periodId_fkey1")

    description String?
    status String
    paid Boolean
    currency String
    total Int
    subtotal Int
    tax Int?

    stripeHostedInvoiceUrl String
    stripeInvoicePdfUrl String

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model AiChatMetrics {
    id String @id @db.Uuid
    createdAt DateTime @default(now())

    tokens Int

    userId String?
    user User? @relation(fields: [userId], references: [id], onDelete: Cascade, map: "AiChatMetrics_userId_fkey1")

    studioId String?
    studio Studio? @relation(fields: [studioId], references: [id], onDelete: Cascade, map: "AiChatMetrics_studioId_fkey1")
}

model AiImageMetrics {
    id String @id @db.Uuid
    createdAt DateTime @default(now())
    squarePixelsGenerated Int

    userId String?
    user User? @relation(fields: [userId], references: [id], onDelete: Cascade, map: "AiImageMetrics_userId_fkey1")

    studioId String?
    studio Studio? @relation(fields: [studioId], references: [id], onDelete: Cascade, map: "AiImageMetrics_studioId_fkey1")
}

model AiSkyboxMetrics {
    id String @id @db.Uuid
    createdAt DateTime @default(now())
    skyboxesGenerated Int

    userId String?
    user User? @relation(fields: [userId], references: [id], onDelete: Cascade, map: "AiSkyboxMetrics_userId_fkey1")

    studioId String?
    studio Studio? @relation(fields: [studioId], references: [id], onDelete: Cascade, map: "AiSkyboxMetrics_studioId_fkey1")
}

model AiSloydMetrics {
    id String @id @db.Uuid

    modelsCreated Int
    name String?
    confidence Float?
    mimeType String
    modelData String
    thumbnailBase64 String?
    baseModelId String?

    createdAt DateTime @default(now())

    userId String?
    user User? @relation(fields: [userId], references: [id], onDelete: Cascade, map: "AiSloydMetrics_userId_fkey1")

    studioId String?
    studio Studio? @relation(fields: [studioId], references: [id], onDelete: Cascade, map: "AiSloydMetrics_studioId_fkey1")
}

model PrivoClientCredentials {
    id String @id @db.Uuid
    createdAt DateTime @default(now())
    expiresAt DateTime

    accessToken String
    refreshToken String
    expiresAtSeconds Int
    scope String

    @@index([expiresAt])
}

model UserInstReport {
    id String @id @db.Uuid

    recordName String? @db.String(128)
    record Record? @relation(fields: [recordName], references: [name], onDelete: Cascade, map: "UserInstReport_recordName_fkey1")

    inst String @db.String(128)
    instRecord InstRecord? @relation(fields: [recordName, inst], references: [recordName, name], onDelete: Cascade, map: "UserInstReport_inst_fkey1")
    
    reportingUserId String?
    reportingUser User? @relation(fields: [reportingUserId], references: [id], onDelete: Cascade, map: "UserInstReport_reportingUserId_fkey1")

    reportingIpAddress String?
    automaticReport Boolean
    reportReasonText String @db.String(2048)
    reportReason String @db.String(128)
    reportedUrl String @db.String(4096)
    reportedPermalink String @db.String(4096)

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@index([automaticReport, createdAt(sort: Desc), recordName, inst])
    @@index([reportReason, createdAt(sort: Desc), recordName, inst])
}

model ModerationJob {
    id String @id @db.Uuid

    // The ID of the s3 batch job
    s3Id String? @unique

    // The type of the moderation job.
    // Usually for files, but there could be other types of moderation jobs.
    type String

    results FileModerationResult[]

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@index([type, createdAt(sort: Desc)])
}

model FileModerationResult {
    // The ID of the moderation result.
    id String @id @db.Uuid

    // The job that this moderation result is associated with
    jobId String? @db.Uuid
    job ModerationJob? @relation(fields: [jobId], references: [id], onDelete: Cascade, map: "FileModerationResult_jobId_fkey1")

    // The name of the record that was moderated
    recordName String @db.String(128)

    // The name of the file that was moderated
    fileName String @db.String(512)

    // Whether the file contains content that has been
    // algorithmically determined to be banned.
    appearsToMatchBannedContent Boolean

    // The labels that were detected in the file
    labels FileModerationLabel[]

    // The version of the model that was used to produce this result
    modelVersion String

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    // Search by banned content status
    @@index([appearsToMatchBannedContent, fileName, createdAt(sort: Desc)])
}

model FileModerationLabel {
    // The ID of the moderation label
    id String @id @db.Uuid

    // The name of the label
    name String @db.String(128)

    // The category of the label
    category String? @db.String(128)

    // The confidence of the label
    confidence Float

    // The ID of the moderation result that this label is associated with
    fileModerationId String @db.Uuid
    fileModeration FileModerationResult @relation(fields: [fileModerationId], references: [id], onDelete: Cascade, map: "FileModerationLabel_fileModerationId_fkey1")

    @@index([fileModerationId, name, confidence])
}

model StudioComIdRequest {
    id String @id @db.Uuid

    studioId String
    studio Studio @relation(fields: [studioId], references: [id], onDelete: Cascade, map: "StudioComIdRequest_studioId_fkey1")

    requestedComId String @db.String(128)

    userId String?
    user User? @relation(fields: [userId], references: [id], onDelete: SetNull, map: "StudioComIdRequest_userId_fkey1")

    requestingIpAddress String?

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

// Represents information about a user that has been onboarded to the xpExchange
model XpUser {
    id String @id @db.Uuid

    userId String @unique
    user User @relation(fields: [userId], references: [id], onDelete: Cascade, map: "XpUser_userId_fkey1")

    accountId String @db.Uuid @unique
    account XpAccount @relation(fields: [accountId], references: [id], onDelete: Restrict, map: "XpUser_accountId_fkey1")

    // The rate at which the user is requested to be paid per gig.
    // Should have the same currency as the account.
    requestedRate Int?

    issuedEvents XpSystemEvent[] @relation()
    issuedContracts XpContract[] @relation("IssuerUser")
    heldContracts XpContract[] @relation("HoldingUser")

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

// Represents an event that affects the xpExchange system
// This can be used to track inputs into the system, which will help us track down and reconcile any issues should they arise
// For example, when a user calls the xpCreateContract procedure, the system will record an event with the type "createContract" and the data being the input and related context.
model XpSystemEvent {
    id String @id @db.Uuid

    // The type of the event
    // Currently there is only one special type of event
    // - adjustment: An XpSystemEventAdjustment
    type String

    // The ID of the XpUser that sent the event
    // Null if the event is not associated with a user
    xpUserId String? @db.Uuid
    xpUser XpUser? @relation(fields: [xpUserId], references: [id], onDelete: SetNull, map: "XpEvent_xpUserId_fkey1")

    // The data of the event
    data Json

    // The time that the event occurred
    time DateTime

    accountEntries XpAccountEntry[]
    contracts XpContract[]
    invoices XpInvoice[]

    // The adjustment that tracks the adjusting and adjusted events for this event
    adjustment XpSystemEventAdjustment? @relation()

    // The ID of the adjustment that causes this event to be replaced
    adjustingEventId String? @db.Uuid
    adjustingEvent XpSystemEventAdjustment? @relation("AdjustingEvent", fields: [adjustingEventId], references: [id], onDelete: Restrict, map: "XpSystemEventAdjustment_adjustingEventId_fkey1")

    // The ID of the adjustment that causes this event to replace other events
    adjusterEventId String? @db.Uuid
    adjusterEvent XpSystemEventAdjustment? @relation("AdjusterEvent", fields: [adjusterEventId], references: [id], onDelete: Restrict, map: "XpSystemEventAdjustment_adjusterEventId_fkey1")
    
    // The time the event was created in the system
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

// Represents a special event that is able to make adjustments to a set of events in the system
// This can be used to correct mistakes in the system, or to make special adjustments to the system
// This works by identifying a set of events that need to be replaced and a set of events as replacements for the old events
// The system will then calculate the difference between the old events and the new events and apply the difference to the affected accounts
model XpSystemEventAdjustment {
    id String @id @db.Uuid
    
    // The event that contains the basic information for the adjustment
    event XpSystemEvent @relation(fields: [id], references: [id], onDelete: Cascade, map: "XpSystemEventAdjustment_id_fkey1")

    // The list of events that this adjustment replaces
    oldEvents XpSystemEvent[] @relation("AdjustingEvent")

    // The list of modified events
    newEvents XpSystemEvent[] @relation("AdjusterEvent")

    // The time the event was created in the system
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

// Represents an account of money that can be used to track entries and transactions
// The current balance of the account is the sum of all entries
model XpAccount {
    id String @id @default(uuid()) @db.Uuid

    entries XpAccountEntry[]

    // The user that the account is for
    user XpUser?

    // The contract that the account is for
    contract XpContract?

    // The currency (implementations are expected to support both alphabetic and numeric representations 
    // e.g. "USD" | "840" ) of transactions in the account (Conforms to ISO 4217)
    currency String

    // Time that the account was closed
    // Fail-safe to help prevent making entries for accounts that are closed
    // (i.e. accounts for closed contracts)
    closedTime DateTime?

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

// Get current balance
// SELECT balance FROM XpAccountEntry
// WHERE accountId = $accountId
// ORDER BY time DESC
// LIMIT 1;

// Represents the addition or withdrawl of money from an account
model XpAccountEntry {
    id String @id @db.Uuid

    // The ID of the account that the entry affects
    // Null if the entry is not associated with an account. (this can happen for example when the entry affects an account outside the system)
    // e.g. null for system entries, or entries that are associated with an account that is outside the system (adding money to a contract for example)
    accountId String? @db.Uuid
    account XpAccount? @relation(fields: [accountId], references: [id], onDelete: Restrict, map: "XpAccountEntry_accountId_fkey1")

    // The number of cents (viable base unit) that were added to the ledger
    // positive for incoming money (deposits)
    // negative for outgoing money (withdrawals)
    amount Int

    // The new balance of the account after the entry was made
    // This value can be used to quickly calculate the balance of the account
    // without having to sum all entries.
    // Be wary of using this value in non-transactional contexts, as in such cases it may not
    // be in sync with the entries (causing a data state inconsistency introduced via implementation)
    balance Int

    // The time that the entry was created in the real world
    time DateTime

    // Entries with the same transaction ID are part of the same transaction
    // makes it easy to track the flow of money between accounts
    // IMPORTANT: The amounts of the entries in a transaction should sum up to 0
    // This means that valid transactions require at least 2 entries (assuming non-zero amounts)
    transactionId String @db.Uuid

    // A (optional, yet advised) note for the entry
    note String?

    // The ID of the event that caused the entry to be created
    systemEventId String @db.Uuid
    systemEvent XpSystemEvent @relation(fields: [systemEventId], references: [id], onDelete: Restrict, map: "XpAccountEntry_systemEventId_fkey1")

    // The time that the entry was created in the system
    createdAt DateTime @default(now())

    // The last time the entry was updated
    updatedAt DateTime @updatedAt

    @@index([transactionId])
}

// A contract is a promise of work at a certain rate
model XpContract {
    id String @id @db.Uuid

    // The user that is issuing the contract
    // That is, the user who is paying for the work
    issuerUserId String
    issuer XpUser @relation(fields: [issuerUserId], references: [userId], onDelete: Restrict, map: "XpContract_issuerId_fkey1", name: "IssuerUser")

    // The user that is holding the contract
    // That is, the user who is doing the work and getting paid
    holdingUserId String
    holdingUser XpUser @relation(fields: [holdingUserId], references: [userId], onDelete: Restrict, map: "XpContract_holdingUserId_fkey1", name: "HoldingUser")

    // The rate at which the contract is paid
    // This determines the number of gigs that can be paid for the contract
    // The currency should always be the same as the account
    rate Int

    // The description of the contract
    description String?

    // The status of the contract
    // "open" - the contract is open and can be invoiced
    // "closed" - the contract is closed and cannot be invoiced
    status String

    // The account that holds the money allocated to the contract
    accountId String @db.Uuid @unique
    account XpAccount @relation(fields: [accountId], references: [id], onDelete: Restrict, map: "XpContract_accountId_fkey1")

    // The event that caused this contract to be created
    creationEventId String @db.Uuid
    creationEvent XpSystemEvent @relation(fields: [creationEventId], references: [id], onDelete: Restrict, map: "XpInvoice_creationEventId_fkey1")

    invoices XpInvoice[]

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

// An invoice is a request for payment for part of a contract
model XpInvoice {
    id String @id @db.Uuid

    contractId String @db.Uuid
    contract XpContract @relation(fields: [contractId], references: [id], onDelete: Restrict, map: "XpInvoice_contractId_fkey1")

    // The amount (quantity of gigs) being invoiced for
    //! Important: A gig is 6 minutes of work, the rate defines the worth of a gig
    // The currency this gig is associated with, is the same as the contract account currency
    amount Int

    // The status of the invoice
    // "open" - the invoice has been created but not yet paid
    // "paid" - the invoice has been paid
    // "void" - the invoice has been cancelled
    status String

    // The reason why the invoice was voided
    // "rejected" - the invoice was rejected by the receiver
    // "cancelled" - the invoice was cancelled by the issuer
    voidReason String?

    // The ID of the transaction that paid the invoice
    transactionId String? @db.Uuid

    // Additional information about the invoice
    note String?

    // The event that caused this invoice to be created
    creationEventId String @db.Uuid
    creationEvent XpSystemEvent @relation(fields: [creationEventId], references: [id], onDelete: Restrict, map: "XpInvoice_creationEventId_fkey1")

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

// gigs * rate = amount
