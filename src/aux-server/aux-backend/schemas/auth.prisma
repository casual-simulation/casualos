// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  binaryTargets = ["native", "rhel-openssl-1.0.x"]
}

datasource db {
  provider = "cockroachdb"
  url      = env("DATABASE_URL")
}

// Auth
model User {
    id String @id
    name String?
    email String? @unique
    phoneNumber String? @unique
    avatarPortraitUrl String?
    avatarUrl String?
    allSessionRevokeTime DateTime?
    currentLoginRequestId String? @unique
    currentLoginRequest LoginRequest? @relation("CurrentLoginRequest", fields: [currentLoginRequestId], references: [requestId])
    banTime DateTime?
    banReason String?

    subscriptionStatus String?
    stripeCustomerId String? @unique
    subscriptionId String?

    loginRequests LoginRequest[]
    sessions AuthSession[]
    records Record[]
    recordKeys RecordKey[]
    roleAssignments RoleAssignment[]

    publishedDataRecords DataRecord[] @relation("PublishedDataRecords")
    subjectDataRecords DataRecord[] @relation("SubjectDataRecords")

    publishedManualDataRecords ManualDataRecord[] @relation("PublishedManualDataRecords")
    subjectManualDataRecords ManualDataRecord[] @relation("SubjectManualDataRecords")

    publishedFileRecords FileRecord[] @relation("PublishedFileRecords")
    subjectFileRecords FileRecord[] @relation("SubjectFileRecords")

    studios StudioAssignment[]

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model LoginRequest {
    requestId String @id
    userId String
    user User @relation(fields: [userId], references: [id])
    secretHash String
    requestTime DateTime
    expireTime DateTime
    completedTime DateTime?
    attemptCount Int
    address String
    addressType String
    ipAddress String
    
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    sessions AuthSession[]
    activeUser User? @relation("CurrentLoginRequest")
}

model AuthSession {
    sessionId String @id
    userId String
    user User @relation(fields: [userId], references: [id])

    secretHash String
    grantedTime DateTime
    expireTime DateTime
    revokeTime DateTime?

    requestId String?
    request LoginRequest? @relation(fields: [requestId], references: [requestId])

    previousSessionId String? @unique
    previousSession AuthSession? @relation("PreviousSession", fields: [previousSessionId], references: [sessionId])
    previousSession1 AuthSession? @relation("PreviousSession")

    nextSessionId String? @unique
    nextSession AuthSession? @relation("NextSession", fields: [nextSessionId], references: [sessionId])
    nextSession1 AuthSession? @relation("NextSession")

    ipAddress String

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model EmailRule {
    id BigInt @id @default(autoincrement())
    type String
    pattern String
}

model SmsRule {
    id BigInt @id @default(autoincrement())
    type String
    pattern String
}

// Records
model Studio {
    id String @id
    displayName String

    records Record[]
    assignments StudioAssignment[]

    subscriptionStatus String?
    stripeCustomerId String? @unique
    subscriptionId String?

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model StudioAssignment {
    @@id([studioId, userId])

    studioId String
    studio Studio @relation(fields: [studioId], references: [id])

    userId String
    user User @relation(fields: [userId], references: [id])

    isPrimaryContact Boolean
    role String

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model Record {
    name String @id
    ownerId String?
    owner User? @relation(fields: [ownerId], references: [id])

    studioId String?
    studio Studio? @relation(fields: [studioId], references: [id])

    secretHashes String[]
    secretSalt String

    recordKeys RecordKey[]
    policies Policy[]
    roles Role[]
    roleAssignments RoleAssignment[]

    dataRecords DataRecord[]
    manualDataRecords ManualDataRecord[]
    fileRecords FileRecord[]
    eventRecords EventRecord[]

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model RecordKey {
    @@id([recordName, secretHash])

    recordName String
    record Record @relation(fields: [recordName], references: [name])

    secretHash String
    policy String
    creatorId String
    creator User @relation(fields: [creatorId], references: [id])

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

// Policies
model Policy {
    @@id([recordName, marker])

    recordName String
    record Record @relation(fields: [recordName], references: [name])
    marker String
    document Json
    markers String[]

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model Role {
    @@id([recordName, name])
    recordName String
    record Record @relation(fields: [recordName], references: [name])

    name String
    markers String[]

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model RoleAssignment {
    @@id([recordName, roleId, subjectId])

    recordName String
    record Record @relation(fields: [recordName], references: [name])
    roleId String

    subjectId String
    type String
    expireTime DateTime?

    userId String?
    user User? @relation(fields: [userId], references: [id])

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@index([recordName, subjectId])
    @@index([recordName, roleId])
}

// Data
model DataRecord {
    @@id([recordName, address])

    recordName String
    record Record @relation(fields: [recordName], references: [name])
    
    address String
    data Json
    
    publisherId String
    publisher User @relation("PublishedDataRecords", fields: [publisherId], references: [id])

    subjectId String?
    subject User? @relation("SubjectDataRecords", fields: [subjectId], references: [id])

    updatePolicy Json
    deletePolicy Json

    markers String[]

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

// ManualData
model ManualDataRecord {
    @@id([recordName, address])

    recordName String
    record Record @relation(fields: [recordName], references: [name])
    
    address String
    data Json
    
    publisherId String
    publisher User @relation("PublishedManualDataRecords", fields: [publisherId], references: [id])

    subjectId String?
    subject User? @relation("SubjectManualDataRecords", fields: [subjectId], references: [id])

    updatePolicy Json
    deletePolicy Json

    markers String[]

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model FileRecord {
    @@id([recordName, fileName])

    recordName String
    record Record @relation(fields: [recordName], references: [name])
    fileName String

    publisherId String
    publisher User @relation("PublishedFileRecords", fields: [publisherId], references: [id])

    subjectId String?
    subject User? @relation("SubjectFileRecords", fields: [subjectId], references: [id])

    sizeInBytes BigInt
    description String?

    uploadedAt DateTime?

    markers String[]

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model EventRecord {
    @@id([recordName, name])

    recordName String
    record Record @relation(fields: [recordName], references: [name])
    name String

    count BigInt
    markers String[]

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}