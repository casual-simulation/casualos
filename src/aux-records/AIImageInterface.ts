/* CasualOS is a set of web-based tools designed to facilitate the creation of real-time, multi-user, context-aware interactive experiences.
 *
 * Copyright (c) 2019-2025 Casual Simulation, Inc.
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License as
 * published by the Free Software Foundation, either version 3 of the
 * License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Affero General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program.  If not, see <https://www.gnu.org/licenses/>.
 */
import type {
    InvalidSubscriptionTierError,
    NotAuthorizedError,
    NotLoggedInError,
    NotSubscribedError,
    NotSupportedError,
    ServerError,
    SubscriptionLimitReached,
} from '@casual-simulation/aux-common/Errors';

/**
 * Defines an interface that is able to generate images from text prompts.
 */
export interface AIImageInterface {
    /**
     * Requests that the AI generate an image from the given request.
     * @param request The request.
     */
    generateImage(
        request: AIGenerateImageInterfaceRequest
    ): Promise<AIGenerateImageInterfaceResponse>;
}

export interface AIGenerateImageInterfaceRequest {
    /**
     * The model that should be used to generate the image(s).
     */
    model: string;

    /**
     * The description of the desired image.
     */
    prompt: string;

    /**
     * The description of what the image should not be.
     */
    negativePrompt?: string;

    /**
     * The width of the output image(s) in pixels.
     */
    width?: number;

    /**
     * The height of the output image(s) in pixels.
     */
    height?: number;

    /**
     * The number of images that should be generated.
     */
    numberOfImages?: number;

    /**
     * The random noise seed that should be used.
     */
    seed?: number;

    /**
     * The number of diffusion steps to run.
     */
    steps?: number;

    /**
     * How strictly the diffusion process adheres to the prompt text.
     * Higher values keep the image closer to the prompt.
     */
    cfgScale?: number;

    /**
     * The sampler to use for the diffusion process.
     */
    sampler?: string;

    /**
     * The clip guidance preset.
     */
    clipGuidancePreset?: string;

    /**
     * The style preset that should be used to guide the image model torwards a specific style.
     */
    stylePreset?: string;

    /**
     * The ID of the user that is making the request.
     */
    userId?: string;
}

export type AIGenerateImageInterfaceResponse =
    | AIGenerateImageInterfaceSuccess
    | AIGenerateImageInterfaceFailure;

export interface AIGenerateImageInterfaceSuccess {
    success: true;
    images: AIGeneratedImage[];
}

export interface AIGenerateImageInterfaceFailure {
    success: false;
    errorCode:
        | ServerError
        | NotLoggedInError
        | NotSubscribedError
        | InvalidSubscriptionTierError
        | NotSupportedError
        | SubscriptionLimitReached
        | NotAuthorizedError
        | 'invalid_request'
        | 'invalid_model';
    errorMessage: string;
}

/**
 * Defines an image that was generated by the AI.
 */
export interface AIGeneratedImage {
    /**
     * The base64 encoded image.
     */
    base64: string;

    /**
     * The MIME type for the image.
     */
    mimeType: string;

    /**
     * The seed of the generated image.
     */
    seed?: number;
}
