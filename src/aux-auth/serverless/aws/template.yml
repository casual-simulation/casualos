# This is the SAM template that represents the architecture of your serverless application
# https://docs.aws.amazon.com/serverless-application-model/latest/developerguide/serverless-sam-template-basics.html

# The AWSTemplateFormatVersion identifies the capabilities of the template
# https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/format-version-structure.html
AWSTemplateFormatVersion: 2010-09-09
Description: >-
    aws

# Transform section specifies one or more macros that AWS CloudFormation uses to process your template
# https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/transform-section-structure.html
Transform:
    - AWS::Serverless-2016-10-31

Parameters:
    TextItAPIKeyParameter:
        Type: String
        Description: The API Key that is used to access the TextIt API.
    TextItFlowIDParameter:
        Type: String
        Description: The ID of the Flow that should be triggered for TextIt messages.
    RedisPortParameter:
        Type: Number
        Description: The port number that the redis server is listening on.
    RedisHostParameter:
        Type: String
        Description: The hostname of the redis server.
    RedisUseTLSParameter:
        Type: String
        Description: Whether to use TLS when connecting to the redis server.
    RedisRecordsNamespaceParameter:
        Type: String
        Description: The namespace to use for the redis records.
    RedisPasswordParameter:
        Type: String
        Description: The password to use when connecting to the redis server.
    FileRecordsS3StorageClassParameter:
        Type: String
        Description: The S3 Storage Class that should be used for file records.
    LivekitAPIKeyParameter:
        Type: String
        Description: The API Key that should be used to authorize access to the Livekit endpoint.
        Default: ''
    LivekitSecretKeyParameter:
        Type: String
        Description: The Secret Key that should be used to authorize access to the Livekit endpoint.
        Default: ''
    LivekitEndpointParameter:
        Type: String
        Description: The WebSocket endpoint that the Livekit server(s) are available at.
        Default: ''
    AllowedOriginsParameter:
        Type: String
        Description: The allowed origin domains that are able to make requests for the internal auth site APIs. This value should be a space-separated string that includes the origins that the auth site is hosted on.
    AllowedApiOriginsParameter:
        Type: String
        Description: The allowed origin domains that are able to make requests for the records APIs. This value should be a space-separated string that includes the origins that are allowed to request/publish records to this site.

Globals:
    Api:
        # enable CORS; to make more specific, change the origin wildcard
        # to a particular domain name, e.g. "'www.example.com'"
        # TODO: add a CORS policy to the API Gateway
        Cors:
            AllowMethods: "'*'"
            AllowHeaders: "'*'"
            AllowOrigin: "'*'"

# Resources declares the AWS resources that you want to include in the stack
# https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/resources-section-structure.html
Resources:
    # Each Lambda function is defined by properties:
    # https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction

    # This is a Lambda function config associated with the source code: services.js
    handleRecords:
        Type: AWS::Serverless::Function
        Properties:
            Handler: Records.handleRecords
            CodeUri: dist/handlers
            Runtime: nodejs14.x
            MemorySize: 256
            Timeout: 100
            Description: A function that publishes and retreives records for the user.
            Policies:
                # Give Create/Read/Update/Delete Permissions to the SampleTable
                - DynamoDBCrudPolicy:
                      TableName: !Ref PublicRecordsTable
                - DynamoDBCrudPolicy:
                      TableName: !Ref PublicRecordsKeysTable
                - DynamoDBCrudPolicy:
                      TableName: !Ref DataTable
                - DynamoDBCrudPolicy:
                      TableName: !Ref ManualDataTable
                - DynamoDBCrudPolicy:
                      TableName: !Ref FilesTable
                - DynamoDBCrudPolicy:
                      TableName: !Ref EventsTable
                - DynamoDBCrudPolicy:
                      TableName: !Ref UsersTable
                - DynamoDBCrudPolicy:
                      TableName: !Ref UserAddressesTable
                - DynamoDBCrudPolicy:
                      TableName: !Ref LoginRequestsTable
                - DynamoDBCrudPolicy:
                      TableName: !Ref SessionsTable
                # Give Create/Read/Update/Delete Permissions to the EmailRulesTable & SmsRulesTable
                - DynamoDBCrudPolicy:
                      TableName: !Ref EmailRulesTable
                - DynamoDBCrudPolicy:
                      TableName: !Ref SmsRulesTable
                - S3CrudPolicy:
                      BucketName: !Sub '${AWS::StackName}-filesbucket-${AWS::AccountId}'
            Environment:
                Variables:
                    # Make table name accessible as environment variable from function code during execution
                    TEXT_IT_API_KEY: !Ref TextItAPIKeyParameter
                    TEXT_IT_FLOW_ID: !Ref TextItFlowIDParameter
                    PUBLIC_RECORDS_TABLE: !Ref PublicRecordsTable
                    PUBLIC_RECORDS_KEYS_TABLE: !Ref PublicRecordsKeysTable
                    DATA_TABLE: !Ref DataTable
                    MANUAL_DATA_TABLE: !Ref ManualDataTable
                    EVENTS_TABLE: !Ref EventsTable
                    REGION: !Ref 'AWS::Region'
                    FILES_BUCKET: !Sub '${AWS::StackName}-filesbucket-${AWS::AccountId}'
                    FILES_TABLE: !Ref FilesTable
                    FILES_STORAGE_CLASS: !Ref FileRecordsS3StorageClassParameter
                    ALLOWED_ORIGINS: !Ref AllowedOriginsParameter
                    ALLOWED_API_ORIGINS: !Ref AllowedApiOriginsParameter
                    LIVEKIT_API_KEY: !Ref LivekitAPIKeyParameter
                    LIVEKIT_SECRET_KEY: !Ref LivekitSecretKeyParameter
                    LIVEKIT_ENDPOINT: !Ref LivekitEndpointParameter
                    USERS_TABLE: !Ref UsersTable
                    USER_ADDRESSES_TABLE: !Ref UserAddressesTable
                    LOGIN_REQUESTS_TABLE: !Ref LoginRequestsTable
                    SESSIONS_TABLE: !Ref SessionsTable
                    EMAIL_TABLE: !Ref EmailRulesTable
                    SMS_TABLE: !Ref SmsRulesTable
            Events:
                CreateRecordKey:
                    Type: Api
                    Properties:
                        Path: /api/v2/records/key
                        Method: POST
                RecordData:
                    Type: Api
                    Properties:
                        Path: /api/v2/records/data
                        Method: POST
                EraseData:
                    Type: Api
                    Properties:
                        Path: /api/v2/records/data
                        Method: DELETE
                GetData:
                    Type: Api
                    Properties:
                        Path: /api/v2/records/data
                        Method: GET
                ListData:
                    Type: Api
                    Properties:
                        Path: /api/v2/records/data/list
                        Method: GET
                RecordManualData:
                    Type: Api
                    Properties:
                        Path: /api/v2/records/manual/data
                        Method: POST
                EraseManualData:
                    Type: Api
                    Properties:
                        Path: /api/v2/records/manual/data
                        Method: DELETE
                GetManualData:
                    Type: Api
                    Properties:
                        Path: /api/v2/records/manual/data
                        Method: GET
                RecordFile:
                    Type: Api
                    Properties:
                        Path: /api/v2/records/file
                        Method: POST
                EraseFile:
                    Type: Api
                    Properties:
                        Path: /api/v2/records/file
                        Method: DELETE
                AddEventCount:
                    Type: Api
                    Properties:
                        Path: /api/v2/records/events/count
                        Method: POST
                GetEventCount:
                    Type: Api
                    Properties:
                        Path: /api/v2/records/events/count
                        Method: GET
                MarkFileUploaded:
                    Type: S3
                    Properties:
                        Bucket: !Ref FilesBucket
                        Events: s3:ObjectCreated:Put
                GetMeetToken:
                    Type: Api
                    Properties:
                        Path: /api/v2/meet/token
                        Method: POST
                Login:
                    Type: Api
                    Properties:
                        Path: /api/v2/login
                        Method: POST
                CompleteLogin:
                    Type: Api
                    Properties:
                        Path: /api/v2/completeLogin
                        Method: POST
                RevokeSession:
                    Type: Api
                    Properties:
                        Path: /api/v2/revokeSession
                        Method: POST
                ListSessions:
                    Type: Api
                    Properties:
                        Path: /api/v2/sessions
                        Method: GET
                RevokeAllSessions:
                    Type: Api
                    Properties:
                        Path: /api/v2/revokeAllSessions
                        Method: POST
                ReplaceSession:
                    Type: Api
                    Properties:
                        Path: /api/v2/replaceSession
                        Method: POST
                GetEmailRules:
                    Type: Api
                    Properties:
                        Path: /api/emailRules
                        Method: GET
                GetSmsRules:
                    Type: Api
                    Properties:
                        Path: /api/smsRules
                        Method: GET
                GetMetadata:
                    Type: Api
                    Properties:
                        Path: /api/{token}/metadata
                        Method: GET
                PutMetadata:
                    Type: Api
                    Properties:
                        Path: /api/{token}/metadata
                        Method: PUT
                KeepWarm:
                    Type: Schedule
                    Properties:
                        Schedule: 'rate(5 minutes)'
                        Name: KeepWarmSchedule
                        Description: Event to keep the function always warm

    # Simple syntax to create a DynamoDB table with a single attribute primary key, more in
    # https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlesssimpletable

    # DynamoDB table to store users: {id: &lt;ID&gt;, name: &lt;NAME&gt;}
    UsersTable:
        Type: AWS::DynamoDB::Table
        Properties:
            KeySchema:
                - AttributeName: id
                  KeyType: HASH
            AttributeDefinitions:
                - AttributeName: id
                  AttributeType: S
                - AttributeName: email
                  AttributeType: S
                - AttributeName: phoneNumber
                  AttributeType: S
            ProvisionedThroughput:
                ReadCapacityUnits: 2
                WriteCapacityUnits: 2
            GlobalSecondaryIndexes:
                - IndexName: EmailIndex
                  KeySchema:
                      - AttributeName: email
                        KeyType: HASH
                  Projection:
                      ProjectionType: KEYS_ONLY
                  ProvisionedThroughput:
                      ReadCapacityUnits: 2
                      WriteCapacityUnits: 2
                - IndexName: PhoneIndex
                  KeySchema:
                      - AttributeName: phoneNumber
                        KeyType: HASH
                  Projection:
                      ProjectionType: KEYS_ONLY
                  ProvisionedThroughput:
                      ReadCapacityUnits: 2
                      WriteCapacityUnits: 2

    UserAddressesTable:
        Type: AWS::DynamoDB::Table
        Properties:
            BillingMode: PAY_PER_REQUEST
            KeySchema:
                - AttributeName: address
                  KeyType: HASH
                - AttributeName: addressType
                  KeyType: RANGE
            AttributeDefinitions:
                - AttributeName: address
                  AttributeType: S
                - AttributeName: addressType
                  AttributeType: S

    LoginRequestsTable:
        Type: AWS::DynamoDB::Table
        Properties:
            KeySchema:
                - AttributeName: userId
                  KeyType: HASH
                - AttributeName: requestId
                  KeyType: RANGE
            AttributeDefinitions:
                - AttributeName: userId
                  AttributeType: S
                - AttributeName: requestId
                  AttributeType: S
            ProvisionedThroughput:
                ReadCapacityUnits: 2
                WriteCapacityUnits: 2

    SessionsTable:
        Type: AWS::DynamoDB::Table
        Properties:
            KeySchema:
                - AttributeName: userId
                  KeyType: HASH
                - AttributeName: sessionId
                  KeyType: RANGE
            AttributeDefinitions:
                - AttributeName: userId
                  AttributeType: S
                - AttributeName: sessionId
                  AttributeType: S
                - AttributeName: expireTimeMs
                  AttributeType: 'N'
            ProvisionedThroughput:
                ReadCapacityUnits: 2
                WriteCapacityUnits: 2
            LocalSecondaryIndexes:
                - IndexName: ExpireTimeIndex
                  KeySchema:
                      - AttributeName: userId
                        KeyType: HASH
                      - AttributeName: expireTimeMs
                        KeyType: RANGE
                  Projection:
                      ProjectionType: ALL

    # DynamoDB table to store records
    RecordsTable:
        Type: AWS::DynamoDB::Table
        Properties:
            KeySchema:
                - AttributeName: issuer
                  KeyType: HASH
                - AttributeName: address
                  KeyType: RANGE
            AttributeDefinitions:
                - AttributeName: issuer
                  AttributeType: S
                - AttributeName: address
                  AttributeType: S
            ProvisionedThroughput:
                ReadCapacityUnits: 2
                WriteCapacityUnits: 2

    EmailRulesTable:
        Type: AWS::DynamoDB::Table
        Properties:
            KeySchema:
                - AttributeName: id
                  KeyType: HASH
            AttributeDefinitions:
                - AttributeName: id
                  AttributeType: S
            ProvisionedThroughput:
                ReadCapacityUnits: 2
                WriteCapacityUnits: 2

    SmsRulesTable:
        Type: AWS::DynamoDB::Table
        Properties:
            KeySchema:
                - AttributeName: id
                  KeyType: HASH
            AttributeDefinitions:
                - AttributeName: id
                  AttributeType: S
            ProvisionedThroughput:
                ReadCapacityUnits: 2
                WriteCapacityUnits: 2

    RecordsBucket:
        Type: AWS::S3::Bucket
        DeletionPolicy: Retain
        Properties:
            AccessControl: PublicRead

    FilesBucket:
        Type: AWS::S3::Bucket
        DeletionPolicy: Retain
        Properties:
            BucketName: !Sub '${AWS::StackName}-filesbucket-${AWS::AccountId}'
            CorsConfiguration:
                CorsRules:
                    - AllowedHeaders:
                          - '*'
                      AllowedMethods:
                          - GET
                          - PUT
                          - POST
                      AllowedOrigins:
                          - '*'
                      ExposedHeaders: []
                      MaxAge: 3000

    PublicRecordsTable:
        Type: AWS::DynamoDB::Table
        Properties:
            KeySchema:
                - AttributeName: recordName
                  KeyType: HASH
            AttributeDefinitions:
                - AttributeName: recordName
                  AttributeType: S
            ProvisionedThroughput:
                ReadCapacityUnits: 2
                WriteCapacityUnits: 2

    PublicRecordsKeysTable:
        Type: AWS::DynamoDB::Table
        Properties:
            KeySchema:
                - AttributeName: recordName
                  KeyType: HASH
                - AttributeName: secretHash
                  KeyType: RANGE
            AttributeDefinitions:
                - AttributeName: recordName
                  AttributeType: S
                - AttributeName: secretHash
                  AttributeType: S
            ProvisionedThroughput:
                ReadCapacityUnits: 2
                WriteCapacityUnits: 2

    DataTable:
        Type: AWS::DynamoDB::Table
        Properties:
            KeySchema:
                - AttributeName: recordName
                  KeyType: HASH
                - AttributeName: address
                  KeyType: RANGE
            AttributeDefinitions:
                - AttributeName: recordName
                  AttributeType: S
                - AttributeName: address
                  AttributeType: S
            ProvisionedThroughput:
                ReadCapacityUnits: 2
                WriteCapacityUnits: 2

    ManualDataTable:
        Type: AWS::DynamoDB::Table
        Properties:
            BillingMode: PAY_PER_REQUEST
            KeySchema:
                - AttributeName: recordName
                  KeyType: HASH
                - AttributeName: address
                  KeyType: RANGE
            AttributeDefinitions:
                - AttributeName: recordName
                  AttributeType: S
                - AttributeName: address
                  AttributeType: S

    FilesTable:
        Type: AWS::DynamoDB::Table
        Properties:
            KeySchema:
                - AttributeName: recordName
                  KeyType: HASH
                - AttributeName: fileName
                  KeyType: RANGE
            AttributeDefinitions:
                - AttributeName: recordName
                  AttributeType: S
                - AttributeName: fileName
                  AttributeType: S
            ProvisionedThroughput:
                ReadCapacityUnits: 2
                WriteCapacityUnits: 2

    EventsTable:
        Type: AWS::DynamoDB::Table
        Properties:
            BillingMode: PAY_PER_REQUEST
            KeySchema:
                - AttributeName: recordName
                  KeyType: HASH
                - AttributeName: eventName
                  KeyType: RANGE
            AttributeDefinitions:
                - AttributeName: recordName
                  AttributeType: S
                - AttributeName: eventName
                  AttributeType: S

Outputs:
    WebEndpoint:
        Description: 'API Gateway endpoint URL for Prod stage'
        Value: !Sub 'https://${ServerlessRestApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/'
