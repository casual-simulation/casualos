diff --git a/CHANGELOG.md b/CHANGELOG.md
deleted file mode 100644
index d5ca34da35ce178d3886b102939a480ec52323e5..0000000000000000000000000000000000000000
diff --git a/deno/StructureClone.ts b/deno/StructureClone.ts
index cba3da6b1c005c4ff9f9f21e48b36295a709ee56..583a8ae6cb31585e3f367d4f37a7500fbfcadfff 100644
--- a/deno/StructureClone.ts
+++ b/deno/StructureClone.ts
@@ -1,7 +1,7 @@
 import {
     encodeBase64,
     decodeBase64,
-} from 'https://deno.land/std/encoding/base64.ts';
+} from './base64.ts';
 import { Transferrable } from './MessageTarget.ts';
 import { MessagePort, MessageChannel } from './MessageChannel.ts';
 
diff --git a/deno/_validate_binary_like.ts b/deno/_validate_binary_like.ts
new file mode 100644
index 0000000000000000000000000000000000000000..670816d47b4e7aa867a0e9749883820f3dec3b48
--- /dev/null
+++ b/deno/_validate_binary_like.ts
@@ -0,0 +1,29 @@
+// Copyright 2018-2024 the Deno authors. All rights reserved. MIT license.
+
+const encoder = new TextEncoder();
+
+function getTypeName(value: unknown): string {
+  const type = typeof value;
+  if (type !== "object") {
+    return type;
+  } else if (value === null) {
+    return "null";
+  } else {
+    return value?.constructor?.name ?? "object";
+  }
+}
+
+export function validateBinaryLike(source: unknown): Uint8Array {
+  if (typeof source === "string") {
+    return encoder.encode(source);
+  } else if (source instanceof Uint8Array) {
+    return source;
+  } else if (source instanceof ArrayBuffer) {
+    return new Uint8Array(source);
+  }
+  throw new TypeError(
+    `Cannot validate the input as it must be a Uint8Array, a string, or an ArrayBuffer: received a value of the type ${
+      getTypeName(source)
+    }`,
+  );
+}
\ No newline at end of file
diff --git a/deno/base64.ts b/deno/base64.ts
new file mode 100644
index 0000000000000000000000000000000000000000..9b0c2b8c023c183e58a3ae9e8e5ee1214db579eb
--- /dev/null
+++ b/deno/base64.ts
@@ -0,0 +1,174 @@
+// Copyright 2018-2024 the Deno authors. All rights reserved. MIT license.
+// This module is browser compatible.
+
+/**
+ * Utilities for
+ * {@link https://www.rfc-editor.org/rfc/rfc4648.html#section-4 | base64}
+ * encoding and decoding.
+ *
+ * ```ts
+ * import {
+ *   encodeBase64,
+ *   decodeBase64,
+ * } from "@std/encoding/base64";
+ * import { assertEquals } from "@std/assert";
+ *
+ * const foobar = new TextEncoder().encode("foobar");
+ *
+ * assertEquals(encodeBase64(foobar), "Zm9vYmFy");
+ * assertEquals(decodeBase64("Zm9vYmFy"), foobar);
+ * ```
+ *
+ * @module
+ */
+
+import { validateBinaryLike } from "./_validate_binary_like.ts";
+
+const base64abc = [
+  "A",
+  "B",
+  "C",
+  "D",
+  "E",
+  "F",
+  "G",
+  "H",
+  "I",
+  "J",
+  "K",
+  "L",
+  "M",
+  "N",
+  "O",
+  "P",
+  "Q",
+  "R",
+  "S",
+  "T",
+  "U",
+  "V",
+  "W",
+  "X",
+  "Y",
+  "Z",
+  "a",
+  "b",
+  "c",
+  "d",
+  "e",
+  "f",
+  "g",
+  "h",
+  "i",
+  "j",
+  "k",
+  "l",
+  "m",
+  "n",
+  "o",
+  "p",
+  "q",
+  "r",
+  "s",
+  "t",
+  "u",
+  "v",
+  "w",
+  "x",
+  "y",
+  "z",
+  "0",
+  "1",
+  "2",
+  "3",
+  "4",
+  "5",
+  "6",
+  "7",
+  "8",
+  "9",
+  "+",
+  "/",
+];
+
+/**
+ * Converts data into a base64-encoded string.
+ *
+ * @see {@link https://www.rfc-editor.org/rfc/rfc4648.html#section-4}
+ *
+ * @param data The data to encode.
+ * @returns The base64-encoded string.
+ *
+ * @example Usage
+ * ```ts
+ * import { encodeBase64 } from "@std/encoding/base64";
+ * import { assertEquals } from "@std/assert";
+ *
+ * assertEquals(encodeBase64("foobar"), "Zm9vYmFy");
+ * ```
+ */
+export function encodeBase64(data: ArrayBuffer | Uint8Array | string): string {
+  // CREDIT: https://gist.github.com/enepomnyaschih/72c423f727d395eeaa09697058238727
+  const uint8 = validateBinaryLike(data);
+  let result = "";
+  let i;
+  const l = uint8.length;
+  for (i = 2; i < l; i += 3) {
+    result += base64abc[(uint8[i - 2]!) >> 2];
+    result += base64abc[
+      (((uint8[i - 2]!) & 0x03) << 4) |
+      ((uint8[i - 1]!) >> 4)
+    ];
+    result += base64abc[
+      (((uint8[i - 1]!) & 0x0f) << 2) |
+      ((uint8[i]!) >> 6)
+    ];
+    result += base64abc[(uint8[i]!) & 0x3f];
+  }
+  if (i === l + 1) {
+    // 1 octet yet to write
+    result += base64abc[(uint8[i - 2]!) >> 2];
+    result += base64abc[((uint8[i - 2]!) & 0x03) << 4];
+    result += "==";
+  }
+  if (i === l) {
+    // 2 octets yet to write
+    result += base64abc[(uint8[i - 2]!) >> 2];
+    result += base64abc[
+      (((uint8[i - 2]!) & 0x03) << 4) |
+      ((uint8[i - 1]!) >> 4)
+    ];
+    result += base64abc[((uint8[i - 1]!) & 0x0f) << 2];
+    result += "=";
+  }
+  return result;
+}
+
+/**
+ * Decodes a base64-encoded string.
+ *
+ * @see {@link https://www.rfc-editor.org/rfc/rfc4648.html#section-4}
+ *
+ * @param b64 The base64-encoded string to decode.
+ * @returns The decoded data.
+ *
+ * @example Usage
+ * ```ts
+ * import { decodeBase64 } from "@std/encoding/base64";
+ * import { assertEquals } from "@std/assert";
+ *
+ * assertEquals(
+ *   decodeBase64("Zm9vYmFy"),
+ *   new TextEncoder().encode("foobar")
+ * );
+ * ```
+ */
+export function decodeBase64(b64: string): Uint8Array {
+  const binString = atob(b64);
+  const size = binString.length;
+  const bytes = new Uint8Array(size);
+  for (let i = 0; i < size; i++) {
+    bytes[i] = binString.charCodeAt(i);
+  }
+  return bytes;
+}
