{
    "hash": "actions/data",
    "pageTitle": "Data Actions",
    "pageDescription": "The Data Actions are used to get and set data on bots.",
    "pageSidebarLabel": "Data",
    "contents": [
        {
            "id": 306,
            "order": 9999,
            "name": "applyDiffToSnapshot",
            "reflection": {
                "id": 306,
                "name": "__type",
                "variant": "signature",
                "kind": 4096,
                "flags": {},
                "comment": {
                    "summary": [
                        {
                            "kind": "text",
                            "text": "Applies the given difference to the given snapshot and returns a new snapshot that represents the result."
                        }
                    ],
                    "blockTags": [
                        {
                            "tag": "@dochash",
                            "content": [
                                {
                                    "kind": "text",
                                    "text": "actions/data"
                                }
                            ]
                        },
                        {
                            "tag": "@docgroup",
                            "content": [
                                {
                                    "kind": "text",
                                    "text": "01-data-actions"
                                }
                            ]
                        },
                        {
                            "tag": "@docname",
                            "content": [
                                {
                                    "kind": "text",
                                    "text": "applyDiffToSnapshot"
                                }
                            ]
                        }
                    ]
                },
                "sources": [
                    {
                        "fileName": "src/aux-runtime/runtime/AuxLibrary.ts",
                        "line": 4581,
                        "character": 13,
                        "url": "https://github.com/KallynGowdy/casualos/blob/b90532ee4/src/aux-runtime/runtime/AuxLibrary.ts#L4581"
                    }
                ],
                "parameters": [
                    {
                        "id": 307,
                        "name": "snapshot",
                        "variant": "param",
                        "kind": 32768,
                        "flags": {},
                        "comment": {
                            "summary": [
                                {
                                    "kind": "text",
                                    "text": "the snapshot that the delta should be applied to. This is also called the baseline snapshot."
                                }
                            ],
                            "blockTags": []
                        },
                        "type": {
                            "type": "reference",
                            "target": 3514,
                            "name": "BotState",
                            "package": "@casual-simulation/aux-common",
                            "id": 3514,
                            "qualifiedName": "BotsState"
                        }
                    },
                    {
                        "id": 308,
                        "name": "diff",
                        "variant": "param",
                        "kind": 32768,
                        "flags": {},
                        "comment": {
                            "summary": [
                                {
                                    "kind": "text",
                                    "text": "the delta that should be applied to the snapshot. You can create a delta from two snapshots by using the "
                                },
                                {
                                    "kind": "text",
                                    "text": "[`diffSnapshots(first, second)`](ref:diffSnapshots)"
                                },
                                {
                                    "kind": "text",
                                    "text": " function."
                                }
                            ],
                            "blockTags": []
                        },
                        "type": {
                            "type": "reference",
                            "target": 3517,
                            "name": "PartialBotState",
                            "package": "@casual-simulation/aux-common",
                            "id": 3517,
                            "qualifiedName": "PartialBotsState"
                        }
                    }
                ],
                "type": {
                    "type": "reference",
                    "target": 3514,
                    "name": "BotState",
                    "package": "@casual-simulation/aux-common",
                    "id": 3514,
                    "qualifiedName": "BotsState"
                }
            },
            "comment": {
                "text": "Applies the given difference to the given snapshot and returns a new snapshot that represents the result.",
                "tags": [
                    {
                        "tagName": "dochash",
                        "text": "actions/data"
                    },
                    {
                        "tagName": "docgroup",
                        "text": "01-data-actions"
                    },
                    {
                        "tagName": "docname",
                        "text": "applyDiffToSnapshot"
                    }
                ]
            },
            "group": "01-data-actions"
        },
        {
            "id": 401,
            "order": 9999,
            "name": "changeState",
            "reflection": {
                "id": 401,
                "name": "__type",
                "variant": "signature",
                "kind": 4096,
                "flags": {},
                "comment": {
                    "summary": [
                        {
                            "kind": "text",
                            "text": "Changes the state that the given bot occupies in the given group. If the state was changed, then the ["
                        },
                        {
                            "kind": "code",
                            "text": "`@[groupName][stateName]OnExit`"
                        },
                        {
                            "kind": "text",
                            "text": "](tags:@[groupName][stateName]OnExit) and ["
                        },
                        {
                            "kind": "code",
                            "text": "`@[groupName][stateName]OnEnter`"
                        },
                        {
                            "kind": "text",
                            "text": "](tags:@[groupName][stateName]OnExit) whispers are sent to the bot."
                        }
                    ],
                    "blockTags": [
                        {
                            "tag": "@example",
                            "content": [
                                {
                                    "kind": "code",
                                    "text": "```ts\nChange the #state of the bot to \"Running\"\n// Triggers\n```"
                                }
                            ]
                        },
                        {
                            "tag": "@stateRunningOnEnter",
                            "content": [
                                {
                                    "kind": "text",
                                    "text": "changeState(bot, \"Running\");"
                                }
                            ]
                        },
                        {
                            "tag": "@example",
                            "content": [
                                {
                                    "kind": "code",
                                    "text": "```ts\nChange the #playbackState of the bot to \"Playing\"\n// Triggers\n```"
                                }
                            ]
                        },
                        {
                            "tag": "@playbackStatePlayingOnEnter",
                            "content": [
                                {
                                    "kind": "text",
                                    "text": "changeState(bot, \"Playing\", \"playbackState\");"
                                }
                            ]
                        },
                        {
                            "tag": "@dochash",
                            "content": [
                                {
                                    "kind": "text",
                                    "text": "actions/data"
                                }
                            ]
                        },
                        {
                            "tag": "@docgroup",
                            "content": [
                                {
                                    "kind": "text",
                                    "text": "01-data-actions"
                                }
                            ]
                        },
                        {
                            "tag": "@docname",
                            "content": [
                                {
                                    "kind": "text",
                                    "text": "changeState"
                                }
                            ]
                        }
                    ]
                },
                "sources": [
                    {
                        "fileName": "src/aux-runtime/runtime/AuxLibrary.ts",
                        "line": 13775,
                        "character": 13,
                        "url": "https://github.com/KallynGowdy/casualos/blob/b90532ee4/src/aux-runtime/runtime/AuxLibrary.ts#L13775"
                    }
                ],
                "parameters": [
                    {
                        "id": 402,
                        "name": "bot",
                        "variant": "param",
                        "kind": 32768,
                        "flags": {},
                        "comment": {
                            "summary": [
                                {
                                    "kind": "text",
                                    "text": "the bot whose state should be changed."
                                }
                            ],
                            "blockTags": []
                        },
                        "type": {
                            "type": "reference",
                            "target": 3361,
                            "name": "Bot",
                            "package": "@casual-simulation/aux-common",
                            "id": 3361,
                            "qualifiedName": "Bot"
                        }
                    },
                    {
                        "id": 403,
                        "name": "stateName",
                        "variant": "param",
                        "kind": 32768,
                        "flags": {},
                        "comment": {
                            "summary": [
                                {
                                    "kind": "text",
                                    "text": "the value that should be set on the bot."
                                }
                            ],
                            "blockTags": []
                        },
                        "type": {
                            "type": "intrinsic",
                            "name": "string"
                        }
                    },
                    {
                        "id": 404,
                        "name": "groupName",
                        "variant": "param",
                        "kind": 32768,
                        "flags": {
                            "isOptional": true
                        },
                        "comment": {
                            "summary": [
                                {
                                    "kind": "text",
                                    "text": "the name of the tag that should be changed on the bot. If not specified, then the "
                                },
                                {
                                    "kind": "code",
                                    "text": "`#state`"
                                },
                                {
                                    "kind": "text",
                                    "text": " tag will be used."
                                }
                            ],
                            "blockTags": []
                        },
                        "type": {
                            "type": "intrinsic",
                            "name": "string"
                        }
                    }
                ],
                "type": {
                    "type": "intrinsic",
                    "name": "void"
                }
            },
            "comment": {
                "text": "Changes the state that the given bot occupies in the given group. If the state was changed, then the [`@[groupName][stateName]OnExit`](tags:@[groupName][stateName]OnExit) and [`@[groupName][stateName]OnEnter`](tags:@[groupName][stateName]OnExit) whispers are sent to the bot.",
                "tags": [
                    {
                        "tagName": "example",
                        "text": "```ts\nChange the #state of the bot to \"Running\"\n// Triggers\n```"
                    },
                    {
                        "tagName": "stateRunningOnEnter",
                        "text": "changeState(bot, \"Running\");"
                    },
                    {
                        "tagName": "example",
                        "text": "```ts\nChange the #playbackState of the bot to \"Playing\"\n// Triggers\n```"
                    },
                    {
                        "tagName": "playbackStatePlayingOnEnter",
                        "text": "changeState(bot, \"Playing\", \"playbackState\");"
                    },
                    {
                        "tagName": "dochash",
                        "text": "actions/data"
                    },
                    {
                        "tagName": "docgroup",
                        "text": "01-data-actions"
                    },
                    {
                        "tagName": "docname",
                        "text": "changeState"
                    }
                ]
            },
            "group": "01-data-actions"
        },
        {
            "id": 385,
            "order": 9999,
            "name": "create",
            "reflection": {
                "id": 385,
                "name": "__type",
                "variant": "signature",
                "kind": 4096,
                "flags": {},
                "comment": {
                    "summary": [
                        {
                            "kind": "text",
                            "text": "Creates a new bot or combination of bots with the given mods. Also triggers ["
                        },
                        {
                            "kind": "code",
                            "text": "`@onCreate`"
                        },
                        {
                            "kind": "text",
                            "text": "](tags:@onCreate) on all the created bots.\nBy default, bots are created with a unique "
                        },
                        {
                            "kind": "text",
                            "text": "[`#id`](tags:id)"
                        },
                        {
                            "kind": "text",
                            "text": ", "
                        },
                        {
                            "kind": "text",
                            "text": "[`#creator`](tags:creator)"
                        },
                        {
                            "kind": "text",
                            "text": " set to the current "
                        },
                        {
                            "kind": "code",
                            "text": "`bot.id`"
                        },
                        {
                            "kind": "text",
                            "text": ", and "
                        },
                        {
                            "kind": "text",
                            "text": "[`#space`](tags:space)"
                        },
                        {
                            "kind": "text",
                            "text": " set to "
                        },
                        {
                            "kind": "code",
                            "text": "`shared`"
                        },
                        {
                            "kind": "text",
                            "text": ".\nBots must be created with at least one tag. If "
                        },
                        {
                            "kind": "code",
                            "text": "`create()`"
                        },
                        {
                            "kind": "text",
                            "text": " tries to make a bot with zero tags then an error will be thrown.\n\nIf "
                        },
                        {
                            "kind": "text",
                            "text": "[`#creator`](tags:creator)"
                        },
                        {
                            "kind": "text",
                            "text": " references a non-existent bot or a bot with a different "
                        },
                        {
                            "kind": "text",
                            "text": "[`#space`](tags:space)"
                        },
                        {
                            "kind": "text",
                            "text": " than the created bot, then "
                        },
                        {
                            "kind": "text",
                            "text": "[`#creator`](tags:creator)"
                        },
                        {
                            "kind": "text",
                            "text": " will be set to "
                        },
                        {
                            "kind": "code",
                            "text": "`null`"
                        },
                        {
                            "kind": "text",
                            "text": "."
                        }
                    ],
                    "blockTags": [
                        {
                            "tag": "@returns",
                            "content": [
                                {
                                    "kind": "text",
                                    "text": "The bot(s) that were created."
                                }
                            ]
                        },
                        {
                            "tag": "@example",
                            "content": [
                                {
                                    "kind": "code",
                                    "text": "```ts\nCreate a red bot\nlet redBot = create({\n    color: \"red\"\n});\n```"
                                }
                            ]
                        },
                        {
                            "tag": "@example",
                            "content": [
                                {
                                    "kind": "code",
                                    "text": "```ts\nCreate a parent and a child bot\nlet myParentBot = create({\n  creator: null,\n   label: \"Parent\"\n});\nlet myChildBot = create({\n   creator: getID(myParentBot),\n   label: \"Child\"\n});\n```"
                                }
                            ]
                        },
                        {
                            "tag": "@example",
                            "content": [
                                {
                                    "kind": "code",
                                    "text": "```ts\nCreate a red bot in the tempLocal  space\nlet myBot = create({ space: \"tempLocal\", color: \"red\" });\n```"
                                }
                            ]
                        },
                        {
                            "tag": "@example",
                            "content": [
                                {
                                    "kind": "code",
                                    "text": "```ts\nCreate a bot from multiple mods\n// myBot is placed in the \"myDimension\" dimension and is colored green\nlet myBot = create({ myDimension: true }, {\n    color: \"green\"\n});\n```"
                                }
                            ]
                        },
                        {
                            "tag": "@example",
                            "content": [
                                {
                                    "kind": "code",
                                    "text": "```ts\nCreate a red bot and a blue bot\nlet [myRedBot, myBlueBot] = create({ creator: null}, [\n    {\n       color: \"red\"\n    },\n    {\n      color: \"blue\"\n    }\n});\n```"
                                }
                            ]
                        },
                        {
                            "tag": "@dochash",
                            "content": [
                                {
                                    "kind": "text",
                                    "text": "actions/data"
                                }
                            ]
                        },
                        {
                            "tag": "@docgroup",
                            "content": [
                                {
                                    "kind": "text",
                                    "text": "01-data-actions"
                                }
                            ]
                        },
                        {
                            "tag": "@docname",
                            "content": [
                                {
                                    "kind": "text",
                                    "text": "create"
                                }
                            ]
                        }
                    ]
                },
                "sources": [
                    {
                        "fileName": "src/aux-runtime/runtime/AuxLibrary.ts",
                        "line": 13538,
                        "character": 13,
                        "url": "https://github.com/KallynGowdy/casualos/blob/b90532ee4/src/aux-runtime/runtime/AuxLibrary.ts#L13538"
                    }
                ],
                "parameters": [
                    {
                        "id": 386,
                        "name": "mods",
                        "variant": "param",
                        "kind": 32768,
                        "flags": {
                            "isRest": true
                        },
                        "comment": {
                            "summary": [
                                {
                                    "kind": "text",
                                    "text": "the mods that should be applied to the new bot(s).\nIf no parameters are specified, then the new bot will have its "
                                },
                                {
                                    "kind": "text",
                                    "text": "[`#creator`](tags:creator)"
                                },
                                {
                                    "kind": "text",
                                    "text": " set to "
                                },
                                {
                                    "kind": "code",
                                    "text": "`bot.id`"
                                },
                                {
                                    "kind": "text",
                                    "text": " and "
                                },
                                {
                                    "kind": "text",
                                    "text": "[`#space`](tags:space)"
                                },
                                {
                                    "kind": "text",
                                    "text": " set to "
                                },
                                {
                                    "kind": "code",
                                    "text": "`shared`"
                                },
                                {
                                    "kind": "text",
                                    "text": ".\nIf an array of mods is used for a parameter, then one bot will be created for _each unique combination of mods_."
                                }
                            ],
                            "blockTags": []
                        },
                        "type": {
                            "type": "array",
                            "elementType": {
                                "type": "reference",
                                "target": 2088,
                                "name": "Mod",
                                "package": "@casual-simulation/aux-runtime",
                                "id": 2088,
                                "qualifiedName": "Mod"
                            }
                        }
                    }
                ],
                "type": {
                    "type": "union",
                    "types": [
                        {
                            "type": "reference",
                            "target": 3361,
                            "name": "Bot",
                            "package": "@casual-simulation/aux-common",
                            "id": 3361,
                            "qualifiedName": "RuntimeBot"
                        },
                        {
                            "type": "array",
                            "elementType": {
                                "type": "reference",
                                "target": 3361,
                                "name": "Bot",
                                "package": "@casual-simulation/aux-common",
                                "id": 3361,
                                "qualifiedName": "RuntimeBot"
                            }
                        }
                    ]
                }
            },
            "comment": {
                "text": "Creates a new bot or combination of bots with the given mods. Also triggers [`@onCreate`](tags:@onCreate) on all the created bots.\nBy default, bots are created with a unique id, creator set to the current `bot.id`, and space set to `shared`.\nBots must be created with at least one tag. If `create()` tries to make a bot with zero tags then an error will be thrown.\n\nIf creator references a non-existent bot or a bot with a different space than the created bot, then creator will be set to `null`.",
                "tags": [
                    {
                        "tagName": "returns",
                        "text": "The bot(s) that were created."
                    },
                    {
                        "tagName": "example",
                        "text": "```ts\nCreate a red bot\nlet redBot = create({\n    color: \"red\"\n});\n```"
                    },
                    {
                        "tagName": "example",
                        "text": "```ts\nCreate a parent and a child bot\nlet myParentBot = create({\n  creator: null,\n   label: \"Parent\"\n});\nlet myChildBot = create({\n   creator: getID(myParentBot),\n   label: \"Child\"\n});\n```"
                    },
                    {
                        "tagName": "example",
                        "text": "```ts\nCreate a red bot in the tempLocal  space\nlet myBot = create({ space: \"tempLocal\", color: \"red\" });\n```"
                    },
                    {
                        "tagName": "example",
                        "text": "```ts\nCreate a bot from multiple mods\n// myBot is placed in the \"myDimension\" dimension and is colored green\nlet myBot = create({ myDimension: true }, {\n    color: \"green\"\n});\n```"
                    },
                    {
                        "tagName": "example",
                        "text": "```ts\nCreate a red bot and a blue bot\nlet [myRedBot, myBlueBot] = create({ creator: null}, [\n    {\n       color: \"red\"\n    },\n    {\n      color: \"blue\"\n    }\n});\n```"
                    },
                    {
                        "tagName": "dochash",
                        "text": "actions/data"
                    },
                    {
                        "tagName": "docgroup",
                        "text": "01-data-actions"
                    },
                    {
                        "tagName": "docname",
                        "text": "create"
                    }
                ]
            },
            "group": "01-data-actions"
        },
        {
            "id": 389,
            "order": 9999,
            "name": "destroy",
            "reflection": {
                "id": 389,
                "name": "__type",
                "variant": "signature",
                "kind": 4096,
                "flags": {},
                "comment": {
                    "summary": [
                        {
                            "kind": "text",
                            "text": "Removes the given bot, list of bots, or bot by #id and triggers"
                        }
                    ],
                    "blockTags": [
                        {
                            "tag": "@onDestroy",
                            "content": [
                                {
                                    "kind": "text",
                                    "text": "for each of the destroyed bots.\n\nNote that only destroyable bots will be destroyed. Bots that have "
                                },
                                {
                                    "kind": "text",
                                    "text": "[`#destroyable`](tags:destroyable)"
                                },
                                {
                                    "kind": "text",
                                    "text": " set to "
                                },
                                {
                                    "kind": "code",
                                    "text": "`false`"
                                },
                                {
                                    "kind": "text",
                                    "text": " will not be destroyed.\n\nAlso note that all bots that have "
                                },
                                {
                                    "kind": "text",
                                    "text": "[`#creator`](tags:creator)"
                                },
                                {
                                    "kind": "text",
                                    "text": " set to the "
                                },
                                {
                                    "kind": "text",
                                    "text": "[`#id`](tags:id)"
                                },
                                {
                                    "kind": "text",
                                    "text": " of a destroyed bot will also be destroyed (unless they are not destroyable). This happens recursively until there are no more bots to destroy."
                                }
                            ]
                        },
                        {
                            "tag": "@example",
                            "content": [
                                {
                                    "kind": "code",
                                    "text": "```ts\nDestroy a the bot with the name \"bob\"\ndestroy(getBot(\"#name\", \"bob\"));\n```"
                                }
                            ]
                        },
                        {
                            "tag": "@example",
                            "content": [
                                {
                                    "kind": "code",
                                    "text": "```ts\nDestroy all bots that are colored red\ndestroy(getBots(\"#color\", \"red\"));\n```"
                                }
                            ]
                        },
                        {
                            "tag": "@example",
                            "content": [
                                {
                                    "kind": "code",
                                    "text": "```ts\nDestroy a bot by its ID\n// Destroy the bot with the #id: \"config\"\ndestroy(\"config\");\n```"
                                }
                            ]
                        },
                        {
                            "tag": "@dochash",
                            "content": [
                                {
                                    "kind": "text",
                                    "text": "actions/data"
                                }
                            ]
                        },
                        {
                            "tag": "@docgroup",
                            "content": [
                                {
                                    "kind": "text",
                                    "text": "01-data-actions"
                                }
                            ]
                        },
                        {
                            "tag": "@docname",
                            "content": [
                                {
                                    "kind": "text",
                                    "text": "destroy"
                                }
                            ]
                        }
                    ]
                },
                "sources": [
                    {
                        "fileName": "src/aux-runtime/runtime/AuxLibrary.ts",
                        "line": 13679,
                        "character": 13,
                        "url": "https://github.com/KallynGowdy/casualos/blob/b90532ee4/src/aux-runtime/runtime/AuxLibrary.ts#L13679"
                    }
                ],
                "parameters": [
                    {
                        "id": 390,
                        "name": "bot",
                        "variant": "param",
                        "kind": 32768,
                        "flags": {},
                        "comment": {
                            "summary": [
                                {
                                    "kind": "text",
                                    "text": "The bot, bot ID, or list of bots to destroy."
                                }
                            ],
                            "blockTags": []
                        },
                        "type": {
                            "type": "union",
                            "types": [
                                {
                                    "type": "intrinsic",
                                    "name": "string"
                                },
                                {
                                    "type": "array",
                                    "elementType": {
                                        "type": "intrinsic",
                                        "name": "string"
                                    }
                                },
                                {
                                    "type": "reference",
                                    "target": 3361,
                                    "name": "Bot",
                                    "package": "@casual-simulation/aux-common",
                                    "id": 3361,
                                    "qualifiedName": "Bot"
                                },
                                {
                                    "type": "array",
                                    "elementType": {
                                        "type": "reference",
                                        "target": 3361,
                                        "name": "Bot",
                                        "package": "@casual-simulation/aux-common",
                                        "id": 3361,
                                        "qualifiedName": "Bot"
                                    }
                                }
                            ]
                        }
                    }
                ],
                "type": {
                    "type": "intrinsic",
                    "name": "void"
                }
            },
            "comment": {
                "text": "Removes the given bot, list of bots, or bot by #id and triggers",
                "tags": [
                    {
                        "tagName": "onDestroy",
                        "text": "for each of the destroyed bots.\n\nNote that only destroyable bots will be destroyed. Bots that have destroyable set to `false` will not be destroyed.\n\nAlso note that all bots that have creator set to the id of a destroyed bot will also be destroyed (unless they are not destroyable). This happens recursively until there are no more bots to destroy."
                    },
                    {
                        "tagName": "example",
                        "text": "```ts\nDestroy a the bot with the name \"bob\"\ndestroy(getBot(\"#name\", \"bob\"));\n```"
                    },
                    {
                        "tagName": "example",
                        "text": "```ts\nDestroy all bots that are colored red\ndestroy(getBots(\"#color\", \"red\"));\n```"
                    },
                    {
                        "tagName": "example",
                        "text": "```ts\nDestroy a bot by its ID\n// Destroy the bot with the #id: \"config\"\ndestroy(\"config\");\n```"
                    },
                    {
                        "tagName": "dochash",
                        "text": "actions/data"
                    },
                    {
                        "tagName": "docgroup",
                        "text": "01-data-actions"
                    },
                    {
                        "tagName": "docname",
                        "text": "destroy"
                    }
                ]
            },
            "group": "01-data-actions"
        },
        {
            "id": 301,
            "order": 9999,
            "name": "diffSnapshots",
            "reflection": {
                "id": 301,
                "name": "__type",
                "variant": "signature",
                "kind": 4096,
                "flags": {},
                "comment": {
                    "summary": [
                        {
                            "kind": "text",
                            "text": "Calculates the difference between the two given snapshots.\nThe returned value is such that if you were to apply the changes (using "
                        },
                        {
                            "kind": "text",
                            "text": "[`applyDiffToSnapshot(snapshot, diff)`](ref:applyDiffToSnapshot)"
                        },
                        {
                            "kind": "text",
                            "text": ") it represents to the first snapshot you would end up with the second snapshot."
                        }
                    ],
                    "blockTags": [
                        {
                            "tag": "@example",
                            "content": [
                                {
                                    "kind": "code",
                                    "text": "```ts\nCalculate the diff between two snapshots\nconst first = getSnapshot([thisBot]);\nthisBot.tags.color = 'red';\nconst second = getSnapshot([thisBot]);\nconst diff = diffSnapshots(first, second);\n\nconsole.log(diff);\n```"
                                }
                            ]
                        },
                        {
                            "tag": "@dochash",
                            "content": [
                                {
                                    "kind": "text",
                                    "text": "actions/data"
                                }
                            ]
                        },
                        {
                            "tag": "@docgroup",
                            "content": [
                                {
                                    "kind": "text",
                                    "text": "01-data-actions"
                                }
                            ]
                        },
                        {
                            "tag": "@docname",
                            "content": [
                                {
                                    "kind": "text",
                                    "text": "diffSnapshots"
                                }
                            ]
                        }
                    ]
                },
                "sources": [
                    {
                        "fileName": "src/aux-runtime/runtime/AuxLibrary.ts",
                        "line": 4494,
                        "character": 13,
                        "url": "https://github.com/KallynGowdy/casualos/blob/b90532ee4/src/aux-runtime/runtime/AuxLibrary.ts#L4494"
                    }
                ],
                "parameters": [
                    {
                        "id": 302,
                        "name": "first",
                        "variant": "param",
                        "kind": 32768,
                        "flags": {},
                        "comment": {
                            "summary": [
                                {
                                    "kind": "text",
                                    "text": "the snapshot that should be used as the baseline for the diff."
                                }
                            ],
                            "blockTags": []
                        },
                        "type": {
                            "type": "reference",
                            "target": 3514,
                            "name": "BotState",
                            "package": "@casual-simulation/aux-common",
                            "id": 3514,
                            "qualifiedName": "BotsState"
                        }
                    },
                    {
                        "id": 303,
                        "name": "second",
                        "variant": "param",
                        "kind": 32768,
                        "flags": {},
                        "comment": {
                            "summary": [
                                {
                                    "kind": "text",
                                    "text": "the snapshot that should be used as the target for the diff."
                                }
                            ],
                            "blockTags": []
                        },
                        "type": {
                            "type": "reference",
                            "target": 3514,
                            "name": "BotState",
                            "package": "@casual-simulation/aux-common",
                            "id": 3514,
                            "qualifiedName": "BotsState"
                        }
                    }
                ],
                "type": {
                    "type": "reference",
                    "target": 3517,
                    "name": "PartialBotState",
                    "package": "@casual-simulation/aux-common",
                    "id": 3517,
                    "qualifiedName": "PartialBotsState"
                }
            },
            "comment": {
                "text": "Calculates the difference between the two given snapshots.\nThe returned value is such that if you were to apply the changes (using applyDiffToSnapshot) it represents to the first snapshot you would end up with the second snapshot.",
                "tags": [
                    {
                        "tagName": "example",
                        "text": "```ts\nCalculate the diff between two snapshots\nconst first = getSnapshot([thisBot]);\nthisBot.tags.color = 'red';\nconst second = getSnapshot([thisBot]);\nconst diff = diffSnapshots(first, second);\n\nconsole.log(diff);\n```"
                    },
                    {
                        "tagName": "dochash",
                        "text": "actions/data"
                    },
                    {
                        "tagName": "docgroup",
                        "text": "01-data-actions"
                    },
                    {
                        "tagName": "docname",
                        "text": "diffSnapshots"
                    }
                ]
            },
            "group": "01-data-actions"
        },
        {
            "id": 419,
            "order": 9999,
            "name": "getBotLinks",
            "reflection": {
                "id": 419,
                "name": "__type",
                "variant": "signature",
                "kind": 4096,
                "flags": {},
                "comment": {
                    "summary": [
                        {
                            "kind": "text",
                            "text": "Gets the list of bot links that are stored in tags on the specified bot.\n\nThis function can be useful if you want to discover what tags are linking to bots and get those bot IDs."
                        }
                    ],
                    "blockTags": [
                        {
                            "tag": "@example",
                            "content": [
                                {
                                    "kind": "code",
                                    "text": "```ts\nGet the list of bot links on this bot\nlet botLinks = getBotLinks(thisBot);\n```"
                                }
                            ]
                        },
                        {
                            "tag": "@dochash",
                            "content": [
                                {
                                    "kind": "text",
                                    "text": "actions/data"
                                }
                            ]
                        },
                        {
                            "tag": "@docgroup",
                            "content": [
                                {
                                    "kind": "text",
                                    "text": "01-data-actions"
                                }
                            ]
                        },
                        {
                            "tag": "@docname",
                            "content": [
                                {
                                    "kind": "text",
                                    "text": "getBotLinks"
                                }
                            ]
                        }
                    ]
                },
                "sources": [
                    {
                        "fileName": "src/aux-runtime/runtime/AuxLibrary.ts",
                        "line": 13856,
                        "character": 13,
                        "url": "https://github.com/KallynGowdy/casualos/blob/b90532ee4/src/aux-runtime/runtime/AuxLibrary.ts#L13856"
                    }
                ],
                "parameters": [
                    {
                        "id": 420,
                        "name": "bot",
                        "variant": "param",
                        "kind": 32768,
                        "flags": {},
                        "comment": {
                            "summary": [
                                {
                                    "kind": "text",
                                    "text": "The bot to get the links for."
                                }
                            ],
                            "blockTags": []
                        },
                        "type": {
                            "type": "reference",
                            "target": 3361,
                            "name": "Bot",
                            "package": "@casual-simulation/aux-common",
                            "id": 3361,
                            "qualifiedName": "Bot"
                        }
                    }
                ],
                "type": {
                    "type": "array",
                    "elementType": {
                        "type": "reference",
                        "target": 3520,
                        "name": "ParsedBotLink",
                        "package": "@casual-simulation/aux-common",
                        "id": 3520,
                        "qualifiedName": "ParsedBotLink"
                    }
                }
            },
            "comment": {
                "text": "Gets the list of bot links that are stored in tags on the specified bot.\n\nThis function can be useful if you want to discover what tags are linking to bots and get those bot IDs.",
                "tags": [
                    {
                        "tagName": "example",
                        "text": "```ts\nGet the list of bot links on this bot\nlet botLinks = getBotLinks(thisBot);\n```"
                    },
                    {
                        "tagName": "dochash",
                        "text": "actions/data"
                    },
                    {
                        "tagName": "docgroup",
                        "text": "01-data-actions"
                    },
                    {
                        "tagName": "docname",
                        "text": "getBotLinks"
                    }
                ]
            },
            "group": "01-data-actions"
        },
        {
            "id": 275,
            "order": 9999,
            "name": "getBotPosition",
            "reflection": {
                "id": 275,
                "name": "__type",
                "variant": "signature",
                "kind": 4096,
                "flags": {},
                "comment": {
                    "summary": [
                        {
                            "kind": "text",
                            "text": "Gets the 3D position of the given bot in the given dimension."
                        }
                    ],
                    "blockTags": [
                        {
                            "tag": "@example",
                            "content": [
                                {
                                    "kind": "code",
                                    "text": "```ts\nGet the position of this bot in the #home dimension\nlet position = getBotPosition(thisBot, \"home\");\n```"
                                }
                            ]
                        },
                        {
                            "tag": "@dochash",
                            "content": [
                                {
                                    "kind": "text",
                                    "text": "actions/data"
                                }
                            ]
                        },
                        {
                            "tag": "@docgroup",
                            "content": [
                                {
                                    "kind": "text",
                                    "text": "01-data-actions"
                                }
                            ]
                        },
                        {
                            "tag": "@docname",
                            "content": [
                                {
                                    "kind": "text",
                                    "text": "getBotPosition"
                                }
                            ]
                        }
                    ]
                },
                "sources": [
                    {
                        "fileName": "src/aux-runtime/runtime/AuxLibrary.ts",
                        "line": 3976,
                        "character": 13,
                        "url": "https://github.com/KallynGowdy/casualos/blob/b90532ee4/src/aux-runtime/runtime/AuxLibrary.ts#L3976"
                    }
                ],
                "parameters": [
                    {
                        "id": 276,
                        "name": "bot",
                        "variant": "param",
                        "kind": 32768,
                        "flags": {},
                        "comment": {
                            "summary": [
                                {
                                    "kind": "text",
                                    "text": "the bot or bot ID whose position should be retrieved."
                                }
                            ],
                            "blockTags": []
                        },
                        "type": {
                            "type": "union",
                            "types": [
                                {
                                    "type": "intrinsic",
                                    "name": "string"
                                },
                                {
                                    "type": "reference",
                                    "target": 3361,
                                    "name": "Bot",
                                    "package": "@casual-simulation/aux-common",
                                    "id": 3361,
                                    "qualifiedName": "RuntimeBot"
                                }
                            ]
                        }
                    },
                    {
                        "id": 277,
                        "name": "dimension",
                        "variant": "param",
                        "kind": 32768,
                        "flags": {},
                        "comment": {
                            "summary": [
                                {
                                    "kind": "text",
                                    "text": "the dimension that the position should be retrieved for."
                                }
                            ],
                            "blockTags": []
                        },
                        "type": {
                            "type": "intrinsic",
                            "name": "string"
                        }
                    }
                ],
                "type": {
                    "type": "reference",
                    "target": 58,
                    "name": "Vector3",
                    "package": "@casual-simulation/aux-common",
                    "id": 58,
                    "qualifiedName": "Vector3"
                }
            },
            "comment": {
                "text": "Gets the 3D position of the given bot in the given dimension.",
                "tags": [
                    {
                        "tagName": "example",
                        "text": "```ts\nGet the position of this bot in the #home dimension\nlet position = getBotPosition(thisBot, \"home\");\n```"
                    },
                    {
                        "tagName": "dochash",
                        "text": "actions/data"
                    },
                    {
                        "tagName": "docgroup",
                        "text": "01-data-actions"
                    },
                    {
                        "tagName": "docname",
                        "text": "getBotPosition"
                    }
                ]
            },
            "group": "01-data-actions"
        },
        {
            "id": 280,
            "order": 9999,
            "name": "getBotRotation",
            "reflection": {
                "id": 280,
                "name": "__type",
                "variant": "signature",
                "kind": 4096,
                "flags": {},
                "comment": {
                    "summary": [
                        {
                            "kind": "text",
                            "text": "Gets the 3D rotation of the given bot in the given dimension."
                        }
                    ],
                    "blockTags": [
                        {
                            "tag": "@example",
                            "content": [
                                {
                                    "kind": "code",
                                    "text": "```ts\nGet the rotation of this bot in the #home dimension\nlet rotation = getBotRotation(thisBot, \"home\");\n```"
                                }
                            ]
                        },
                        {
                            "tag": "@dochash",
                            "content": [
                                {
                                    "kind": "text",
                                    "text": "actions/data"
                                }
                            ]
                        },
                        {
                            "tag": "@docgroup",
                            "content": [
                                {
                                    "kind": "text",
                                    "text": "01-data-actions"
                                }
                            ]
                        },
                        {
                            "tag": "@docname",
                            "content": [
                                {
                                    "kind": "text",
                                    "text": "getBotRotation"
                                }
                            ]
                        }
                    ]
                },
                "sources": [
                    {
                        "fileName": "src/aux-runtime/runtime/AuxLibrary.ts",
                        "line": 4005,
                        "character": 13,
                        "url": "https://github.com/KallynGowdy/casualos/blob/b90532ee4/src/aux-runtime/runtime/AuxLibrary.ts#L4005"
                    }
                ],
                "parameters": [
                    {
                        "id": 281,
                        "name": "bot",
                        "variant": "param",
                        "kind": 32768,
                        "flags": {},
                        "comment": {
                            "summary": [
                                {
                                    "kind": "text",
                                    "text": "the bot or bot ID whose rotation should be retrieved."
                                }
                            ],
                            "blockTags": []
                        },
                        "type": {
                            "type": "union",
                            "types": [
                                {
                                    "type": "intrinsic",
                                    "name": "string"
                                },
                                {
                                    "type": "reference",
                                    "target": 3361,
                                    "name": "Bot",
                                    "package": "@casual-simulation/aux-common",
                                    "id": 3361,
                                    "qualifiedName": "RuntimeBot"
                                }
                            ]
                        }
                    },
                    {
                        "id": 282,
                        "name": "dimension",
                        "variant": "param",
                        "kind": 32768,
                        "flags": {},
                        "comment": {
                            "summary": [
                                {
                                    "kind": "text",
                                    "text": "the dimension that the rotation should be retrieved for."
                                }
                            ],
                            "blockTags": []
                        },
                        "type": {
                            "type": "intrinsic",
                            "name": "string"
                        }
                    }
                ],
                "type": {
                    "type": "reference",
                    "target": 154,
                    "name": "Rotation",
                    "package": "@casual-simulation/aux-common",
                    "id": 154,
                    "qualifiedName": "Rotation"
                }
            },
            "comment": {
                "text": "Gets the 3D rotation of the given bot in the given dimension.",
                "tags": [
                    {
                        "tagName": "example",
                        "text": "```ts\nGet the rotation of this bot in the #home dimension\nlet rotation = getBotRotation(thisBot, \"home\");\n```"
                    },
                    {
                        "tagName": "dochash",
                        "text": "actions/data"
                    },
                    {
                        "tagName": "docgroup",
                        "text": "01-data-actions"
                    },
                    {
                        "tagName": "docname",
                        "text": "getBotRotation"
                    }
                ]
            },
            "group": "01-data-actions"
        },
        {
            "id": 265,
            "order": 9999,
            "name": "getBotTagValues",
            "reflection": {
                "id": 265,
                "name": "__type",
                "variant": "signature",
                "kind": 4096,
                "flags": {},
                "comment": {
                    "summary": [
                        {
                            "kind": "text",
                            "text": "Gets a list of all the values in the inst for the given tag. Optionally accepts a filter for the tag values."
                        }
                    ],
                    "blockTags": [
                        {
                            "tag": "@example",
                            "content": [
                                {
                                    "kind": "code",
                                    "text": "```ts\nFind the number of bots named bob and print it\nconst numberOfBobs = getBotTagValues(\"#name\", \"bob\").length;\nos.toast(numberOfBobs);\n```"
                                }
                            ]
                        },
                        {
                            "tag": "@example",
                            "content": [
                                {
                                    "kind": "code",
                                    "text": "```ts\nFind all the bot ages above 10\nconst agesOver10 = getBotTagValues(\"#age\", age => age > 10);\n```"
                                }
                            ]
                        },
                        {
                            "tag": "@dochash",
                            "content": [
                                {
                                    "kind": "text",
                                    "text": "actions/data"
                                }
                            ]
                        },
                        {
                            "tag": "@docname",
                            "content": [
                                {
                                    "kind": "text",
                                    "text": "getBotTagValues"
                                }
                            ]
                        },
                        {
                            "tag": "@docgroup",
                            "content": [
                                {
                                    "kind": "text",
                                    "text": "01-data-actions"
                                }
                            ]
                        }
                    ]
                },
                "sources": [
                    {
                        "fileName": "src/aux-runtime/runtime/AuxLibrary.ts",
                        "line": 3891,
                        "character": 13,
                        "url": "https://github.com/KallynGowdy/casualos/blob/b90532ee4/src/aux-runtime/runtime/AuxLibrary.ts#L3891"
                    }
                ],
                "parameters": [
                    {
                        "id": 266,
                        "name": "tag",
                        "variant": "param",
                        "kind": 32768,
                        "flags": {},
                        "comment": {
                            "summary": [
                                {
                                    "kind": "text",
                                    "text": "the name of the tag to search for."
                                }
                            ],
                            "blockTags": []
                        },
                        "type": {
                            "type": "intrinsic",
                            "name": "string"
                        }
                    },
                    {
                        "id": 267,
                        "name": "filter",
                        "variant": "param",
                        "kind": 32768,
                        "flags": {
                            "isOptional": true
                        },
                        "comment": {
                            "summary": [
                                {
                                    "kind": "text",
                                    "text": "the filter that the tag values should match. If not specified, then all the tag values are included. If it is a function, then it will be used to match values. Otherwise, only tags that match the value will be included."
                                }
                            ],
                            "blockTags": []
                        },
                        "type": {
                            "type": "reference",
                            "target": 2089,
                            "name": "TagFilter",
                            "package": "@casual-simulation/aux-runtime",
                            "id": 2089,
                            "qualifiedName": "TagFilter"
                        }
                    }
                ],
                "type": {
                    "type": "array",
                    "elementType": {
                        "type": "intrinsic",
                        "name": "any"
                    }
                }
            },
            "comment": {
                "text": "Gets a list of all the values in the inst for the given tag. Optionally accepts a filter for the tag values.",
                "tags": [
                    {
                        "tagName": "example",
                        "text": "```ts\nFind the number of bots named bob and print it\nconst numberOfBobs = getBotTagValues(\"#name\", \"bob\").length;\nos.toast(numberOfBobs);\n```"
                    },
                    {
                        "tagName": "example",
                        "text": "```ts\nFind all the bot ages above 10\nconst agesOver10 = getBotTagValues(\"#age\", age => age > 10);\n```"
                    },
                    {
                        "tagName": "dochash",
                        "text": "actions/data"
                    },
                    {
                        "tagName": "docname",
                        "text": "getBotTagValues"
                    },
                    {
                        "tagName": "docgroup",
                        "text": "01-data-actions"
                    }
                ]
            },
            "group": "01-data-actions"
        },
        {
            "id": 293,
            "order": 9999,
            "name": "getFormattedJSON",
            "reflection": {
                "id": 293,
                "name": "__type",
                "variant": "signature",
                "kind": 4096,
                "flags": {},
                "comment": {
                    "summary": [
                        {
                            "kind": "text",
                            "text": "Gets the [JSON](https://en.wikipedia.org/wiki/JSON) representation of the given data formatted in a human-readable manner."
                        }
                    ],
                    "blockTags": [
                        {
                            "tag": "@example",
                            "content": [
                                {
                                    "kind": "code",
                                    "text": "```ts\nSort a nicely formatted copy of a bot in a tag\nlet bob = getBot(\"#name\", \"bob\");\ntags.savedBot = getFormattedJSON(bob);\n```"
                                }
                            ]
                        },
                        {
                            "tag": "@dochash",
                            "content": [
                                {
                                    "kind": "text",
                                    "text": "actions/data"
                                }
                            ]
                        },
                        {
                            "tag": "@docgroup",
                            "content": [
                                {
                                    "kind": "text",
                                    "text": "01-data-actions"
                                }
                            ]
                        },
                        {
                            "tag": "@docname",
                            "content": [
                                {
                                    "kind": "text",
                                    "text": "getFormattedJSON"
                                }
                            ]
                        }
                    ]
                },
                "sources": [
                    {
                        "fileName": "src/aux-runtime/runtime/AuxLibrary.ts",
                        "line": 4431,
                        "character": 13,
                        "url": "https://github.com/KallynGowdy/casualos/blob/b90532ee4/src/aux-runtime/runtime/AuxLibrary.ts#L4431"
                    }
                ],
                "parameters": [
                    {
                        "id": 294,
                        "name": "data",
                        "variant": "param",
                        "kind": 32768,
                        "flags": {},
                        "comment": {
                            "summary": [
                                {
                                    "kind": "text",
                                    "text": "the data that should be [cloned](https://en.wikipedia.org/wiki/Serialization) into the JSON format. If given a bot, then the returned JSON will be able to be able to be converted back into a mod via "
                                },
                                {
                                    "kind": "text",
                                    "text": "[`getMod(bot, ...tags)`](ref:getMod)"
                                },
                                {
                                    "kind": "text",
                                    "text": "."
                                }
                            ],
                            "blockTags": []
                        },
                        "type": {
                            "type": "intrinsic",
                            "name": "any"
                        }
                    }
                ],
                "type": {
                    "type": "intrinsic",
                    "name": "string"
                }
            },
            "comment": {
                "text": "Gets the [JSON](https://en.wikipedia.org/wiki/JSON) representation of the given data formatted in a human-readable manner.",
                "tags": [
                    {
                        "tagName": "example",
                        "text": "```ts\nSort a nicely formatted copy of a bot in a tag\nlet bob = getBot(\"#name\", \"bob\");\ntags.savedBot = getFormattedJSON(bob);\n```"
                    },
                    {
                        "tagName": "dochash",
                        "text": "actions/data"
                    },
                    {
                        "tagName": "docgroup",
                        "text": "01-data-actions"
                    },
                    {
                        "tagName": "docname",
                        "text": "getFormattedJSON"
                    }
                ]
            },
            "group": "01-data-actions"
        },
        {
            "id": 285,
            "order": 9999,
            "name": "getID",
            "reflection": {
                "id": 285,
                "name": "__type",
                "variant": "signature",
                "kind": 4096,
                "flags": {},
                "comment": {
                    "summary": [
                        {
                            "kind": "text",
                            "text": "Gets the "
                        },
                        {
                            "kind": "text",
                            "text": "[`#id`](tags:id)"
                        },
                        {
                            "kind": "text",
                            "text": " of the given bot."
                        }
                    ],
                    "blockTags": [
                        {
                            "tag": "@example",
                            "content": [
                                {
                                    "kind": "code",
                                    "text": "```ts\nGet the ID of the current bot\nlet id = getID(thisBot);\n```"
                                }
                            ]
                        },
                        {
                            "tag": "@example",
                            "content": [
                                {
                                    "kind": "code",
                                    "text": "```ts\nGet the ID of a bot with #name set to \"bob\"\nlet id = getID(getBot(\"#name\", \"bob\"));\n```"
                                }
                            ]
                        },
                        {
                            "tag": "@dochash",
                            "content": [
                                {
                                    "kind": "text",
                                    "text": "actions/data"
                                }
                            ]
                        },
                        {
                            "tag": "@docgroup",
                            "content": [
                                {
                                    "kind": "text",
                                    "text": "01-data-actions"
                                }
                            ]
                        },
                        {
                            "tag": "@docname",
                            "content": [
                                {
                                    "kind": "text",
                                    "text": "getID"
                                }
                            ]
                        }
                    ]
                },
                "sources": [
                    {
                        "fileName": "src/aux-runtime/runtime/AuxLibrary.ts",
                        "line": 4389,
                        "character": 13,
                        "url": "https://github.com/KallynGowdy/casualos/blob/b90532ee4/src/aux-runtime/runtime/AuxLibrary.ts#L4389"
                    }
                ],
                "parameters": [
                    {
                        "id": 286,
                        "name": "bot",
                        "variant": "param",
                        "kind": 32768,
                        "flags": {},
                        "comment": {
                            "summary": [
                                {
                                    "kind": "text",
                                    "text": "the bot whose ID should be retrieved. If given a bot ID, then it will be returned. If given null or something that is not a bot, then null will be returned."
                                }
                            ],
                            "blockTags": []
                        },
                        "type": {
                            "type": "union",
                            "types": [
                                {
                                    "type": "intrinsic",
                                    "name": "string"
                                },
                                {
                                    "type": "reference",
                                    "target": 3361,
                                    "name": "Bot",
                                    "package": "@casual-simulation/aux-common",
                                    "id": 3361,
                                    "qualifiedName": "Bot"
                                }
                            ]
                        }
                    }
                ],
                "type": {
                    "type": "intrinsic",
                    "name": "string"
                }
            },
            "comment": {
                "text": "Gets the id of the given bot.",
                "tags": [
                    {
                        "tagName": "example",
                        "text": "```ts\nGet the ID of the current bot\nlet id = getID(thisBot);\n```"
                    },
                    {
                        "tagName": "example",
                        "text": "```ts\nGet the ID of a bot with #name set to \"bob\"\nlet id = getID(getBot(\"#name\", \"bob\"));\n```"
                    },
                    {
                        "tagName": "dochash",
                        "text": "actions/data"
                    },
                    {
                        "tagName": "docgroup",
                        "text": "01-data-actions"
                    },
                    {
                        "tagName": "docname",
                        "text": "getID"
                    }
                ]
            },
            "group": "01-data-actions"
        },
        {
            "id": 289,
            "order": 9999,
            "name": "getJSON",
            "reflection": {
                "id": 289,
                "name": "__type",
                "variant": "signature",
                "kind": 4096,
                "flags": {},
                "comment": {
                    "summary": [
                        {
                            "kind": "text",
                            "text": "Gets the [JSON](https://en.wikipedia.org/wiki/JSON) representation of the given data."
                        }
                    ],
                    "blockTags": [
                        {
                            "tag": "@example",
                            "content": [
                                {
                                    "kind": "code",
                                    "text": "```ts\nStore a copy of a bot in a tag\nlet bob = getBot(\"#name\", \"bob\");\ntags.savedBot = getJSON(bob);\n```"
                                }
                            ]
                        },
                        {
                            "tag": "@dochash",
                            "content": [
                                {
                                    "kind": "text",
                                    "text": "actions/data"
                                }
                            ]
                        },
                        {
                            "tag": "@docgroup",
                            "content": [
                                {
                                    "kind": "text",
                                    "text": "01-data-actions"
                                }
                            ]
                        },
                        {
                            "tag": "@docname",
                            "content": [
                                {
                                    "kind": "text",
                                    "text": "getJSON"
                                }
                            ]
                        }
                    ]
                },
                "sources": [
                    {
                        "fileName": "src/aux-runtime/runtime/AuxLibrary.ts",
                        "line": 4411,
                        "character": 13,
                        "url": "https://github.com/KallynGowdy/casualos/blob/b90532ee4/src/aux-runtime/runtime/AuxLibrary.ts#L4411"
                    }
                ],
                "parameters": [
                    {
                        "id": 290,
                        "name": "data",
                        "variant": "param",
                        "kind": 32768,
                        "flags": {},
                        "comment": {
                            "summary": [
                                {
                                    "kind": "text",
                                    "text": "the data that should be [cloned](https://en.wikipedia.org/wiki/Serialization) into the JSON format. If given a bot, then the returned JSON will be able to be able to be converted back into a mod via "
                                },
                                {
                                    "kind": "text",
                                    "text": "[`getMod(bot, ...tags)`](ref:getMod)"
                                },
                                {
                                    "kind": "text",
                                    "text": "."
                                }
                            ],
                            "blockTags": []
                        },
                        "type": {
                            "type": "intrinsic",
                            "name": "any"
                        }
                    }
                ],
                "type": {
                    "type": "intrinsic",
                    "name": "string"
                }
            },
            "comment": {
                "text": "Gets the [JSON](https://en.wikipedia.org/wiki/JSON) representation of the given data.",
                "tags": [
                    {
                        "tagName": "example",
                        "text": "```ts\nStore a copy of a bot in a tag\nlet bob = getBot(\"#name\", \"bob\");\ntags.savedBot = getJSON(bob);\n```"
                    },
                    {
                        "tagName": "dochash",
                        "text": "actions/data"
                    },
                    {
                        "tagName": "docgroup",
                        "text": "01-data-actions"
                    },
                    {
                        "tagName": "docname",
                        "text": "getJSON"
                    }
                ]
            },
            "group": "01-data-actions"
        },
        {
            "id": 415,
            "order": 9999,
            "name": "getLink",
            "reflection": {
                "id": 415,
                "name": "__type",
                "variant": "signature",
                "kind": 4096,
                "flags": {},
                "comment": {
                    "summary": [
                        {
                            "kind": "text",
                            "text": "Creates and returns a bot link that references the given bots. The link can then be stored in a tag to save it. Useful for creating bot links for an arbitrary number of bots."
                        }
                    ],
                    "blockTags": [
                        {
                            "tag": "@example",
                            "content": [
                                {
                                    "kind": "code",
                                    "text": "```ts\nCreate a link to this bot\nlet link = getLink(thisBot);\n```"
                                }
                            ]
                        },
                        {
                            "tag": "@examples",
                            "content": [
                                {
                                    "kind": "text",
                                    "text": "Toast a link to this bot\ntoast(getLink(thisBot));"
                                }
                            ]
                        },
                        {
                            "tag": "@dochash",
                            "content": [
                                {
                                    "kind": "text",
                                    "text": "actions/data"
                                }
                            ]
                        },
                        {
                            "tag": "@docgroup",
                            "content": [
                                {
                                    "kind": "text",
                                    "text": "01-data-actions"
                                }
                            ]
                        },
                        {
                            "tag": "@docname",
                            "content": [
                                {
                                    "kind": "text",
                                    "text": "getLink"
                                }
                            ]
                        }
                    ]
                },
                "sources": [
                    {
                        "fileName": "src/aux-runtime/runtime/AuxLibrary.ts",
                        "line": 13822,
                        "character": 13,
                        "url": "https://github.com/KallynGowdy/casualos/blob/b90532ee4/src/aux-runtime/runtime/AuxLibrary.ts#L13822"
                    }
                ],
                "parameters": [
                    {
                        "id": 416,
                        "name": "bots",
                        "variant": "param",
                        "kind": 32768,
                        "flags": {
                            "isRest": true
                        },
                        "comment": {
                            "summary": [
                                {
                                    "kind": "text",
                                    "text": "The bots that the link should point to."
                                }
                            ],
                            "blockTags": []
                        },
                        "type": {
                            "type": "array",
                            "elementType": {
                                "type": "union",
                                "types": [
                                    {
                                        "type": "intrinsic",
                                        "name": "string"
                                    },
                                    {
                                        "type": "reference",
                                        "target": 3361,
                                        "name": "Bot",
                                        "package": "@casual-simulation/aux-common",
                                        "id": 3361,
                                        "qualifiedName": "Bot"
                                    },
                                    {
                                        "type": "array",
                                        "elementType": {
                                            "type": "union",
                                            "types": [
                                                {
                                                    "type": "intrinsic",
                                                    "name": "string"
                                                },
                                                {
                                                    "type": "reference",
                                                    "target": 3361,
                                                    "name": "Bot",
                                                    "package": "@casual-simulation/aux-common",
                                                    "id": 3361,
                                                    "qualifiedName": "Bot"
                                                }
                                            ]
                                        }
                                    }
                                ]
                            }
                        }
                    }
                ],
                "type": {
                    "type": "intrinsic",
                    "name": "string"
                }
            },
            "comment": {
                "text": "Creates and returns a bot link that references the given bots. The link can then be stored in a tag to save it. Useful for creating bot links for an arbitrary number of bots.",
                "tags": [
                    {
                        "tagName": "example",
                        "text": "```ts\nCreate a link to this bot\nlet link = getLink(thisBot);\n```"
                    },
                    {
                        "tagName": "examples",
                        "text": "Toast a link to this bot\ntoast(getLink(thisBot));"
                    },
                    {
                        "tagName": "dochash",
                        "text": "actions/data"
                    },
                    {
                        "tagName": "docgroup",
                        "text": "01-data-actions"
                    },
                    {
                        "tagName": "docname",
                        "text": "getLink"
                    }
                ]
            },
            "group": "01-data-actions"
        },
        {
            "id": 297,
            "order": 9999,
            "name": "getSnapshot",
            "reflection": {
                "id": 297,
                "name": "__type",
                "variant": "signature",
                "kind": 4096,
                "flags": {},
                "comment": {
                    "summary": [
                        {
                            "kind": "text",
                            "text": "Gets a snapshot of the given bots. Snapshots are like mods (see "
                        },
                        {
                            "kind": "text",
                            "text": "[`getMod(bot, ...tags)`](ref:getMod)"
                        },
                        {
                            "kind": "text",
                            "text": ") except they contain multiple bots and include the ID, space, tags, and tag masks of the bots."
                        }
                    ],
                    "blockTags": [
                        {
                            "tag": "@dochash",
                            "content": [
                                {
                                    "kind": "text",
                                    "text": "actions/data"
                                }
                            ]
                        },
                        {
                            "tag": "@docgroup",
                            "content": [
                                {
                                    "kind": "text",
                                    "text": "01-data-actions"
                                }
                            ]
                        },
                        {
                            "tag": "@docname",
                            "content": [
                                {
                                    "kind": "text",
                                    "text": "getSnapshot"
                                }
                            ]
                        }
                    ]
                },
                "sources": [
                    {
                        "fileName": "src/aux-runtime/runtime/AuxLibrary.ts",
                        "line": 4447,
                        "character": 13,
                        "url": "https://github.com/KallynGowdy/casualos/blob/b90532ee4/src/aux-runtime/runtime/AuxLibrary.ts#L4447"
                    }
                ],
                "parameters": [
                    {
                        "id": 298,
                        "name": "bots",
                        "variant": "param",
                        "kind": 32768,
                        "flags": {},
                        "comment": {
                            "summary": [
                                {
                                    "kind": "text",
                                    "text": "the bot or list of bots that a snapshot should be created out of."
                                }
                            ],
                            "blockTags": []
                        },
                        "type": {
                            "type": "union",
                            "types": [
                                {
                                    "type": "reference",
                                    "target": 3361,
                                    "name": "Bot",
                                    "package": "@casual-simulation/aux-common",
                                    "id": 3361,
                                    "qualifiedName": "Bot"
                                },
                                {
                                    "type": "array",
                                    "elementType": {
                                        "type": "reference",
                                        "target": 3361,
                                        "name": "Bot",
                                        "package": "@casual-simulation/aux-common",
                                        "id": 3361,
                                        "qualifiedName": "Bot"
                                    }
                                }
                            ]
                        }
                    }
                ],
                "type": {
                    "type": "reference",
                    "target": 3514,
                    "name": "BotState",
                    "package": "@casual-simulation/aux-common",
                    "id": 3514,
                    "qualifiedName": "BotsState"
                }
            },
            "comment": {
                "text": "Gets a snapshot of the given bots. Snapshots are like mods (see getMod) except they contain multiple bots and include the ID, space, tags, and tag masks of the bots.",
                "tags": [
                    {
                        "tagName": "dochash",
                        "text": "actions/data"
                    },
                    {
                        "tagName": "docgroup",
                        "text": "01-data-actions"
                    },
                    {
                        "tagName": "docname",
                        "text": "getSnapshot"
                    }
                ]
            },
            "group": "01-data-actions"
        },
        {
            "id": 249,
            "order": 9999,
            "name": "getbot-filters",
            "reflection": {
                "id": 249,
                "name": "__type",
                "variant": "signature",
                "kind": 4096,
                "flags": {},
                "comment": {
                    "summary": [
                        {
                            "kind": "text",
                            "text": "Get the first bot that matches all of the given filter(s).\nIf multiple bots match the given filter(s), then bots are sorted alphabetically by the [#id](tags:id) tag and the first one is returned.\nIf no bots match the given filter(s), then "
                        },
                        {
                            "kind": "code",
                            "text": "`undefined`"
                        },
                        {
                            "kind": "text",
                            "text": " is returned."
                        }
                    ],
                    "blockTags": [
                        {
                            "tag": "@example",
                            "content": [
                                {
                                    "kind": "code",
                                    "text": "```ts\nFind a bot with the #test tag\nlet foundBot = getBot(byTag(\"#test\"));\n```"
                                }
                            ]
                        },
                        {
                            "tag": "@example",
                            "content": [
                                {
                                    "kind": "code",
                                    "text": "```ts\nFind a bot with #name set to \"bob\" and in the #people dimension\nlet foundBot = getBot(byTag(\"#name\", \"bob\"), inDimension(\"people\"));\n```"
                                }
                            ]
                        },
                        {
                            "tag": "@dochash",
                            "content": [
                                {
                                    "kind": "text",
                                    "text": "actions/data"
                                }
                            ]
                        },
                        {
                            "tag": "@docgroup",
                            "content": [
                                {
                                    "kind": "text",
                                    "text": "01-data-actions"
                                }
                            ]
                        },
                        {
                            "tag": "@docid",
                            "content": [
                                {
                                    "kind": "text",
                                    "text": "getbot-filters"
                                }
                            ]
                        },
                        {
                            "tag": "@docname",
                            "content": [
                                {
                                    "kind": "text",
                                    "text": "getBot"
                                }
                            ]
                        }
                    ]
                },
                "sources": [
                    {
                        "fileName": "src/aux-runtime/runtime/AuxLibrary.ts",
                        "line": 3840,
                        "character": 13,
                        "url": "https://github.com/KallynGowdy/casualos/blob/b90532ee4/src/aux-runtime/runtime/AuxLibrary.ts#L3840"
                    }
                ],
                "parameters": [
                    {
                        "id": 250,
                        "name": "filters",
                        "variant": "param",
                        "kind": 32768,
                        "flags": {
                            "isRest": true
                        },
                        "comment": {
                            "summary": [
                                {
                                    "kind": "text",
                                    "text": "If no filters are specified, then all bots in the inst are returned. If multiple filters are specified, then only the bots that match all of the filters are returned."
                                }
                            ],
                            "blockTags": []
                        },
                        "type": {
                            "type": "array",
                            "elementType": {
                                "type": "reflection",
                                "declaration": {
                                    "id": 251,
                                    "name": "__type",
                                    "variant": "declaration",
                                    "kind": 65536,
                                    "flags": {},
                                    "sources": [
                                        {
                                            "fileName": "src/aux-runtime/runtime/AuxLibrary.ts",
                                            "line": 755,
                                            "character": 25,
                                            "url": "https://github.com/KallynGowdy/casualos/blob/b90532ee4/src/aux-runtime/runtime/AuxLibrary.ts#L755"
                                        }
                                    ],
                                    "signatures": [
                                        {
                                            "id": 252,
                                            "name": "__type",
                                            "variant": "signature",
                                            "kind": 4096,
                                            "flags": {},
                                            "sources": [
                                                {
                                                    "fileName": "src/aux-runtime/runtime/AuxLibrary.ts",
                                                    "line": 755,
                                                    "character": 25,
                                                    "url": "https://github.com/KallynGowdy/casualos/blob/b90532ee4/src/aux-runtime/runtime/AuxLibrary.ts#L755"
                                                }
                                            ],
                                            "parameters": [
                                                {
                                                    "id": 253,
                                                    "name": "bot",
                                                    "variant": "param",
                                                    "kind": 32768,
                                                    "flags": {},
                                                    "type": {
                                                        "type": "reference",
                                                        "target": 3361,
                                                        "name": "Bot",
                                                        "package": "@casual-simulation/aux-common",
                                                        "id": 3361,
                                                        "qualifiedName": "Bot"
                                                    }
                                                }
                                            ],
                                            "type": {
                                                "type": "intrinsic",
                                                "name": "boolean"
                                            }
                                        }
                                    ]
                                }
                            }
                        }
                    }
                ],
                "type": {
                    "type": "reference",
                    "target": 3361,
                    "name": "Bot",
                    "package": "@casual-simulation/aux-common",
                    "id": 3361,
                    "qualifiedName": "RuntimeBot"
                }
            },
            "comment": {
                "text": "Get the first bot that matches all of the given filter(s).\nIf multiple bots match the given filter(s), then bots are sorted alphabetically by the [#id](tags:id) tag and the first one is returned.\nIf no bots match the given filter(s), then `undefined` is returned.",
                "tags": [
                    {
                        "tagName": "example",
                        "text": "```ts\nFind a bot with the #test tag\nlet foundBot = getBot(byTag(\"#test\"));\n```"
                    },
                    {
                        "tagName": "example",
                        "text": "```ts\nFind a bot with #name set to \"bob\" and in the #people dimension\nlet foundBot = getBot(byTag(\"#name\", \"bob\"), inDimension(\"people\"));\n```"
                    },
                    {
                        "tagName": "dochash",
                        "text": "actions/data"
                    },
                    {
                        "tagName": "docgroup",
                        "text": "01-data-actions"
                    },
                    {
                        "tagName": "docid",
                        "text": "getbot-filters"
                    },
                    {
                        "tagName": "docname",
                        "text": "getBot"
                    }
                ]
            },
            "group": "01-data-actions"
        },
        {
            "id": 256,
            "order": 9999,
            "name": "getbot-tag",
            "reflection": {
                "id": 256,
                "name": "__type",
                "variant": "signature",
                "kind": 4096,
                "flags": {},
                "comment": {
                    "summary": [
                        {
                            "kind": "text",
                            "text": "Gets the first bot that matches the given tag and value.\nIf multiple bots match the given tag and value, then bots are sorted alphabetically by the [#id](tags:id) tag and the first one is returned.\nIf no bots match the given tag and value, then "
                        },
                        {
                            "kind": "code",
                            "text": "`undefined`"
                        },
                        {
                            "kind": "text",
                            "text": " is returned."
                        }
                    ],
                    "blockTags": [
                        {
                            "tag": "@example",
                            "content": [
                                {
                                    "kind": "code",
                                    "text": "```ts\nFind the first bot with #name set to \"bob\"\nlet foundBot = getBot(\"#name\", \"bob\");\n```"
                                }
                            ]
                        },
                        {
                            "tag": "@example",
                            "content": [
                                {
                                    "kind": "code",
                                    "text": "```ts\nFind the first bot with a #height larger than 2\nlet foundBot = getBot(\"#height\", height => height > 2);\n```"
                                }
                            ]
                        },
                        {
                            "tag": "@example",
                            "content": [
                                {
                                    "kind": "code",
                                    "text": "```ts\nFind the first bot with the #test tag\nlet foundBot = getBot(\"#test\");\n```"
                                }
                            ]
                        },
                        {
                            "tag": "@dochash",
                            "content": [
                                {
                                    "kind": "text",
                                    "text": "actions/data"
                                }
                            ]
                        },
                        {
                            "tag": "@docgroup",
                            "content": [
                                {
                                    "kind": "text",
                                    "text": "01-data-actions"
                                }
                            ]
                        },
                        {
                            "tag": "@docid",
                            "content": [
                                {
                                    "kind": "text",
                                    "text": "getbot-tag"
                                }
                            ]
                        },
                        {
                            "tag": "@docname",
                            "content": [
                                {
                                    "kind": "text",
                                    "text": "getBot"
                                }
                            ]
                        }
                    ]
                },
                "sources": [
                    {
                        "fileName": "src/aux-runtime/runtime/AuxLibrary.ts",
                        "line": 3865,
                        "character": 13,
                        "url": "https://github.com/KallynGowdy/casualos/blob/b90532ee4/src/aux-runtime/runtime/AuxLibrary.ts#L3865"
                    }
                ],
                "parameters": [
                    {
                        "id": 257,
                        "name": "tag",
                        "variant": "param",
                        "kind": 32768,
                        "flags": {},
                        "comment": {
                            "summary": [
                                {
                                    "kind": "text",
                                    "text": "the name of the tag to search for."
                                }
                            ],
                            "blockTags": []
                        },
                        "type": {
                            "type": "intrinsic",
                            "name": "string"
                        }
                    },
                    {
                        "id": 258,
                        "name": "value",
                        "variant": "param",
                        "kind": 32768,
                        "flags": {
                            "isOptional": true
                        },
                        "comment": {
                            "summary": [
                                {
                                    "kind": "text",
                                    "text": "the value the tag should match. If not specified, then the first bot with the tag will be returned. If specified, then the first bot that has the same tag and value will be returned. If you specify a function as the value, then it will be used to match tag values."
                                }
                            ],
                            "blockTags": []
                        },
                        "type": {
                            "type": "intrinsic",
                            "name": "any"
                        }
                    }
                ],
                "type": {
                    "type": "reference",
                    "target": 3361,
                    "name": "Bot",
                    "package": "@casual-simulation/aux-common",
                    "id": 3361,
                    "qualifiedName": "RuntimeBot"
                }
            },
            "comment": {
                "text": "Gets the first bot that matches the given tag and value.\nIf multiple bots match the given tag and value, then bots are sorted alphabetically by the [#id](tags:id) tag and the first one is returned.\nIf no bots match the given tag and value, then `undefined` is returned.",
                "tags": [
                    {
                        "tagName": "example",
                        "text": "```ts\nFind the first bot with #name set to \"bob\"\nlet foundBot = getBot(\"#name\", \"bob\");\n```"
                    },
                    {
                        "tagName": "example",
                        "text": "```ts\nFind the first bot with a #height larger than 2\nlet foundBot = getBot(\"#height\", height => height > 2);\n```"
                    },
                    {
                        "tagName": "example",
                        "text": "```ts\nFind the first bot with the #test tag\nlet foundBot = getBot(\"#test\");\n```"
                    },
                    {
                        "tagName": "dochash",
                        "text": "actions/data"
                    },
                    {
                        "tagName": "docgroup",
                        "text": "01-data-actions"
                    },
                    {
                        "tagName": "docid",
                        "text": "getbot-tag"
                    },
                    {
                        "tagName": "docname",
                        "text": "getBot"
                    }
                ]
            },
            "group": "01-data-actions"
        },
        {
            "id": 233,
            "order": 9999,
            "name": "getbots-filters",
            "reflection": {
                "id": 233,
                "name": "__type",
                "variant": "signature",
                "kind": 4096,
                "flags": {},
                "comment": {
                    "summary": [
                        {
                            "kind": "text",
                            "text": "Gets an array of bots that match all of the given filter(s). The returned array is sorted alphabetically by the "
                        },
                        {
                            "kind": "text",
                            "text": "[`#id`](tags:id)"
                        },
                        {
                            "kind": "text",
                            "text": " tag."
                        }
                    ],
                    "blockTags": [
                        {
                            "tag": "@example",
                            "content": [
                                {
                                    "kind": "code",
                                    "text": "```ts\nGets all the bots in the inst.\nlet bots = getBots();\n```"
                                }
                            ]
                        },
                        {
                            "tag": "@example",
                            "content": [
                                {
                                    "kind": "code",
                                    "text": "```ts\nFind all bots with the \"test\" tag\nlet bots = getBots(byTag(\"#test\"));\n```"
                                }
                            ]
                        },
                        {
                            "tag": "@example",
                            "content": [
                                {
                                    "kind": "code",
                                    "text": "```ts\nFind all bots with #name set to \"bob\" and in the #people dimension\nlet bots = getBots(byTag(\"#name\", \"bob\"), inDimension(\"people\"));\n```"
                                }
                            ]
                        },
                        {
                            "tag": "@dochash",
                            "content": [
                                {
                                    "kind": "text",
                                    "text": "actions/data"
                                }
                            ]
                        },
                        {
                            "tag": "@docgroup",
                            "content": [
                                {
                                    "kind": "text",
                                    "text": "01-data-actions"
                                }
                            ]
                        },
                        {
                            "tag": "@docname",
                            "content": [
                                {
                                    "kind": "text",
                                    "text": "getBots"
                                }
                            ]
                        },
                        {
                            "tag": "@docid",
                            "content": [
                                {
                                    "kind": "text",
                                    "text": "getbots-filters"
                                }
                            ]
                        }
                    ]
                },
                "sources": [
                    {
                        "fileName": "src/aux-runtime/runtime/AuxLibrary.ts",
                        "line": 3775,
                        "character": 13,
                        "url": "https://github.com/KallynGowdy/casualos/blob/b90532ee4/src/aux-runtime/runtime/AuxLibrary.ts#L3775"
                    }
                ],
                "parameters": [
                    {
                        "id": 234,
                        "name": "filters",
                        "variant": "param",
                        "kind": 32768,
                        "flags": {
                            "isRest": true
                        },
                        "comment": {
                            "summary": [
                                {
                                    "kind": "text",
                                    "text": "If no filters are specified, then all bots in the inst are returned. If multiple filters are specified, then only the bots that match all of the filters are returned."
                                }
                            ],
                            "blockTags": []
                        },
                        "type": {
                            "type": "array",
                            "elementType": {
                                "type": "reflection",
                                "declaration": {
                                    "id": 235,
                                    "name": "__type",
                                    "variant": "declaration",
                                    "kind": 65536,
                                    "flags": {},
                                    "sources": [
                                        {
                                            "fileName": "src/aux-runtime/runtime/AuxLibrary.ts",
                                            "line": 755,
                                            "character": 25,
                                            "url": "https://github.com/KallynGowdy/casualos/blob/b90532ee4/src/aux-runtime/runtime/AuxLibrary.ts#L755"
                                        }
                                    ],
                                    "signatures": [
                                        {
                                            "id": 236,
                                            "name": "__type",
                                            "variant": "signature",
                                            "kind": 4096,
                                            "flags": {},
                                            "sources": [
                                                {
                                                    "fileName": "src/aux-runtime/runtime/AuxLibrary.ts",
                                                    "line": 755,
                                                    "character": 25,
                                                    "url": "https://github.com/KallynGowdy/casualos/blob/b90532ee4/src/aux-runtime/runtime/AuxLibrary.ts#L755"
                                                }
                                            ],
                                            "parameters": [
                                                {
                                                    "id": 237,
                                                    "name": "bot",
                                                    "variant": "param",
                                                    "kind": 32768,
                                                    "flags": {},
                                                    "type": {
                                                        "type": "reference",
                                                        "target": 3361,
                                                        "name": "Bot",
                                                        "package": "@casual-simulation/aux-common",
                                                        "id": 3361,
                                                        "qualifiedName": "Bot"
                                                    }
                                                }
                                            ],
                                            "type": {
                                                "type": "intrinsic",
                                                "name": "boolean"
                                            }
                                        }
                                    ]
                                }
                            }
                        }
                    }
                ],
                "type": {
                    "type": "array",
                    "elementType": {
                        "type": "reference",
                        "target": 3361,
                        "name": "Bot",
                        "package": "@casual-simulation/aux-common",
                        "id": 3361,
                        "qualifiedName": "RuntimeBot"
                    }
                }
            },
            "comment": {
                "text": "Gets an array of bots that match all of the given filter(s). The returned array is sorted alphabetically by the id tag.",
                "tags": [
                    {
                        "tagName": "example",
                        "text": "```ts\nGets all the bots in the inst.\nlet bots = getBots();\n```"
                    },
                    {
                        "tagName": "example",
                        "text": "```ts\nFind all bots with the \"test\" tag\nlet bots = getBots(byTag(\"#test\"));\n```"
                    },
                    {
                        "tagName": "example",
                        "text": "```ts\nFind all bots with #name set to \"bob\" and in the #people dimension\nlet bots = getBots(byTag(\"#name\", \"bob\"), inDimension(\"people\"));\n```"
                    },
                    {
                        "tagName": "dochash",
                        "text": "actions/data"
                    },
                    {
                        "tagName": "docgroup",
                        "text": "01-data-actions"
                    },
                    {
                        "tagName": "docname",
                        "text": "getBots"
                    },
                    {
                        "tagName": "docid",
                        "text": "getbots-filters"
                    }
                ]
            },
            "group": "01-data-actions"
        },
        {
            "id": 240,
            "order": 9999,
            "name": "getbots-tag",
            "reflection": {
                "id": 240,
                "name": "__type",
                "variant": "signature",
                "kind": 4096,
                "flags": {},
                "comment": {
                    "summary": [
                        {
                            "kind": "text",
                            "text": "Gets an array of bots that match the given tag and value. The returned array is sorted alphabetically by the "
                        },
                        {
                            "kind": "text",
                            "text": "[`#id`](tags:id)"
                        },
                        {
                            "kind": "text",
                            "text": " tag."
                        }
                    ],
                    "blockTags": [
                        {
                            "tag": "@example",
                            "content": [
                                {
                                    "kind": "code",
                                    "text": "```ts\nFind all the bots with #name set to \"bob\"\nlet bots = getBots(\"#name\", \"bob\");\n```"
                                }
                            ]
                        },
                        {
                            "tag": "@example",
                            "content": [
                                {
                                    "kind": "code",
                                    "text": "```ts\nFind all bots with a #height larger than 2\nlet bots = getBots(\"#height\", height => height > 2);\n```"
                                }
                            ]
                        },
                        {
                            "tag": "@example",
                            "content": [
                                {
                                    "kind": "code",
                                    "text": "```ts\nFind all bots with the #test tag\nlet bots = getBots(\"#test\");\n```"
                                }
                            ]
                        },
                        {
                            "tag": "@dochash",
                            "content": [
                                {
                                    "kind": "text",
                                    "text": "actions/data"
                                }
                            ]
                        },
                        {
                            "tag": "@doctitle",
                            "content": [
                                {
                                    "kind": "text",
                                    "text": "Data Actions"
                                }
                            ]
                        },
                        {
                            "tag": "@docsidebar",
                            "content": [
                                {
                                    "kind": "text",
                                    "text": "Data"
                                }
                            ]
                        },
                        {
                            "tag": "@docdescription",
                            "content": [
                                {
                                    "kind": "text",
                                    "text": "The Data Actions are used to get and set data on bots."
                                }
                            ]
                        },
                        {
                            "tag": "@docgroup",
                            "content": [
                                {
                                    "kind": "text",
                                    "text": "01-data-actions"
                                }
                            ]
                        },
                        {
                            "tag": "@docgrouptitle",
                            "content": [
                                {
                                    "kind": "text",
                                    "text": "Data Actions"
                                }
                            ]
                        },
                        {
                            "tag": "@docname",
                            "content": [
                                {
                                    "kind": "text",
                                    "text": "getBots"
                                }
                            ]
                        },
                        {
                            "tag": "@docid",
                            "content": [
                                {
                                    "kind": "text",
                                    "text": "getbots-tag"
                                }
                            ]
                        }
                    ]
                },
                "sources": [
                    {
                        "fileName": "src/aux-runtime/runtime/AuxLibrary.ts",
                        "line": 3752,
                        "character": 13,
                        "url": "https://github.com/KallynGowdy/casualos/blob/b90532ee4/src/aux-runtime/runtime/AuxLibrary.ts#L3752"
                    }
                ],
                "parameters": [
                    {
                        "id": 241,
                        "name": "tag",
                        "variant": "param",
                        "kind": 32768,
                        "flags": {},
                        "comment": {
                            "summary": [
                                {
                                    "kind": "text",
                                    "text": "the name of the tag. Bots that have this tag will be included as long as they also match the second parameter."
                                }
                            ],
                            "blockTags": []
                        },
                        "type": {
                            "type": "intrinsic",
                            "name": "string"
                        }
                    },
                    {
                        "id": 242,
                        "name": "value",
                        "variant": "param",
                        "kind": 32768,
                        "flags": {
                            "isOptional": true
                        },
                        "comment": {
                            "summary": [
                                {
                                    "kind": "text",
                                    "text": "the value the tag should match. If not specified, then all bots with the tag will be included. If specified, then only bots that have the same tag and value will be included. If you specify a function as the value, then it will be used to match tag values."
                                }
                            ],
                            "blockTags": []
                        },
                        "type": {
                            "type": "intrinsic",
                            "name": "any"
                        }
                    }
                ],
                "type": {
                    "type": "array",
                    "elementType": {
                        "type": "reference",
                        "target": 3361,
                        "name": "Bot",
                        "package": "@casual-simulation/aux-common",
                        "id": 3361,
                        "qualifiedName": "RuntimeBot"
                    }
                }
            },
            "comment": {
                "text": "Gets an array of bots that match the given tag and value. The returned array is sorted alphabetically by the id tag.",
                "tags": [
                    {
                        "tagName": "example",
                        "text": "```ts\nFind all the bots with #name set to \"bob\"\nlet bots = getBots(\"#name\", \"bob\");\n```"
                    },
                    {
                        "tagName": "example",
                        "text": "```ts\nFind all bots with a #height larger than 2\nlet bots = getBots(\"#height\", height => height > 2);\n```"
                    },
                    {
                        "tagName": "example",
                        "text": "```ts\nFind all bots with the #test tag\nlet bots = getBots(\"#test\");\n```"
                    },
                    {
                        "tagName": "dochash",
                        "text": "actions/data"
                    },
                    {
                        "tagName": "doctitle",
                        "text": "Data Actions"
                    },
                    {
                        "tagName": "docsidebar",
                        "text": "Data"
                    },
                    {
                        "tagName": "docdescription",
                        "text": "The Data Actions are used to get and set data on bots."
                    },
                    {
                        "tagName": "docgroup",
                        "text": "01-data-actions"
                    },
                    {
                        "tagName": "docgrouptitle",
                        "text": "Data Actions"
                    },
                    {
                        "tagName": "docname",
                        "text": "getBots"
                    },
                    {
                        "tagName": "docid",
                        "text": "getbots-tag"
                    }
                ]
            },
            "group": "01-data-actions"
        },
        {
            "id": 364,
            "order": 9999,
            "name": "removeTags",
            "reflection": {
                "id": 364,
                "name": "__type",
                "variant": "signature",
                "kind": 4096,
                "flags": {},
                "comment": {
                    "summary": [
                        {
                            "kind": "text",
                            "text": "Removes all the tags from the given bot that match the given tag section."
                        }
                    ],
                    "blockTags": [
                        {
                            "tag": "@example",
                            "content": [
                                {
                                    "kind": "code",
                                    "text": "```ts\nRemove tags named starting with \"abc\" from this bot.\nremoveTags(thisBot, \"abc\");\n```"
                                }
                            ]
                        },
                        {
                            "tag": "@example",
                            "content": [
                                {
                                    "kind": "code",
                                    "text": "```ts\nRemove tags named \"hello\" using a case-insensitive regex from this bot.\nremoveTags(thisBot, /^hello$/gi);\n```"
                                }
                            ]
                        },
                        {
                            "tag": "@dochash",
                            "content": [
                                {
                                    "kind": "text",
                                    "text": "actions/data"
                                }
                            ]
                        },
                        {
                            "tag": "@docgroup",
                            "content": [
                                {
                                    "kind": "text",
                                    "text": "01-data-actions"
                                }
                            ]
                        },
                        {
                            "tag": "@docname",
                            "content": [
                                {
                                    "kind": "text",
                                    "text": "removeTags"
                                }
                            ]
                        }
                    ]
                },
                "sources": [
                    {
                        "fileName": "src/aux-runtime/runtime/AuxLibrary.ts",
                        "line": 13338,
                        "character": 13,
                        "url": "https://github.com/KallynGowdy/casualos/blob/b90532ee4/src/aux-runtime/runtime/AuxLibrary.ts#L13338"
                    }
                ],
                "parameters": [
                    {
                        "id": 365,
                        "name": "bot",
                        "variant": "param",
                        "kind": 32768,
                        "flags": {},
                        "comment": {
                            "summary": [
                                {
                                    "kind": "text",
                                    "text": "the bot or list of bots that should have the tags removed."
                                }
                            ],
                            "blockTags": []
                        },
                        "type": {
                            "type": "union",
                            "types": [
                                {
                                    "type": "reference",
                                    "target": 3361,
                                    "name": "Bot",
                                    "package": "@casual-simulation/aux-common",
                                    "id": 3361,
                                    "qualifiedName": "Bot"
                                },
                                {
                                    "type": "array",
                                    "elementType": {
                                        "type": "reference",
                                        "target": 3361,
                                        "name": "Bot",
                                        "package": "@casual-simulation/aux-common",
                                        "id": 3361,
                                        "qualifiedName": "Bot"
                                    }
                                }
                            ]
                        }
                    },
                    {
                        "id": 366,
                        "name": "tagSection",
                        "variant": "param",
                        "kind": 32768,
                        "flags": {},
                        "comment": {
                            "summary": [
                                {
                                    "kind": "text",
                                    "text": "the string or regex that specifies which tags to remove. If given a string, then all the tags that start with the given string will be removed. If given a regex, then all the tags which match the regex will be removed."
                                }
                            ],
                            "blockTags": []
                        },
                        "type": {
                            "type": "union",
                            "types": [
                                {
                                    "type": "intrinsic",
                                    "name": "string"
                                },
                                {
                                    "type": "reference",
                                    "target": {
                                        "sourceFileName": "../node_modules/.pnpm/typescript@5.3.3/node_modules/typescript/lib/lib.es5.d.ts",
                                        "qualifiedName": "RegExp"
                                    },
                                    "name": "RegExp",
                                    "package": "typescript"
                                }
                            ]
                        }
                    }
                ],
                "type": {
                    "type": "intrinsic",
                    "name": "void"
                }
            },
            "comment": {
                "text": "Removes all the tags from the given bot that match the given tag section.",
                "tags": [
                    {
                        "tagName": "example",
                        "text": "```ts\nRemove tags named starting with \"abc\" from this bot.\nremoveTags(thisBot, \"abc\");\n```"
                    },
                    {
                        "tagName": "example",
                        "text": "```ts\nRemove tags named \"hello\" using a case-insensitive regex from this bot.\nremoveTags(thisBot, /^hello$/gi);\n```"
                    },
                    {
                        "tagName": "dochash",
                        "text": "actions/data"
                    },
                    {
                        "tagName": "docgroup",
                        "text": "01-data-actions"
                    },
                    {
                        "tagName": "docname",
                        "text": "removeTags"
                    }
                ]
            },
            "group": "01-data-actions"
        },
        {
            "id": 369,
            "order": 9999,
            "name": "renameTag",
            "reflection": {
                "id": 369,
                "name": "__type",
                "variant": "signature",
                "kind": 4096,
                "flags": {},
                "comment": {
                    "summary": [
                        {
                            "kind": "text",
                            "text": "Renames the given original tag on the given bot or list of bots to the given new tag. If the original tag does not exist on the bot, then no changes will take place. If the new tag already exists on the bot, then it will be overwritten with the contents of the original tag."
                        }
                    ],
                    "blockTags": [
                        {
                            "tag": "@example",
                            "content": [
                                {
                                    "kind": "code",
                                    "text": "```ts\nRename the \"auxColor\" tag to \"color\"\nrenameTag(thisBot, \"auxColor\", \"color\");\n```"
                                }
                            ]
                        },
                        {
                            "tag": "@dochash",
                            "content": [
                                {
                                    "kind": "text",
                                    "text": "actions/data"
                                }
                            ]
                        },
                        {
                            "tag": "@docgroup",
                            "content": [
                                {
                                    "kind": "text",
                                    "text": "01-data-actions"
                                }
                            ]
                        },
                        {
                            "tag": "@docname",
                            "content": [
                                {
                                    "kind": "text",
                                    "text": "renameTag"
                                }
                            ]
                        }
                    ]
                },
                "sources": [
                    {
                        "fileName": "src/aux-runtime/runtime/AuxLibrary.ts",
                        "line": 13387,
                        "character": 13,
                        "url": "https://github.com/KallynGowdy/casualos/blob/b90532ee4/src/aux-runtime/runtime/AuxLibrary.ts#L13387"
                    }
                ],
                "parameters": [
                    {
                        "id": 370,
                        "name": "bot",
                        "variant": "param",
                        "kind": 32768,
                        "flags": {},
                        "comment": {
                            "summary": [
                                {
                                    "kind": "text",
                                    "text": "the bot or list of bots that should have the tag renamed."
                                }
                            ],
                            "blockTags": []
                        },
                        "type": {
                            "type": "union",
                            "types": [
                                {
                                    "type": "reference",
                                    "target": 3361,
                                    "name": "Bot",
                                    "package": "@casual-simulation/aux-common",
                                    "id": 3361,
                                    "qualifiedName": "Bot"
                                },
                                {
                                    "type": "array",
                                    "elementType": {
                                        "type": "reference",
                                        "target": 3361,
                                        "name": "Bot",
                                        "package": "@casual-simulation/aux-common",
                                        "id": 3361,
                                        "qualifiedName": "Bot"
                                    }
                                }
                            ]
                        }
                    },
                    {
                        "id": 371,
                        "name": "originalTag",
                        "variant": "param",
                        "kind": 32768,
                        "flags": {},
                        "comment": {
                            "summary": [
                                {
                                    "kind": "text",
                                    "text": "the name of the tag that should be renamed."
                                }
                            ],
                            "blockTags": []
                        },
                        "type": {
                            "type": "intrinsic",
                            "name": "string"
                        }
                    },
                    {
                        "id": 372,
                        "name": "newTag",
                        "variant": "param",
                        "kind": 32768,
                        "flags": {},
                        "comment": {
                            "summary": [
                                {
                                    "kind": "text",
                                    "text": "the new name that the tag should have."
                                }
                            ],
                            "blockTags": []
                        },
                        "type": {
                            "type": "intrinsic",
                            "name": "string"
                        }
                    }
                ],
                "type": {
                    "type": "intrinsic",
                    "name": "void"
                }
            },
            "comment": {
                "text": "Renames the given original tag on the given bot or list of bots to the given new tag. If the original tag does not exist on the bot, then no changes will take place. If the new tag already exists on the bot, then it will be overwritten with the contents of the original tag.",
                "tags": [
                    {
                        "tagName": "example",
                        "text": "```ts\nRename the \"auxColor\" tag to \"color\"\nrenameTag(thisBot, \"auxColor\", \"color\");\n```"
                    },
                    {
                        "tagName": "dochash",
                        "text": "actions/data"
                    },
                    {
                        "tagName": "docgroup",
                        "text": "01-data-actions"
                    },
                    {
                        "tagName": "docname",
                        "text": "renameTag"
                    }
                ]
            },
            "group": "01-data-actions"
        },
        {
            "id": 423,
            "order": 9999,
            "name": "updateBotLinks",
            "reflection": {
                "id": 423,
                "name": "__type",
                "variant": "signature",
                "kind": 4096,
                "flags": {},
                "comment": {
                    "summary": [
                        {
                            "kind": "text",
                            "text": "Updates the links in the given bot to point to the new Bot IDs specified in the given ID map.\n\nThis function is useful if you know that the links in the given bot are outdated and you know which IDs map to the new IDs."
                        }
                    ],
                    "blockTags": [
                        {
                            "tag": "@example",
                            "content": [
                                {
                                    "kind": "code",
                                    "text": "```ts\nChange all references to \"botA\" to \"botB\" on this bot\nupdateBotLinks(thisBot, {\n   \"botA\": \"botB\"\n});\n```"
                                }
                            ]
                        },
                        {
                            "tag": "@dochash",
                            "content": [
                                {
                                    "kind": "text",
                                    "text": "actions/data"
                                }
                            ]
                        },
                        {
                            "tag": "@docgroup",
                            "content": [
                                {
                                    "kind": "text",
                                    "text": "01-data-actions"
                                }
                            ]
                        },
                        {
                            "tag": "@docname",
                            "content": [
                                {
                                    "kind": "text",
                                    "text": "updateBotLinks"
                                }
                            ]
                        }
                    ]
                },
                "sources": [
                    {
                        "fileName": "src/aux-runtime/runtime/AuxLibrary.ts",
                        "line": 13890,
                        "character": 13,
                        "url": "https://github.com/KallynGowdy/casualos/blob/b90532ee4/src/aux-runtime/runtime/AuxLibrary.ts#L13890"
                    }
                ],
                "parameters": [
                    {
                        "id": 424,
                        "name": "bot",
                        "variant": "param",
                        "kind": 32768,
                        "flags": {},
                        "comment": {
                            "summary": [
                                {
                                    "kind": "text",
                                    "text": "The bot whose links should be updated."
                                }
                            ],
                            "blockTags": []
                        },
                        "type": {
                            "type": "reference",
                            "target": 3361,
                            "name": "Bot",
                            "package": "@casual-simulation/aux-common",
                            "id": 3361,
                            "qualifiedName": "Bot"
                        }
                    },
                    {
                        "id": 425,
                        "name": "idMap",
                        "variant": "param",
                        "kind": 32768,
                        "flags": {},
                        "comment": {
                            "summary": [
                                {
                                    "kind": "text",
                                    "text": "the map of old bot IDs to the new IDs that should replace them. Each property should be an old ID and each value should be a new ID."
                                }
                            ],
                            "blockTags": []
                        },
                        "type": {
                            "type": "intrinsic",
                            "name": "object"
                        }
                    }
                ],
                "type": {
                    "type": "intrinsic",
                    "name": "void"
                }
            },
            "comment": {
                "text": "Updates the links in the given bot to point to the new Bot IDs specified in the given ID map.\n\nThis function is useful if you know that the links in the given bot are outdated and you know which IDs map to the new IDs.",
                "tags": [
                    {
                        "tagName": "example",
                        "text": "```ts\nChange all references to \"botA\" to \"botB\" on this bot\nupdateBotLinks(thisBot, {\n   \"botA\": \"botB\"\n});\n```"
                    },
                    {
                        "tagName": "dochash",
                        "text": "actions/data"
                    },
                    {
                        "tagName": "docgroup",
                        "text": "01-data-actions"
                    },
                    {
                        "tagName": "docname",
                        "text": "updateBotLinks"
                    }
                ]
            },
            "group": "01-data-actions"
        },
        {
            "id": 582,
            "order": 9999,
            "name": "uuid",
            "reflection": {
                "id": 582,
                "name": "__type",
                "variant": "signature",
                "kind": 4096,
                "flags": {},
                "comment": {
                    "summary": [
                        {
                            "kind": "text",
                            "text": "Creates a [Universally Unique IDentifier (UUID)](https://en.wikipedia.org/wiki/Universally_unique_identifier).\nUseful for generating a random identifier that is guaranteed to be unique"
                        }
                    ],
                    "blockTags": [
                        {
                            "tag": "@example",
                            "content": [
                                {
                                    "kind": "code",
                                    "text": "```ts\nGenerate a new UUID and toast it\nconst id = uuid();\nos.toast(id);\n```"
                                }
                            ]
                        },
                        {
                            "tag": "@dochash",
                            "content": [
                                {
                                    "kind": "text",
                                    "text": "actions/data"
                                }
                            ]
                        },
                        {
                            "tag": "@docgroup",
                            "content": [
                                {
                                    "kind": "text",
                                    "text": "01-data-actions"
                                }
                            ]
                        },
                        {
                            "tag": "@docname",
                            "content": [
                                {
                                    "kind": "text",
                                    "text": "uuid"
                                }
                            ]
                        }
                    ]
                },
                "sources": [
                    {
                        "fileName": "src/aux-runtime/runtime/AuxLibrary.ts",
                        "line": 10173,
                        "character": 13,
                        "url": "https://github.com/KallynGowdy/casualos/blob/b90532ee4/src/aux-runtime/runtime/AuxLibrary.ts#L10173"
                    }
                ],
                "type": {
                    "type": "intrinsic",
                    "name": "string"
                }
            },
            "comment": {
                "text": "Creates a [Universally Unique IDentifier (UUID)](https://en.wikipedia.org/wiki/Universally_unique_identifier).\nUseful for generating a random identifier that is guaranteed to be unique",
                "tags": [
                    {
                        "tagName": "example",
                        "text": "```ts\nGenerate a new UUID and toast it\nconst id = uuid();\nos.toast(id);\n```"
                    },
                    {
                        "tagName": "dochash",
                        "text": "actions/data"
                    },
                    {
                        "tagName": "docgroup",
                        "text": "01-data-actions"
                    },
                    {
                        "tagName": "docname",
                        "text": "uuid"
                    }
                ]
            },
            "group": "01-data-actions"
        },
        {
            "id": 329,
            "order": 9999,
            "name": "clearTagMasks",
            "reflection": {
                "id": 329,
                "name": "__type",
                "variant": "signature",
                "kind": 4096,
                "flags": {},
                "comment": {
                    "summary": [
                        {
                            "kind": "text",
                            "text": "Clears the tag masks on the given bot or list of bots. If a space is specified, then only the tag masks in that space will be deleted."
                        }
                    ],
                    "blockTags": [
                        {
                            "tag": "@dochash",
                            "content": [
                                {
                                    "kind": "text",
                                    "text": "actions/data"
                                }
                            ]
                        },
                        {
                            "tag": "@docgroup",
                            "content": [
                                {
                                    "kind": "text",
                                    "text": "02-data-actions"
                                }
                            ]
                        },
                        {
                            "tag": "@docname",
                            "content": [
                                {
                                    "kind": "text",
                                    "text": "clearTagMasks"
                                }
                            ]
                        }
                    ]
                },
                "sources": [
                    {
                        "fileName": "src/aux-runtime/runtime/AuxLibrary.ts",
                        "line": 13158,
                        "character": 13,
                        "url": "https://github.com/KallynGowdy/casualos/blob/b90532ee4/src/aux-runtime/runtime/AuxLibrary.ts#L13158"
                    }
                ],
                "parameters": [
                    {
                        "id": 330,
                        "name": "bot",
                        "variant": "param",
                        "kind": 32768,
                        "flags": {},
                        "comment": {
                            "summary": [
                                {
                                    "kind": "text",
                                    "text": "the bot or list of bots that the tag mask should be set on."
                                }
                            ],
                            "blockTags": []
                        },
                        "type": {
                            "type": "union",
                            "types": [
                                {
                                    "type": "reference",
                                    "target": 3361,
                                    "name": "Bot",
                                    "package": "@casual-simulation/aux-common",
                                    "id": 3361,
                                    "qualifiedName": "RuntimeBot"
                                },
                                {
                                    "type": "array",
                                    "elementType": {
                                        "type": "reference",
                                        "target": 3361,
                                        "name": "Bot",
                                        "package": "@casual-simulation/aux-common",
                                        "id": 3361,
                                        "qualifiedName": "RuntimeBot"
                                    }
                                }
                            ]
                        }
                    },
                    {
                        "id": 331,
                        "name": "space",
                        "variant": "param",
                        "kind": 32768,
                        "flags": {
                            "isOptional": true
                        },
                        "comment": {
                            "summary": [
                                {
                                    "kind": "text",
                                    "text": "the space that the tag mask should exist in. If omitted, then the tag masks in all spaces will be deleted."
                                }
                            ],
                            "blockTags": []
                        },
                        "type": {
                            "type": "intrinsic",
                            "name": "string"
                        }
                    }
                ],
                "type": {
                    "type": "intrinsic",
                    "name": "void"
                }
            },
            "comment": {
                "text": "Clears the tag masks on the given bot or list of bots. If a space is specified, then only the tag masks in that space will be deleted.",
                "tags": [
                    {
                        "tagName": "dochash",
                        "text": "actions/data"
                    },
                    {
                        "tagName": "docgroup",
                        "text": "02-data-actions"
                    },
                    {
                        "tagName": "docname",
                        "text": "clearTagMasks"
                    }
                ]
            },
            "group": "02-data-actions"
        },
        {
            "id": 356,
            "order": 9999,
            "name": "deleteTagMaskText",
            "reflection": {
                "id": 356,
                "name": "__type",
                "variant": "signature",
                "kind": 4096,
                "flags": {},
                "comment": {
                    "summary": [
                        {
                            "kind": "text",
                            "text": "Deletes the specified number of characters from the given tag mask at the given index. Useful for editing the text in a tag without interrupting other players that are editing the same tag.\nIf a space is specified, then only the tag mask in that space will be changed.\n\nReturns the resulting raw tag value."
                        }
                    ],
                    "blockTags": [
                        {
                            "tag": "@example",
                            "content": [
                                {
                                    "kind": "code",
                                    "text": "```ts\nDelete the last two characters from a tag mask.\ndeleteTagMaskText(bot, \"myTag\", tags.myTag.length - 2, 2);\n```"
                                }
                            ]
                        },
                        {
                            "tag": "@example",
                            "content": [
                                {
                                    "kind": "code",
                                    "text": "```ts\nDelete the first 3 characters from a tag mask in the local space.\ndeleteTagMaskText(bot, \"myTag\", 0, 3, \"local\");\n```"
                                }
                            ]
                        },
                        {
                            "tag": "@dochash",
                            "content": [
                                {
                                    "kind": "text",
                                    "text": "actions/data"
                                }
                            ]
                        },
                        {
                            "tag": "@docgroup",
                            "content": [
                                {
                                    "kind": "text",
                                    "text": "02-data-actions"
                                }
                            ]
                        },
                        {
                            "tag": "@docname",
                            "content": [
                                {
                                    "kind": "text",
                                    "text": "deleteTagMaskText"
                                }
                            ]
                        }
                    ]
                },
                "sources": [
                    {
                        "fileName": "src/aux-runtime/runtime/AuxLibrary.ts",
                        "line": 13299,
                        "character": 13,
                        "url": "https://github.com/KallynGowdy/casualos/blob/b90532ee4/src/aux-runtime/runtime/AuxLibrary.ts#L13299"
                    }
                ],
                "parameters": [
                    {
                        "id": 357,
                        "name": "bot",
                        "variant": "param",
                        "kind": 32768,
                        "flags": {},
                        "comment": {
                            "summary": [
                                {
                                    "kind": "text",
                                    "text": "The bot that should be edited."
                                }
                            ],
                            "blockTags": []
                        },
                        "type": {
                            "type": "reference",
                            "target": 3361,
                            "name": "Bot",
                            "package": "@casual-simulation/aux-common",
                            "id": 3361,
                            "qualifiedName": "RuntimeBot"
                        }
                    },
                    {
                        "id": 358,
                        "name": "tag",
                        "variant": "param",
                        "kind": 32768,
                        "flags": {},
                        "comment": {
                            "summary": [
                                {
                                    "kind": "text",
                                    "text": "The tag that should be edited."
                                }
                            ],
                            "blockTags": []
                        },
                        "type": {
                            "type": "intrinsic",
                            "name": "string"
                        }
                    },
                    {
                        "id": 359,
                        "name": "index",
                        "variant": "param",
                        "kind": 32768,
                        "flags": {},
                        "comment": {
                            "summary": [
                                {
                                    "kind": "text",
                                    "text": "the zero-based index that the text should start to be deleted at."
                                }
                            ],
                            "blockTags": []
                        },
                        "type": {
                            "type": "intrinsic",
                            "name": "number"
                        }
                    },
                    {
                        "id": 360,
                        "name": "count",
                        "variant": "param",
                        "kind": 32768,
                        "flags": {},
                        "comment": {
                            "summary": [
                                {
                                    "kind": "text",
                                    "text": "the number of characters that should be deleted."
                                }
                            ],
                            "blockTags": []
                        },
                        "type": {
                            "type": "intrinsic",
                            "name": "number"
                        }
                    },
                    {
                        "id": 361,
                        "name": "space",
                        "variant": "param",
                        "kind": 32768,
                        "flags": {
                            "isOptional": true
                        },
                        "comment": {
                            "summary": [
                                {
                                    "kind": "text",
                                    "text": "the space that the tag mask is in. If omitted, then the "
                                },
                                {
                                    "kind": "code",
                                    "text": "`tempLocal`"
                                },
                                {
                                    "kind": "text",
                                    "text": " space will be used."
                                }
                            ],
                            "blockTags": []
                        },
                        "type": {
                            "type": "intrinsic",
                            "name": "string"
                        }
                    }
                ],
                "type": {
                    "type": "intrinsic",
                    "name": "string"
                }
            },
            "comment": {
                "text": "Deletes the specified number of characters from the given tag mask at the given index. Useful for editing the text in a tag without interrupting other players that are editing the same tag.\nIf a space is specified, then only the tag mask in that space will be changed.\n\nReturns the resulting raw tag value.",
                "tags": [
                    {
                        "tagName": "example",
                        "text": "```ts\nDelete the last two characters from a tag mask.\ndeleteTagMaskText(bot, \"myTag\", tags.myTag.length - 2, 2);\n```"
                    },
                    {
                        "tagName": "example",
                        "text": "```ts\nDelete the first 3 characters from a tag mask in the local space.\ndeleteTagMaskText(bot, \"myTag\", 0, 3, \"local\");\n```"
                    },
                    {
                        "tagName": "dochash",
                        "text": "actions/data"
                    },
                    {
                        "tagName": "docgroup",
                        "text": "02-data-actions"
                    },
                    {
                        "tagName": "docname",
                        "text": "deleteTagMaskText"
                    }
                ]
            },
            "group": "02-data-actions"
        },
        {
            "id": 349,
            "order": 9999,
            "name": "deleteTagText",
            "reflection": {
                "id": 349,
                "name": "__type",
                "variant": "signature",
                "kind": 4096,
                "flags": {},
                "comment": {
                    "summary": [
                        {
                            "kind": "text",
                            "text": "Deletes the specified number of characters from the given tag at the given index. Useful for editing the text in a tag without interrupting other players that are editing the same tag.\nReturns the resulting raw tag value."
                        }
                    ],
                    "blockTags": [
                        {
                            "tag": "@example",
                            "content": [
                                {
                                    "kind": "code",
                                    "text": "```ts\nDelete the last two characters from a tag.\ndeleteTagText(bot, \"myTag\", tags.myTag.length - 2, 2);\n```"
                                }
                            ]
                        },
                        {
                            "tag": "@example",
                            "content": [
                                {
                                    "kind": "code",
                                    "text": "```ts\nDelete the first 3 characters from a tag.\ndeleteTagText(bot, \"myTag\", 0, 3);\n```"
                                }
                            ]
                        },
                        {
                            "tag": "@dochash",
                            "content": [
                                {
                                    "kind": "text",
                                    "text": "actions/data"
                                }
                            ]
                        },
                        {
                            "tag": "@docgroup",
                            "content": [
                                {
                                    "kind": "text",
                                    "text": "02-data-actions"
                                }
                            ]
                        },
                        {
                            "tag": "@docname",
                            "content": [
                                {
                                    "kind": "text",
                                    "text": "deleteTagText"
                                }
                            ]
                        }
                    ]
                },
                "sources": [
                    {
                        "fileName": "src/aux-runtime/runtime/AuxLibrary.ts",
                        "line": 13259,
                        "character": 13,
                        "url": "https://github.com/KallynGowdy/casualos/blob/b90532ee4/src/aux-runtime/runtime/AuxLibrary.ts#L13259"
                    }
                ],
                "parameters": [
                    {
                        "id": 350,
                        "name": "bot",
                        "variant": "param",
                        "kind": 32768,
                        "flags": {},
                        "comment": {
                            "summary": [
                                {
                                    "kind": "text",
                                    "text": "The bot that should be edited."
                                }
                            ],
                            "blockTags": []
                        },
                        "type": {
                            "type": "reference",
                            "target": 3361,
                            "name": "Bot",
                            "package": "@casual-simulation/aux-common",
                            "id": 3361,
                            "qualifiedName": "RuntimeBot"
                        }
                    },
                    {
                        "id": 351,
                        "name": "tag",
                        "variant": "param",
                        "kind": 32768,
                        "flags": {},
                        "comment": {
                            "summary": [
                                {
                                    "kind": "text",
                                    "text": "The tag that should be edited."
                                }
                            ],
                            "blockTags": []
                        },
                        "type": {
                            "type": "intrinsic",
                            "name": "string"
                        }
                    },
                    {
                        "id": 352,
                        "name": "index",
                        "variant": "param",
                        "kind": 32768,
                        "flags": {},
                        "comment": {
                            "summary": [
                                {
                                    "kind": "text",
                                    "text": "the zero-based index that the text should start to be deleted at."
                                }
                            ],
                            "blockTags": []
                        },
                        "type": {
                            "type": "intrinsic",
                            "name": "number"
                        }
                    },
                    {
                        "id": 353,
                        "name": "count",
                        "variant": "param",
                        "kind": 32768,
                        "flags": {},
                        "comment": {
                            "summary": [
                                {
                                    "kind": "text",
                                    "text": "the number of characters that should be deleted."
                                }
                            ],
                            "blockTags": []
                        },
                        "type": {
                            "type": "intrinsic",
                            "name": "number"
                        }
                    }
                ],
                "type": {
                    "type": "intrinsic",
                    "name": "string"
                }
            },
            "comment": {
                "text": "Deletes the specified number of characters from the given tag at the given index. Useful for editing the text in a tag without interrupting other players that are editing the same tag.\nReturns the resulting raw tag value.",
                "tags": [
                    {
                        "tagName": "example",
                        "text": "```ts\nDelete the last two characters from a tag.\ndeleteTagText(bot, \"myTag\", tags.myTag.length - 2, 2);\n```"
                    },
                    {
                        "tagName": "example",
                        "text": "```ts\nDelete the first 3 characters from a tag.\ndeleteTagText(bot, \"myTag\", 0, 3);\n```"
                    },
                    {
                        "tagName": "dochash",
                        "text": "actions/data"
                    },
                    {
                        "tagName": "docgroup",
                        "text": "02-data-actions"
                    },
                    {
                        "tagName": "docname",
                        "text": "deleteTagText"
                    }
                ]
            },
            "group": "02-data-actions"
        },
        {
            "id": 311,
            "order": 9999,
            "name": "getTag",
            "reflection": {
                "id": 311,
                "name": "__type",
                "variant": "signature",
                "kind": 4096,
                "flags": {},
                "comment": {
                    "summary": [
                        {
                            "kind": "text",
                            "text": "Gets the given tag value from the given bot."
                        }
                    ],
                    "blockTags": [
                        {
                            "tag": "@example",
                            "content": [
                                {
                                    "kind": "code",
                                    "text": "```ts\nGet the \"color\" tag from this bot.\nlet color = getTag(thisBot, \"color\");\n```"
                                }
                            ]
                        },
                        {
                            "tag": "@dochash",
                            "content": [
                                {
                                    "kind": "text",
                                    "text": "actions/data"
                                }
                            ]
                        },
                        {
                            "tag": "@docgroup",
                            "content": [
                                {
                                    "kind": "text",
                                    "text": "02-data-actions"
                                }
                            ]
                        },
                        {
                            "tag": "@docname",
                            "content": [
                                {
                                    "kind": "text",
                                    "text": "getTag"
                                }
                            ]
                        }
                    ]
                },
                "sources": [
                    {
                        "fileName": "src/aux-runtime/runtime/AuxLibrary.ts",
                        "line": 4361,
                        "character": 13,
                        "url": "https://github.com/KallynGowdy/casualos/blob/b90532ee4/src/aux-runtime/runtime/AuxLibrary.ts#L4361"
                    }
                ],
                "parameters": [
                    {
                        "id": 312,
                        "name": "bot",
                        "variant": "param",
                        "kind": 32768,
                        "flags": {},
                        "comment": {
                            "summary": [
                                {
                                    "kind": "text",
                                    "text": "the bot that the tag should be retrieved from."
                                }
                            ],
                            "blockTags": []
                        },
                        "type": {
                            "type": "reference",
                            "target": 3361,
                            "name": "Bot",
                            "package": "@casual-simulation/aux-common",
                            "id": 3361,
                            "qualifiedName": "Bot"
                        }
                    },
                    {
                        "id": 313,
                        "name": "tags",
                        "variant": "param",
                        "kind": 32768,
                        "flags": {
                            "isRest": true
                        },
                        "type": {
                            "type": "array",
                            "elementType": {
                                "type": "intrinsic",
                                "name": "string"
                            }
                        }
                    }
                ],
                "type": {
                    "type": "intrinsic",
                    "name": "any"
                }
            },
            "comment": {
                "text": "Gets the given tag value from the given bot.",
                "tags": [
                    {
                        "tagName": "example",
                        "text": "```ts\nGet the \"color\" tag from this bot.\nlet color = getTag(thisBot, \"color\");\n```"
                    },
                    {
                        "tagName": "dochash",
                        "text": "actions/data"
                    },
                    {
                        "tagName": "docgroup",
                        "text": "02-data-actions"
                    },
                    {
                        "tagName": "docname",
                        "text": "getTag"
                    }
                ]
            },
            "group": "02-data-actions"
        },
        {
            "id": 341,
            "order": 9999,
            "name": "insertTagMaskText",
            "reflection": {
                "id": 341,
                "name": "__type",
                "variant": "signature",
                "kind": 4096,
                "flags": {},
                "comment": {
                    "summary": [
                        {
                            "kind": "text",
                            "text": "Inserts the given text into the tag mask at the given index. Useful for editing the text in a tag without interrupting other players that are editing the same tag.\nIf a space is specified, then only the tag mask in that space will be changed."
                        }
                    ],
                    "blockTags": [
                        {
                            "tag": "@example",
                            "content": [
                                {
                                    "kind": "code",
                                    "text": "```ts\nAdd some text to the end of a tag mask.\ninsertTagMaskText(thisBot, \"myTag\", tags.myTag.length, \"xyz\");\n```"
                                }
                            ]
                        },
                        {
                            "tag": "@example",
                            "content": [
                                {
                                    "kind": "code",
                                    "text": "```ts\nAdd some text to the beginning of a tag mask that is in the local space.\ninsertTagMaskText(thisBot, \"myTag\", 0, \"abc\", \"local\");\n```"
                                }
                            ]
                        },
                        {
                            "tag": "@dochash",
                            "content": [
                                {
                                    "kind": "text",
                                    "text": "actions/data"
                                }
                            ]
                        },
                        {
                            "tag": "@docgroup",
                            "content": [
                                {
                                    "kind": "text",
                                    "text": "02-data-actions"
                                }
                            ]
                        },
                        {
                            "tag": "@docname",
                            "content": [
                                {
                                    "kind": "text",
                                    "text": "insertTagMaskText"
                                }
                            ]
                        }
                    ]
                },
                "sources": [
                    {
                        "fileName": "src/aux-runtime/runtime/AuxLibrary.ts",
                        "line": 13224,
                        "character": 13,
                        "url": "https://github.com/KallynGowdy/casualos/blob/b90532ee4/src/aux-runtime/runtime/AuxLibrary.ts#L13224"
                    }
                ],
                "parameters": [
                    {
                        "id": 342,
                        "name": "bot",
                        "variant": "param",
                        "kind": 32768,
                        "flags": {},
                        "comment": {
                            "summary": [
                                {
                                    "kind": "text",
                                    "text": "The bot that should be edited."
                                }
                            ],
                            "blockTags": []
                        },
                        "type": {
                            "type": "reference",
                            "target": 3361,
                            "name": "Bot",
                            "package": "@casual-simulation/aux-common",
                            "id": 3361,
                            "qualifiedName": "RuntimeBot"
                        }
                    },
                    {
                        "id": 343,
                        "name": "tag",
                        "variant": "param",
                        "kind": 32768,
                        "flags": {},
                        "comment": {
                            "summary": [
                                {
                                    "kind": "text",
                                    "text": "The tag that should be edited."
                                }
                            ],
                            "blockTags": []
                        },
                        "type": {
                            "type": "intrinsic",
                            "name": "string"
                        }
                    },
                    {
                        "id": 344,
                        "name": "index",
                        "variant": "param",
                        "kind": 32768,
                        "flags": {},
                        "comment": {
                            "summary": [
                                {
                                    "kind": "text",
                                    "text": "the zero-based index that the text should be inserted at."
                                }
                            ],
                            "blockTags": []
                        },
                        "type": {
                            "type": "intrinsic",
                            "name": "number"
                        }
                    },
                    {
                        "id": 345,
                        "name": "text",
                        "variant": "param",
                        "kind": 32768,
                        "flags": {},
                        "comment": {
                            "summary": [
                                {
                                    "kind": "text",
                                    "text": "the string of text that should be inserted."
                                }
                            ],
                            "blockTags": []
                        },
                        "type": {
                            "type": "intrinsic",
                            "name": "string"
                        }
                    },
                    {
                        "id": 346,
                        "name": "space",
                        "variant": "param",
                        "kind": 32768,
                        "flags": {
                            "isOptional": true
                        },
                        "comment": {
                            "summary": [
                                {
                                    "kind": "text",
                                    "text": "the space that the tag mask is in. If omitted, then the tempLocal space will be used."
                                }
                            ],
                            "blockTags": []
                        },
                        "type": {
                            "type": "reference",
                            "target": 3491,
                            "name": "Space",
                            "package": "@casual-simulation/aux-common",
                            "id": 3491,
                            "qualifiedName": "BotSpace"
                        }
                    }
                ],
                "type": {
                    "type": "intrinsic",
                    "name": "string"
                }
            },
            "comment": {
                "text": "Inserts the given text into the tag mask at the given index. Useful for editing the text in a tag without interrupting other players that are editing the same tag.\nIf a space is specified, then only the tag mask in that space will be changed.",
                "tags": [
                    {
                        "tagName": "example",
                        "text": "```ts\nAdd some text to the end of a tag mask.\ninsertTagMaskText(thisBot, \"myTag\", tags.myTag.length, \"xyz\");\n```"
                    },
                    {
                        "tagName": "example",
                        "text": "```ts\nAdd some text to the beginning of a tag mask that is in the local space.\ninsertTagMaskText(thisBot, \"myTag\", 0, \"abc\", \"local\");\n```"
                    },
                    {
                        "tagName": "dochash",
                        "text": "actions/data"
                    },
                    {
                        "tagName": "docgroup",
                        "text": "02-data-actions"
                    },
                    {
                        "tagName": "docname",
                        "text": "insertTagMaskText"
                    }
                ]
            },
            "group": "02-data-actions"
        },
        {
            "id": 334,
            "order": 9999,
            "name": "insertTagText",
            "reflection": {
                "id": 334,
                "name": "__type",
                "variant": "signature",
                "kind": 4096,
                "flags": {},
                "comment": {
                    "summary": [
                        {
                            "kind": "text",
                            "text": "Inserts the given text into the tag at the given index. Useful for editing the text in a tag without interrupting other players that are editing the same tag.\nReturns the resulting raw tag value."
                        }
                    ],
                    "blockTags": [
                        {
                            "tag": "@example",
                            "content": [
                                {
                                    "kind": "code",
                                    "text": "```ts\nAdd some text to the end of a tag.\ninsertTagText(thisBot, \"myTag\", tags.myTag.length, \"xyz\");\n```"
                                }
                            ]
                        },
                        {
                            "tag": "@example",
                            "content": [
                                {
                                    "kind": "code",
                                    "text": "```ts\nAdd some text to the beginning of a tag.\ninsertTagText(thisBot, \"myTag\", 0, \"abc\");\n```"
                                }
                            ]
                        },
                        {
                            "tag": "@dochash",
                            "content": [
                                {
                                    "kind": "text",
                                    "text": "actions/data"
                                }
                            ]
                        },
                        {
                            "tag": "@docgroup",
                            "content": [
                                {
                                    "kind": "text",
                                    "text": "02-data-actions"
                                }
                            ]
                        },
                        {
                            "tag": "@docname",
                            "content": [
                                {
                                    "kind": "text",
                                    "text": "insertTagText"
                                }
                            ]
                        }
                    ]
                },
                "sources": [
                    {
                        "fileName": "src/aux-runtime/runtime/AuxLibrary.ts",
                        "line": 13189,
                        "character": 13,
                        "url": "https://github.com/KallynGowdy/casualos/blob/b90532ee4/src/aux-runtime/runtime/AuxLibrary.ts#L13189"
                    }
                ],
                "parameters": [
                    {
                        "id": 335,
                        "name": "bot",
                        "variant": "param",
                        "kind": 32768,
                        "flags": {},
                        "comment": {
                            "summary": [
                                {
                                    "kind": "text",
                                    "text": "the bot that should be edited."
                                }
                            ],
                            "blockTags": []
                        },
                        "type": {
                            "type": "reference",
                            "target": 3361,
                            "name": "Bot",
                            "package": "@casual-simulation/aux-common",
                            "id": 3361,
                            "qualifiedName": "RuntimeBot"
                        }
                    },
                    {
                        "id": 336,
                        "name": "tag",
                        "variant": "param",
                        "kind": 32768,
                        "flags": {},
                        "comment": {
                            "summary": [
                                {
                                    "kind": "text",
                                    "text": "The tag that should be edited."
                                }
                            ],
                            "blockTags": []
                        },
                        "type": {
                            "type": "intrinsic",
                            "name": "string"
                        }
                    },
                    {
                        "id": 337,
                        "name": "index",
                        "variant": "param",
                        "kind": 32768,
                        "flags": {},
                        "comment": {
                            "summary": [
                                {
                                    "kind": "text",
                                    "text": "the zero-based index that the text should be inserted at."
                                }
                            ],
                            "blockTags": []
                        },
                        "type": {
                            "type": "intrinsic",
                            "name": "number"
                        }
                    },
                    {
                        "id": 338,
                        "name": "text",
                        "variant": "param",
                        "kind": 32768,
                        "flags": {},
                        "comment": {
                            "summary": [
                                {
                                    "kind": "text",
                                    "text": "the string of text that should be inserted."
                                }
                            ],
                            "blockTags": []
                        },
                        "type": {
                            "type": "intrinsic",
                            "name": "string"
                        }
                    }
                ],
                "type": {
                    "type": "intrinsic",
                    "name": "string"
                }
            },
            "comment": {
                "text": "Inserts the given text into the tag at the given index. Useful for editing the text in a tag without interrupting other players that are editing the same tag.\nReturns the resulting raw tag value.",
                "tags": [
                    {
                        "tagName": "example",
                        "text": "```ts\nAdd some text to the end of a tag.\ninsertTagText(thisBot, \"myTag\", tags.myTag.length, \"xyz\");\n```"
                    },
                    {
                        "tagName": "example",
                        "text": "```ts\nAdd some text to the beginning of a tag.\ninsertTagText(thisBot, \"myTag\", 0, \"abc\");\n```"
                    },
                    {
                        "tagName": "dochash",
                        "text": "actions/data"
                    },
                    {
                        "tagName": "docgroup",
                        "text": "02-data-actions"
                    },
                    {
                        "tagName": "docname",
                        "text": "insertTagText"
                    }
                ]
            },
            "group": "02-data-actions"
        },
        {
            "id": 316,
            "order": 9999,
            "name": "setTag",
            "reflection": {
                "id": 316,
                "name": "__type",
                "variant": "signature",
                "kind": 4096,
                "flags": {},
                "comment": {
                    "summary": [
                        {
                            "kind": "text",
                            "text": "Sets the given tag to the given value on the given bot, list of bots, or mod."
                        }
                    ],
                    "blockTags": [
                        {
                            "tag": "@example",
                            "content": [
                                {
                                    "kind": "code",
                                    "text": "```ts\nSet a bot's color to \"green\".\nsetTag(this, \"color\", \"green\");\n```"
                                }
                            ]
                        },
                        {
                            "tag": "@dochash",
                            "content": [
                                {
                                    "kind": "text",
                                    "text": "actions/data"
                                }
                            ]
                        },
                        {
                            "tag": "@docgroup",
                            "content": [
                                {
                                    "kind": "text",
                                    "text": "02-data-actions"
                                }
                            ]
                        },
                        {
                            "tag": "@docname",
                            "content": [
                                {
                                    "kind": "text",
                                    "text": "setTag"
                                }
                            ]
                        }
                    ]
                },
                "sources": [
                    {
                        "fileName": "src/aux-runtime/runtime/AuxLibrary.ts",
                        "line": 13086,
                        "character": 13,
                        "url": "https://github.com/KallynGowdy/casualos/blob/b90532ee4/src/aux-runtime/runtime/AuxLibrary.ts#L13086"
                    }
                ],
                "parameters": [
                    {
                        "id": 317,
                        "name": "bot",
                        "variant": "param",
                        "kind": 32768,
                        "flags": {},
                        "comment": {
                            "summary": [
                                {
                                    "kind": "text",
                                    "text": "the bot, list of bots, or mod that the tag should be set on."
                                }
                            ],
                            "blockTags": []
                        },
                        "type": {
                            "type": "union",
                            "types": [
                                {
                                    "type": "reference",
                                    "target": 3361,
                                    "name": "Bot",
                                    "package": "@casual-simulation/aux-common",
                                    "id": 3361,
                                    "qualifiedName": "Bot"
                                },
                                {
                                    "type": "array",
                                    "elementType": {
                                        "type": "reference",
                                        "target": 3361,
                                        "name": "Bot",
                                        "package": "@casual-simulation/aux-common",
                                        "id": 3361,
                                        "qualifiedName": "Bot"
                                    }
                                },
                                {
                                    "type": "reference",
                                    "target": 3416,
                                    "name": "Tags",
                                    "package": "@casual-simulation/aux-common",
                                    "id": 3416,
                                    "qualifiedName": "BotTags"
                                }
                            ]
                        }
                    },
                    {
                        "id": 318,
                        "name": "tag",
                        "variant": "param",
                        "kind": 32768,
                        "flags": {},
                        "comment": {
                            "summary": [
                                {
                                    "kind": "text",
                                    "text": "the tag that should be changed."
                                }
                            ],
                            "blockTags": []
                        },
                        "type": {
                            "type": "intrinsic",
                            "name": "string"
                        }
                    },
                    {
                        "id": 319,
                        "name": "value",
                        "variant": "param",
                        "kind": 32768,
                        "flags": {},
                        "comment": {
                            "summary": [
                                {
                                    "kind": "text",
                                    "text": "the value that should be placed into the tag(s)."
                                }
                            ],
                            "blockTags": []
                        },
                        "type": {
                            "type": "intrinsic",
                            "name": "any"
                        }
                    }
                ],
                "type": {
                    "type": "intrinsic",
                    "name": "any"
                }
            },
            "comment": {
                "text": "Sets the given tag to the given value on the given bot, list of bots, or mod.",
                "tags": [
                    {
                        "tagName": "example",
                        "text": "```ts\nSet a bot's color to \"green\".\nsetTag(this, \"color\", \"green\");\n```"
                    },
                    {
                        "tagName": "dochash",
                        "text": "actions/data"
                    },
                    {
                        "tagName": "docgroup",
                        "text": "02-data-actions"
                    },
                    {
                        "tagName": "docname",
                        "text": "setTag"
                    }
                ]
            },
            "group": "02-data-actions"
        },
        {
            "id": 322,
            "order": 9999,
            "name": "setTagMask",
            "reflection": {
                "id": 322,
                "name": "__type",
                "variant": "signature",
                "kind": 4096,
                "flags": {},
                "comment": {
                    "summary": [
                        {
                            "kind": "text",
                            "text": "Sets the given tag mask to the given value on the given bot or list of bots. If a space is specified, then the tag mask will be set inside that space."
                        }
                    ],
                    "blockTags": [
                        {
                            "tag": "@example",
                            "content": [
                                {
                                    "kind": "code",
                                    "text": "```ts\nSet a bot's color to \"green\".\nsetTagMask(this, \"color\", \"green\")\n```"
                                }
                            ]
                        },
                        {
                            "tag": "@example",
                            "content": [
                                {
                                    "kind": "code",
                                    "text": "```ts\nSet a bot's #color to green in the local space.\nsetTagMask(this, \"#color\", \"green\", \"local\");\n```"
                                }
                            ]
                        },
                        {
                            "tag": "@dochash",
                            "content": [
                                {
                                    "kind": "text",
                                    "text": "actions/data"
                                }
                            ]
                        },
                        {
                            "tag": "@docgroup",
                            "content": [
                                {
                                    "kind": "text",
                                    "text": "02-data-actions"
                                }
                            ]
                        },
                        {
                            "tag": "@docname",
                            "content": [
                                {
                                    "kind": "text",
                                    "text": "setTagMask"
                                }
                            ]
                        }
                    ]
                },
                "sources": [
                    {
                        "fileName": "src/aux-runtime/runtime/AuxLibrary.ts",
                        "line": 13127,
                        "character": 13,
                        "url": "https://github.com/KallynGowdy/casualos/blob/b90532ee4/src/aux-runtime/runtime/AuxLibrary.ts#L13127"
                    }
                ],
                "parameters": [
                    {
                        "id": 323,
                        "name": "bot",
                        "variant": "param",
                        "kind": 32768,
                        "flags": {},
                        "comment": {
                            "summary": [
                                {
                                    "kind": "text",
                                    "text": "the bot or list of bots that the tag mask should be set on."
                                }
                            ],
                            "blockTags": []
                        },
                        "type": {
                            "type": "union",
                            "types": [
                                {
                                    "type": "reference",
                                    "target": 3361,
                                    "name": "Bot",
                                    "package": "@casual-simulation/aux-common",
                                    "id": 3361,
                                    "qualifiedName": "RuntimeBot"
                                },
                                {
                                    "type": "array",
                                    "elementType": {
                                        "type": "reference",
                                        "target": 3361,
                                        "name": "Bot",
                                        "package": "@casual-simulation/aux-common",
                                        "id": 3361,
                                        "qualifiedName": "RuntimeBot"
                                    }
                                }
                            ]
                        }
                    },
                    {
                        "id": 324,
                        "name": "tag",
                        "variant": "param",
                        "kind": 32768,
                        "flags": {},
                        "comment": {
                            "summary": [
                                {
                                    "kind": "text",
                                    "text": "the tag that should be changed."
                                }
                            ],
                            "blockTags": []
                        },
                        "type": {
                            "type": "intrinsic",
                            "name": "string"
                        }
                    },
                    {
                        "id": 325,
                        "name": "value",
                        "variant": "param",
                        "kind": 32768,
                        "flags": {},
                        "comment": {
                            "summary": [
                                {
                                    "kind": "text",
                                    "text": "the value that should be placed into the tag(s)."
                                }
                            ],
                            "blockTags": []
                        },
                        "type": {
                            "type": "intrinsic",
                            "name": "any"
                        }
                    },
                    {
                        "id": 326,
                        "name": "space",
                        "variant": "param",
                        "kind": 32768,
                        "flags": {
                            "isOptional": true
                        },
                        "comment": {
                            "summary": [
                                {
                                    "kind": "text",
                                    "text": "the space that the tag mask should exist in. If omitted, then the tag mask will be created in the "
                                },
                                {
                                    "kind": "code",
                                    "text": "`tempLocal`"
                                },
                                {
                                    "kind": "text",
                                    "text": " space."
                                }
                            ],
                            "blockTags": []
                        },
                        "type": {
                            "type": "intrinsic",
                            "name": "string"
                        }
                    }
                ],
                "type": {
                    "type": "intrinsic",
                    "name": "any"
                }
            },
            "comment": {
                "text": "Sets the given tag mask to the given value on the given bot or list of bots. If a space is specified, then the tag mask will be set inside that space.",
                "tags": [
                    {
                        "tagName": "example",
                        "text": "```ts\nSet a bot's color to \"green\".\nsetTagMask(this, \"color\", \"green\")\n```"
                    },
                    {
                        "tagName": "example",
                        "text": "```ts\nSet a bot's #color to green in the local space.\nsetTagMask(this, \"#color\", \"green\", \"local\");\n```"
                    },
                    {
                        "tagName": "dochash",
                        "text": "actions/data"
                    },
                    {
                        "tagName": "docgroup",
                        "text": "02-data-actions"
                    },
                    {
                        "tagName": "docname",
                        "text": "setTagMask"
                    }
                ]
            },
            "group": "02-data-actions"
        }
    ],
    "references": {
        "CasualOSError": "types/error",
        "id-3546": "CasualOSError",
        "Quaternion": "types/math/rotations",
        "id-127": "Quaternion",
        "Rotation": "types/math/rotations",
        "id-154": "Rotation",
        "Vector2": "types/math/vectors",
        "id-1": "Vector2",
        "Vector3": "types/math/vectors",
        "id-58": "Vector3",
        "AIChatMessage": "types/ai",
        "id-3565": "AIChatMessage",
        "AIChatOptions": "types/ai",
        "id-3334": "AIChatOptions",
        "AIGenerateImageSuccess": "types/ai",
        "id-2481": "AIGenerateImageSuccess",
        "AIGenerateImageOptions": "types/ai",
        "id-3348": "AIGenerateImageOptions",
        "AIGenerateSkyboxOptions": "types/ai",
        "id-3344": "AIGenerateSkyboxOptions",
        "AIGenerateSkyboxRequest": "types/ai",
        "id-2474": "AIGenerateSkyboxRequest",
        "AIGenerateSkyboxResult": "types/ai",
        "id-2478": "AIGenerateSkyboxResult",
        "AIGeneratedImage": "types/ai",
        "id-2484": "AIGeneratedImage",
        "ARSupportedAction": "types/os/xr",
        "id-3076": "ARSupportedAction",
        "AddCountFailure": "types/records/events",
        "id-3751": "AddCountFailure",
        "AddCountSuccess": "types/records/events",
        "id-3746": "AddCountSuccess",
        "AddDropSnapAction": "types/os/portals",
        "id-2705": "AddDropSnapAction",
        "AddDropSnapPointsAction": "types/os/portals",
        "id-2709": "AddDropSnapPointsAction",
        "AnalyticsRecordEventAction": "types/os/portals",
        "id-3279": "AnalyticsRecordEventAction",
        "AnimateTagOptions": "types/animation",
        "id-2078": "AnimateTagOptions",
        "AttachDebuggerOptions": "types/debuggers/common",
        "id-2454": "AttachDebuggerOptions",
        "AuthData": "types/os/records",
        "id-3218": "AuthData",
        "CasualOSDevice": "types/os/system",
        "id-3533": "CasualOSDevice",
        "CasualOSVersion": "types/os/system",
        "id-3525": "CasualOSVersion",
        "AxisAndAngle": "types/math/rotations",
        "id-200": "AxisAndAngle",
        "BeginRecordingAction": "types/os/audio",
        "id-3161": "BeginRecordingAction",
        "BotTagMasks": "types/core",
        "id-3501": "BotTagMasks",
        "BotTags": "types/core",
        "id-3416": "BotTags",
        "BotState": "types/core",
        "id-3514": "BotState",
        "BufferFormAddressGLTFAction": "types/os/portals",
        "id-3286": "BufferFormAddressGLTFAction",
        "BufferSoundAction": "types/os/audio",
        "id-2887": "BufferSoundAction",
        "CalculateRayFromCameraAction": "types/os/portals",
        "id-3259": "CalculateRayFromCameraAction",
        "CancelSoundAction": "types/os/audio",
        "id-2893": "CancelSoundAction",
        "CompiledBotListeners": "types/core",
        "id-3495": "CompiledBotListeners",
        "ConfigureWakeLockAction": "types/os/portals",
        "id-3266": "ConfigureWakeLockAction",
        "ConvertGeolocationToWhat3WordsAction": "types/os/geolocation",
        "id-2651": "ConvertGeolocationToWhat3WordsAction",
        "ConvertGeolocationToWhat3WordsOptions": "types/os/geolocation",
        "id-2640": "ConvertGeolocationToWhat3WordsOptions",
        "CreatePublicRecordKeyFailure": "types/records/key",
        "id-3687": "CreatePublicRecordKeyFailure",
        "CreatePublicRecordKeySuccess": "types/records/key",
        "id-3683": "CreatePublicRecordKeySuccess",
        "DebuggerCallFrame": "types/debuggers/common",
        "id-2407": "DebuggerCallFrame",
        "DebuggerFunctionLocation": "types/debuggers/common",
        "id-2442": "DebuggerFunctionLocation",
        "DebuggerPause": "types/debuggers/common",
        "id-2436": "DebuggerPause",
        "DebuggerTagMaskUpdate": "types/debuggers/common",
        "id-2415": "DebuggerTagMaskUpdate",
        "DebuggerTagUpdate": "types/debuggers/common",
        "id-2421": "DebuggerTagUpdate",
        "DebuggerVariable": "types/debuggers/common",
        "id-2448": "DebuggerVariable",
        "DefineGlobalBotAction": "types/os/portals",
        "id-2644": "DefineGlobalBotAction",
        "DownloadAction": "types/os/files",
        "id-2899": "DownloadAction",
        "Easing": "types/animation",
        "id-2622": "Easing",
        "EnableARAction": "types/os/xr",
        "id-3072": "EnableARAction",
        "EnableCollaborationAction": "types/os/spaces",
        "id-3031": "EnableCollaborationAction",
        "EnableCustomDraggingAction": "types/os/portals",
        "id-2735": "EnableCustomDraggingAction",
        "EnablePOVAction": "types/os/portals",
        "id-3090": "EnablePOVAction",
        "EnableVRAction": "types/os/xr",
        "id-3086": "EnableVRAction",
        "EnableXROptions": "types/os/xr",
        "id-2942": "EnableXROptions",
        "EndRecordingAction": "types/os/audio",
        "id-3169": "EndRecordingAction",
        "EraseDataFailure": "types/records/data",
        "id-3722": "EraseDataFailure",
        "EraseDataSuccess": "types/records/data",
        "id-3718": "EraseDataSuccess",
        "EraseFileFailure": "types/records/files",
        "id-3741": "EraseFileFailure",
        "EraseFileSuccess": "types/records/files",
        "id-3737": "EraseFileSuccess",
        "EulerAnglesRotation": "types/math/rotations",
        "id-203": "EulerAnglesRotation",
        "ExitFullscreenAction": "types/os/portals",
        "id-3105": "ExitFullscreenAction",
        "FocusOnOptions": "types/os/camera",
        "id-2689": "FocusOnOptions",
        "FocusOnRotation": "types/os/camera",
        "id-2701": "FocusOnRotation",
        "FormAnimationData": "types/os/animations",
        "id-2987": "FormAnimationData",
        "FromToRotation": "types/math/rotations",
        "id-197": "FromToRotation",
        "GenericError": "types/error",
        "id-3543": "GenericError",
        "GetAverageFrameRateAction": "types/os/portals",
        "id-3239": "GetAverageFrameRateAction",
        "GetCountFailure": "types/records/events",
        "id-3762": "GetCountFailure",
        "GetCountSuccess": "types/records/events",
        "id-3756": "GetCountSuccess",
        "GetDataFailure": "types/records/data",
        "id-3713": "GetDataFailure",
        "GetDataSuccess": "types/records/data",
        "id-3704": "GetDataSuccess",
        "GetGeolocationAction": "types/os/geolocation",
        "id-3202": "GetGeolocationAction",
        "GetRoomOptionsFailure": "types/os/portals",
        "id-2169": "GetRoomOptionsFailure",
        "GetRoomOptionsSuccess": "types/os/portals",
        "id-2165": "GetRoomOptionsSuccess",
        "GetRoomRemoteOptionsFailure": "types/os/portals",
        "id-2212": "GetRoomRemoteOptionsFailure",
        "GetRoomRemoteOptionsSuccess": "types/os/portals",
        "id-2207": "GetRoomRemoteOptionsSuccess",
        "GetRoomTrackOptionsFailure": "types/os/portals",
        "id-2188": "GetRoomTrackOptionsFailure",
        "GetRoomTrackOptionsSuccess": "types/os/portals",
        "id-2183": "GetRoomTrackOptionsSuccess",
        "GetVoicesAction": "types/os/audio",
        "id-3197": "GetVoicesAction",
        "GetWakeLockConfigurationAction": "types/os/portals",
        "id-3272": "GetWakeLockConfigurationAction",
        "GoToTagAction": "types/os/portals",
        "id-3207": "GoToTagAction",
        "GrantMarkerPermissionFailure": "types/records/policies",
        "id-3790": "GrantMarkerPermissionFailure",
        "GrantMarkerPermissionSuccess": "types/records/policies",
        "id-3788": "GrantMarkerPermissionSuccess",
        "GrantRoleFailure": "types/records/roles",
        "id-3776": "GrantRoleFailure",
        "GrantRoleSuccess": "types/records/roles",
        "id-3774": "GrantRoleSuccess",
        "HideHtmlAction": "types/os/portals",
        "id-2541": "HideHtmlAction",
        "HideTooltipAction": "types/os/portals",
        "id-2530": "HideTooltipAction",
        "HtmlAppEventAction": "types/os/portals",
        "id-2551": "HtmlAppEventAction",
        "HtmlAppMethodCallAction": "types/os/portals",
        "id-2556": "HtmlAppMethodCallAction",
        "ImageClassifierOptions": "types/os/image-classification",
        "id-2740": "ImageClassifierOptions",
        "InstUpdate": "types/os/spaces",
        "id-3539": "InstUpdate",
        "JoinRoomFailure": "types/os/portals",
        "id-2150": "JoinRoomFailure",
        "JoinRoomSuccess": "types/os/portals",
        "id-2147": "JoinRoomSuccess",
        "LeaveRoomFailure": "types/os/portals",
        "id-2159": "LeaveRoomFailure",
        "LeaveRoomSuccess": "types/os/portals",
        "id-2156": "LeaveRoomSuccess",
        "ListDataFailure": "types/records/data",
        "id-3732": "ListDataFailure",
        "ListDataSuccess": "types/records/data",
        "id-3727": "ListDataSuccess",
        "ListFormAnimationsAction": "types/os/animations",
        "id-2991": "ListFormAnimationsAction",
        "ListStudiosFailure": "types/records/studios",
        "id-3805": "ListStudiosFailure",
        "ListStudiosSuccess": "types/records/studios",
        "id-3802": "ListStudiosSuccess",
        "ListedStudio": "types/records/studios",
        "id-3809": "ListedStudio",
        "LoadInstAction": "types/os/spaces",
        "id-2812": "LoadInstAction",
        "LoadSpaceAction": "types/os/spaces",
        "id-2932": "LoadSpaceAction",
        "LocalFormAnimationAction": "types/os/animations",
        "id-3043": "LocalFormAnimationAction",
        "LocalPositionTweenAction": "types/os/animations",
        "id-3057": "LocalPositionTweenAction",
        "LocalTweenAction": "types/os/animations",
        "id-3047": "LocalTweenAction",
        "LookRotation": "types/math/rotations",
        "id-211": "LookRotation",
        "MediaPermissionAction": "types/os/media",
        "id-3232": "MediaPermissionAction",
        "MediaPermissionOptions": "types/os/media",
        "id-2939": "MediaPermissionOptions",
        "MeetCommandAction": "types/os/meets",
        "id-3174": "MeetCommandAction",
        "MeetFunctionAction": "types/os/meets",
        "id-3181": "MeetFunctionAction",
        "Debugger": "types/debuggers/debugger",
        "id-2219": "Debugger",
        "NormalDebuggerOptions": "types/debuggers/common",
        "id-2426": "NormalDebuggerOptions",
        "OpenCircleWipeAction": "types/os/portals",
        "id-3151": "OpenCircleWipeAction",
        "OpenCircleWipeOptions": "types/os/portals",
        "id-3158": "OpenCircleWipeOptions",
        "OpenConsoleAction": "types/os/system",
        "id-2787": "OpenConsoleAction",
        "PhotoCameraOptions": "types/camera",
        "id-3015": "PhotoCameraOptions",
        "OpenURLAction": "types/os/portals",
        "id-2876": "OpenURLAction",
        "ParsedBotLink": "types/core",
        "id-3520": "ParsedBotLink",
        "PartialBotState": "types/core",
        "id-3517": "PartialBotState",
        "PausableDebugger": "types/debuggers/pausable-debugger",
        "id-2275": "PausableDebugger",
        "PausableDebuggerOptions": "types/debuggers/common",
        "id-2431": "PausableDebuggerOptions",
        "PauseTrigger": "types/debuggers/common",
        "id-2394": "PauseTrigger",
        "PauseTriggerOptions": "types/debuggers/common",
        "id-2402": "PauseTriggerOptions",
        "Photo": "types/camera",
        "id-3027": "Photo",
        "PlaySoundAction": "types/os/audio",
        "id-2880": "PlaySoundAction",
        "PossiblePauseTriggerLocation": "types/debuggers/common",
        "id-2389": "PossiblePauseTriggerLocation",
        "PseudoRandomNumberGenerator": "types/core",
        "id-2463": "PseudoRandomNumberGenerator",
        "QuaternionRotation": "types/math/rotations",
        "id-215": "QuaternionRotation",
        "RaycastFromCameraAction": "types/os/portals",
        "id-3244": "RaycastFromCameraAction",
        "RaycastInPortalAction": "types/os/portals",
        "id-3251": "RaycastInPortalAction",
        "RaycastRay": "types/os/portals",
        "id-2143": "RaycastRay",
        "RaycastResult": "types/os/portals",
        "id-2140": "RaycastResult",
        "RecordActionOptions": "types/records/extra",
        "id-3297": "RecordActionOptions",
        "RecordDataFailure": "types/records/data",
        "id-3697": "RecordDataFailure",
        "RecordDataSuccess": "types/records/data",
        "id-3693": "RecordDataSuccess",
        "RecordFileFailure": "types/records/files",
        "id-2110": "RecordFileFailure",
        "RecordFileSuccess": "types/records/files",
        "id-2106": "RecordFileSuccess",
        "RecordedFile": "types/experimental",
        "id-3002": "RecordedFile",
        "Recording": "types/experimental",
        "id-3000": "Recording",
        "RecordingOptions": "types/experimental",
        "id-3007": "RecordingOptions",
        "RegisterBuiltinPortalAction": "types/os/portals",
        "id-3115": "RegisterBuiltinPortalAction",
        "RegisterCustomAppAction": "types/os/portals",
        "id-3121": "RegisterCustomAppAction",
        "RegisterHtmlAppAction": "types/os/portals",
        "id-3134": "RegisterHtmlAppAction",
        "RegisterPrefixOptions": "types/core",
        "id-2997": "RegisterPrefixOptions",
        "RejectAction": "types/os/event",
        "id-2905": "RejectAction",
        "RemoteAction": "types/os/event",
        "id-3815": "RemoteAction",
        "ReportInstAction": "types/os/moderation",
        "id-3292": "ReportInstAction",
        "RequestAuthDataAction": "types/os/records",
        "id-3212": "RequestAuthDataAction",
        "RequestFullscreenAction": "types/os/portals",
        "id-3103": "RequestFullscreenAction",
        "RevokeMarkerPermissionFailure": "types/records/policies",
        "id-3797": "RevokeMarkerPermissionFailure",
        "RevokeMarkerPermissionSuccess": "types/records/policies",
        "id-3795": "RevokeMarkerPermissionSuccess",
        "RevokeRoleFailure": "types/records/roles",
        "id-3783": "RevokeRoleFailure",
        "RevokeRoleSuccess": "types/records/roles",
        "id-3781": "RevokeRoleSuccess",
        "RoomJoinOptions": "types/os/portals",
        "id-3300": "RoomJoinOptions",
        "RoomOptions": "types/os/portals",
        "id-3309": "RoomOptions",
        "RoomRemoteOptions": "types/os/portals",
        "id-3325": "RoomRemoteOptions",
        "RoomTrackOptions": "types/os/portals",
        "id-3313": "RoomTrackOptions",
        "RunScriptAction": "types/os/system",
        "id-2919": "RunScriptAction",
        "RuntimeBot": "types/core",
        "id-3361": "RuntimeBot",
        "RuntimeBotLinks": "types/core",
        "id-3507": "RuntimeBotLinks",
        "RuntimeBotVars": "types/core",
        "id-3504": "RuntimeBotVars",
        "SequenceRotation": "types/math/rotations",
        "id-222": "SequenceRotation",
        "SerializableMutationRecord": "types/os/portals",
        "id-2565": "SerializableMutationRecord",
        "SessionSelector": "types/os/event",
        "id-2489": "SessionSelector",
        "SetAppOutputAction": "types/os/portals",
        "id-3146": "SetAppOutputAction",
        "SetClipboardAction": "types/os/clipboard",
        "id-2908": "SetClipboardAction",
        "SetRoomOptionsSuccess": "types/os/portals",
        "id-2174": "SetRoomOptionsSuccess",
        "SetRoomTrackOptions": "types/os/portals",
        "id-3331": "SetRoomTrackOptions",
        "SetRoomTrackOptionsFailure": "types/os/portals",
        "id-2200": "SetRoomTrackOptionsFailure",
        "SetRoomTrackOptionsSuccess": "types/os/portals",
        "id-2195": "SetRoomTrackOptionsSuccess",
        "ShareAction": "types/os/input",
        "id-3107": "ShareAction",
        "ShareOptions": "types/os/input",
        "id-2685": "ShareOptions",
        "ShowChatBarAction": "types/os/input",
        "id-2911": "ShowChatBarAction",
        "ShowChatOptions": "types/os/input",
        "id-2679": "ShowChatOptions",
        "ShowConfirmAction": "types/os/input",
        "id-2761": "ShowConfirmAction",
        "ShowConfirmOptions": "types/os/input",
        "id-2756": "ShowConfirmOptions",
        "ShowHtmlAction": "types/os/portals",
        "id-2536": "ShowHtmlAction",
        "ShowInputOptions": "types/os/input",
        "id-2745": "ShowInputOptions",
        "ShowJoinCodeAction": "types/os/barcodes",
        "id-3099": "ShowJoinCodeAction",
        "ShowToastAction": "types/os/portals",
        "id-2516": "ShowToastAction",
        "ShowTooltipAction": "types/os/portals",
        "id-2521": "ShowTooltipAction",
        "ShowUploadAuxFileAction": "types/os/input",
        "id-2925": "ShowUploadAuxFileAction",
        "ShowUploadFilesAction": "types/os/input",
        "id-2927": "ShowUploadFilesAction",
        "SnapAxis": "types/os/portals",
        "id-2659": "SnapAxis",
        "SnapGrid": "types/os/portals",
        "id-2714": "SnapGrid",
        "SnapGridTarget": "types/os/portals",
        "id-2115": "SnapGridTarget",
        "SnapPoint": "types/os/portals",
        "id-2671": "SnapPoint",
        "SpeakTextAction": "types/os/audio",
        "id-3188": "SpeakTextAction",
        "SpeakTextOptions": "types/experimental",
        "id-2459": "SpeakTextOptions",
        "StartFormAnimationAction": "types/os/animations",
        "id-2968": "StartFormAnimationAction",
        "StartFormAnimationOptions": "types/os/animations",
        "id-2944": "StartFormAnimationOptions",
        "StopFormAnimationAction": "types/os/animations",
        "id-2957": "StopFormAnimationAction",
        "StopFormAnimationOptions": "types/os/animations",
        "id-2965": "StopFormAnimationOptions",
        "SuccessfulGeolocation": "types/os/geolocation",
        "id-2626": "SuccessfulGeolocation",
        "SyntheticVoice": "types/experimental",
        "id-3011": "SyntheticVoice",
        "TweenOptions": "types/experimental",
        "id-2456": "TweenOptions",
        "UnloadInstAction": "types/os/spaces",
        "id-2816": "UnloadInstAction",
        "UnregisterCustomAppAction": "types/os/portals",
        "id-3128": "UnregisterCustomAppAction",
        "UnregisterHtmlAppAction": "types/os/portals",
        "id-3141": "UnregisterHtmlAppAction",
        "UnsuccessfulGeolocation": "types/os/geolocation",
        "id-2636": "UnsuccessfulGeolocation",
        "UpdateEventRecordFailure": "types/records/events",
        "id-3769": "UpdateEventRecordFailure",
        "UpdateEventRecordSuccess": "types/records/events",
        "id-3767": "UpdateEventRecordSuccess",
        "UpdateHtmlAppAction": "types/os/portals",
        "id-2545": "UpdateHtmlAppAction",
        "UploadedFile": "types/os/files",
        "id-2136": "UploadedFile",
        "VRSupportedAction": "types/os/xr",
        "id-3081": "VRSupportedAction",
        "WakeLockConfiguration": "types/os/portals",
        "id-3277": "WakeLockConfiguration",
        "WebhookOptions": "types/web",
        "id-2059": "WebhookOptions",
        "WebhookResult": "types/web",
        "id-2071": "WebhookResult",
        "AddCountResult": "types/records/events",
        "id-3745": "AddCountResult",
        "AvailablePermissions": "types/permissions",
        "id-3571": "AvailablePermissions",
        "BarcodeFormat": "types/os/barcodes",
        "id-2739": "BarcodeFormat",
        "BotAnchorPoint": "types/core",
        "id-3524": "BotAnchorPoint",
        "BotFilter": "types/core",
        "id-2093": "BotFilter",
        "BotSpace": "types/core",
        "id-3491": "BotSpace",
        "CameraType": "types/os/camera",
        "id-2738": "CameraType",
        "CreatePublicRecordKeyResult": "types/records/key",
        "id-3682": "CreatePublicRecordKeyResult",
        "EaseMode": "types/animation",
        "id-2621": "EaseMode",
        "EaseType": "types/animation",
        "id-2620": "EaseType",
        "EraseDataResult": "types/records/data",
        "id-3717": "EraseDataResult",
        "EraseFileResult": "types/records/files",
        "id-3736": "EraseFileResult",
        "Geolocation": "types/os/geolocation",
        "id-2625": "Geolocation",
        "GetCountResult": "types/records/events",
        "id-3755": "GetCountResult",
        "GetDataResult": "types/records/data",
        "id-3703": "GetDataResult",
        "GetRoomOptionsResult": "types/os/portals",
        "id-2164": "GetRoomOptionsResult",
        "GetRoomRemoteOptionsResult": "types/os/portals",
        "id-2206": "GetRoomRemoteOptionsResult",
        "GetRoomTrackOptionsResult": "types/os/portals",
        "id-2182": "GetRoomTrackOptionsResult",
        "GrantMarkerPermissionResult": "types/records/policies",
        "id-3787": "GrantMarkerPermissionResult",
        "GrantRoleResult": "types/records/roles",
        "id-3773": "GrantRoleResult",
        "JoinRoomResult": "types/os/portals",
        "id-2146": "JoinRoomResult",
        "LeaveRoomResult": "types/os/portals",
        "id-2155": "LeaveRoomResult",
        "ListDataResult": "types/records/data",
        "id-3726": "ListDataResult",
        "ListStudiosResult": "types/records/studios",
        "id-3801": "ListStudiosResult",
        "Mod": "types/core",
        "id-2088": "Mod",
        "PortalType": "types/core",
        "id-3523": "PortalType",
        "PossiblePauseTriggerStates": "types/debuggers/common",
        "id-2393": "PossiblePauseTriggerStates",
        "RecordDataResult": "types/records/data",
        "id-3692": "RecordDataResult",
        "RecordFileResult": "types/records/files",
        "id-2105": "RecordFileResult",
        "RevokeMarkerPermissionResult": "types/records/policies",
        "id-3794": "RevokeMarkerPermissionResult",
        "RevokeRoleResult": "types/records/roles",
        "id-3780": "RevokeRoleResult",
        "SetRoomOptionsResult": "types/os/portals",
        "id-2173": "SetRoomOptionsResult",
        "SetRoomTrackOptionsResult": "types/os/portals",
        "id-2194": "SetRoomTrackOptionsResult",
        "ShowInputSuptype": "types/os/input",
        "id-2755": "ShowInputSuptype",
        "ShowInputType": "types/os/input",
        "id-2754": "ShowInputType",
        "SnapTarget": "types/os/portals",
        "id-2678": "SnapTarget",
        "TagFilter": "types/core",
        "id-2089": "TagFilter",
        "UpdateEventRecordResult": "types/records/events",
        "id-3766": "UpdateEventRecordResult",
        "animateTag-byOptions": "actions/os/animations",
        "id-591": "animateTag-byOptions",
        "getbot-tag": "actions/data",
        "id-256": "getbot-tag",
        "getbots-tag": "actions/data",
        "id-240": "getbots-tag",
        "animateTag-byTag": "actions/os/animations",
        "id-585": "animateTag-byTag",
        "changeState": "actions/data",
        "id-401": "changeState",
        "create": "actions/data",
        "id-385": "create",
        "destroy": "actions/data",
        "id-389": "destroy",
        "getbot-filters": "actions/data",
        "id-249": "getbot-filters",
        "getbots-filters": "actions/data",
        "id-233": "getbots-filters",
        "priorityShout": "actions/os/event",
        "id-450": "priorityShout",
        "shout": "actions/os/event",
        "id-463": "shout",
        "updateBotLinks": "actions/data",
        "id-423": "updateBotLinks",
        "whisper": "actions/os/event",
        "id-489": "whisper",
        "action.perform": "actions/os/event",
        "id-1594": "action.perform",
        "action.reject": "actions/os/event",
        "id-1598": "action.reject",
        "ai.chat-string": "actions/ai",
        "id-650": "ai.chat-string",
        "ai.chat-message": "actions/ai",
        "id-653": "ai.chat-message",
        "ai.chat-messages": "actions/ai",
        "id-656": "ai.chat-messages",
        "ai.generateImage-string": "actions/ai",
        "id-669": "ai.generateImage-string",
        "ai.generateImage-request": "actions/ai",
        "id-673": "ai.generateImage-request",
        "ai.generateSkybox-string": "actions/ai",
        "id-661": "ai.generateSkybox-string",
        "ai.generateSkybox-request": "actions/ai",
        "id-665": "ai.generateSkybox-request",
        "applyDiffToSnapshot": "actions/data",
        "id-306": "applyDiffToSnapshot",
        "applyMod": "actions/mods",
        "id-375": "applyMod",
        "assert": "actions/debuggers",
        "id-634": "assert",
        "assertEqual": "actions/debuggers",
        "id-639": "assertEqual",
        "atPosition": "actions/bot-filters",
        "id-520": "atPosition",
        "byCreator": "actions/bot-filters",
        "id-541": "byCreator",
        "byID": "actions/bot-filters",
        "id-508": "byID",
        "byMod": "actions/bot-filters",
        "id-512": "byMod",
        "bySpace": "actions/bot-filters",
        "id-537": "bySpace",
        "byTag": "actions/bot-filters",
        "id-503": "byTag",
        "bytes.fromBase64String": "actions/bytes",
        "id-1807": "bytes.fromBase64String",
        "bytes.fromBase64Url": "actions/bytes",
        "id-1824": "bytes.fromBase64Url",
        "bytes.fromHexString": "actions/bytes",
        "id-1815": "bytes.fromHexString",
        "bytes.toBase64String": "actions/bytes",
        "id-1803": "bytes.toBase64String",
        "bytes.toBase64Url": "actions/bytes",
        "id-1819": "bytes.toBase64Url",
        "bytes.toHexString": "actions/bytes",
        "id-1811": "bytes.toHexString",
        "clearAnimations": "actions/os/animations",
        "id-605": "clearAnimations",
        "clearTagMasks": "actions/data",
        "id-329": "clearTagMasks",
        "crypto.hash-raw": "actions/crypto",
        "id-1830": "crypto.hash-raw",
        "crypto.hash-string": "actions/crypto",
        "id-1836": "crypto.hash-string",
        "crypto.hmac-raw": "actions/crypto",
        "id-1867": "crypto.hmac-raw",
        "crypto.hmac-string": "actions/crypto",
        "id-1860": "crypto.hmac-string",
        "crypto.asymmetric.decrypt": "actions/crypto",
        "id-1925": "crypto.asymmetric.decrypt",
        "crypto.asymmetric.encrypt": "actions/crypto",
        "id-1920": "crypto.asymmetric.encrypt",
        "crypto.asymmetric.isEncrypted": "actions/crypto",
        "id-1931": "crypto.asymmetric.isEncrypted",
        "crypto.asymmetric.isKeypair": "actions/crypto",
        "id-1916": "crypto.asymmetric.isKeypair",
        "crypto.asymmetric.keypair": "actions/crypto",
        "id-1912": "crypto.asymmetric.keypair",
        "crypto.encrypt": "actions/crypto",
        "id-1896": "crypto.encrypt",
        "crypto.hmacSha256": "actions/crypto",
        "id-1886": "crypto.hmacSha256",
        "crypto.hmacSha512": "actions/crypto",
        "id-1891": "crypto.hmacSha512",
        "crypto.isEncrypted": "actions/crypto",
        "id-1906": "crypto.isEncrypted",
        "crypto.keypair": "actions/crypto",
        "id-1935": "crypto.keypair",
        "crypto.sha256": "actions/crypto",
        "id-1852": "crypto.sha256",
        "crypto.sha512": "actions/crypto",
        "id-1856": "crypto.sha512",
        "crypto.sign": "actions/crypto",
        "id-1939": "crypto.sign",
        "deleteTagMaskText": "actions/data",
        "id-356": "deleteTagMaskText",
        "deleteTagText": "actions/data",
        "id-349": "deleteTagText",
        "diffSnapshots": "actions/data",
        "id-301": "diffSnapshots",
        "either": "actions/bot-filters",
        "id-545": "either",
        "os.beginAudioRecording": "actions/os/audio",
        "id-1641": "os.beginAudioRecording",
        "experiment.beginRecording": "actions/experimental",
        "id-1648": "experiment.beginRecording",
        "os.endAudioRecording": "actions/os/audio",
        "id-1645": "os.endAudioRecording",
        "experiment.endRecording": "actions/experimental",
        "id-1652": "experiment.endRecording",
        "experiment.getAnchorPointPosition": "actions/experimental",
        "id-1631": "experiment.getAnchorPointPosition",
        "experiment.getVoices": "actions/experimental",
        "id-1660": "experiment.getVoices",
        "experiment.localFormAnimation": "actions/experimental",
        "id-1604": "experiment.localFormAnimation",
        "experiment.localPositionTween": "actions/experimental",
        "id-1609": "experiment.localPositionTween",
        "experiment.localRotationTween": "actions/experimental",
        "id-1620": "experiment.localRotationTween",
        "experiment.speakText": "actions/experimental",
        "id-1655": "experiment.speakText",
        "getBotLinks": "actions/data",
        "id-419": "getBotLinks",
        "getBotPosition": "actions/data",
        "id-275": "getBotPosition",
        "getBotRotation": "actions/data",
        "id-280": "getBotRotation",
        "getBotTagValues": "actions/data",
        "id-265": "getBotTagValues",
        "getFormattedJSON": "actions/data",
        "id-293": "getFormattedJSON",
        "getID": "actions/data",
        "id-285": "getID",
        "getJSON": "actions/data",
        "id-289": "getJSON",
        "getLink": "actions/data",
        "id-415": "getLink",
        "getMod": "actions/mods",
        "id-270": "getMod",
        "getSnapshot": "actions/data",
        "id-297": "getSnapshot",
        "getTag": "actions/data",
        "id-311": "getTag",
        "inDimension": "actions/bot-filters",
        "id-516": "inDimension",
        "inStack": "actions/bot-filters",
        "id-526": "inStack",
        "insertTagMaskText": "actions/data",
        "id-341": "insertTagMaskText",
        "insertTagText": "actions/data",
        "id-334": "insertTagText",
        "math.abs": "actions/math",
        "id-1677": "math.abs",
        "math.addVectors": "actions/math",
        "id-1747": "math.addVectors",
        "math.areClose": "actions/math",
        "id-1778": "math.areClose",
        "math.avg": "actions/math",
        "id-1669": "math.avg",
        "math.degreesToRadians": "actions/math",
        "id-1703": "math.degreesToRadians",
        "math.getAnchorPointOffset": "actions/math",
        "id-1743": "math.getAnchorPointOffset",
        "math.getForwardDirection": "actions/math",
        "id-1711": "math.getForwardDirection",
        "math.getSeededRandomNumberGenerator": "actions/math",
        "id-1685": "math.getSeededRandomNumberGenerator",
        "math.intersectPlane": "actions/math",
        "id-1720": "math.intersectPlane",
        "math.negateVector": "actions/math",
        "id-1757": "math.negateVector",
        "math.normalizeVector": "actions/math",
        "id-1762": "math.normalizeVector",
        "math.radiansToDegrees": "actions/math",
        "id-1707": "math.radiansToDegrees",
        "math.random": "actions/math",
        "id-1698": "math.random",
        "math.randomInt": "actions/math",
        "id-1693": "math.randomInt",
        "math.scaleVector": "actions/math",
        "id-1772": "math.scaleVector",
        "math.setRandomSeed": "actions/math",
        "id-1689": "math.setRandomSeed",
        "math.sqrt": "actions/math",
        "id-1673": "math.sqrt",
        "math.stdDev": "actions/math",
        "id-1681": "math.stdDev",
        "math.subtractVectors": "actions/math",
        "id-1752": "math.subtractVectors",
        "math.sum": "actions/math",
        "id-1665": "math.sum",
        "math.vectorLength": "actions/math",
        "id-1767": "math.vectorLength",
        "neighboring": "actions/bot-filters",
        "id-531": "neighboring",
        "not": "actions/bot-filters",
        "id-552": "not",
        "os.attachDebugger": "actions/debuggers",
        "id-1550": "os.attachDebugger",
        "os.createDebugger-normal": "actions/debuggers",
        "id-1539": "os.createDebugger-normal",
        "os.createDebugger-pausable": "actions/debuggers",
        "id-1543": "os.createDebugger-pausable",
        "os.focusOn-bot": "actions/os/portals",
        "id-737": "os.focusOn-bot",
        "os.focusOn-position": "actions/os/portals",
        "id-742": "os.focusOn-position",
        "os.getExecutingDebugger": "actions/debuggers",
        "id-1547": "os.getExecutingDebugger",
        "showChat-options": "actions/os/input",
        "id-764": "showChat-options",
        "showChat-placeholder": "actions/os/input",
        "id-760": "showChat-placeholder",
        "os.showInput": "actions/os/portals",
        "id-983": "os.showInput",
        "os.addBotDropGrid": "actions/os/portals",
        "id-1053": "os.addBotDropGrid",
        "os.addBotDropSnap": "actions/os/portals",
        "id-1044": "os.addBotDropSnap",
        "os.addDropGrid": "actions/os/portals",
        "id-1049": "os.addDropGrid",
        "os.addDropSnap": "actions/os/portals",
        "id-1040": "os.addDropSnap",
        "os.applyUpdatesToInst": "actions/os/spaces",
        "id-1502": "os.applyUpdatesToInst",
        "os.arSupported": "actions/os/xr",
        "id-808": "os.arSupported",
        "os.bufferFormAddressGLTF": "actions/os/animations",
        "id-1460": "os.bufferFormAddressGLTF",
        "os.bufferSound": "actions/os/audio",
        "id-1016": "os.bufferSound",
        "os.calculateRayFromCamera": "actions/os/portals",
        "id-1455": "os.calculateRayFromCamera",
        "os.cancelSound": "actions/os/audio",
        "id-1020": "os.cancelSound",
        "os.capturePhoto": "actions/os/camera",
        "id-903": "os.capturePhoto",
        "os.closeBarcodeScanner": "actions/os/barcodes",
        "id-881": "os.closeBarcodeScanner",
        "os.closeCircleWipe": "actions/os/portals",
        "id-1032": "os.closeCircleWipe",
        "os.closeImageClassifier": "actions/os/image-classification",
        "id-896": "os.closeImageClassifier",
        "os.closePhotoCamera": "actions/os/camera",
        "id-907": "os.closePhotoCamera",
        "os.closeQRCodeScanner": "actions/os/barcodes",
        "id-867": "os.closeQRCodeScanner",
        "os.compileApp": "actions/os/app",
        "id-1167": "os.compileApp",
        "os.convertGeolocationToWhat3Words": "actions/os/geolocation",
        "id-1440": "os.convertGeolocationToWhat3Words",
        "os.countEvents": "actions/os/records",
        "id-1430": "os.countEvents",
        "os.createInitializationUpdate": "actions/os/spaces",
        "id-1498": "os.createInitializationUpdate",
        "os.device": "actions/os/system",
        "id-782": "os.device",
        "os.disableAR": "actions/os/xr",
        "id-798": "os.disableAR",
        "os.disablePointOfView": "actions/os/portals",
        "id-823": "os.disablePointOfView",
        "os.disableVR": "actions/os/xr",
        "id-805": "os.disableVR",
        "os.disableWakeLock": "actions/os/portals",
        "id-829": "os.disableWakeLock",
        "os.download": "actions/os/files",
        "id-835": "os.download",
        "os.downloadBots": "actions/os/files",
        "id-841": "os.downloadBots",
        "os.downloadBotsAsInitialzationUpdate": "actions/os/files",
        "id-846": "os.downloadBotsAsInitialzationUpdate",
        "os.downloadInst": "actions/os/files",
        "id-854": "os.downloadInst",
        "os.enableAR": "actions/os/xr",
        "id-794": "os.enableAR",
        "os.enableCollaboration": "actions/os/spaces",
        "id-788": "os.enableCollaboration",
        "os.enableCustomDragging": "actions/os/portals",
        "id-1058": "os.enableCustomDragging",
        "os.enablePointOfView": "actions/os/portals",
        "id-814": "os.enablePointOfView",
        "os.enableVR": "actions/os/xr",
        "id-801": "os.enableVR",
        "os.eraseData": "actions/os/records",
        "id-1373": "os.eraseData",
        "os.eraseManualApprovalData": "actions/os/records",
        "id-1379": "os.eraseManualApprovalData",
        "os.exitFullscreenMode": "actions/os/portals",
        "id-708": "os.exitFullscreenMode",
        "os.getAverageFrameRate": "actions/os/portals",
        "id-1115": "os.getAverageFrameRate",
        "os.getCameraPosition": "actions/os/portals",
        "id-1071": "os.getCameraPosition",
        "os.getCameraRotation": "actions/os/portals",
        "id-1075": "os.getCameraRotation",
        "os.getCurrentDimension": "actions/os/portals",
        "id-954": "os.getCurrentDimension",
        "os.getCurrentInst": "actions/os/portals",
        "id-960": "os.getCurrentInst",
        "os.getCurrentInstUpdate": "actions/os/spaces",
        "id-1506": "os.getCurrentInstUpdate",
        "os.getData": "actions/os/records",
        "id-1355": "os.getData",
        "os.getDimensionalDepth": "actions/os/portals",
        "id-973": "os.getDimensionalDepth",
        "os.getFocusPoint": "actions/os/portals",
        "id-1083": "os.getFocusPoint",
        "os.getGeolocation": "actions/os/geolocation",
        "id-1065": "os.getGeolocation",
        "os.getInputList": "actions/os/portals",
        "id-1108": "os.getInputList",
        "os.getInputState": "actions/os/portals",
        "id-1103": "os.getInputState",
        "os.getInstStateFromUpdates": "actions/os/spaces",
        "id-1494": "os.getInstStateFromUpdates",
        "os.getManualApprovalData": "actions/os/records",
        "id-1361": "os.getManualApprovalData",
        "os.getMediaPermission": "actions/os/media",
        "id-1111": "os.getMediaPermission",
        "os.getMenuDimension": "actions/os/portals",
        "id-963": "os.getMenuDimension",
        "os.getMiniPortalDimension": "actions/os/portals",
        "id-966": "os.getMiniPortalDimension",
        "os.getPointerDirection": "actions/os/portals",
        "id-1099": "os.getPointerDirection",
        "os.getPointerPosition": "actions/os/portals",
        "id-1087": "os.getPointerPosition",
        "os.getPointerRotation": "actions/os/portals",
        "id-1091": "os.getPointerRotation",
        "os.getPortalDimension": "actions/os/portals",
        "id-969": "os.getPortalDimension",
        "os.getPublicRecordKey": "actions/os/records",
        "id-1280": "os.getPublicRecordKey",
        "os.getRoomOptions": "actions/os/rooms",
        "id-1133": "os.getRoomOptions",
        "os.getRoomRemoteOptions": "actions/os/rooms",
        "id-1148": "os.getRoomRemoteOptions",
        "os.getRoomTrackOptions": "actions/os/rooms",
        "id-1137": "os.getRoomTrackOptions",
        "os.getSubjectlessPublicRecordKey": "actions/os/records",
        "id-1284": "os.getSubjectlessPublicRecordKey",
        "os.getWakeLockConfiguration": "actions/os/portals",
        "id-832": "os.getWakeLockConfiguration",
        "os.goToDimension": "actions/os/portals",
        "id-997": "os.goToDimension",
        "os.goToURL": "actions/os/portals",
        "id-1001": "os.goToURL",
        "os.grantInstAdminPermission": "actions/os/records",
        "id-1302": "os.grantInstAdminPermission",
        "os.grantInstRole": "actions/os/records",
        "id-1322": "os.grantInstRole",
        "os.grantRecordMarkerPermission": "actions/os/records",
        "id-1288": "os.grantRecordMarkerPermission",
        "os.grantUserRole": "actions/os/records",
        "id-1307": "os.grantUserRole",
        "os.hasBotInMiniPortal": "actions/os/portals",
        "id-1024": "os.hasBotInMiniPortal",
        "os.hideBarcode": "actions/os/barcodes",
        "id-889": "os.hideBarcode",
        "os.hideChat": "actions/os/input",
        "id-772": "os.hideChat",
        "os.hideHtml": "actions/os/portals",
        "id-715": "os.hideHtml",
        "os.hideQRCode": "actions/os/barcodes",
        "id-874": "os.hideQRCode",
        "os.hideTips": "actions/os/portals",
        "id-696": "os.hideTips",
        "os.importAUX": "actions/os/files",
        "id-938": "os.importAUX",
        "os.inSheet": "actions/os/portals",
        "id-1068": "os.inSheet",
        "os.isCollaborative": "actions/os/spaces",
        "id-785": "os.isCollaborative",
        "os.isInDimension": "actions/os/portals",
        "id-950": "os.isInDimension",
        "os.isRecordKey": "actions/os/records",
        "id-1337": "os.isRecordKey",
        "os.joinRoom": "actions/os/rooms",
        "id-1118": "os.joinRoom",
        "os.leaveRoom": "actions/os/rooms",
        "id-1123": "os.leaveRoom",
        "os.listBuiltinTags": "actions/os/app",
        "id-1268": "os.listBuiltinTags",
        "os.listData": "actions/os/records",
        "id-1367": "os.listData",
        "os.listFormAnimations": "actions/os/animations",
        "id-1475": "os.listFormAnimations",
        "os.listInstUpdates": "actions/os/spaces",
        "id-1491": "os.listInstUpdates",
        "os.listUserStudios": "actions/os/records",
        "id-1436": "os.listUserStudios",
        "os.loadInst": "actions/os/spaces",
        "id-930": "os.loadInst",
        "os.log": "actions/os/system",
        "id-1061": "os.log",
        "os.meetCommand": "actions/os/meets",
        "id-1527": "os.meetCommand",
        "os.meetFunction": "actions/os/meets",
        "id-1532": "os.meetFunction",
        "os.mergeInstUpdates": "actions/os/spaces",
        "id-1509": "os.mergeInstUpdates",
        "os.openBarcodeScanner": "actions/os/barcodes",
        "id-877": "os.openBarcodeScanner",
        "os.openCircleWipe": "actions/os/portals",
        "id-1036": "os.openCircleWipe",
        "os.openDevConsole": "actions/os/system",
        "id-1009": "os.openDevConsole",
        "os.openImageClassifier": "actions/os/image-classification",
        "id-892": "os.openImageClassifier",
        "os.openPhotoCamera": "actions/os/camera",
        "id-899": "os.openPhotoCamera",
        "os.openQRCodeScanner": "actions/os/barcodes",
        "id-863": "os.openQRCodeScanner",
        "os.openURL": "actions/os/portals",
        "id-1005": "os.openURL",
        "os.parseBotsFromData": "actions/os/files",
        "id-942": "os.parseBotsFromData",
        "os.playSound": "actions/os/audio",
        "id-1012": "os.playSound",
        "os.raycast": "actions/os/portals",
        "id-1449": "os.raycast",
        "os.raycastFromCamera": "actions/os/portals",
        "id-1444": "os.raycastFromCamera",
        "os.recordData": "actions/os/records",
        "id-1341": "os.recordData",
        "os.recordEvent": "actions/os/records",
        "id-1424": "os.recordEvent",
        "os.recordFile": "actions/os/records",
        "id-1385": "os.recordFile",
        "os.recordManualApprovalData": "actions/os/records",
        "id-1348": "os.recordManualApprovalData",
        "os.registerApp": "actions/os/app",
        "id-1158": "os.registerApp",
        "os.registerTagPrefix": "actions/os/app",
        "id-1153": "os.registerTagPrefix",
        "os.remoteCount": "actions/os/remotes",
        "id-1513": "os.remoteCount",
        "os.remotes": "actions/os/remotes",
        "id-1488": "os.remotes",
        "os.replaceDragBot": "actions/os/portals",
        "id-946": "os.replaceDragBot",
        "os.reportInst": "actions/os/moderation",
        "id-1271": "os.reportInst",
        "os.requestAuthBot": "actions/os/records",
        "id-1274": "os.requestAuthBot",
        "os.requestAuthBotInBackground": "actions/os/records",
        "id-1277": "os.requestAuthBotInBackground",
        "os.requestFullscreenMode": "actions/os/portals",
        "id-705": "os.requestFullscreenMode",
        "os.requestWakeLock": "actions/os/portals",
        "id-826": "os.requestWakeLock",
        "os.revokeInstRole": "actions/os/records",
        "id-1330": "os.revokeInstRole",
        "os.revokeRecordMarkerPermission": "actions/os/records",
        "id-1295": "os.revokeRecordMarkerPermission",
        "os.revokeUserRole": "actions/os/records",
        "id-1315": "os.revokeUserRole",
        "os.run": "actions/os/system",
        "id-775": "os.run",
        "os.setClipboard": "actions/os/clipboard",
        "id-718": "os.setClipboard",
        "os.setRoomOptions": "actions/os/rooms",
        "id-1128": "os.setRoomOptions",
        "os.setRoomTrackOptions": "actions/os/rooms",
        "id-1142": "os.setRoomTrackOptions",
        "os.share": "actions/os/input",
        "id-1028": "os.share",
        "os.showBarcode": "actions/os/barcodes",
        "id-884": "os.showBarcode",
        "os.showConfirm": "actions/os/portals",
        "id-993": "os.showConfirm",
        "os.showHtml": "actions/os/portals",
        "id-711": "os.showHtml",
        "os.showInputForTag": "actions/os/portals",
        "id-977": "os.showInputForTag",
        "os.showJoinCode": "actions/os/barcodes",
        "id-700": "os.showJoinCode",
        "os.showQRCode": "actions/os/barcodes",
        "id-870": "os.showQRCode",
        "os.showUploadAuxFile": "actions/os/files",
        "id-857": "os.showUploadAuxFile",
        "os.showUploadFiles": "actions/os/files",
        "id-860": "os.showUploadFiles",
        "os.sleep": "actions/os/system",
        "id-680": "os.sleep",
        "os.startFormAnimation": "actions/os/animations",
        "id-1464": "os.startFormAnimation",
        "os.stopFormAnimation": "actions/os/animations",
        "id-1470": "os.stopFormAnimation",
        "os.tip": "actions/os/portals",
        "id-689": "os.tip",
        "os.toast": "actions/os/portals",
        "id-684": "os.toast",
        "os.totalRemoteCount": "actions/os/remotes",
        "id-1517": "os.totalRemoteCount",
        "os.unloadInst": "actions/os/spaces",
        "id-934": "os.unloadInst",
        "os.unregisterApp": "actions/os/app",
        "id-1163": "os.unregisterApp",
        "os.version": "actions/os/system",
        "id-779": "os.version",
        "os.vrSupported": "actions/os/xr",
        "id-811": "os.vrSupported",
        "os.agreedUponTime": "actions/os/time",
        "id-911": "os.agreedUponTime",
        "os.deadReckoningTime": "actions/os/time",
        "id-919": "os.deadReckoningTime",
        "os.instLatency": "actions/os/time",
        "id-913": "os.instLatency",
        "os.instTimeOffset": "actions/os/time",
        "id-915": "os.instTimeOffset",
        "os.instTimeOffsetSpread": "actions/os/time",
        "id-917": "os.instTimeOffsetSpread",
        "os.localTime": "actions/os/time",
        "id-909": "os.localTime",
        "remote": "actions/os/event",
        "id-559": "remote",
        "sendRemoteData": "actions/os/event",
        "id-571": "sendRemoteData",
        "removeTags": "actions/data",
        "id-364": "removeTags",
        "renameTag": "actions/data",
        "id-369": "renameTag",
        "setTag": "actions/data",
        "id-316": "setTag",
        "setTagMask": "actions/data",
        "id-322": "setTagMask",
        "subtractMods": "actions/mods",
        "id-380": "subtractMods",
        "superShout": "actions/os/event",
        "id-445": "superShout",
        "uuid": "actions/data",
        "id-582": "uuid",
        "web.get": "actions/web",
        "id-1958": "web.get",
        "web.hook": "actions/web",
        "id-1969": "web.hook",
        "web.post": "actions/web",
        "id-1963": "web.post",
        "configBot": "actions/os/system",
        "id-645": "configBot"
    }
}