{
    "hash": "actions/os",
    "pageTitle": "OS Actions",
    "pageDescription": "OS actions are used to interact with the player's current session.",
    "pageSidebarLabel": "OS",
    "contents": [
        {
            "id": 418,
            "order": 9999,
            "name": "configBot",
            "reflection": {
                "id": 418,
                "name": "_configBot",
                "kind": 524288,
                "kindString": "Get signature",
                "flags": {},
                "comment": {
                    "shortText": "Gets the config bot (formerly known as the player bot).\nThis is the bot that represents the player's browser tab.",
                    "text": "It is `tempLocal` and is used to configure various portals.\n",
                    "tags": [
                        {
                            "tag": "example",
                            "paramName": "",
                            "text": "Get the config bot and set a username on it.\nconfigBot.tags.username = \"bob\";\n"
                        },
                        {
                            "tag": "example",
                            "paramName": "",
                            "text": "Open the sheetPortal to \"testDimension\".\nconfigBot.tags.sheetPortal = \"testDimension\";\n"
                        },
                        {
                            "tag": "dochash",
                            "paramName": "",
                            "text": "actions/os"
                        },
                        {
                            "tag": "doctitle",
                            "paramName": "",
                            "text": "OS Actions"
                        },
                        {
                            "tag": "docsidebar",
                            "paramName": "",
                            "text": "OS"
                        },
                        {
                            "tag": "docdescription",
                            "paramName": "",
                            "text": "OS actions are used to interact with the player's current session."
                        },
                        {
                            "tag": "docname",
                            "paramName": "",
                            "text": "configBot"
                        },
                        {
                            "tag": "docgroup",
                            "paramName": "",
                            "text": "01-os\n"
                        }
                    ]
                },
                "type": {
                    "type": "reference",
                    "id": 2734,
                    "name": "Bot"
                }
            },
            "comment": {
                "shortText": "Gets the config bot (formerly known as the player bot).\nThis is the bot that represents the player's browser tab.",
                "text": "It is `tempLocal` and is used to configure various portals.\n",
                "tags": [
                    {
                        "tagName": "example",
                        "paramName": "",
                        "text": "Get the config bot and set a username on it.\nconfigBot.tags.username = \"bob\";\n"
                    },
                    {
                        "tagName": "example",
                        "paramName": "",
                        "text": "Open the sheetPortal to \"testDimension\".\nconfigBot.tags.sheetPortal = \"testDimension\";\n"
                    },
                    {
                        "tagName": "dochash",
                        "paramName": "",
                        "text": "actions/os"
                    },
                    {
                        "tagName": "doctitle",
                        "paramName": "",
                        "text": "OS Actions"
                    },
                    {
                        "tagName": "docsidebar",
                        "paramName": "",
                        "text": "OS"
                    },
                    {
                        "tagName": "docdescription",
                        "paramName": "",
                        "text": "OS actions are used to interact with the player's current session."
                    },
                    {
                        "tagName": "docname",
                        "paramName": "",
                        "text": "configBot"
                    },
                    {
                        "tagName": "docgroup",
                        "paramName": "",
                        "text": "01-os\n"
                    }
                ]
            },
            "group": "01-os"
        },
        {
            "id": 536,
            "order": 9999,
            "name": "os.hideChat",
            "reflection": {
                "id": 536,
                "name": "__type",
                "kind": 4096,
                "kindString": "Call signature",
                "flags": {},
                "comment": {
                    "shortText": "Hides the \"chat bar\" at the top of the screen in CasualOS.",
                    "tags": [
                        {
                            "tag": "example",
                            "paramName": "",
                            "text": "Hide the chat bar.\nos.hideChat();\n"
                        },
                        {
                            "tag": "dochash",
                            "paramName": "",
                            "text": "actions/os"
                        },
                        {
                            "tag": "docname",
                            "paramName": "",
                            "text": "os.hideChat"
                        },
                        {
                            "tag": "docgroup",
                            "paramName": "",
                            "text": "10-chat\n"
                        }
                    ]
                },
                "type": {
                    "type": "reference",
                    "name": "ShowChatBarAction"
                }
            },
            "comment": {
                "shortText": "Hides the \"chat bar\" at the top of the screen in CasualOS.",
                "text": "",
                "tags": [
                    {
                        "tagName": "example",
                        "paramName": "",
                        "text": "Hide the chat bar.\nos.hideChat();\n"
                    },
                    {
                        "tagName": "dochash",
                        "paramName": "",
                        "text": "actions/os"
                    },
                    {
                        "tagName": "docname",
                        "paramName": "",
                        "text": "os.hideChat"
                    },
                    {
                        "tagName": "docgroup",
                        "paramName": "",
                        "text": "10-chat\n"
                    }
                ]
            },
            "group": "10-chat"
        },
        {
            "id": 528,
            "order": 9999,
            "name": "showChat-options",
            "reflection": {
                "id": 528,
                "name": "__type",
                "kind": 4096,
                "kindString": "Call signature",
                "flags": {},
                "comment": {
                    "shortText": "Shows the \"chat bar\" at the top of the screen in CasualOS, optionally using the given text as the placeholder.\nTyping in the chat bar will send [`@onChatTyping`](tags:@onChatTyping) shouts and pressing Enter will send a [`@onChat`](tags:@onChat) shout and clear the chat bar.",
                    "tags": [
                        {
                            "tag": "example",
                            "paramName": "",
                            "text": "Show the chat bar with a placeholder.\nos.showChat({\n    placeholder: \"hello\"\n});\n"
                        },
                        {
                            "tag": "example",
                            "paramName": "",
                            "text": "Show the chat bar with some prefilled text.\nos.showChat({\n    prefill: \"this is prefilled\"\n});\n"
                        },
                        {
                            "tag": "example",
                            "paramName": "",
                            "text": "Show the chat bar with some prefilled text and a placeholder.\nos.showChat({\n    prefill: \"this is prefilled\",\n    placeholder: \"hello\"\n});\n"
                        },
                        {
                            "tag": "example",
                            "paramName": "",
                            "text": "Show the chat bar with a custom placeholder color.\nos.showChat({\n    placeholder: \"hello\",\n    placeholderColor: '#44a471'\n});\n"
                        },
                        {
                            "tag": "example",
                            "paramName": "",
                            "text": "Show the chat bar with a custom background color.\nos.showChat({\n    placeholder: \"hello\",\n    backgroundColor: '#f1abe2'\n});\n"
                        },
                        {
                            "tag": "example",
                            "paramName": "",
                            "text": "Show the chat bar with a custom foreground color.\nos.showChat({\n    placeholder: \"hello\",\n    foregroundColor: '#531234'\n});\n"
                        },
                        {
                            "tag": "dochash",
                            "paramName": "",
                            "text": "actions/os"
                        },
                        {
                            "tag": "docname",
                            "paramName": "",
                            "text": "os.showChat"
                        },
                        {
                            "tag": "docid",
                            "paramName": "",
                            "text": "showChat-options"
                        },
                        {
                            "tag": "docgroup",
                            "paramName": "",
                            "text": "10-chat\n"
                        }
                    ]
                },
                "parameters": [
                    {
                        "id": 529,
                        "name": "options",
                        "kind": 32768,
                        "kindString": "Parameter",
                        "flags": {
                            "isOptional": true
                        },
                        "comment": {
                            "shortText": "the options that the chat bar should use.\n",
                            "tags": []
                        },
                        "type": {
                            "type": "reference",
                            "id": 2579,
                            "name": "ShowChatOptions"
                        }
                    }
                ],
                "type": {
                    "type": "intrinsic",
                    "name": "void"
                }
            },
            "comment": {
                "shortText": "Shows the \"chat bar\" at the top of the screen in CasualOS, optionally using the given text as the placeholder.\nTyping in the chat bar will send {@tag @onChatTyping} shouts and pressing Enter will send a {@tag @onChat} shout and clear the chat bar.",
                "text": "",
                "tags": [
                    {
                        "tagName": "example",
                        "paramName": "",
                        "text": "Show the chat bar with a placeholder.\nos.showChat({\n    placeholder: \"hello\"\n});\n"
                    },
                    {
                        "tagName": "example",
                        "paramName": "",
                        "text": "Show the chat bar with some prefilled text.\nos.showChat({\n    prefill: \"this is prefilled\"\n});\n"
                    },
                    {
                        "tagName": "example",
                        "paramName": "",
                        "text": "Show the chat bar with some prefilled text and a placeholder.\nos.showChat({\n    prefill: \"this is prefilled\",\n    placeholder: \"hello\"\n});\n"
                    },
                    {
                        "tagName": "example",
                        "paramName": "",
                        "text": "Show the chat bar with a custom placeholder color.\nos.showChat({\n    placeholder: \"hello\",\n    placeholderColor: '#44a471'\n});\n"
                    },
                    {
                        "tagName": "example",
                        "paramName": "",
                        "text": "Show the chat bar with a custom background color.\nos.showChat({\n    placeholder: \"hello\",\n    backgroundColor: '#f1abe2'\n});\n"
                    },
                    {
                        "tagName": "example",
                        "paramName": "",
                        "text": "Show the chat bar with a custom foreground color.\nos.showChat({\n    placeholder: \"hello\",\n    foregroundColor: '#531234'\n});\n"
                    },
                    {
                        "tagName": "dochash",
                        "paramName": "",
                        "text": "actions/os"
                    },
                    {
                        "tagName": "docname",
                        "paramName": "",
                        "text": "os.showChat"
                    },
                    {
                        "tagName": "docid",
                        "paramName": "",
                        "text": "showChat-options"
                    },
                    {
                        "tagName": "docgroup",
                        "paramName": "",
                        "text": "10-chat\n"
                    }
                ]
            },
            "group": "10-chat"
        },
        {
            "id": 524,
            "order": 9999,
            "name": "showChat-placeholder",
            "reflection": {
                "id": 524,
                "name": "__type",
                "kind": 4096,
                "kindString": "Call signature",
                "flags": {},
                "comment": {
                    "shortText": "Shows the \"chat bar\" at the top of the screen in CasualOS, optionally using the given text as the placeholder.\nTyping in the chat bar will send [`@onChatTyping`](tags:@onChatTyping) shouts and pressing Enter will send a [`@onChat`](tags:@onChat) shout and clear the chat bar.",
                    "tags": [
                        {
                            "tag": "example",
                            "paramName": "",
                            "text": "Show the chat bar.\nos.showChat();\n"
                        },
                        {
                            "tag": "example",
                            "paramName": "",
                            "text": "Show the chat bar with some placeholder text.\nos.showChat(\"hello\");\n"
                        },
                        {
                            "tag": "dochash",
                            "paramName": "",
                            "text": "actions/os"
                        },
                        {
                            "tag": "docname",
                            "paramName": "",
                            "text": "os.showChat"
                        },
                        {
                            "tag": "docid",
                            "paramName": "",
                            "text": "showChat-placeholder"
                        },
                        {
                            "tag": "docgroup",
                            "paramName": "",
                            "text": "10-chat\n"
                        }
                    ]
                },
                "parameters": [
                    {
                        "id": 525,
                        "name": "placeholder",
                        "kind": 32768,
                        "kindString": "Parameter",
                        "flags": {
                            "isOptional": true
                        },
                        "comment": {
                            "shortText": "the text that the chat bar should show as the placeholder.\n",
                            "tags": []
                        },
                        "type": {
                            "type": "intrinsic",
                            "name": "string"
                        }
                    }
                ],
                "type": {
                    "type": "intrinsic",
                    "name": "void"
                }
            },
            "comment": {
                "shortText": "Shows the \"chat bar\" at the top of the screen in CasualOS, optionally using the given text as the placeholder.\nTyping in the chat bar will send {@tag @onChatTyping} shouts and pressing Enter will send a {@tag @onChat} shout and clear the chat bar.",
                "text": "",
                "tags": [
                    {
                        "tagName": "example",
                        "paramName": "",
                        "text": "Show the chat bar.\nos.showChat();\n"
                    },
                    {
                        "tagName": "example",
                        "paramName": "",
                        "text": "Show the chat bar with some placeholder text.\nos.showChat(\"hello\");\n"
                    },
                    {
                        "tagName": "dochash",
                        "paramName": "",
                        "text": "actions/os"
                    },
                    {
                        "tagName": "docname",
                        "paramName": "",
                        "text": "os.showChat"
                    },
                    {
                        "tagName": "docid",
                        "paramName": "",
                        "text": "showChat-placeholder"
                    },
                    {
                        "tagName": "docgroup",
                        "paramName": "",
                        "text": "10-chat\n"
                    }
                ]
            },
            "group": "10-chat"
        },
        {
            "id": 1195,
            "order": 9999,
            "name": "os.convertGeolocationToWhat3Words",
            "reflection": {
                "id": 1195,
                "name": "__type",
                "kind": 4096,
                "kindString": "Call signature",
                "flags": {},
                "comment": {
                    "shortText": "Converts the given geolocation to a [what3words](https://what3words.com/) address. Returns a promise that resolves with the 3 word address.",
                    "tags": [
                        {
                            "tag": "example",
                            "paramName": "",
                            "text": "Get the current geolocation as a 3 word address\nconst location = await os.getGeolocation();\n\nif (location.success) {\n    const address = await os.convertGeolocationToWhat3Words(location);\n    os.toast(address);\n} else {\n    os.tost(\"Could not get geolocation\");\n}\n"
                        },
                        {
                            "tag": "example",
                            "paramName": "",
                            "text": "Get the location of the Amway Grand as a 3 word address\nconst address = await os.convertGeolocationToWhat3Words({\n    latitude: 42.966824756903755,\n    longitude: -85.67309821404483,\n});\nos.toast(address);\n"
                        },
                        {
                            "tag": "dochash",
                            "paramName": "",
                            "text": "actions/os"
                        },
                        {
                            "tag": "docname",
                            "paramName": "",
                            "text": "os.convertGeolocationToWhat3Words"
                        },
                        {
                            "tag": "docgroup",
                            "paramName": "",
                            "text": "10-geolocation\n"
                        }
                    ]
                },
                "parameters": [
                    {
                        "id": 1196,
                        "name": "location",
                        "kind": 32768,
                        "kindString": "Parameter",
                        "flags": {},
                        "comment": {
                            "shortText": "The latitude and longitude that should be converted to a 3 word address.\n",
                            "tags": []
                        },
                        "type": {
                            "type": "reference",
                            "id": 2555,
                            "name": "ConvertGeolocationToWhat3WordsOptions"
                        }
                    }
                ],
                "type": {
                    "type": "reference",
                    "typeArguments": [
                        {
                            "type": "intrinsic",
                            "name": "string"
                        }
                    ],
                    "qualifiedName": "Promise",
                    "package": "typescript",
                    "name": "Promise"
                }
            },
            "comment": {
                "shortText": "Converts the given geolocation to a [what3words](https://what3words.com/) address. Returns a promise that resolves with the 3 word address.",
                "text": "",
                "tags": [
                    {
                        "tagName": "example",
                        "paramName": "",
                        "text": "Get the current geolocation as a 3 word address\nconst location = await os.getGeolocation();\n\nif (location.success) {\n    const address = await os.convertGeolocationToWhat3Words(location);\n    os.toast(address);\n} else {\n    os.tost(\"Could not get geolocation\");\n}\n"
                    },
                    {
                        "tagName": "example",
                        "paramName": "",
                        "text": "Get the location of the Amway Grand as a 3 word address\nconst address = await os.convertGeolocationToWhat3Words({\n    latitude: 42.966824756903755,\n    longitude: -85.67309821404483,\n});\nos.toast(address);\n"
                    },
                    {
                        "tagName": "dochash",
                        "paramName": "",
                        "text": "actions/os"
                    },
                    {
                        "tagName": "docname",
                        "paramName": "",
                        "text": "os.convertGeolocationToWhat3Words"
                    },
                    {
                        "tagName": "docgroup",
                        "paramName": "",
                        "text": "10-geolocation\n"
                    }
                ]
            },
            "group": "10-geolocation"
        },
        {
            "id": 830,
            "order": 9999,
            "name": "os.getGeolocation",
            "reflection": {
                "id": 830,
                "name": "__type",
                "kind": 4096,
                "kindString": "Call signature",
                "flags": {},
                "comment": {
                    "shortText": "Gets the geographic location that the current device is at in the world.",
                    "text": "Returns a promise that resolves with the location.\n",
                    "tags": [
                        {
                            "tag": "example",
                            "paramName": "",
                            "text": "Get the current geolocation.\nconst location = await os.getGeolocation();\n\nif (location.success) {\n    os.toast(`You are at (${location.latitude}, ${location.longitude})`);\n} else {\n    os.toast(location.errorMessage);\n}\n"
                        },
                        {
                            "tag": "dochash",
                            "paramName": "",
                            "text": "actions/os"
                        },
                        {
                            "tag": "docname",
                            "paramName": "",
                            "text": "os.getGeolocation"
                        },
                        {
                            "tag": "docgroup",
                            "paramName": "",
                            "text": "10-geolocation\n"
                        }
                    ]
                },
                "type": {
                    "type": "reference",
                    "typeArguments": [
                        {
                            "type": "reference",
                            "id": 2540,
                            "name": "Geolocation"
                        }
                    ],
                    "qualifiedName": "Promise",
                    "package": "typescript",
                    "name": "Promise"
                }
            },
            "comment": {
                "shortText": "Gets the geographic location that the current device is at in the world.",
                "text": "Returns a promise that resolves with the location.\n",
                "tags": [
                    {
                        "tagName": "example",
                        "paramName": "",
                        "text": "Get the current geolocation.\nconst location = await os.getGeolocation();\n\nif (location.success) {\n    os.toast(`You are at (${location.latitude}, ${location.longitude})`);\n} else {\n    os.toast(location.errorMessage);\n}\n"
                    },
                    {
                        "tagName": "dochash",
                        "paramName": "",
                        "text": "actions/os"
                    },
                    {
                        "tagName": "docname",
                        "paramName": "",
                        "text": "os.getGeolocation"
                    },
                    {
                        "tagName": "docgroup",
                        "paramName": "",
                        "text": "10-geolocation\n"
                    }
                ]
            },
            "group": "10-geolocation"
        },
        {
            "id": 479,
            "order": 9999,
            "name": "os.hideHtml",
            "reflection": {
                "id": 479,
                "name": "__type",
                "kind": 4096,
                "kindString": "Call signature",
                "flags": {},
                "comment": {
                    "shortText": "Closes the HTML popup modal.",
                    "tags": [
                        {
                            "tag": "example",
                            "paramName": "",
                            "text": "Hide the HTML popup.\nos.hideHtml();\n"
                        },
                        {
                            "tag": "dochash",
                            "paramName": "",
                            "text": "actions/os"
                        },
                        {
                            "tag": "docname",
                            "paramName": "",
                            "text": "os.hideHtml"
                        },
                        {
                            "tag": "docgroup",
                            "paramName": "",
                            "text": "10-html\n"
                        }
                    ]
                },
                "type": {
                    "type": "reference",
                    "name": "HideHtmlAction"
                }
            },
            "comment": {
                "shortText": "Closes the HTML popup modal.",
                "text": "",
                "tags": [
                    {
                        "tagName": "example",
                        "paramName": "",
                        "text": "Hide the HTML popup.\nos.hideHtml();\n"
                    },
                    {
                        "tagName": "dochash",
                        "paramName": "",
                        "text": "actions/os"
                    },
                    {
                        "tagName": "docname",
                        "paramName": "",
                        "text": "os.hideHtml"
                    },
                    {
                        "tagName": "docgroup",
                        "paramName": "",
                        "text": "10-html\n"
                    }
                ]
            },
            "group": "10-html"
        },
        {
            "id": 475,
            "order": 9999,
            "name": "os.showHtml",
            "reflection": {
                "id": 475,
                "name": "__type",
                "kind": 4096,
                "kindString": "Call signature",
                "flags": {},
                "comment": {
                    "shortText": "Shows some HTML to the player in a popup modal. This can be useful for loading a separate webpage or providing some formatted text.",
                    "tags": [
                        {
                            "tag": "example",
                            "paramName": "",
                            "text": "Show a header with some text.\nos.showHtml(`\n  <h1>This is some text!</h1>\n`);\n"
                        },
                        {
                            "tag": "example",
                            "paramName": "",
                            "text": "Show a YouTube video.\nos.showHtml(`\n  <iframe\n      width=\"560\"\n      height=\"315\"\n      src=\"https://www.youtube.com/embed/BHACKCNDMW8\"\n      frameborder=\"0\"\n      allow=\"accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture\"\n      allowfullscreen>\n  </iframe>\n`);\n"
                        },
                        {
                            "tag": "dochash",
                            "paramName": "",
                            "text": "actions/os"
                        },
                        {
                            "tag": "docname",
                            "paramName": "",
                            "text": "os.showHtml"
                        },
                        {
                            "tag": "docgroup",
                            "paramName": "",
                            "text": "10-html\n"
                        }
                    ]
                },
                "parameters": [
                    {
                        "id": 476,
                        "name": "html",
                        "kind": 32768,
                        "kindString": "Parameter",
                        "flags": {},
                        "comment": {
                            "shortText": "the HTML that should be shown to the user.\n",
                            "tags": []
                        },
                        "type": {
                            "type": "intrinsic",
                            "name": "string"
                        }
                    }
                ],
                "type": {
                    "type": "reference",
                    "name": "ShowHtmlAction"
                }
            },
            "comment": {
                "shortText": "Shows some HTML to the player in a popup modal. This can be useful for loading a separate webpage or providing some formatted text.",
                "text": "",
                "tags": [
                    {
                        "tagName": "example",
                        "paramName": "",
                        "text": "Show a header with some text.\nos.showHtml(`\n  <h1>This is some text!</h1>\n`);\n"
                    },
                    {
                        "tagName": "example",
                        "paramName": "",
                        "text": "Show a YouTube video.\nos.showHtml(`\n  <iframe\n      width=\"560\"\n      height=\"315\"\n      src=\"https://www.youtube.com/embed/BHACKCNDMW8\"\n      frameborder=\"0\"\n      allow=\"accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture\"\n      allowfullscreen>\n  </iframe>\n`);\n"
                    },
                    {
                        "tagName": "dochash",
                        "paramName": "",
                        "text": "actions/os"
                    },
                    {
                        "tagName": "docname",
                        "paramName": "",
                        "text": "os.showHtml"
                    },
                    {
                        "tagName": "docgroup",
                        "paramName": "",
                        "text": "10-html\n"
                    }
                ]
            },
            "group": "10-html"
        },
        {
            "id": 691,
            "order": 9999,
            "name": "os.loadInst",
            "reflection": {
                "id": 691,
                "name": "__type",
                "kind": 4096,
                "kindString": "Call signature",
                "flags": {},
                "comment": {
                    "shortText": "Loads the given inst into the current browser tab. When the inst is loaded, the [`@onInstJoined`](tags:@onInstJoined) shout will be triggered.",
                    "text": "Note that separate instances cannot interact directly. They must instead interact via super shouts\n",
                    "tags": [
                        {
                            "tag": "example",
                            "paramName": "",
                            "text": "Load the \"fun\" inst.\nos.loadInst(\"fun\");\n"
                        },
                        {
                            "tag": "dochash",
                            "paramName": "",
                            "text": "actions/os"
                        },
                        {
                            "tag": "docname",
                            "paramName": "",
                            "text": "os.loadInst"
                        },
                        {
                            "tag": "docgroup",
                            "paramName": "",
                            "text": "10-load-inst\n"
                        }
                    ]
                },
                "parameters": [
                    {
                        "id": 692,
                        "name": "id",
                        "kind": 32768,
                        "kindString": "Parameter",
                        "flags": {},
                        "comment": {
                            "shortText": "the ID of the inst to load.\n",
                            "tags": []
                        },
                        "type": {
                            "type": "intrinsic",
                            "name": "string"
                        }
                    }
                ],
                "type": {
                    "type": "reference",
                    "name": "LoadServerAction"
                }
            },
            "comment": {
                "shortText": "Loads the given inst into the current browser tab. When the inst is loaded, the {@tag @onInstJoined} shout will be triggered.",
                "text": "Note that separate instances cannot interact directly. They must instead interact via super shouts\n",
                "tags": [
                    {
                        "tagName": "example",
                        "paramName": "",
                        "text": "Load the \"fun\" inst.\nos.loadInst(\"fun\");\n"
                    },
                    {
                        "tagName": "dochash",
                        "paramName": "",
                        "text": "actions/os"
                    },
                    {
                        "tagName": "docname",
                        "paramName": "",
                        "text": "os.loadInst"
                    },
                    {
                        "tagName": "docgroup",
                        "paramName": "",
                        "text": "10-load-inst\n"
                    }
                ]
            },
            "group": "10-load-inst"
        },
        {
            "id": 695,
            "order": 9999,
            "name": "os.unloadInst",
            "reflection": {
                "id": 695,
                "name": "__type",
                "kind": 4096,
                "kindString": "Call signature",
                "flags": {},
                "comment": {
                    "shortText": "Unloads the given inst from the current browser tab. When the inst is unloaded, the [`@onInstLeave`](tags:@onInstLeave) shout will be triggered.",
                    "tags": [
                        {
                            "tag": "example",
                            "paramName": "",
                            "text": "Unload the \"fun\" inst.\nos.unloadInst(\"fun\");\n"
                        },
                        {
                            "tag": "dochash",
                            "paramName": "",
                            "text": "actions/os"
                        },
                        {
                            "tag": "docname",
                            "paramName": "",
                            "text": "os.unloadInst"
                        },
                        {
                            "tag": "docgroup",
                            "paramName": "",
                            "text": "10-load-inst\n"
                        }
                    ]
                },
                "parameters": [
                    {
                        "id": 696,
                        "name": "id",
                        "kind": 32768,
                        "kindString": "Parameter",
                        "flags": {},
                        "comment": {
                            "shortText": "the name of the inst to unload.\n",
                            "tags": []
                        },
                        "type": {
                            "type": "intrinsic",
                            "name": "string"
                        }
                    }
                ],
                "type": {
                    "type": "reference",
                    "name": "UnloadServerAction"
                }
            },
            "comment": {
                "shortText": "Unloads the given inst from the current browser tab. When the inst is unloaded, the {@tag @onInstLeave} shout will be triggered.",
                "text": "",
                "tags": [
                    {
                        "tagName": "example",
                        "paramName": "",
                        "text": "Unload the \"fun\" inst.\nos.unloadInst(\"fun\");\n"
                    },
                    {
                        "tagName": "dochash",
                        "paramName": "",
                        "text": "actions/os"
                    },
                    {
                        "tagName": "docname",
                        "paramName": "",
                        "text": "os.unloadInst"
                    },
                    {
                        "tagName": "docgroup",
                        "paramName": "",
                        "text": "10-load-inst\n"
                    }
                ]
            },
            "group": "10-load-inst"
        },
        {
            "id": 546,
            "order": 9999,
            "name": "os.device",
            "reflection": {
                "id": 546,
                "name": "__type",
                "kind": 4096,
                "kindString": "Call signature",
                "flags": {},
                "comment": {
                    "shortText": "Gets information about the device that the player is using.",
                    "tags": [
                        {
                            "tag": "example",
                            "paramName": "",
                            "text": "Get the device info and popup a message with it.\nconst info = os.device();\nos.toast(info);\n"
                        },
                        {
                            "tag": "dochash",
                            "paramName": "",
                            "text": "actions/os"
                        },
                        {
                            "tag": "docname",
                            "paramName": "",
                            "text": "os.device"
                        },
                        {
                            "tag": "docgroup",
                            "paramName": "",
                            "text": "10-os-info\n"
                        }
                    ]
                },
                "type": {
                    "type": "reference",
                    "id": 2898,
                    "name": "CasualOSDevice"
                }
            },
            "comment": {
                "shortText": "Gets information about the device that the player is using.",
                "text": "",
                "tags": [
                    {
                        "tagName": "example",
                        "paramName": "",
                        "text": "Get the device info and popup a message with it.\nconst info = os.device();\nos.toast(info);\n"
                    },
                    {
                        "tagName": "dochash",
                        "paramName": "",
                        "text": "actions/os"
                    },
                    {
                        "tagName": "docname",
                        "paramName": "",
                        "text": "os.device"
                    },
                    {
                        "tagName": "docgroup",
                        "paramName": "",
                        "text": "10-os-info\n"
                    }
                ]
            },
            "group": "10-os-info"
        },
        {
            "id": 549,
            "order": 9999,
            "name": "os.isCollaborative",
            "reflection": {
                "id": 549,
                "name": "__type",
                "kind": 4096,
                "kindString": "Call signature",
                "flags": {},
                "comment": {
                    "shortText": "Gets whether the current session was loaded with collaborative features enabled.",
                    "text": "When `true`, CasualOS will attempt to sync the `shared` (including `tempShared` and `remoteTempShared`) spaces with other players.\nWhen `false`, CasualOS will treat all the shared spaces like they are all `tempLocal`.\n",
                    "tags": [
                        {
                            "tag": "example",
                            "paramName": "",
                            "text": "Toast whether the current session is collaborative.\nconst isCollaborative = os.isCollaborative();\nos.toast(isCollaborative ? \"We are collaborative!\" : \"We are not collaborative!\");\n"
                        },
                        {
                            "tag": "dochash",
                            "paramName": "",
                            "text": "actions/os"
                        },
                        {
                            "tag": "docname",
                            "paramName": "",
                            "text": "os.isCollaborative"
                        },
                        {
                            "tag": "docgroup",
                            "paramName": "",
                            "text": "10-os-info\n"
                        }
                    ]
                },
                "type": {
                    "type": "intrinsic",
                    "name": "boolean"
                }
            },
            "comment": {
                "shortText": "Gets whether the current session was loaded with collaborative features enabled.",
                "text": "When `true`, CasualOS will attempt to sync the `shared` (including `tempShared` and `remoteTempShared`) spaces with other players.\nWhen `false`, CasualOS will treat all the shared spaces like they are all `tempLocal`.\n",
                "tags": [
                    {
                        "tagName": "example",
                        "paramName": "",
                        "text": "Toast whether the current session is collaborative.\nconst isCollaborative = os.isCollaborative();\nos.toast(isCollaborative ? \"We are collaborative!\" : \"We are not collaborative!\");\n"
                    },
                    {
                        "tagName": "dochash",
                        "paramName": "",
                        "text": "actions/os"
                    },
                    {
                        "tagName": "docname",
                        "paramName": "",
                        "text": "os.isCollaborative"
                    },
                    {
                        "tagName": "docgroup",
                        "paramName": "",
                        "text": "10-os-info\n"
                    }
                ]
            },
            "group": "10-os-info"
        },
        {
            "id": 543,
            "order": 9999,
            "name": "os.version",
            "reflection": {
                "id": 543,
                "name": "__type",
                "kind": 4096,
                "kindString": "Call signature",
                "flags": {},
                "comment": {
                    "shortText": "Gets information about the version of CasualOS.",
                    "tags": [
                        {
                            "tag": "example",
                            "paramName": "",
                            "text": "Get the current version and popup a message with it.\nconst info = os.version();\nos.toast(info.version);\n"
                        },
                        {
                            "tag": "example",
                            "paramName": "",
                            "text": "Check whether the current inst is for playing AUXes.\nconst info = os.version();\nconst isPlayer = info.playerMode === \"player\";\nos.toast('Is Player: ' + isPlayer);\n"
                        },
                        {
                            "tag": "dochash",
                            "paramName": "",
                            "text": "actions/os"
                        },
                        {
                            "tag": "docname",
                            "paramName": "",
                            "text": "os.version"
                        },
                        {
                            "tag": "docgroup",
                            "paramName": "",
                            "text": "10-os-info\n"
                        }
                    ]
                },
                "type": {
                    "type": "reference",
                    "id": 2890,
                    "name": "CasualOSVersion"
                }
            },
            "comment": {
                "shortText": "Gets information about the version of CasualOS.",
                "text": "",
                "tags": [
                    {
                        "tagName": "example",
                        "paramName": "",
                        "text": "Get the current version and popup a message with it.\nconst info = os.version();\nos.toast(info.version);\n"
                    },
                    {
                        "tagName": "example",
                        "paramName": "",
                        "text": "Check whether the current inst is for playing AUXes.\nconst info = os.version();\nconst isPlayer = info.playerMode === \"player\";\nos.toast('Is Player: ' + isPlayer);\n"
                    },
                    {
                        "tagName": "dochash",
                        "paramName": "",
                        "text": "actions/os"
                    },
                    {
                        "tagName": "docname",
                        "paramName": "",
                        "text": "os.version"
                    },
                    {
                        "tagName": "docgroup",
                        "paramName": "",
                        "text": "10-os-info\n"
                    }
                ]
            },
            "group": "10-os-info"
        },
        {
            "id": 1283,
            "order": 9999,
            "name": "os.instStatuses",
            "reflection": {
                "id": 1283,
                "name": "__type",
                "kind": 4096,
                "kindString": "Call signature",
                "flags": {},
                "comment": {
                    "shortText": "Gets the list of instances that are stored on the server along with the last time that they were updated. Returns a promise that resolves with the list of instances.",
                    "text": "The resolved list is sorted by the most recently updated first and the least recently updated last.\n",
                    "tags": [
                        {
                            "tag": "example",
                            "paramName": "",
                            "text": "Get the list of instances on the server along with their status.\nconst instances = await os.instStatuses();\nos.toast(\"Instances \" + getJSON(instances));\n"
                        },
                        {
                            "tag": "dochash",
                            "paramName": "",
                            "text": "actions/os"
                        },
                        {
                            "tag": "docname",
                            "paramName": "",
                            "text": "os.instStatuses"
                        },
                        {
                            "tag": "docgroup",
                            "paramName": "",
                            "text": "10-remotes\n"
                        }
                    ]
                },
                "type": {
                    "type": "reference",
                    "typeArguments": [
                        {
                            "type": "array",
                            "elementType": {
                                "type": "reflection",
                                "declaration": {
                                    "id": 1284,
                                    "name": "__type",
                                    "kind": 65536,
                                    "kindString": "Type literal",
                                    "flags": {},
                                    "children": [
                                        {
                                            "id": 1285,
                                            "name": "inst",
                                            "kind": 1024,
                                            "kindString": "Property",
                                            "flags": {},
                                            "sources": [
                                                {
                                                    "fileName": "src/aux-common/runtime/AuxLibrary.ts",
                                                    "line": 10445,
                                                    "character": 12
                                                }
                                            ],
                                            "type": {
                                                "type": "intrinsic",
                                                "name": "string"
                                            }
                                        },
                                        {
                                            "id": 1286,
                                            "name": "lastUpdateTime",
                                            "kind": 1024,
                                            "kindString": "Property",
                                            "flags": {},
                                            "sources": [
                                                {
                                                    "fileName": "src/aux-common/runtime/AuxLibrary.ts",
                                                    "line": 10446,
                                                    "character": 12
                                                }
                                            ],
                                            "type": {
                                                "type": "reference",
                                                "qualifiedName": "Date",
                                                "package": "typescript",
                                                "name": "Date"
                                            }
                                        }
                                    ],
                                    "groups": [
                                        {
                                            "title": "Properties",
                                            "kind": 1024,
                                            "children": [
                                                1285,
                                                1286
                                            ]
                                        }
                                    ],
                                    "sources": [
                                        {
                                            "fileName": "src/aux-common/runtime/AuxLibrary.ts",
                                            "line": 10444,
                                            "character": 8
                                        }
                                    ]
                                }
                            }
                        }
                    ],
                    "qualifiedName": "Promise",
                    "package": "typescript",
                    "name": "Promise"
                }
            },
            "comment": {
                "shortText": "Gets the list of instances that are stored on the server along with the last time that they were updated. Returns a promise that resolves with the list of instances.",
                "text": "The resolved list is sorted by the most recently updated first and the least recently updated last.\n",
                "tags": [
                    {
                        "tagName": "example",
                        "paramName": "",
                        "text": "Get the list of instances on the server along with their status.\nconst instances = await os.instStatuses();\nos.toast(\"Instances \" + getJSON(instances));\n"
                    },
                    {
                        "tagName": "dochash",
                        "paramName": "",
                        "text": "actions/os"
                    },
                    {
                        "tagName": "docname",
                        "paramName": "",
                        "text": "os.instStatuses"
                    },
                    {
                        "tagName": "docgroup",
                        "paramName": "",
                        "text": "10-remotes\n"
                    }
                ]
            },
            "group": "10-remotes"
        },
        {
            "id": 1273,
            "order": 9999,
            "name": "os.instances",
            "reflection": {
                "id": 1273,
                "name": "__type",
                "kind": 4096,
                "kindString": "Call signature",
                "flags": {},
                "comment": {
                    "shortText": "Gets the list of instances that are stored on the server. Returns a promise that resolves with the list of inst names.",
                    "tags": [
                        {
                            "tag": "example",
                            "paramName": "",
                            "text": "Get the list of instances on the server.\nconst instances = await os.instances();\nos.toast(\"Instances \" + instances.join(','));\n"
                        },
                        {
                            "tag": "dochash",
                            "paramName": "",
                            "text": "actions/os"
                        },
                        {
                            "tag": "docname",
                            "paramName": "",
                            "text": "os.instances"
                        },
                        {
                            "tag": "docgroup",
                            "paramName": "",
                            "text": "10-remotes\n"
                        }
                    ]
                },
                "type": {
                    "type": "reference",
                    "typeArguments": [
                        {
                            "type": "array",
                            "elementType": {
                                "type": "intrinsic",
                                "name": "string"
                            }
                        }
                    ],
                    "qualifiedName": "Promise",
                    "package": "typescript",
                    "name": "Promise"
                }
            },
            "comment": {
                "shortText": "Gets the list of instances that are stored on the server. Returns a promise that resolves with the list of inst names.",
                "text": "",
                "tags": [
                    {
                        "tagName": "example",
                        "paramName": "",
                        "text": "Get the list of instances on the server.\nconst instances = await os.instances();\nos.toast(\"Instances \" + instances.join(','));\n"
                    },
                    {
                        "tagName": "dochash",
                        "paramName": "",
                        "text": "actions/os"
                    },
                    {
                        "tagName": "docname",
                        "paramName": "",
                        "text": "os.instances"
                    },
                    {
                        "tagName": "docgroup",
                        "paramName": "",
                        "text": "10-remotes\n"
                    }
                ]
            },
            "group": "10-remotes"
        },
        {
            "id": 1276,
            "order": 9999,
            "name": "os.remoteCount",
            "reflection": {
                "id": 1276,
                "name": "__type",
                "kind": 4096,
                "kindString": "Call signature",
                "flags": {},
                "comment": {
                    "shortText": "Gets the number of remotes that are viewing the current inst.\nOptionally takes a parameter which is the inst that the number of remotes should be retrieved for.\nIf omitted, then the current inst will be checked. Returns a promise that resolves with the number of active remotes.",
                    "tags": [
                        {
                            "tag": "example",
                            "paramName": "",
                            "text": "Get the number of remotes in the current inst.\nconst numberOfRemotes = await os.remoteCount();\nos.toast(\"Number of Remotes: \" + numberOfRemotes);\n"
                        },
                        {
                            "tag": "example",
                            "paramName": "",
                            "text": "Get the number of remotes in the `test` inst.\nconst numberOfRemotes = await os.remoteCount('test');\nos.toast(\"Number of Remotes: \" + numberOfRemotes);\n"
                        },
                        {
                            "tag": "dochash",
                            "paramName": "",
                            "text": "actions/os"
                        },
                        {
                            "tag": "docname",
                            "paramName": "",
                            "text": "os.remoteCount"
                        },
                        {
                            "tag": "docgroup",
                            "paramName": "",
                            "text": "10-remotes\n"
                        }
                    ]
                },
                "parameters": [
                    {
                        "id": 1277,
                        "name": "inst",
                        "kind": 32768,
                        "kindString": "Parameter",
                        "flags": {
                            "isOptional": true
                        },
                        "comment": {
                            "shortText": "the name of the inst that the number of remotes should be retrieved for. If not specified, then the current inst current inst will be used.\n",
                            "tags": []
                        },
                        "type": {
                            "type": "intrinsic",
                            "name": "string"
                        }
                    }
                ],
                "type": {
                    "type": "reference",
                    "typeArguments": [
                        {
                            "type": "intrinsic",
                            "name": "number"
                        }
                    ],
                    "qualifiedName": "Promise",
                    "package": "typescript",
                    "name": "Promise"
                }
            },
            "comment": {
                "shortText": "Gets the number of remotes that are viewing the current inst.\nOptionally takes a parameter which is the inst that the number of remotes should be retrieved for.\nIf omitted, then the current inst will be checked. Returns a promise that resolves with the number of active remotes.",
                "text": "",
                "tags": [
                    {
                        "tagName": "example",
                        "paramName": "",
                        "text": "Get the number of remotes in the current inst.\nconst numberOfRemotes = await os.remoteCount();\nos.toast(\"Number of Remotes: \" + numberOfRemotes);\n"
                    },
                    {
                        "tagName": "example",
                        "paramName": "",
                        "text": "Get the number of remotes in the `test` inst.\nconst numberOfRemotes = await os.remoteCount('test');\nos.toast(\"Number of Remotes: \" + numberOfRemotes);\n"
                    },
                    {
                        "tagName": "dochash",
                        "paramName": "",
                        "text": "actions/os"
                    },
                    {
                        "tagName": "docname",
                        "paramName": "",
                        "text": "os.remoteCount"
                    },
                    {
                        "tagName": "docgroup",
                        "paramName": "",
                        "text": "10-remotes\n"
                    }
                ]
            },
            "group": "10-remotes"
        },
        {
            "id": 1248,
            "order": 9999,
            "name": "os.remotes",
            "reflection": {
                "id": 1248,
                "name": "__type",
                "kind": 4096,
                "kindString": "Call signature",
                "flags": {},
                "comment": {
                    "shortText": "Gets the list of remote IDs that are connected to the current inst. Returns a promise that resolves with the list of remote IDs.",
                    "text": "The resolved list will always have at least one value that represents the current remote.\n",
                    "tags": [
                        {
                            "tag": "example",
                            "paramName": "",
                            "text": "Get the list of remote IDs.\nconst remotes = await os.remotes();\nos.toast(\"Remotes \" + remotes.join(','));\n"
                        },
                        {
                            "tag": "dochash",
                            "paramName": "",
                            "text": "actions/os"
                        },
                        {
                            "tag": "docname",
                            "paramName": "",
                            "text": "os.remotes"
                        },
                        {
                            "tag": "docgroup",
                            "paramName": "",
                            "text": "10-remotes\n"
                        }
                    ]
                },
                "type": {
                    "type": "reference",
                    "typeArguments": [
                        {
                            "type": "array",
                            "elementType": {
                                "type": "intrinsic",
                                "name": "string"
                            }
                        }
                    ],
                    "qualifiedName": "Promise",
                    "package": "typescript",
                    "name": "Promise"
                }
            },
            "comment": {
                "shortText": "Gets the list of remote IDs that are connected to the current inst. Returns a promise that resolves with the list of remote IDs.",
                "text": "The resolved list will always have at least one value that represents the current remote.\n",
                "tags": [
                    {
                        "tagName": "example",
                        "paramName": "",
                        "text": "Get the list of remote IDs.\nconst remotes = await os.remotes();\nos.toast(\"Remotes \" + remotes.join(','));\n"
                    },
                    {
                        "tagName": "dochash",
                        "paramName": "",
                        "text": "actions/os"
                    },
                    {
                        "tagName": "docname",
                        "paramName": "",
                        "text": "os.remotes"
                    },
                    {
                        "tagName": "docgroup",
                        "paramName": "",
                        "text": "10-remotes\n"
                    }
                ]
            },
            "group": "10-remotes"
        },
        {
            "id": 1280,
            "order": 9999,
            "name": "os.totalRemoteCount",
            "reflection": {
                "id": 1280,
                "name": "__type",
                "kind": 4096,
                "kindString": "Call signature",
                "flags": {},
                "comment": {
                    "shortText": "Gets the number of devices that are connected to the server. Returns a promise that resolves with the number of active devices.",
                    "tags": [
                        {
                            "tag": "example",
                            "paramName": "",
                            "text": "Get the number of devices on the server.\nconst numberOfDevices = await os.totalRemoteCount();\nos.toast(\"Number of Devices: \" + numberOfDevices);\n"
                        },
                        {
                            "tag": "dochash",
                            "paramName": "",
                            "text": "actions/os"
                        },
                        {
                            "tag": "docname",
                            "paramName": "",
                            "text": "os.totalRemoteCount"
                        },
                        {
                            "tag": "docgroup",
                            "paramName": "",
                            "text": "10-remotes\n"
                        }
                    ]
                },
                "type": {
                    "type": "reference",
                    "typeArguments": [
                        {
                            "type": "intrinsic",
                            "name": "number"
                        }
                    ],
                    "qualifiedName": "Promise",
                    "package": "typescript",
                    "name": "Promise"
                }
            },
            "comment": {
                "shortText": "Gets the number of devices that are connected to the server. Returns a promise that resolves with the number of active devices.",
                "text": "",
                "tags": [
                    {
                        "tagName": "example",
                        "paramName": "",
                        "text": "Get the number of devices on the server.\nconst numberOfDevices = await os.totalRemoteCount();\nos.toast(\"Number of Devices: \" + numberOfDevices);\n"
                    },
                    {
                        "tagName": "dochash",
                        "paramName": "",
                        "text": "actions/os"
                    },
                    {
                        "tagName": "docname",
                        "paramName": "",
                        "text": "os.totalRemoteCount"
                    },
                    {
                        "tagName": "docgroup",
                        "paramName": "",
                        "text": "10-remotes\n"
                    }
                ]
            },
            "group": "10-remotes"
        },
        {
            "id": 1262,
            "order": 9999,
            "name": "os.applyUpdatesToInst",
            "reflection": {
                "id": 1262,
                "name": "__type",
                "kind": 4096,
                "kindString": "Call signature",
                "flags": {},
                "comment": {
                    "shortText": "Applies the given updates to the current inst. Returns a promise that resolves once the updates have been applied.",
                    "text": "Note that you can call this function with the same update multiple times and you will end up with only one version of the bots saved in the update. Additionally, future changes to the bots will be preserved even if the update is applied again.\n\nThis feature makes inst updates useful when you want to ensure that an experience starts in an initial state but also able to change over time.\n",
                    "tags": [
                        {
                            "tag": "example",
                            "paramName": "",
                            "text": "Apply an update that was saved to a tag\nawait os.applyUpdatesToInst([ tags.savedUpdate ]);\n"
                        },
                        {
                            "tag": "dochash",
                            "paramName": "",
                            "text": "actions/os"
                        },
                        {
                            "tag": "docname",
                            "paramName": "",
                            "text": "os.applyUpdatesToInst"
                        },
                        {
                            "tag": "docgroup",
                            "paramName": "",
                            "text": "10-updates\n"
                        }
                    ]
                },
                "parameters": [
                    {
                        "id": 1263,
                        "name": "updates",
                        "kind": 32768,
                        "kindString": "Parameter",
                        "flags": {},
                        "comment": {
                            "shortText": "the list of updates that should be applied to this inst.\n",
                            "tags": []
                        },
                        "type": {
                            "type": "array",
                            "elementType": {
                                "type": "reference",
                                "id": 2903,
                                "name": "InstUpdate"
                            }
                        }
                    }
                ],
                "type": {
                    "type": "reference",
                    "typeArguments": [
                        {
                            "type": "intrinsic",
                            "name": "void"
                        }
                    ],
                    "qualifiedName": "Promise",
                    "package": "typescript",
                    "name": "Promise"
                }
            },
            "comment": {
                "shortText": "Applies the given updates to the current inst. Returns a promise that resolves once the updates have been applied.",
                "text": "Note that you can call this function with the same update multiple times and you will end up with only one version of the bots saved in the update. Additionally, future changes to the bots will be preserved even if the update is applied again.\n\nThis feature makes inst updates useful when you want to ensure that an experience starts in an initial state but also able to change over time.\n",
                "tags": [
                    {
                        "tagName": "example",
                        "paramName": "",
                        "text": "Apply an update that was saved to a tag\nawait os.applyUpdatesToInst([ tags.savedUpdate ]);\n"
                    },
                    {
                        "tagName": "dochash",
                        "paramName": "",
                        "text": "actions/os"
                    },
                    {
                        "tagName": "docname",
                        "paramName": "",
                        "text": "os.applyUpdatesToInst"
                    },
                    {
                        "tagName": "docgroup",
                        "paramName": "",
                        "text": "10-updates\n"
                    }
                ]
            },
            "group": "10-updates"
        },
        {
            "id": 1258,
            "order": 9999,
            "name": "os.createInitializationUpdate",
            "reflection": {
                "id": 1258,
                "name": "__type",
                "kind": 4096,
                "kindString": "Call signature",
                "flags": {},
                "comment": {
                    "shortText": "Creates an inst update that, when applied, ensures the given bots are created on this inst. Returns a promise that resolves with the inst update.",
                    "text": "Note that you can apply the same update multiple times and you will end up with only one version of the bots saved in the update. Additionally, future changes to the bots will be preserved even if the update is applied again.\n\nThis feature makes inst updates useful when you want to ensure that an experience starts in an initial state but also able to change over time.\n\nUnlike [`os.getCurrentInstUpdate()`](ref:os.getCurrentInstUpdate), this function creates an update that is not linked to this inst. This means that applying the update to the inst it was created in will create duplicate bots.\n",
                    "tags": [
                        {
                            "tag": "example",
                            "paramName": "",
                            "text": "Create an update with this bot and save it to a tag\nconst update = await os.createInitializationUpdate([thisBot]);\ntags.savedUpdate = update;\n"
                        },
                        {
                            "tag": "example",
                            "paramName": "",
                            "text": "Create an update with all the bots in the home dimension\nconst update = await os.createInitializationUpdate(getBots(inDimension('home')));\ntags.savedUpdate = update;\n"
                        },
                        {
                            "tag": "dochash",
                            "paramName": "",
                            "text": "actions/os"
                        },
                        {
                            "tag": "docname",
                            "paramName": "",
                            "text": "os.createInitializationUpdate"
                        },
                        {
                            "tag": "docgroup",
                            "paramName": "",
                            "text": "10-updates\n"
                        }
                    ]
                },
                "parameters": [
                    {
                        "id": 1259,
                        "name": "bots",
                        "kind": 32768,
                        "kindString": "Parameter",
                        "flags": {},
                        "comment": {
                            "shortText": "the list of bots that should be included in the update.\n",
                            "tags": []
                        },
                        "type": {
                            "type": "array",
                            "elementType": {
                                "type": "reference",
                                "id": 2734,
                                "name": "Bot"
                            }
                        }
                    }
                ],
                "type": {
                    "type": "reference",
                    "typeArguments": [
                        {
                            "type": "reference",
                            "id": 2903,
                            "name": "InstUpdate"
                        }
                    ],
                    "qualifiedName": "Promise",
                    "package": "typescript",
                    "name": "Promise"
                }
            },
            "comment": {
                "shortText": "Creates an inst update that, when applied, ensures the given bots are created on this inst. Returns a promise that resolves with the inst update.",
                "text": "Note that you can apply the same update multiple times and you will end up with only one version of the bots saved in the update. Additionally, future changes to the bots will be preserved even if the update is applied again.\n\nThis feature makes inst updates useful when you want to ensure that an experience starts in an initial state but also able to change over time.\n\nUnlike {@link os.getCurrentInstUpdate}, this function creates an update that is not linked to this inst. This means that applying the update to the inst it was created in will create duplicate bots.\n",
                "tags": [
                    {
                        "tagName": "example",
                        "paramName": "",
                        "text": "Create an update with this bot and save it to a tag\nconst update = await os.createInitializationUpdate([thisBot]);\ntags.savedUpdate = update;\n"
                    },
                    {
                        "tagName": "example",
                        "paramName": "",
                        "text": "Create an update with all the bots in the home dimension\nconst update = await os.createInitializationUpdate(getBots(inDimension('home')));\ntags.savedUpdate = update;\n"
                    },
                    {
                        "tagName": "dochash",
                        "paramName": "",
                        "text": "actions/os"
                    },
                    {
                        "tagName": "docname",
                        "paramName": "",
                        "text": "os.createInitializationUpdate"
                    },
                    {
                        "tagName": "docgroup",
                        "paramName": "",
                        "text": "10-updates\n"
                    }
                ]
            },
            "group": "10-updates"
        },
        {
            "id": 1266,
            "order": 9999,
            "name": "os.getCurrentInstUpdate",
            "reflection": {
                "id": 1266,
                "name": "__type",
                "kind": 4096,
                "kindString": "Call signature",
                "flags": {},
                "comment": {
                    "shortText": "Retrieves an inst update that represents the current local shared state of the inst. Returns a promise that resolves with the update.",
                    "text": "Note that the inst update only contains bots and tag masks from the `shared` space. Useful for saving the current shared state of the inst so that it can be restored later or transferred to another inst.\n\nUnlike [`os.createInitializationUpdate(bots)`](ref:os.createInitializationUpdate), this function creates an update that is linked to this inst. This means that applying the update to the inst it was created in will not create duplicate bots. It is still possible to apply the update to other insts, but it may create duplicate bots depending on the history of the other inst.\n",
                    "tags": [
                        {
                            "tag": "example",
                            "paramName": "",
                            "text": "Save the current inst state to a local bot\nconst update = await os.getCurrentInstUpdate();\ncreate({\n    space: 'local',\n    backup: true,\n    timestamp: update.timestamp,\n    update: update\n});\n"
                        },
                        {
                            "tag": "example",
                            "paramName": "",
                            "text": "Restore from a local bot\nconst savedUpdates = getBots(bySpace('local'), byTag('backup', true));\nsavedUpdates.sort((a, b) => b.timestamp - a.timestamp);\n\nif (savedUpdates.length > 0) {\n    const update = savedUpdates[0].tags.update;\n    await os.applyUpdatesToInst([update]);\n    os.toast(\"Restored!\");\n}\n"
                        },
                        {
                            "tag": "dochash",
                            "paramName": "",
                            "text": "actions/os"
                        },
                        {
                            "tag": "docname",
                            "paramName": "",
                            "text": "os.getCurrentInstUpdate"
                        },
                        {
                            "tag": "docgroup",
                            "paramName": "",
                            "text": "10-updates\n"
                        }
                    ]
                },
                "type": {
                    "type": "reference",
                    "typeArguments": [
                        {
                            "type": "reference",
                            "id": 2903,
                            "name": "InstUpdate"
                        }
                    ],
                    "qualifiedName": "Promise",
                    "package": "typescript",
                    "name": "Promise"
                }
            },
            "comment": {
                "shortText": "Retrieves an inst update that represents the current local shared state of the inst. Returns a promise that resolves with the update.",
                "text": "Note that the inst update only contains bots and tag masks from the `shared` space. Useful for saving the current shared state of the inst so that it can be restored later or transferred to another inst.\n\nUnlike {@link os.createInitializationUpdate}, this function creates an update that is linked to this inst. This means that applying the update to the inst it was created in will not create duplicate bots. It is still possible to apply the update to other insts, but it may create duplicate bots depending on the history of the other inst.\n",
                "tags": [
                    {
                        "tagName": "example",
                        "paramName": "",
                        "text": "Save the current inst state to a local bot\nconst update = await os.getCurrentInstUpdate();\ncreate({\n    space: 'local',\n    backup: true,\n    timestamp: update.timestamp,\n    update: update\n});\n"
                    },
                    {
                        "tagName": "example",
                        "paramName": "",
                        "text": "Restore from a local bot\nconst savedUpdates = getBots(bySpace('local'), byTag('backup', true));\nsavedUpdates.sort((a, b) => b.timestamp - a.timestamp);\n\nif (savedUpdates.length > 0) {\n    const update = savedUpdates[0].tags.update;\n    await os.applyUpdatesToInst([update]);\n    os.toast(\"Restored!\");\n}\n"
                    },
                    {
                        "tagName": "dochash",
                        "paramName": "",
                        "text": "actions/os"
                    },
                    {
                        "tagName": "docname",
                        "paramName": "",
                        "text": "os.getCurrentInstUpdate"
                    },
                    {
                        "tagName": "docgroup",
                        "paramName": "",
                        "text": "10-updates\n"
                    }
                ]
            },
            "group": "10-updates"
        },
        {
            "id": 1254,
            "order": 9999,
            "name": "os.getInstStateFromUpdates",
            "reflection": {
                "id": 1254,
                "name": "__type",
                "kind": 4096,
                "kindString": "Call signature",
                "flags": {},
                "comment": {
                    "shortText": "Calculates the inst state from the given list of updates. Returns a promise that resolves with the bot state that the updates produce.",
                    "text": "Useful for tracking the history of an inst over time.\n",
                    "tags": [
                        {
                            "tag": "example",
                            "paramName": "",
                            "text": "Get the last 5 inst states in the shared space\nconst updates = await os.listInstUpdates();\n\nlet states = [];\nfor(let i = 5; i >= 0; i--) {\n    const state = await os.getInstStateFromUpdates(updates.slice(0, updates.length - i));\n    states.push(state);\n}\n\nconsole.log('States: ', states);\n"
                        },
                        {
                            "tag": "example",
                            "paramName": "",
                            "text": "Calculate the last deltas from shared space updates\nconst updates = await os.listInstUpdates();\n\nlet lastState;\nlet deltas = [];\nfor(let i = 5; i >= 0; i--) {\n    const state = await os.getInstStateFromUpdates(updates.slice(0, updates.length - i));\n\n    if (lastState) {\n        const delta = diffSnapshots(lastState, state);\n        deltas.push(delta);\n    }\n\n    lastState = state;\n}\nconsole.log('Deltas: ', deltas);\n"
                        },
                        {
                            "tag": "dochash",
                            "paramName": "",
                            "text": "actions/os"
                        },
                        {
                            "tag": "docname",
                            "paramName": "",
                            "text": "os.getInstStateFromUpdates"
                        },
                        {
                            "tag": "docgroup",
                            "paramName": "",
                            "text": "10-updates\n"
                        }
                    ]
                },
                "parameters": [
                    {
                        "id": 1255,
                        "name": "updates",
                        "kind": 32768,
                        "kindString": "Parameter",
                        "flags": {},
                        "comment": {
                            "shortText": "The updates that the state should be calculated from.\n",
                            "tags": []
                        },
                        "type": {
                            "type": "array",
                            "elementType": {
                                "type": "reference",
                                "id": 2903,
                                "name": "InstUpdate"
                            }
                        }
                    }
                ],
                "type": {
                    "type": "reference",
                    "typeArguments": [
                        {
                            "type": "reference",
                            "id": 2880,
                            "name": "BotState"
                        }
                    ],
                    "qualifiedName": "Promise",
                    "package": "typescript",
                    "name": "Promise"
                }
            },
            "comment": {
                "shortText": "Calculates the inst state from the given list of updates. Returns a promise that resolves with the bot state that the updates produce.",
                "text": "Useful for tracking the history of an inst over time.\n",
                "tags": [
                    {
                        "tagName": "example",
                        "paramName": "",
                        "text": "Get the last 5 inst states in the shared space\nconst updates = await os.listInstUpdates();\n\nlet states = [];\nfor(let i = 5; i >= 0; i--) {\n    const state = await os.getInstStateFromUpdates(updates.slice(0, updates.length - i));\n    states.push(state);\n}\n\nconsole.log('States: ', states);\n"
                    },
                    {
                        "tagName": "example",
                        "paramName": "",
                        "text": "Calculate the last deltas from shared space updates\nconst updates = await os.listInstUpdates();\n\nlet lastState;\nlet deltas = [];\nfor(let i = 5; i >= 0; i--) {\n    const state = await os.getInstStateFromUpdates(updates.slice(0, updates.length - i));\n\n    if (lastState) {\n        const delta = diffSnapshots(lastState, state);\n        deltas.push(delta);\n    }\n\n    lastState = state;\n}\nconsole.log('Deltas: ', deltas);\n"
                    },
                    {
                        "tagName": "dochash",
                        "paramName": "",
                        "text": "actions/os"
                    },
                    {
                        "tagName": "docname",
                        "paramName": "",
                        "text": "os.getInstStateFromUpdates"
                    },
                    {
                        "tagName": "docgroup",
                        "paramName": "",
                        "text": "10-updates\n"
                    }
                ]
            },
            "group": "10-updates"
        },
        {
            "id": 1251,
            "order": 9999,
            "name": "os.listInstUpdates",
            "reflection": {
                "id": 1251,
                "name": "__type",
                "kind": 4096,
                "kindString": "Call signature",
                "flags": {},
                "comment": {
                    "shortText": "Gets the list of updates that have occurred in the shared space. Returns a promise that resolves with the list of updates.",
                    "text": "Useful when combined with [`os.getInstStateFromUpdates(updates)`](ref:os.getInstStateFromUpdates) to track the history of an inst over time.\n",
                    "tags": [
                        {
                            "tag": "example",
                            "paramName": "",
                            "text": "Get a list of updates to shared space\nconst updates = await os.listInstUpdates();\n"
                        },
                        {
                            "tag": "dochash",
                            "paramName": "",
                            "text": "actions/os"
                        },
                        {
                            "tag": "docname",
                            "paramName": "",
                            "text": "os.listInstUpdates"
                        },
                        {
                            "tag": "docgroup",
                            "paramName": "",
                            "text": "10-updates\n"
                        }
                    ]
                },
                "type": {
                    "type": "reference",
                    "typeArguments": [
                        {
                            "type": "array",
                            "elementType": {
                                "type": "reference",
                                "id": 2903,
                                "name": "InstUpdate"
                            }
                        }
                    ],
                    "qualifiedName": "Promise",
                    "package": "typescript",
                    "name": "Promise"
                }
            },
            "comment": {
                "shortText": "Gets the list of updates that have occurred in the shared space. Returns a promise that resolves with the list of updates.",
                "text": "Useful when combined with {@link os.getInstStateFromUpdates} to track the history of an inst over time.\n",
                "tags": [
                    {
                        "tagName": "example",
                        "paramName": "",
                        "text": "Get a list of updates to shared space\nconst updates = await os.listInstUpdates();\n"
                    },
                    {
                        "tagName": "dochash",
                        "paramName": "",
                        "text": "actions/os"
                    },
                    {
                        "tagName": "docname",
                        "paramName": "",
                        "text": "os.listInstUpdates"
                    },
                    {
                        "tagName": "docgroup",
                        "paramName": "",
                        "text": "10-updates\n"
                    }
                ]
            },
            "group": "10-updates"
        },
        {
            "id": 590,
            "order": 9999,
            "name": "os.disableWakeLock",
            "reflection": {
                "id": 590,
                "name": "__type",
                "kind": 4096,
                "kindString": "Call signature",
                "flags": {},
                "comment": {
                    "shortText": "Disables the wake lock that was previously enabled. Returns a promise that resolves once the wake lock has been disabled.",
                    "tags": [
                        {
                            "tag": "example",
                            "paramName": "",
                            "text": "Disable the wake lock\nawait os.disableWakeLock();\n"
                        },
                        {
                            "tag": "dochash",
                            "paramName": "",
                            "text": "actions/os"
                        },
                        {
                            "tag": "docname",
                            "paramName": "",
                            "text": "os.disableWakeLock"
                        },
                        {
                            "tag": "docgroup",
                            "paramName": "",
                            "text": "10-wake-lock\n"
                        }
                    ]
                },
                "type": {
                    "type": "reference",
                    "typeArguments": [
                        {
                            "type": "intrinsic",
                            "name": "void"
                        }
                    ],
                    "qualifiedName": "Promise",
                    "package": "typescript",
                    "name": "Promise"
                }
            },
            "comment": {
                "shortText": "Disables the wake lock that was previously enabled. Returns a promise that resolves once the wake lock has been disabled.",
                "text": "",
                "tags": [
                    {
                        "tagName": "example",
                        "paramName": "",
                        "text": "Disable the wake lock\nawait os.disableWakeLock();\n"
                    },
                    {
                        "tagName": "dochash",
                        "paramName": "",
                        "text": "actions/os"
                    },
                    {
                        "tagName": "docname",
                        "paramName": "",
                        "text": "os.disableWakeLock"
                    },
                    {
                        "tagName": "docgroup",
                        "paramName": "",
                        "text": "10-wake-lock\n"
                    }
                ]
            },
            "group": "10-wake-lock"
        },
        {
            "id": 593,
            "order": 9999,
            "name": "os.getWakeLockConfiguration",
            "reflection": {
                "id": 593,
                "name": "__type",
                "kind": 4096,
                "kindString": "Call signature",
                "flags": {},
                "comment": {
                    "shortText": "Retrieves the current wake lock state. Returns a promise that resolves with an object that contains information about the current wake lock state.",
                    "tags": [
                        {
                            "tag": "example",
                            "paramName": "",
                            "text": "Get the current wake lock state\nconst configuration = await os.getWakeLockConfiguration();\n\nif (configuration.enabled) {\n    os.toast('Wake lock is enabled!');\n} else {\n    os.toast('Wake lock is disabled.');\n}\n"
                        },
                        {
                            "tag": "dochash",
                            "paramName": "",
                            "text": "actions/os"
                        },
                        {
                            "tag": "docname",
                            "paramName": "",
                            "text": "os.getWakeLockConfiguration"
                        },
                        {
                            "tag": "docgroup",
                            "paramName": "",
                            "text": "10-wake-lock\n"
                        }
                    ]
                },
                "type": {
                    "type": "reference",
                    "typeArguments": [
                        {
                            "type": "reference",
                            "name": "WakeLockConfiguration"
                        }
                    ],
                    "qualifiedName": "Promise",
                    "package": "typescript",
                    "name": "Promise"
                }
            },
            "comment": {
                "shortText": "Retrieves the current wake lock state. Returns a promise that resolves with an object that contains information about the current wake lock state.",
                "text": "",
                "tags": [
                    {
                        "tagName": "example",
                        "paramName": "",
                        "text": "Get the current wake lock state\nconst configuration = await os.getWakeLockConfiguration();\n\nif (configuration.enabled) {\n    os.toast('Wake lock is enabled!');\n} else {\n    os.toast('Wake lock is disabled.');\n}\n"
                    },
                    {
                        "tagName": "dochash",
                        "paramName": "",
                        "text": "actions/os"
                    },
                    {
                        "tagName": "docname",
                        "paramName": "",
                        "text": "os.getWakeLockConfiguration"
                    },
                    {
                        "tagName": "docgroup",
                        "paramName": "",
                        "text": "10-wake-lock\n"
                    }
                ]
            },
            "group": "10-wake-lock"
        },
        {
            "id": 587,
            "order": 9999,
            "name": "os.requestWakeLock",
            "reflection": {
                "id": 587,
                "name": "__type",
                "kind": 4096,
                "kindString": "Call signature",
                "flags": {},
                "comment": {
                    "shortText": "Requests a wake lock that will keep the device screen awake.\nThis will ask the user for permission to keep the screen awake.\nReturns a promise that resolves once the wake lock has been granted. If the wake lock is denied, then an error will be thrown.",
                    "text": "Useful for a kiosk mode where the screen is always supposed to be on.\n",
                    "tags": [
                        {
                            "tag": "example",
                            "paramName": "",
                            "text": "Request a wake lock from the user.\nawait os.requestWakeLock();\n"
                        },
                        {
                            "tag": "dochash",
                            "paramName": "",
                            "text": "actions/os"
                        },
                        {
                            "tag": "docname",
                            "paramName": "",
                            "text": "os.requestWakeLock"
                        },
                        {
                            "tag": "docgroup",
                            "paramName": "",
                            "text": "10-wake-lock\n"
                        }
                    ]
                },
                "type": {
                    "type": "reference",
                    "typeArguments": [
                        {
                            "type": "intrinsic",
                            "name": "void"
                        }
                    ],
                    "qualifiedName": "Promise",
                    "package": "typescript",
                    "name": "Promise"
                }
            },
            "comment": {
                "shortText": "Requests a wake lock that will keep the device screen awake.\nThis will ask the user for permission to keep the screen awake.\nReturns a promise that resolves once the wake lock has been granted. If the wake lock is denied, then an error will be thrown.",
                "text": "Useful for a kiosk mode where the screen is always supposed to be on.\n",
                "tags": [
                    {
                        "tagName": "example",
                        "paramName": "",
                        "text": "Request a wake lock from the user.\nawait os.requestWakeLock();\n"
                    },
                    {
                        "tagName": "dochash",
                        "paramName": "",
                        "text": "actions/os"
                    },
                    {
                        "tagName": "docname",
                        "paramName": "",
                        "text": "os.requestWakeLock"
                    },
                    {
                        "tagName": "docgroup",
                        "paramName": "",
                        "text": "10-wake-lock\n"
                    }
                ]
            },
            "group": "10-wake-lock"
        },
        {
            "id": 770,
            "order": 9999,
            "name": "os.openDevConsole",
            "reflection": {
                "id": 770,
                "name": "__type",
                "kind": 4096,
                "kindString": "Call signature",
                "flags": {},
                "comment": {
                    "shortText": "Instructs CasualOS to open the built-in developer console.\nThe dev console provides easy access to error messages and debug logs for formulas and actions.",
                    "tags": [
                        {
                            "tag": "example",
                            "paramName": "",
                            "text": "Open the developer console.\nos.openDevConsole();\n"
                        },
                        {
                            "tag": "dochash",
                            "paramName": "",
                            "text": "actions/os"
                        },
                        {
                            "tag": "docname",
                            "paramName": "",
                            "text": "os.openDevConsole"
                        },
                        {
                            "tag": "docgroup",
                            "paramName": "",
                            "text": "12-dev\n"
                        }
                    ]
                },
                "type": {
                    "type": "reference",
                    "name": "OpenConsoleAction"
                }
            },
            "comment": {
                "shortText": "Instructs CasualOS to open the built-in developer console.\nThe dev console provides easy access to error messages and debug logs for formulas and actions.",
                "text": "",
                "tags": [
                    {
                        "tagName": "example",
                        "paramName": "",
                        "text": "Open the developer console.\nos.openDevConsole();\n"
                    },
                    {
                        "tagName": "dochash",
                        "paramName": "",
                        "text": "actions/os"
                    },
                    {
                        "tagName": "docname",
                        "paramName": "",
                        "text": "os.openDevConsole"
                    },
                    {
                        "tagName": "docgroup",
                        "paramName": "",
                        "text": "12-dev\n"
                    }
                ]
            },
            "group": "12-dev"
        },
        {
            "id": 1296,
            "order": 9999,
            "name": "os.meetCommand",
            "reflection": {
                "id": 1296,
                "name": "__type",
                "kind": 4096,
                "kindString": "Call signature",
                "flags": {},
                "comment": {
                    "shortText": "Send a [command](https://jitsi.github.io/handbook/docs/dev-guide/dev-guide-iframe-commands) to the Jitsi Meet API. The commands are only valid if the meet portal is fully loaded (see [`@onMeetLoaded`](tags:@onMeetLoaded)).",
                    "text": "Returns a promise that resolves when the command has been executed.\n",
                    "tags": [
                        {
                            "tag": "example",
                            "paramName": "",
                            "text": "Change user's meet display name\nos.meetCommand('displayName', 'ABC123');\n"
                        },
                        {
                            "tag": "example",
                            "paramName": "",
                            "text": "Close the meet.\nos.meetCommand('hangup')\n"
                        },
                        {
                            "tag": "dochash",
                            "paramName": "",
                            "text": "actions/os"
                        },
                        {
                            "tag": "docname",
                            "paramName": "",
                            "text": "os.meetCommand"
                        },
                        {
                            "tag": "docgroup",
                            "paramName": "",
                            "text": "12-meet\n"
                        }
                    ]
                },
                "parameters": [
                    {
                        "id": 1297,
                        "name": "command",
                        "kind": 32768,
                        "kindString": "Parameter",
                        "flags": {},
                        "comment": {
                            "shortText": "the command to execute.",
                            "tags": []
                        },
                        "type": {
                            "type": "intrinsic",
                            "name": "string"
                        }
                    },
                    {
                        "id": 1298,
                        "name": "args",
                        "kind": 32768,
                        "kindString": "Parameter",
                        "flags": {
                            "isRest": true
                        },
                        "comment": {
                            "shortText": "The arguments for the command (if any).\n",
                            "tags": []
                        },
                        "type": {
                            "type": "intrinsic",
                            "name": "any"
                        }
                    }
                ],
                "type": {
                    "type": "reference",
                    "typeArguments": [
                        {
                            "type": "intrinsic",
                            "name": "void"
                        }
                    ],
                    "qualifiedName": "Promise",
                    "package": "typescript",
                    "name": "Promise"
                }
            },
            "comment": {
                "shortText": "Send a [command](https://jitsi.github.io/handbook/docs/dev-guide/dev-guide-iframe-commands) to the Jitsi Meet API. The commands are only valid if the meet portal is fully loaded (see {@tag @onMeetLoaded}).",
                "text": "Returns a promise that resolves when the command has been executed.\n",
                "tags": [
                    {
                        "tagName": "example",
                        "paramName": "",
                        "text": "Change user's meet display name\nos.meetCommand('displayName', 'ABC123');\n"
                    },
                    {
                        "tagName": "example",
                        "paramName": "",
                        "text": "Close the meet.\nos.meetCommand('hangup')\n"
                    },
                    {
                        "tagName": "dochash",
                        "paramName": "",
                        "text": "actions/os"
                    },
                    {
                        "tagName": "docname",
                        "paramName": "",
                        "text": "os.meetCommand"
                    },
                    {
                        "tagName": "docgroup",
                        "paramName": "",
                        "text": "12-meet\n"
                    }
                ]
            },
            "group": "12-meet"
        },
        {
            "id": 1301,
            "order": 9999,
            "name": "os.meetFunction",
            "reflection": {
                "id": 1301,
                "name": "__type",
                "kind": 4096,
                "kindString": "Call signature",
                "flags": {},
                "comment": {
                    "shortText": "Executes the given [function](https://jitsi.github.io/handbook/docs/dev-guide/dev-guide-iframe-functions) on the Jitsi Meet API and returns a promise that resolves with the result. The functions are only valid if the meet portal is fully loaded (see @onMeetLoaded).",
                    "tags": [
                        {
                            "tag": "example",
                            "paramName": "",
                            "text": "Get a list of all the participants.\nconst participants = await os.meetFunction('getParticipantsInfo')\n"
                        },
                        {
                            "tag": "example",
                            "paramName": "",
                            "text": "Get a list of available breakout rooms.\nconst rooms = await os.meetFunction('listBreakoutRooms');\n"
                        },
                        {
                            "tag": "dochash",
                            "paramName": "",
                            "text": "actions/os"
                        },
                        {
                            "tag": "docname",
                            "paramName": "",
                            "text": "os.meetFunction"
                        },
                        {
                            "tag": "docgroup",
                            "paramName": "",
                            "text": "12-meet\n"
                        }
                    ]
                },
                "parameters": [
                    {
                        "id": 1302,
                        "name": "functionName",
                        "kind": 32768,
                        "kindString": "Parameter",
                        "flags": {},
                        "comment": {
                            "shortText": "the name of the function to execute.",
                            "tags": []
                        },
                        "type": {
                            "type": "intrinsic",
                            "name": "string"
                        }
                    },
                    {
                        "id": 1303,
                        "name": "args",
                        "kind": 32768,
                        "kindString": "Parameter",
                        "flags": {
                            "isRest": true
                        },
                        "comment": {
                            "shortText": "the arguments to provide to the function.\n",
                            "tags": []
                        },
                        "type": {
                            "type": "array",
                            "elementType": {
                                "type": "intrinsic",
                                "name": "any"
                            }
                        }
                    }
                ],
                "type": {
                    "type": "reference",
                    "typeArguments": [
                        {
                            "type": "intrinsic",
                            "name": "any"
                        }
                    ],
                    "qualifiedName": "Promise",
                    "package": "typescript",
                    "name": "Promise"
                }
            },
            "comment": {
                "shortText": "Executes the given [function](https://jitsi.github.io/handbook/docs/dev-guide/dev-guide-iframe-functions) on the Jitsi Meet API and returns a promise that resolves with the result. The functions are only valid if the meet portal is fully loaded (see @onMeetLoaded).",
                "text": "",
                "tags": [
                    {
                        "tagName": "example",
                        "paramName": "",
                        "text": "Get a list of all the participants.\nconst participants = await os.meetFunction('getParticipantsInfo')\n"
                    },
                    {
                        "tagName": "example",
                        "paramName": "",
                        "text": "Get a list of available breakout rooms.\nconst rooms = await os.meetFunction('listBreakoutRooms');\n"
                    },
                    {
                        "tagName": "dochash",
                        "paramName": "",
                        "text": "actions/os"
                    },
                    {
                        "tagName": "docname",
                        "paramName": "",
                        "text": "os.meetFunction"
                    },
                    {
                        "tagName": "docgroup",
                        "paramName": "",
                        "text": "12-meet\n"
                    }
                ]
            },
            "group": "12-meet"
        },
        {
            "id": 880,
            "order": 9999,
            "name": "os.getAverageFrameRate",
            "reflection": {
                "id": 880,
                "name": "__type",
                "kind": 4096,
                "kindString": "Call signature",
                "flags": {},
                "comment": {
                    "shortText": "Gets the number of frames that have occurred over the last second.\nReturns a promise that resolves with the number of frames that have ocurred in the last second.",
                    "tags": [
                        {
                            "tag": "example",
                            "paramName": "",
                            "text": "Get the current frames per second.\nlet fps = await os.getAverageFrameRate();\n"
                        },
                        {
                            "tag": "example",
                            "paramName": "",
                            "text": "Create a basic FPS counter.\nsetInterval(async () => {\n    masks.label = await os.getAverageFrameRate();\n}, 1000);\n"
                        },
                        {
                            "tag": "dochash",
                            "paramName": "",
                            "text": "actions/os"
                        },
                        {
                            "tag": "docname",
                            "paramName": "",
                            "text": "os.getAverageFrameRate\n"
                        }
                    ]
                },
                "type": {
                    "type": "reference",
                    "typeArguments": [
                        {
                            "type": "intrinsic",
                            "name": "number"
                        }
                    ],
                    "qualifiedName": "Promise",
                    "package": "typescript",
                    "name": "Promise"
                }
            },
            "comment": {
                "shortText": "Gets the number of frames that have occurred over the last second.\nReturns a promise that resolves with the number of frames that have ocurred in the last second.",
                "text": "",
                "tags": [
                    {
                        "tagName": "example",
                        "paramName": "",
                        "text": "Get the current frames per second.\nlet fps = await os.getAverageFrameRate();\n"
                    },
                    {
                        "tagName": "example",
                        "paramName": "",
                        "text": "Create a basic FPS counter.\nsetInterval(async () => {\n    masks.label = await os.getAverageFrameRate();\n}, 1000);\n"
                    },
                    {
                        "tagName": "dochash",
                        "paramName": "",
                        "text": "actions/os"
                    },
                    {
                        "tagName": "docname",
                        "paramName": "",
                        "text": "os.getAverageFrameRate\n"
                    }
                ]
            },
            "group": null
        },
        {
            "id": 876,
            "order": 9999,
            "name": "os.getMediaPermission",
            "reflection": {
                "id": 876,
                "name": "__type",
                "kind": 4096,
                "kindString": "Call signature",
                "flags": {},
                "comment": {
                    "shortText": "Gets permission from user to access audio and/or video streams from the device.",
                    "text": "Returns a promise that resolves if the user grants the specified media permission(s).\nIf the user blocks permission or has previously blocked permission or any other problem occurs, an error will be thrown.\n",
                    "tags": [
                        {
                            "tag": "example",
                            "paramName": "",
                            "text": "Get permission for the device's microphone.\ntry {\n    await os.getMediaPermission({ audio: true });\n} catch (e) {\n    console.error('Could not get permission for microphone:', e);\n}\n"
                        },
                        {
                            "tag": "example",
                            "paramName": "",
                            "text": "Get permission for the device's microphone and camera.\ntry {\n    await os.getMediaPermission({ audio: true, video: true });\n} catch (e) {\n    console.error('Could not get permission for microphone and/or camera:', e);\n}\n"
                        },
                        {
                            "tag": "dochash",
                            "paramName": "",
                            "text": "actions/os"
                        },
                        {
                            "tag": "docname",
                            "paramName": "",
                            "text": "os.getMediaPermission\n"
                        }
                    ]
                },
                "parameters": [
                    {
                        "id": 877,
                        "name": "options",
                        "kind": 32768,
                        "kindString": "Parameter",
                        "flags": {},
                        "comment": {
                            "shortText": "The options that should be used for requesting media permissions. At least one of `audio` or `video` must be set to `true`.\n",
                            "tags": []
                        },
                        "type": {
                            "type": "reference",
                            "id": 2626,
                            "name": "MediaPermissionOptions"
                        }
                    }
                ],
                "type": {
                    "type": "reference",
                    "typeArguments": [
                        {
                            "type": "intrinsic",
                            "name": "any"
                        }
                    ],
                    "qualifiedName": "Promise",
                    "package": "typescript",
                    "name": "Promise"
                }
            },
            "comment": {
                "shortText": "Gets permission from user to access audio and/or video streams from the device.",
                "text": "Returns a promise that resolves if the user grants the specified media permission(s).\nIf the user blocks permission or has previously blocked permission or any other problem occurs, an error will be thrown.\n",
                "tags": [
                    {
                        "tagName": "example",
                        "paramName": "",
                        "text": "Get permission for the device's microphone.\ntry {\n    await os.getMediaPermission({ audio: true });\n} catch (e) {\n    console.error('Could not get permission for microphone:', e);\n}\n"
                    },
                    {
                        "tagName": "example",
                        "paramName": "",
                        "text": "Get permission for the device's microphone and camera.\ntry {\n    await os.getMediaPermission({ audio: true, video: true });\n} catch (e) {\n    console.error('Could not get permission for microphone and/or camera:', e);\n}\n"
                    },
                    {
                        "tagName": "dochash",
                        "paramName": "",
                        "text": "actions/os"
                    },
                    {
                        "tagName": "docname",
                        "paramName": "",
                        "text": "os.getMediaPermission\n"
                    }
                ]
            },
            "group": null
        },
        {
            "id": 826,
            "order": 9999,
            "name": "os.log",
            "reflection": {
                "id": 826,
                "name": "__type",
                "kind": 4096,
                "kindString": "Call signature",
                "flags": {},
                "comment": {
                    "shortText": "Logs the given data to the developer console.",
                    "tags": [
                        {
                            "tag": "example",
                            "paramName": "",
                            "text": "Log \"Hello, World!\" to the browser developer console.\nos.log(\"Hello, World!\");\n"
                        },
                        {
                            "tag": "dochash",
                            "paramName": "",
                            "text": "actions/os"
                        },
                        {
                            "tag": "docname",
                            "paramName": "",
                            "text": "os.log\n"
                        }
                    ]
                },
                "parameters": [
                    {
                        "id": 827,
                        "name": "args",
                        "kind": 32768,
                        "kindString": "Parameter",
                        "flags": {
                            "isRest": true
                        },
                        "comment": {
                            "shortText": "the data that should be logged.\n",
                            "tags": []
                        },
                        "type": {
                            "type": "array",
                            "elementType": {
                                "type": "intrinsic",
                                "name": "any"
                            }
                        }
                    }
                ],
                "type": {
                    "type": "intrinsic",
                    "name": "void"
                }
            },
            "comment": {
                "shortText": "Logs the given data to the developer console.",
                "text": "",
                "tags": [
                    {
                        "tagName": "example",
                        "paramName": "",
                        "text": "Log \"Hello, World!\" to the browser developer console.\nos.log(\"Hello, World!\");\n"
                    },
                    {
                        "tagName": "dochash",
                        "paramName": "",
                        "text": "actions/os"
                    },
                    {
                        "tagName": "docname",
                        "paramName": "",
                        "text": "os.log\n"
                    }
                ]
            },
            "group": null
        },
        {
            "id": 539,
            "order": 9999,
            "name": "os.run",
            "reflection": {
                "id": 539,
                "name": "__type",
                "kind": 4096,
                "kindString": "Call signature",
                "flags": {},
                "comment": {
                    "shortText": "Runs the given script.\nThe script will be executed in a separate environment with no `bot`, `tags`, `this`, `thisBot`, `data`, and `that` variables.\nThis means that you need to use the [`getBot(...filters)`](ref:getbot-filters) or [`getBots(...filters)`](ref:getbots-filters) functions to read bot data.",
                    "text": "Returns a promise that resolves with the returned script value after it has been executed.\n",
                    "tags": [
                        {
                            "tag": "example",
                            "paramName": "",
                            "text": "Run a script that says \"hello\".\nos.run(\"os.toast('hello');\");\n"
                        },
                        {
                            "tag": "example",
                            "paramName": "",
                            "text": "Run a script from the #script tag on the current bot.\nos.run(tags.script);\n"
                        },
                        {
                            "tag": "example",
                            "paramName": "",
                            "text": "Run a script and toast the result.\nconst result = await os.run(\"return 594 + 391\");\nos.toast(result);\n"
                        },
                        {
                            "tag": "dochash",
                            "paramName": "",
                            "text": "actions/os"
                        },
                        {
                            "tag": "docname",
                            "paramName": "",
                            "text": "os.run\n"
                        }
                    ]
                },
                "parameters": [
                    {
                        "id": 540,
                        "name": "script",
                        "kind": 32768,
                        "kindString": "Parameter",
                        "flags": {},
                        "comment": {
                            "shortText": "The script that should be executed.\n",
                            "tags": []
                        },
                        "type": {
                            "type": "intrinsic",
                            "name": "string"
                        }
                    }
                ],
                "type": {
                    "type": "reference",
                    "typeArguments": [
                        {
                            "type": "intrinsic",
                            "name": "any"
                        }
                    ],
                    "qualifiedName": "Promise",
                    "package": "typescript",
                    "name": "Promise"
                }
            },
            "comment": {
                "shortText": "Runs the given script.\nThe script will be executed in a separate environment with no `bot`, `tags`, `this`, `thisBot`, `data`, and `that` variables.\nThis means that you need to use the {@link getbot-filters} or {@link getbots-filters} functions to read bot data.",
                "text": "Returns a promise that resolves with the returned script value after it has been executed.\n",
                "tags": [
                    {
                        "tagName": "example",
                        "paramName": "",
                        "text": "Run a script that says \"hello\".\nos.run(\"os.toast('hello');\");\n"
                    },
                    {
                        "tagName": "example",
                        "paramName": "",
                        "text": "Run a script from the #script tag on the current bot.\nos.run(tags.script);\n"
                    },
                    {
                        "tagName": "example",
                        "paramName": "",
                        "text": "Run a script and toast the result.\nconst result = await os.run(\"return 594 + 391\");\nos.toast(result);\n"
                    },
                    {
                        "tagName": "dochash",
                        "paramName": "",
                        "text": "actions/os"
                    },
                    {
                        "tagName": "docname",
                        "paramName": "",
                        "text": "os.run\n"
                    }
                ]
            },
            "group": null
        },
        {
            "id": 482,
            "order": 9999,
            "name": "os.setClipboard",
            "reflection": {
                "id": 482,
                "name": "__type",
                "kind": 4096,
                "kindString": "Call signature",
                "flags": {},
                "comment": {
                    "shortText": "Copies the given text to the player's clipboard. On Chrome and Firefox, this will act like a `Ctrl+C`/`Cmd+C`.\nOn Safari and all iOS browsers this will open a popup which prompts the player to copy the text.",
                    "tags": [
                        {
                            "tag": "example",
                            "paramName": "",
                            "text": "Copy \"hello\" to the player's clipboard.\nos.setClipboard(\"hello\");\n"
                        },
                        {
                            "tag": "dochash",
                            "paramName": "",
                            "text": "actions/os"
                        },
                        {
                            "tag": "docname",
                            "paramName": "",
                            "text": "os.setClipboard\n"
                        }
                    ]
                },
                "parameters": [
                    {
                        "id": 483,
                        "name": "text",
                        "kind": 32768,
                        "kindString": "Parameter",
                        "flags": {},
                        "comment": {
                            "shortText": "the text that should be copied to the player's clipboard.\n",
                            "tags": []
                        },
                        "type": {
                            "type": "intrinsic",
                            "name": "string"
                        }
                    }
                ],
                "type": {
                    "type": "reference",
                    "name": "SetClipboardAction"
                }
            },
            "comment": {
                "shortText": "Copies the given text to the player's clipboard. On Chrome and Firefox, this will act like a `Ctrl+C`/`Cmd+C`.\nOn Safari and all iOS browsers this will open a popup which prompts the player to copy the text.",
                "text": "",
                "tags": [
                    {
                        "tagName": "example",
                        "paramName": "",
                        "text": "Copy \"hello\" to the player's clipboard.\nos.setClipboard(\"hello\");\n"
                    },
                    {
                        "tagName": "dochash",
                        "paramName": "",
                        "text": "actions/os"
                    },
                    {
                        "tagName": "docname",
                        "paramName": "",
                        "text": "os.setClipboard\n"
                    }
                ]
            },
            "group": null
        },
        {
            "id": 793,
            "order": 9999,
            "name": "os.share",
            "reflection": {
                "id": 793,
                "name": "__type",
                "kind": 4096,
                "kindString": "Call signature",
                "flags": {},
                "comment": {
                    "shortText": "Shares the given URL or text via the device's social share capabilities. Returns a Promise that resolves when sharing has succeeded or failed.",
                    "tags": [
                        {
                            "tag": "example",
                            "paramName": "",
                            "text": "Share a URL.\nos.share({\n    url: 'https://example.com'\n});\n"
                        },
                        {
                            "tag": "example",
                            "paramName": "",
                            "text": "Share some text.\nos.share({\n    text: 'abcdefghijklmnopqrstuvwxyz'\n});\n"
                        },
                        {
                            "tag": "dochash",
                            "paramName": "",
                            "text": "actions/os"
                        },
                        {
                            "tag": "docname",
                            "paramName": "",
                            "text": "os.share\n"
                        }
                    ]
                },
                "parameters": [
                    {
                        "id": 794,
                        "name": "options",
                        "kind": 32768,
                        "kindString": "Parameter",
                        "flags": {},
                        "comment": {
                            "shortText": "the options for sharing.\n",
                            "tags": []
                        },
                        "type": {
                            "type": "reference",
                            "id": 2585,
                            "name": "ShareOptions"
                        }
                    }
                ],
                "type": {
                    "type": "reference",
                    "typeArguments": [
                        {
                            "type": "intrinsic",
                            "name": "void"
                        }
                    ],
                    "qualifiedName": "Promise",
                    "package": "typescript",
                    "name": "Promise"
                }
            },
            "comment": {
                "shortText": "Shares the given URL or text via the device's social share capabilities. Returns a Promise that resolves when sharing has succeeded or failed.",
                "text": "",
                "tags": [
                    {
                        "tagName": "example",
                        "paramName": "",
                        "text": "Share a URL.\nos.share({\n    url: 'https://example.com'\n});\n"
                    },
                    {
                        "tagName": "example",
                        "paramName": "",
                        "text": "Share some text.\nos.share({\n    text: 'abcdefghijklmnopqrstuvwxyz'\n});\n"
                    },
                    {
                        "tagName": "dochash",
                        "paramName": "",
                        "text": "actions/os"
                    },
                    {
                        "tagName": "docname",
                        "paramName": "",
                        "text": "os.share\n"
                    }
                ]
            },
            "group": null
        },
        {
            "id": 444,
            "order": 9999,
            "name": "os.sleep",
            "reflection": {
                "id": 444,
                "name": "__type",
                "kind": 4096,
                "kindString": "Call signature",
                "flags": {},
                "comment": {
                    "shortText": "Waits the amount of time provided, in [miliseconds](https://en.wikipedia.org/wiki/Millisecond).",
                    "text": "Returns a promise that resolves when the time has been waited.\n",
                    "tags": [
                        {
                            "tag": "example",
                            "paramName": "",
                            "text": "Wait 2 seconds before proceeding.\nos.toast(\"Stop!\");\nawait os.sleep(2000);\nos.toast(\"Hammer Time!\");\n"
                        },
                        {
                            "tag": "dochash",
                            "paramName": "",
                            "text": "actions/os"
                        },
                        {
                            "tag": "docname",
                            "paramName": "",
                            "text": "os.sleep\n"
                        }
                    ]
                },
                "parameters": [
                    {
                        "id": 445,
                        "name": "time",
                        "kind": 32768,
                        "kindString": "Parameter",
                        "flags": {},
                        "comment": {
                            "shortText": "the Time to wait in ms. 1 second is 1000 ms.\n",
                            "tags": []
                        },
                        "type": {
                            "type": "intrinsic",
                            "name": "number"
                        }
                    }
                ],
                "type": {
                    "type": "reference",
                    "typeArguments": [
                        {
                            "type": "intrinsic",
                            "name": "void"
                        }
                    ],
                    "qualifiedName": "Promise",
                    "package": "typescript",
                    "name": "Promise"
                }
            },
            "comment": {
                "shortText": "Waits the amount of time provided, in [miliseconds](https://en.wikipedia.org/wiki/Millisecond).",
                "text": "Returns a promise that resolves when the time has been waited.\n",
                "tags": [
                    {
                        "tagName": "example",
                        "paramName": "",
                        "text": "Wait 2 seconds before proceeding.\nos.toast(\"Stop!\");\nawait os.sleep(2000);\nos.toast(\"Hammer Time!\");\n"
                    },
                    {
                        "tagName": "dochash",
                        "paramName": "",
                        "text": "actions/os"
                    },
                    {
                        "tagName": "docname",
                        "paramName": "",
                        "text": "os.sleep\n"
                    }
                ]
            },
            "group": null
        },
        {
            "id": 448,
            "order": 9999,
            "name": "os.toast",
            "reflection": {
                "id": 448,
                "name": "__type",
                "kind": 4096,
                "kindString": "Call signature",
                "flags": {},
                "comment": {
                    "shortText": "Shows a temporary \"toast\" notification to the player at the bottom of the screen with the given message.\nOptionally accepts a duration parameter which is the number of seconds that the message should be on the screen.",
                    "tags": [
                        {
                            "tag": "example",
                            "paramName": "",
                            "text": "Show a \"Hello!\" toast message.\nos.toast(\"Hello!\");\n"
                        },
                        {
                            "tag": "example",
                            "paramName": "",
                            "text": "Show the player a code for 5 seconds.\nos.toast(\"this is the code\", 5);\n"
                        },
                        {
                            "tag": "dochash",
                            "paramName": "",
                            "text": "actions/os"
                        },
                        {
                            "tag": "docname",
                            "paramName": "",
                            "text": "os.toast\n"
                        }
                    ]
                },
                "parameters": [
                    {
                        "id": 449,
                        "name": "message",
                        "kind": 32768,
                        "kindString": "Parameter",
                        "flags": {},
                        "comment": {
                            "shortText": "the text that the toast message should show.",
                            "tags": []
                        },
                        "type": {
                            "type": "union",
                            "types": [
                                {
                                    "type": "intrinsic",
                                    "name": "string"
                                },
                                {
                                    "type": "intrinsic",
                                    "name": "number"
                                },
                                {
                                    "type": "intrinsic",
                                    "name": "boolean"
                                },
                                {
                                    "type": "intrinsic",
                                    "name": "object"
                                },
                                {
                                    "type": "array",
                                    "elementType": {
                                        "type": "intrinsic",
                                        "name": "any"
                                    }
                                }
                            ]
                        }
                    },
                    {
                        "id": 450,
                        "name": "duration",
                        "kind": 32768,
                        "kindString": "Parameter",
                        "flags": {},
                        "comment": {
                            "shortText": "the number of seconds that the message should be on the screen. (Default is 2)\n",
                            "tags": []
                        },
                        "type": {
                            "type": "intrinsic",
                            "name": "number"
                        },
                        "defaultValue": "2"
                    }
                ],
                "type": {
                    "type": "reference",
                    "name": "ShowToastAction"
                }
            },
            "comment": {
                "shortText": "Shows a temporary \"toast\" notification to the player at the bottom of the screen with the given message.\nOptionally accepts a duration parameter which is the number of seconds that the message should be on the screen.",
                "text": "",
                "tags": [
                    {
                        "tagName": "example",
                        "paramName": "",
                        "text": "Show a \"Hello!\" toast message.\nos.toast(\"Hello!\");\n"
                    },
                    {
                        "tagName": "example",
                        "paramName": "",
                        "text": "Show the player a code for 5 seconds.\nos.toast(\"this is the code\", 5);\n"
                    },
                    {
                        "tagName": "dochash",
                        "paramName": "",
                        "text": "actions/os"
                    },
                    {
                        "tagName": "docname",
                        "paramName": "",
                        "text": "os.toast\n"
                    }
                ]
            },
            "group": null
        }
    ],
    "references": {
        "CasualOSError": "types/error",
        "id-2910": "CasualOSError",
        "Quaternion": "types/math/rotations",
        "id-3300": "Quaternion",
        "Rotation": "types/math/rotations",
        "id-3332": "Rotation",
        "Vector2": "types/math/vectors",
        "id-3166": "Vector2",
        "Vector3": "types/math/vectors",
        "id-3223": "Vector3",
        "AIChatMessage": "types/ai",
        "id-2929": "AIChatMessage",
        "AIChatOptions": "types/ai",
        "id-2720": "AIChatOptions",
        "AIGenerateSkyboxOptions": "types/ai",
        "id-2730": "AIGenerateSkyboxOptions",
        "AIGenerateSkyboxRequest": "types/ai",
        "id-2526": "AIGenerateSkyboxRequest",
        "AIGenerateSkyboxResult": "types/ai",
        "id-2530": "AIGenerateSkyboxResult",
        "AddCountFailure": "types/records/events",
        "id-3113": "AddCountFailure",
        "AddCountSuccess": "types/records/events",
        "id-3108": "AddCountSuccess",
        "AnimateTagOptions": "types/animation",
        "id-2131": "AnimateTagOptions",
        "AttachDebuggerOptions": "types/debuggers/common",
        "id-2506": "AttachDebuggerOptions",
        "CasualOSDevice": "types/os",
        "id-2898": "CasualOSDevice",
        "CasualOSVersion": "types/os",
        "id-2890": "CasualOSVersion",
        "AxisAndAngle": "types/math/rotations",
        "id-3378": "AxisAndAngle",
        "BotTagMasks": "types/core",
        "id-2867": "BotTagMasks",
        "BotTags": "types/core",
        "id-2782": "BotTags",
        "BotState": "types/core",
        "id-2880": "BotState",
        "CompiledBotListeners": "types/core",
        "id-2861": "CompiledBotListeners",
        "ConvertGeolocationToWhat3WordsOptions": "types/os",
        "id-2555": "ConvertGeolocationToWhat3WordsOptions",
        "CreatePublicRecordKeyFailure": "types/records/key",
        "id-2940": "CreatePublicRecordKeyFailure",
        "CreatePublicRecordKeySuccess": "types/records/key",
        "id-2936": "CreatePublicRecordKeySuccess",
        "DebuggerCallFrame": "types/debuggers/common",
        "id-2459": "DebuggerCallFrame",
        "DebuggerFunctionLocation": "types/debuggers/common",
        "id-2494": "DebuggerFunctionLocation",
        "DebuggerPause": "types/debuggers/common",
        "id-2488": "DebuggerPause",
        "DebuggerTagMaskUpdate": "types/debuggers/common",
        "id-2467": "DebuggerTagMaskUpdate",
        "DebuggerTagUpdate": "types/debuggers/common",
        "id-2473": "DebuggerTagUpdate",
        "DebuggerVariable": "types/debuggers/common",
        "id-2500": "DebuggerVariable",
        "Easing": "types/animation",
        "id-2535": "Easing",
        "EnableXROptions": "types/os",
        "id-2629": "EnableXROptions",
        "EraseDataFailure": "types/records/data",
        "id-3084": "EraseDataFailure",
        "EraseDataSuccess": "types/records/data",
        "id-3080": "EraseDataSuccess",
        "EraseFileFailure": "types/records/files",
        "id-3103": "EraseFileFailure",
        "EraseFileSuccess": "types/records/files",
        "id-3099": "EraseFileSuccess",
        "EulerAnglesRotation": "types/math/rotations",
        "id-3381": "EulerAnglesRotation",
        "FocusOnOptions": "types/os",
        "id-2589": "FocusOnOptions",
        "FocusOnRotation": "types/os",
        "id-2601": "FocusOnRotation",
        "FormAnimationData": "types/os",
        "id-2647": "FormAnimationData",
        "FromToRotation": "types/math/rotations",
        "id-3375": "FromToRotation",
        "GenericError": "types/error",
        "id-2907": "GenericError",
        "GetCountFailure": "types/records/events",
        "id-3124": "GetCountFailure",
        "GetCountSuccess": "types/records/events",
        "id-3118": "GetCountSuccess",
        "GetDataFailure": "types/records/data",
        "id-3075": "GetDataFailure",
        "GetDataSuccess": "types/records/data",
        "id-3066": "GetDataSuccess",
        "GetRoomOptionsFailure": "types/os",
        "id-2221": "GetRoomOptionsFailure",
        "GetRoomOptionsSuccess": "types/os",
        "id-2217": "GetRoomOptionsSuccess",
        "GetRoomRemoteOptionsFailure": "types/os",
        "id-2264": "GetRoomRemoteOptionsFailure",
        "GetRoomRemoteOptionsSuccess": "types/os",
        "id-2259": "GetRoomRemoteOptionsSuccess",
        "GetRoomTrackOptionsFailure": "types/os",
        "id-2240": "GetRoomTrackOptionsFailure",
        "GetRoomTrackOptionsSuccess": "types/os",
        "id-2235": "GetRoomTrackOptionsSuccess",
        "GrantMarkerPermissionFailure": "types/records/policies",
        "id-3152": "GrantMarkerPermissionFailure",
        "GrantMarkerPermissionSuccess": "types/records/policies",
        "id-3150": "GrantMarkerPermissionSuccess",
        "GrantRoleFailure": "types/records/roles",
        "id-3138": "GrantRoleFailure",
        "GrantRoleSuccess": "types/records/roles",
        "id-3136": "GrantRoleSuccess",
        "ImageClassifierOptions": "types/os",
        "id-2607": "ImageClassifierOptions",
        "InstUpdate": "types/os",
        "id-2903": "InstUpdate",
        "JoinRoomFailure": "types/os",
        "id-2202": "JoinRoomFailure",
        "JoinRoomSuccess": "types/os",
        "id-2199": "JoinRoomSuccess",
        "LeaveRoomFailure": "types/os",
        "id-2211": "LeaveRoomFailure",
        "LeaveRoomSuccess": "types/os",
        "id-2208": "LeaveRoomSuccess",
        "ListDataFailure": "types/records/data",
        "id-3094": "ListDataFailure",
        "ListDataSuccess": "types/records/data",
        "id-3089": "ListDataSuccess",
        "LookRotation": "types/math/rotations",
        "id-3398": "LookRotation",
        "MediaPermissionOptions": "types/os",
        "id-2626": "MediaPermissionOptions",
        "Debugger": "types/debuggers/debugger",
        "id-2271": "Debugger",
        "NormalDebuggerOptions": "types/debuggers/common",
        "id-2478": "NormalDebuggerOptions",
        "PhotoCameraOptions": "types/camera",
        "id-2704": "PhotoCameraOptions",
        "ParsedBotLink": "types/core",
        "id-2886": "ParsedBotLink",
        "PartialBotState": "types/core",
        "id-2883": "PartialBotState",
        "PausableDebugger": "types/debuggers/pausable-debugger",
        "id-2327": "PausableDebugger",
        "PausableDebuggerOptions": "types/debuggers/common",
        "id-2483": "PausableDebuggerOptions",
        "PauseTrigger": "types/debuggers/common",
        "id-2446": "PauseTrigger",
        "PauseTriggerOptions": "types/debuggers/common",
        "id-2454": "PauseTriggerOptions",
        "Photo": "types/camera",
        "id-2716": "Photo",
        "PossiblePauseTriggerLocation": "types/debuggers/common",
        "id-2441": "PossiblePauseTriggerLocation",
        "PseudoRandomNumberGenerator": "types/core",
        "id-2515": "PseudoRandomNumberGenerator",
        "QuaternionRotation": "types/math/rotations",
        "id-3391": "QuaternionRotation",
        "RaycastRay": "types/os",
        "id-2195": "RaycastRay",
        "RaycastResult": "types/os",
        "id-2192": "RaycastResult",
        "RecordActionOptions": "types/records/extra",
        "id-2538": "RecordActionOptions",
        "RecordDataFailure": "types/records/data",
        "id-3061": "RecordDataFailure",
        "RecordDataSuccess": "types/records/data",
        "id-3057": "RecordDataSuccess",
        "RecordFileFailure": "types/records/files",
        "id-2162": "RecordFileFailure",
        "RecordFileSuccess": "types/records/files",
        "id-2158": "RecordFileSuccess",
        "RecordedFile": "types/experimental",
        "id-2691": "RecordedFile",
        "Recording": "types/experimental",
        "id-2689": "Recording",
        "RecordingOptions": "types/experimental",
        "id-2696": "RecordingOptions",
        "RegisterPrefixOptions": "types/core",
        "id-2686": "RegisterPrefixOptions",
        "RevokeMarkerPermissionFailure": "types/records/policies",
        "id-3159": "RevokeMarkerPermissionFailure",
        "RevokeMarkerPermissionSuccess": "types/records/policies",
        "id-3157": "RevokeMarkerPermissionSuccess",
        "RevokeRoleFailure": "types/records/roles",
        "id-3145": "RevokeRoleFailure",
        "RevokeRoleSuccess": "types/records/roles",
        "id-3143": "RevokeRoleSuccess",
        "RoomJoinOptions": "types/os",
        "id-2652": "RoomJoinOptions",
        "RoomOptions": "types/os",
        "id-2661": "RoomOptions",
        "RoomRemoteOptions": "types/os",
        "id-2677": "RoomRemoteOptions",
        "RoomTrackOptions": "types/os",
        "id-2665": "RoomTrackOptions",
        "RuntimeBot": "types/core",
        "id-2734": "RuntimeBot",
        "RuntimeBotLinks": "types/core",
        "id-2873": "RuntimeBotLinks",
        "RuntimeBotVars": "types/core",
        "id-2870": "RuntimeBotVars",
        "SequenceRotation": "types/math/rotations",
        "id-3389": "SequenceRotation",
        "SetRoomOptionsSuccess": "types/os",
        "id-2226": "SetRoomOptionsSuccess",
        "SetRoomTrackOptions": "types/os",
        "id-2683": "SetRoomTrackOptions",
        "SetRoomTrackOptionsFailure": "types/os",
        "id-2252": "SetRoomTrackOptionsFailure",
        "SetRoomTrackOptionsSuccess": "types/os",
        "id-2247": "SetRoomTrackOptionsSuccess",
        "ShareOptions": "types/os",
        "id-2585": "ShareOptions",
        "ShowChatOptions": "types/os",
        "id-2579": "ShowChatOptions",
        "ShowConfirmOptions": "types/os",
        "id-2621": "ShowConfirmOptions",
        "ShowInputOptions": "types/os",
        "id-2612": "ShowInputOptions",
        "SnapAxis": "types/os",
        "id-2559": "SnapAxis",
        "SnapGridTarget": "types/os",
        "id-2167": "SnapGridTarget",
        "SnapPoint": "types/os",
        "id-2571": "SnapPoint",
        "SpeakTextOptions": "types/experimental",
        "id-2511": "SpeakTextOptions",
        "StartFormAnimationOptions": "types/os",
        "id-2631": "StartFormAnimationOptions",
        "StopFormAnimationOptions": "types/os",
        "id-2644": "StopFormAnimationOptions",
        "SuccessfulGeolocation": "types/os",
        "id-2541": "SuccessfulGeolocation",
        "SyntheticVoice": "types/experimental",
        "id-2700": "SyntheticVoice",
        "TweenOptions": "types/experimental",
        "id-2508": "TweenOptions",
        "UnsuccessfulGeolocation": "types/os",
        "id-2551": "UnsuccessfulGeolocation",
        "UpdateEventRecordFailure": "types/records/events",
        "id-3131": "UpdateEventRecordFailure",
        "UpdateEventRecordSuccess": "types/records/events",
        "id-3129": "UpdateEventRecordSuccess",
        "UploadedFile": "types/os",
        "id-2188": "UploadedFile",
        "WebhookOptions": "types/web",
        "id-2112": "WebhookOptions",
        "WebhookResult": "types/web",
        "id-2124": "WebhookResult",
        "AddCountResult": "types/records/events",
        "id-3107": "AddCountResult",
        "AvailablePermissions": "types/permissions",
        "id-2945": "AvailablePermissions",
        "BarcodeFormat": "types/os",
        "id-2606": "BarcodeFormat",
        "BotFilter": "types/core",
        "id-2146": "BotFilter",
        "BotSpace": "types/core",
        "id-2857": "BotSpace",
        "CameraType": "types/os",
        "id-2605": "CameraType",
        "CreatePublicRecordKeyResult": "types/records/key",
        "id-2935": "CreatePublicRecordKeyResult",
        "EaseMode": "types/animation",
        "id-2534": "EaseMode",
        "EaseType": "types/animation",
        "id-2533": "EaseType",
        "EraseDataResult": "types/records/data",
        "id-3079": "EraseDataResult",
        "EraseFileResult": "types/records/files",
        "id-3098": "EraseFileResult",
        "Geolocation": "types/os",
        "id-2540": "Geolocation",
        "GetCountResult": "types/records/events",
        "id-3117": "GetCountResult",
        "GetDataResult": "types/records/data",
        "id-3065": "GetDataResult",
        "GetRoomOptionsResult": "types/os",
        "id-2216": "GetRoomOptionsResult",
        "GetRoomRemoteOptionsResult": "types/os",
        "id-2258": "GetRoomRemoteOptionsResult",
        "GetRoomTrackOptionsResult": "types/os",
        "id-2234": "GetRoomTrackOptionsResult",
        "GrantMarkerPermissionResult": "types/records/policies",
        "id-3149": "GrantMarkerPermissionResult",
        "GrantRoleResult": "types/records/roles",
        "id-3135": "GrantRoleResult",
        "JoinRoomResult": "types/os",
        "id-2198": "JoinRoomResult",
        "LeaveRoomResult": "types/os",
        "id-2207": "LeaveRoomResult",
        "ListDataResult": "types/records/data",
        "id-3088": "ListDataResult",
        "Mod": "types/core",
        "id-2141": "Mod",
        "PortalType": "types/core",
        "id-2889": "PortalType",
        "PossiblePauseTriggerStates": "types/debuggers/common",
        "id-2445": "PossiblePauseTriggerStates",
        "RecordDataResult": "types/records/data",
        "id-3056": "RecordDataResult",
        "RecordFileResult": "types/records/files",
        "id-2157": "RecordFileResult",
        "RevokeMarkerPermissionResult": "types/records/policies",
        "id-3156": "RevokeMarkerPermissionResult",
        "RevokeRoleResult": "types/records/roles",
        "id-3142": "RevokeRoleResult",
        "SetRoomOptionsResult": "types/os",
        "id-2225": "SetRoomOptionsResult",
        "SetRoomTrackOptionsResult": "types/os",
        "id-2246": "SetRoomTrackOptionsResult",
        "SnapTarget": "types/os",
        "id-2578": "SnapTarget",
        "TagFilter": "types/core",
        "id-2142": "TagFilter",
        "UpdateEventRecordResult": "types/records/events",
        "id-3128": "UpdateEventRecordResult",
        "animateTag-byOptions": "actions/utility",
        "id-364": "animateTag-byOptions",
        "getbot-tag": "actions/data",
        "id-33": "getbot-tag",
        "getbots-tag": "actions/data",
        "id-17": "getbots-tag",
        "animateTag-byTag": "actions/utility",
        "id-358": "animateTag-byTag",
        "changeState": "actions/data",
        "id-177": "changeState",
        "create": "actions/data",
        "id-162": "create",
        "destroy": "actions/data",
        "id-166": "destroy",
        "getbot-filters": "actions/data",
        "id-26": "getbot-filters",
        "getbots-filters": "actions/data",
        "id-10": "getbots-filters",
        "priorityShout": "actions/event",
        "id-225": "priorityShout",
        "shout": "actions/event",
        "id-237": "shout",
        "updateBotLinks": "actions/data",
        "id-198": "updateBotLinks",
        "whisper": "actions/event",
        "id-263": "whisper",
        "action.perform": "actions/event",
        "id-1621": "action.perform",
        "action.reject": "actions/event",
        "id-1625": "action.reject",
        "ai.chat-string": "actions/ai",
        "id-423": "ai.chat-string",
        "ai.chat-message": "actions/ai",
        "id-426": "ai.chat-message",
        "ai.chat-messages": "actions/ai",
        "id-429": "ai.chat-messages",
        "ai.generateSkybox-string": "actions/ai",
        "id-434": "ai.generateSkybox-string",
        "ai.generateSkybox-request": "actions/ai",
        "id-438": "ai.generateSkybox-request",
        "applyDiffToSnapshot": "actions/data",
        "id-83": "applyDiffToSnapshot",
        "applyMod": "actions/mods",
        "id-152": "applyMod",
        "assert": "actions/debuggers",
        "id-407": "assert",
        "assertEqual": "actions/debuggers",
        "id-412": "assertEqual",
        "atPosition": "actions/bot-filters",
        "id-293": "atPosition",
        "byCreator": "actions/bot-filters",
        "id-314": "byCreator",
        "byID": "actions/bot-filters",
        "id-281": "byID",
        "byMod": "actions/bot-filters",
        "id-285": "byMod",
        "bySpace": "actions/bot-filters",
        "id-310": "bySpace",
        "byTag": "actions/bot-filters",
        "id-276": "byTag",
        "bytes.fromBase64String": "actions/bytes",
        "id-1845": "bytes.fromBase64String",
        "bytes.fromHexString": "actions/bytes",
        "id-1853": "bytes.fromHexString",
        "bytes.toBase64String": "actions/bytes",
        "id-1841": "bytes.toBase64String",
        "bytes.toHexString": "actions/bytes",
        "id-1849": "bytes.toHexString",
        "clearAnimations": "actions/utility",
        "id-378": "clearAnimations",
        "clearTagMasks": "actions/data",
        "id-106": "clearTagMasks",
        "crypto.hash-raw": "actions/crypto",
        "id-1859": "crypto.hash-raw",
        "crypto.hash-string": "actions/crypto",
        "id-1865": "crypto.hash-string",
        "crypto.hmac-raw": "actions/crypto",
        "id-1896": "crypto.hmac-raw",
        "crypto.hmac-string": "actions/crypto",
        "id-1889": "crypto.hmac-string",
        "crypto.asymmetric.decrypt": "actions/crypto",
        "id-1954": "crypto.asymmetric.decrypt",
        "crypto.asymmetric.encrypt": "actions/crypto",
        "id-1949": "crypto.asymmetric.encrypt",
        "crypto.asymmetric.isEncrypted": "actions/crypto",
        "id-1960": "crypto.asymmetric.isEncrypted",
        "crypto.asymmetric.isKeypair": "actions/crypto",
        "id-1945": "crypto.asymmetric.isKeypair",
        "crypto.asymmetric.keypair": "actions/crypto",
        "id-1941": "crypto.asymmetric.keypair",
        "crypto.encrypt": "actions/crypto",
        "id-1925": "crypto.encrypt",
        "crypto.hmacSha256": "actions/crypto",
        "id-1915": "crypto.hmacSha256",
        "crypto.hmacSha512": "actions/crypto",
        "id-1920": "crypto.hmacSha512",
        "crypto.isEncrypted": "actions/crypto",
        "id-1935": "crypto.isEncrypted",
        "crypto.keypair": "actions/crypto",
        "id-1964": "crypto.keypair",
        "crypto.sha256": "actions/crypto",
        "id-1881": "crypto.sha256",
        "crypto.sha512": "actions/crypto",
        "id-1885": "crypto.sha512",
        "crypto.sign": "actions/crypto",
        "id-1968": "crypto.sign",
        "deleteTagMaskText": "actions/data",
        "id-133": "deleteTagMaskText",
        "deleteTagText": "actions/data",
        "id-126": "deleteTagText",
        "diffSnapshots": "actions/data",
        "id-78": "diffSnapshots",
        "either": "actions/bot-filters",
        "id-318": "either",
        "os.beginAudioRecording": "actions/audio",
        "id-1679": "os.beginAudioRecording",
        "experiment.beginRecording": "actions/experimental",
        "id-1686": "experiment.beginRecording",
        "os.endAudioRecording": "actions/audio",
        "id-1683": "os.endAudioRecording",
        "experiment.endRecording": "actions/experimental",
        "id-1690": "experiment.endRecording",
        "experiment.getAnchorPointPosition": "actions/experimental",
        "id-1669": "experiment.getAnchorPointPosition",
        "experiment.getVoices": "actions/experimental",
        "id-1698": "experiment.getVoices",
        "experiment.localFormAnimation": "actions/experimental",
        "id-1642": "experiment.localFormAnimation",
        "experiment.localPositionTween": "actions/experimental",
        "id-1647": "experiment.localPositionTween",
        "experiment.localRotationTween": "actions/experimental",
        "id-1658": "experiment.localRotationTween",
        "experiment.speakText": "actions/experimental",
        "id-1693": "experiment.speakText",
        "getBotLinks": "actions/data",
        "id-194": "getBotLinks",
        "getBotPosition": "actions/data",
        "id-52": "getBotPosition",
        "getBotRotation": "actions/data",
        "id-57": "getBotRotation",
        "getBotTagValues": "actions/data",
        "id-42": "getBotTagValues",
        "getFormattedJSON": "actions/data",
        "id-70": "getFormattedJSON",
        "getID": "actions/data",
        "id-62": "getID",
        "getJSON": "actions/data",
        "id-66": "getJSON",
        "getLink": "actions/data",
        "id-190": "getLink",
        "getMod": "actions/mods",
        "id-47": "getMod",
        "getSnapshot": "actions/data",
        "id-74": "getSnapshot",
        "getTag": "actions/data",
        "id-88": "getTag",
        "inDimension": "actions/bot-filters",
        "id-289": "inDimension",
        "inStack": "actions/bot-filters",
        "id-299": "inStack",
        "insertTagMaskText": "actions/data",
        "id-118": "insertTagMaskText",
        "insertTagText": "actions/data",
        "id-111": "insertTagText",
        "math.abs": "actions/math",
        "id-1715": "math.abs",
        "math.addVectors": "actions/math",
        "id-1785": "math.addVectors",
        "math.areClose": "actions/math",
        "id-1816": "math.areClose",
        "math.avg": "actions/math",
        "id-1707": "math.avg",
        "math.degreesToRadians": "actions/math",
        "id-1741": "math.degreesToRadians",
        "math.getAnchorPointOffset": "actions/math",
        "id-1781": "math.getAnchorPointOffset",
        "math.getForwardDirection": "actions/math",
        "id-1749": "math.getForwardDirection",
        "math.getSeededRandomNumberGenerator": "actions/math",
        "id-1723": "math.getSeededRandomNumberGenerator",
        "math.intersectPlane": "actions/math",
        "id-1758": "math.intersectPlane",
        "math.negateVector": "actions/math",
        "id-1795": "math.negateVector",
        "math.normalizeVector": "actions/math",
        "id-1800": "math.normalizeVector",
        "math.radiansToDegrees": "actions/math",
        "id-1745": "math.radiansToDegrees",
        "math.random": "actions/math",
        "id-1736": "math.random",
        "math.randomInt": "actions/math",
        "id-1731": "math.randomInt",
        "math.scaleVector": "actions/math",
        "id-1810": "math.scaleVector",
        "math.setRandomSeed": "actions/math",
        "id-1727": "math.setRandomSeed",
        "math.sqrt": "actions/math",
        "id-1711": "math.sqrt",
        "math.stdDev": "actions/math",
        "id-1719": "math.stdDev",
        "math.subtractVectors": "actions/math",
        "id-1790": "math.subtractVectors",
        "math.sum": "actions/math",
        "id-1703": "math.sum",
        "math.vectorLength": "actions/math",
        "id-1805": "math.vectorLength",
        "neighboring": "actions/bot-filters",
        "id-304": "neighboring",
        "not": "actions/bot-filters",
        "id-325": "not",
        "os.attachDebugger": "actions/debuggers",
        "id-1319": "os.attachDebugger",
        "os.createDebugger-normal": "actions/debuggers",
        "id-1308": "os.createDebugger-normal",
        "os.createDebugger-pausable": "actions/debuggers",
        "id-1312": "os.createDebugger-pausable",
        "os.focusOn-bot": "actions/portals",
        "id-501": "os.focusOn-bot",
        "os.focusOn-position": "actions/portals",
        "id-506": "os.focusOn-position",
        "os.getExecutingDebugger": "actions/debuggers",
        "id-1316": "os.getExecutingDebugger",
        "showChat-options": "actions/os",
        "id-528": "showChat-options",
        "showChat-placeholder": "actions/os",
        "id-524": "showChat-placeholder",
        "os.showInput": "actions/portals",
        "id-744": "os.showInput",
        "os.addBotDropGrid": "actions/portals",
        "id-818": "os.addBotDropGrid",
        "os.addBotDropSnap": "actions/portals",
        "id-809": "os.addBotDropSnap",
        "os.addDropGrid": "actions/portals",
        "id-814": "os.addDropGrid",
        "os.addDropSnap": "actions/portals",
        "id-805": "os.addDropSnap",
        "os.applyUpdatesToInst": "actions/os",
        "id-1262": "os.applyUpdatesToInst",
        "os.arSupported": "actions/xr",
        "id-569": "os.arSupported",
        "os.bufferFormAddressGLTF": "actions/animations",
        "id-1215": "os.bufferFormAddressGLTF",
        "os.bufferSound": "actions/audio",
        "id-781": "os.bufferSound",
        "os.calculateRayFromCamera": "actions/portals",
        "id-1210": "os.calculateRayFromCamera",
        "os.cancelSound": "actions/audio",
        "id-785": "os.cancelSound",
        "os.capturePhoto": "actions/camera",
        "id-664": "os.capturePhoto",
        "os.closeBarcodeScanner": "actions/barcodes",
        "id-642": "os.closeBarcodeScanner",
        "os.closeCircleWipe": "actions/portals",
        "id-797": "os.closeCircleWipe",
        "os.closeImageClassifier": "actions/image-classification",
        "id-657": "os.closeImageClassifier",
        "os.closePhotoCamera": "actions/camera",
        "id-668": "os.closePhotoCamera",
        "os.closeQRCodeScanner": "actions/barcodes",
        "id-628": "os.closeQRCodeScanner",
        "os.compileApp": "actions/app",
        "id-932": "os.compileApp",
        "os.convertGeolocationToWhat3Words": "actions/os",
        "id-1195": "os.convertGeolocationToWhat3Words",
        "os.countEvents": "actions/records",
        "id-1189": "os.countEvents",
        "os.createInitializationUpdate": "actions/os",
        "id-1258": "os.createInitializationUpdate",
        "os.device": "actions/os",
        "id-546": "os.device",
        "os.disableAR": "actions/xr",
        "id-559": "os.disableAR",
        "os.disablePointOfView": "actions/portals",
        "id-584": "os.disablePointOfView",
        "os.disableVR": "actions/xr",
        "id-566": "os.disableVR",
        "os.disableWakeLock": "actions/os",
        "id-590": "os.disableWakeLock",
        "os.download": "actions/files",
        "id-596": "os.download",
        "os.downloadBots": "actions/files",
        "id-602": "os.downloadBots",
        "os.downloadBotsAsInitialzationUpdate": "actions/files",
        "id-607": "os.downloadBotsAsInitialzationUpdate",
        "os.downloadInst": "actions/files",
        "id-615": "os.downloadInst",
        "os.enableAR": "actions/xr",
        "id-555": "os.enableAR",
        "os.enableCustomDragging": "actions/portals",
        "id-823": "os.enableCustomDragging",
        "os.enablePointOfView": "actions/portals",
        "id-575": "os.enablePointOfView",
        "os.enableVR": "actions/xr",
        "id-562": "os.enableVR",
        "os.eraseData": "actions/records",
        "id-1132": "os.eraseData",
        "os.eraseManualApprovalData": "actions/records",
        "id-1138": "os.eraseManualApprovalData",
        "os.exitFullscreenMode": "actions/portals",
        "id-472": "os.exitFullscreenMode",
        "os.getAverageFrameRate": "actions/os",
        "id-880": "os.getAverageFrameRate",
        "os.getCameraPosition": "actions/portals",
        "id-836": "os.getCameraPosition",
        "os.getCameraRotation": "actions/portals",
        "id-840": "os.getCameraRotation",
        "os.getCurrentDimension": "actions/portals",
        "id-715": "os.getCurrentDimension",
        "os.getCurrentInst": "actions/portals",
        "id-721": "os.getCurrentInst",
        "os.getCurrentInstUpdate": "actions/os",
        "id-1266": "os.getCurrentInstUpdate",
        "os.getData": "actions/records",
        "id-1114": "os.getData",
        "os.getDimensionalDepth": "actions/portals",
        "id-734": "os.getDimensionalDepth",
        "os.getFocusPoint": "actions/portals",
        "id-848": "os.getFocusPoint",
        "os.getGeolocation": "actions/os",
        "id-830": "os.getGeolocation",
        "os.getInputList": "actions/portals",
        "id-873": "os.getInputList",
        "os.getInputState": "actions/portals",
        "id-868": "os.getInputState",
        "os.getInstStateFromUpdates": "actions/os",
        "id-1254": "os.getInstStateFromUpdates",
        "os.getManualApprovalData": "actions/records",
        "id-1120": "os.getManualApprovalData",
        "os.getMediaPermission": "actions/os",
        "id-876": "os.getMediaPermission",
        "os.getMenuDimension": "actions/portals",
        "id-724": "os.getMenuDimension",
        "os.getMiniPortalDimension": "actions/portals",
        "id-727": "os.getMiniPortalDimension",
        "os.getPointerDirection": "actions/portals",
        "id-864": "os.getPointerDirection",
        "os.getPointerPosition": "actions/portals",
        "id-852": "os.getPointerPosition",
        "os.getPointerRotation": "actions/portals",
        "id-856": "os.getPointerRotation",
        "os.getPortalDimension": "actions/portals",
        "id-730": "os.getPortalDimension",
        "os.getPublicRecordKey": "actions/records",
        "id-1039": "os.getPublicRecordKey",
        "os.getRoomOptions": "actions/rooms",
        "id-898": "os.getRoomOptions",
        "os.getRoomRemoteOptions": "actions/rooms",
        "id-913": "os.getRoomRemoteOptions",
        "os.getRoomTrackOptions": "actions/rooms",
        "id-902": "os.getRoomTrackOptions",
        "os.getSubjectlessPublicRecordKey": "actions/records",
        "id-1043": "os.getSubjectlessPublicRecordKey",
        "os.getWakeLockConfiguration": "actions/os",
        "id-593": "os.getWakeLockConfiguration",
        "os.goToDimension": "actions/portals",
        "id-758": "os.goToDimension",
        "os.goToURL": "actions/portals",
        "id-762": "os.goToURL",
        "os.grantInstAdminPermission": "actions/records",
        "id-1061": "os.grantInstAdminPermission",
        "os.grantInstRole": "actions/records",
        "id-1081": "os.grantInstRole",
        "os.grantRecordMarkerPermission": "actions/records",
        "id-1047": "os.grantRecordMarkerPermission",
        "os.grantUserRole": "actions/records",
        "id-1066": "os.grantUserRole",
        "os.hasBotInMiniPortal": "actions/portals",
        "id-789": "os.hasBotInMiniPortal",
        "os.hideBarcode": "actions/barcodes",
        "id-650": "os.hideBarcode",
        "os.hideChat": "actions/os",
        "id-536": "os.hideChat",
        "os.hideHtml": "actions/os",
        "id-479": "os.hideHtml",
        "os.hideQRCode": "actions/barcodes",
        "id-635": "os.hideQRCode",
        "os.hideTips": "actions/portals",
        "id-460": "os.hideTips",
        "os.importAUX": "actions/files",
        "id-699": "os.importAUX",
        "os.inSheet": "actions/portals",
        "id-833": "os.inSheet",
        "os.instStatuses": "actions/os",
        "id-1283": "os.instStatuses",
        "os.instances": "actions/os",
        "id-1273": "os.instances",
        "os.isCollaborative": "actions/os",
        "id-549": "os.isCollaborative",
        "os.isInDimension": "actions/portals",
        "id-711": "os.isInDimension",
        "os.isRecordKey": "actions/records",
        "id-1096": "os.isRecordKey",
        "os.joinRoom": "actions/rooms",
        "id-883": "os.joinRoom",
        "os.leaveRoom": "actions/rooms",
        "id-888": "os.leaveRoom",
        "os.listBuiltinTags": "actions/app",
        "id-1033": "os.listBuiltinTags",
        "os.listData": "actions/records",
        "id-1126": "os.listData",
        "os.listFormAnimations": "actions/animations",
        "id-1230": "os.listFormAnimations",
        "os.listInstUpdates": "actions/os",
        "id-1251": "os.listInstUpdates",
        "os.loadInst": "actions/os",
        "id-691": "os.loadInst",
        "os.log": "actions/os",
        "id-826": "os.log",
        "os.meetCommand": "actions/os",
        "id-1296": "os.meetCommand",
        "os.meetFunction": "actions/os",
        "id-1301": "os.meetFunction",
        "os.openBarcodeScanner": "actions/barcodes",
        "id-638": "os.openBarcodeScanner",
        "os.openCircleWipe": "actions/portals",
        "id-801": "os.openCircleWipe",
        "os.openDevConsole": "actions/os",
        "id-770": "os.openDevConsole",
        "os.openImageClassifier": "actions/image-classification",
        "id-653": "os.openImageClassifier",
        "os.openPhotoCamera": "actions/camera",
        "id-660": "os.openPhotoCamera",
        "os.openQRCodeScanner": "actions/barcodes",
        "id-624": "os.openQRCodeScanner",
        "os.openURL": "actions/portals",
        "id-766": "os.openURL",
        "os.parseBotsFromData": "actions/files",
        "id-703": "os.parseBotsFromData",
        "os.playSound": "actions/audio",
        "id-777": "os.playSound",
        "os.raycast": "actions/portals",
        "id-1204": "os.raycast",
        "os.raycastFromCamera": "actions/portals",
        "id-1199": "os.raycastFromCamera",
        "os.recordData": "actions/records",
        "id-1100": "os.recordData",
        "os.recordEvent": "actions/records",
        "id-1183": "os.recordEvent",
        "os.recordFile": "actions/records",
        "id-1144": "os.recordFile",
        "os.recordManualApprovalData": "actions/records",
        "id-1107": "os.recordManualApprovalData",
        "os.registerApp": "actions/app",
        "id-923": "os.registerApp",
        "os.registerTagPrefix": "actions/app",
        "id-918": "os.registerTagPrefix",
        "os.remoteCount": "actions/os",
        "id-1276": "os.remoteCount",
        "os.remotes": "actions/os",
        "id-1248": "os.remotes",
        "os.replaceDragBot": "actions/portals",
        "id-707": "os.replaceDragBot",
        "os.requestAuthBot": "actions/records",
        "id-1036": "os.requestAuthBot",
        "os.requestFullscreenMode": "actions/portals",
        "id-469": "os.requestFullscreenMode",
        "os.requestWakeLock": "actions/os",
        "id-587": "os.requestWakeLock",
        "os.revokeInstRole": "actions/records",
        "id-1089": "os.revokeInstRole",
        "os.revokeRecordMarkerPermission": "actions/records",
        "id-1054": "os.revokeRecordMarkerPermission",
        "os.revokeUserRole": "actions/records",
        "id-1074": "os.revokeUserRole",
        "os.run": "actions/os",
        "id-539": "os.run",
        "os.setClipboard": "actions/os",
        "id-482": "os.setClipboard",
        "os.setRoomOptions": "actions/rooms",
        "id-893": "os.setRoomOptions",
        "os.setRoomTrackOptions": "actions/rooms",
        "id-907": "os.setRoomTrackOptions",
        "os.share": "actions/os",
        "id-793": "os.share",
        "os.showBarcode": "actions/barcodes",
        "id-645": "os.showBarcode",
        "os.showConfirm": "actions/portals",
        "id-754": "os.showConfirm",
        "os.showHtml": "actions/os",
        "id-475": "os.showHtml",
        "os.showInputForTag": "actions/portals",
        "id-738": "os.showInputForTag",
        "os.showJoinCode": "actions/barcodes",
        "id-464": "os.showJoinCode",
        "os.showQRCode": "actions/barcodes",
        "id-631": "os.showQRCode",
        "os.showUploadAuxFile": "actions/files",
        "id-618": "os.showUploadAuxFile",
        "os.showUploadFiles": "actions/files",
        "id-621": "os.showUploadFiles",
        "os.sleep": "actions/os",
        "id-444": "os.sleep",
        "os.startFormAnimation": "actions/animations",
        "id-1219": "os.startFormAnimation",
        "os.stopFormAnimation": "actions/animations",
        "id-1225": "os.stopFormAnimation",
        "os.tip": "actions/portals",
        "id-453": "os.tip",
        "os.toast": "actions/os",
        "id-448": "os.toast",
        "os.totalRemoteCount": "actions/os",
        "id-1280": "os.totalRemoteCount",
        "os.unloadInst": "actions/os",
        "id-695": "os.unloadInst",
        "os.unregisterApp": "actions/app",
        "id-928": "os.unregisterApp",
        "os.version": "actions/os",
        "id-543": "os.version",
        "os.vrSupported": "actions/xr",
        "id-572": "os.vrSupported",
        "os.agreedUponTime": "actions/time",
        "id-672": "os.agreedUponTime",
        "os.deadReckoningTime": "actions/time",
        "id-680": "os.deadReckoningTime",
        "os.instLatency": "actions/time",
        "id-674": "os.instLatency",
        "os.instTimeOffset": "actions/time",
        "id-676": "os.instTimeOffset",
        "os.instTimeOffsetSpread": "actions/time",
        "id-678": "os.instTimeOffsetSpread",
        "os.localTime": "actions/time",
        "id-670": "os.localTime",
        "removeTags": "actions/data",
        "id-141": "removeTags",
        "renameTag": "actions/data",
        "id-146": "renameTag",
        "setTag": "actions/data",
        "id-93": "setTag",
        "setTagMask": "actions/data",
        "id-99": "setTagMask",
        "subtractMods": "actions/mods",
        "id-157": "subtractMods",
        "superShout": "actions/event",
        "id-220": "superShout",
        "uuid": "actions/data",
        "id-355": "uuid",
        "web.get": "actions/web",
        "id-2011": "web.get",
        "web.hook": "actions/web",
        "id-2022": "web.hook",
        "web.post": "actions/web",
        "id-2016": "web.post",
        "configBot": "actions/os",
        "id-418": "configBot"
    }
}