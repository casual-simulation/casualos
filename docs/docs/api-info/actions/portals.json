{
    "hash": "actions/portals",
    "pageTitle": "Portal Actions",
    "pageDescription": "Actions for working with portals.",
    "pageSidebarLabel": "Portals",
    "contents": [
        {
            "id": 789,
            "order": 9999,
            "name": "os.closeCircleWipe",
            "reflection": {
                "id": 789,
                "name": "__type",
                "kind": 4096,
                "kindString": "Call signature",
                "flags": {},
                "comment": {
                    "shortText": "Causes a circular wipe animation to close around the screen.\nThis can be used to cover the grid portal while transitioning between scenes.\nReturns a promise that resolves when the animation has finished running.\nThe promise will throw an exception if [`os.openCircleWipe(options)`](ref:os.openCircleWipe) is called while the animation is running.",
                    "tags": [
                        {
                            "tag": "example",
                            "paramName": "",
                            "text": "Hide the grid portal with a circular wipe animation.\nawait os.closeCircleWipe();\nos.toast(\"Hidden!\");\n"
                        },
                        {
                            "tag": "example",
                            "paramName": "",
                            "text": "Hide the grid portal and show it after an additional second.\nawait os.closeCircleWipe();\nawait os.sleep(1000);\nawait os.openCircleWipe();\n"
                        },
                        {
                            "tag": "example",
                            "paramName": "",
                            "text": "Use a custom color for the circle wipe.\nawait os.closeCircleWipe({\n    color: '#63f1aa'\n});\n"
                        },
                        {
                            "tag": "example",
                            "paramName": "",
                            "text": "Make the circle wipe take 5 seconds to complete.\nawait os.closeCircleWipe({\n    duration: 5\n});\n"
                        },
                        {
                            "tag": "dochash",
                            "paramName": "",
                            "text": "actions/portals"
                        },
                        {
                            "tag": "docname",
                            "paramName": "",
                            "text": "os.closeCircleWipe"
                        },
                        {
                            "tag": "docgroup",
                            "paramName": "",
                            "text": "10-circle-wipe\n"
                        }
                    ]
                },
                "parameters": [
                    {
                        "id": 790,
                        "name": "options",
                        "kind": 32768,
                        "kindString": "Parameter",
                        "flags": {
                            "isOptional": true
                        },
                        "comment": {
                            "shortText": "the options that should be used for the effect.\n",
                            "tags": []
                        },
                        "type": {
                            "type": "reference",
                            "typeArguments": [
                                {
                                    "type": "reference",
                                    "name": "OpenCircleWipeOptions"
                                }
                            ],
                            "qualifiedName": "Partial",
                            "package": "typescript",
                            "name": "Partial"
                        }
                    }
                ],
                "type": {
                    "type": "reference",
                    "typeArguments": [
                        {
                            "type": "intrinsic",
                            "name": "void"
                        }
                    ],
                    "qualifiedName": "Promise",
                    "package": "typescript",
                    "name": "Promise"
                }
            },
            "comment": {
                "shortText": "Causes a circular wipe animation to close around the screen.\nThis can be used to cover the grid portal while transitioning between scenes.\nReturns a promise that resolves when the animation has finished running.\nThe promise will throw an exception if {@link os.openCircleWipe} is called while the animation is running.",
                "text": "",
                "tags": [
                    {
                        "tagName": "example",
                        "paramName": "",
                        "text": "Hide the grid portal with a circular wipe animation.\nawait os.closeCircleWipe();\nos.toast(\"Hidden!\");\n"
                    },
                    {
                        "tagName": "example",
                        "paramName": "",
                        "text": "Hide the grid portal and show it after an additional second.\nawait os.closeCircleWipe();\nawait os.sleep(1000);\nawait os.openCircleWipe();\n"
                    },
                    {
                        "tagName": "example",
                        "paramName": "",
                        "text": "Use a custom color for the circle wipe.\nawait os.closeCircleWipe({\n    color: '#63f1aa'\n});\n"
                    },
                    {
                        "tagName": "example",
                        "paramName": "",
                        "text": "Make the circle wipe take 5 seconds to complete.\nawait os.closeCircleWipe({\n    duration: 5\n});\n"
                    },
                    {
                        "tagName": "dochash",
                        "paramName": "",
                        "text": "actions/portals"
                    },
                    {
                        "tagName": "docname",
                        "paramName": "",
                        "text": "os.closeCircleWipe"
                    },
                    {
                        "tagName": "docgroup",
                        "paramName": "",
                        "text": "10-circle-wipe\n"
                    }
                ]
            },
            "group": "10-circle-wipe"
        },
        {
            "id": 793,
            "order": 9999,
            "name": "os.openCircleWipe",
            "reflection": {
                "id": 793,
                "name": "__type",
                "kind": 4096,
                "kindString": "Call signature",
                "flags": {},
                "comment": {
                    "shortText": "Causes the circular wipe animation to open around the screen.\nThis can be used to reveal the grid portal after transitioning between screens.\nReturns a promise that resolves when the animation has finished running.\nThe promise will throw an exception if [`os.closeCircleWipe(options)`](ref:os.closeCircleWipe) is called while the animation is running.",
                    "tags": [
                        {
                            "tag": "example",
                            "paramName": "",
                            "text": "Reveal the grid portal with a circular wipe animation.\nawait os.openCircleWipe();\nos.toast(\"Revealed!\");\n"
                        },
                        {
                            "tag": "example",
                            "paramName": "",
                            "text": "Hide the grid portal and show it after an additional second.\nawait os.closeCircleWipe();\nawait os.sleep(1000);\nawait os.openCircleWipe();\n"
                        },
                        {
                            "tag": "example",
                            "paramName": "",
                            "text": "Use a custom color for the circle wipe.\nawait os.openCircleWipe({\n    color: '#63f1aa'\n});\n"
                        },
                        {
                            "tag": "example",
                            "paramName": "",
                            "text": "Make the circle wipe take 5 seconds to complete.\nawait os.openCircleWipe({\n    duration: 5\n});\n"
                        },
                        {
                            "tag": "dochash",
                            "paramName": "",
                            "text": "actions/portals"
                        },
                        {
                            "tag": "docname",
                            "paramName": "",
                            "text": "os.openCircleWipe"
                        },
                        {
                            "tag": "docgroup",
                            "paramName": "",
                            "text": "10-circle-wipe\n"
                        }
                    ]
                },
                "parameters": [
                    {
                        "id": 794,
                        "name": "options",
                        "kind": 32768,
                        "kindString": "Parameter",
                        "flags": {
                            "isOptional": true
                        },
                        "comment": {
                            "shortText": "the options that should be used for the effect.\n",
                            "tags": []
                        },
                        "type": {
                            "type": "reference",
                            "typeArguments": [
                                {
                                    "type": "reference",
                                    "name": "OpenCircleWipeOptions"
                                }
                            ],
                            "qualifiedName": "Partial",
                            "package": "typescript",
                            "name": "Partial"
                        }
                    }
                ],
                "type": {
                    "type": "reference",
                    "typeArguments": [
                        {
                            "type": "intrinsic",
                            "name": "void"
                        }
                    ],
                    "qualifiedName": "Promise",
                    "package": "typescript",
                    "name": "Promise"
                }
            },
            "comment": {
                "shortText": "Causes the circular wipe animation to open around the screen.\nThis can be used to reveal the grid portal after transitioning between screens.\nReturns a promise that resolves when the animation has finished running.\nThe promise will throw an exception if {@link os.closeCircleWipe} is called while the animation is running.",
                "text": "",
                "tags": [
                    {
                        "tagName": "example",
                        "paramName": "",
                        "text": "Reveal the grid portal with a circular wipe animation.\nawait os.openCircleWipe();\nos.toast(\"Revealed!\");\n"
                    },
                    {
                        "tagName": "example",
                        "paramName": "",
                        "text": "Hide the grid portal and show it after an additional second.\nawait os.closeCircleWipe();\nawait os.sleep(1000);\nawait os.openCircleWipe();\n"
                    },
                    {
                        "tagName": "example",
                        "paramName": "",
                        "text": "Use a custom color for the circle wipe.\nawait os.openCircleWipe({\n    color: '#63f1aa'\n});\n"
                    },
                    {
                        "tagName": "example",
                        "paramName": "",
                        "text": "Make the circle wipe take 5 seconds to complete.\nawait os.openCircleWipe({\n    duration: 5\n});\n"
                    },
                    {
                        "tagName": "dochash",
                        "paramName": "",
                        "text": "actions/portals"
                    },
                    {
                        "tagName": "docname",
                        "paramName": "",
                        "text": "os.openCircleWipe"
                    },
                    {
                        "tagName": "docgroup",
                        "paramName": "",
                        "text": "10-circle-wipe\n"
                    }
                ]
            },
            "group": "10-circle-wipe"
        },
        {
            "id": 707,
            "order": 9999,
            "name": "os.getCurrentDimension",
            "reflection": {
                "id": 707,
                "name": "__type",
                "kind": 4096,
                "kindString": "Call signature",
                "flags": {},
                "comment": {
                    "shortText": "Gets the dimension that is loaded into the [`#gridPortal`](tags:gridPortal) portal.",
                    "text": "> This function behaves exactly like [`os.getPortalDimension(portal)`](ref:os.getPortalDimension) when given \"gridPortal\".\n",
                    "tags": [
                        {
                            "tag": "example",
                            "paramName": "",
                            "text": "Show a message of the dimension that is currently in the #gridPortal portal.\nconst dimension = os.getCurrentDimension();\nos.toast(dimension);\n"
                        },
                        {
                            "tag": "dochash",
                            "paramName": "",
                            "text": "actions/portals"
                        },
                        {
                            "tag": "doctitle",
                            "paramName": "",
                            "text": "Portal Actions"
                        },
                        {
                            "tag": "docsidebar",
                            "paramName": "",
                            "text": "Portals"
                        },
                        {
                            "tag": "docdescription",
                            "paramName": "",
                            "text": "Actions for working with portals."
                        },
                        {
                            "tag": "docname",
                            "paramName": "",
                            "text": "os.getCurrentDimension"
                        },
                        {
                            "tag": "docgroup",
                            "paramName": "",
                            "text": "10-config-values\n"
                        }
                    ]
                },
                "type": {
                    "type": "intrinsic",
                    "name": "string"
                }
            },
            "comment": {
                "shortText": "Gets the dimension that is loaded into the {@tag gridPortal} portal.",
                "text": "> This function behaves exactly like {@link os.getPortalDimension} when given \"gridPortal\".\n",
                "tags": [
                    {
                        "tagName": "example",
                        "paramName": "",
                        "text": "Show a message of the dimension that is currently in the #gridPortal portal.\nconst dimension = os.getCurrentDimension();\nos.toast(dimension);\n"
                    },
                    {
                        "tagName": "dochash",
                        "paramName": "",
                        "text": "actions/portals"
                    },
                    {
                        "tagName": "doctitle",
                        "paramName": "",
                        "text": "Portal Actions"
                    },
                    {
                        "tagName": "docsidebar",
                        "paramName": "",
                        "text": "Portals"
                    },
                    {
                        "tagName": "docdescription",
                        "paramName": "",
                        "text": "Actions for working with portals."
                    },
                    {
                        "tagName": "docname",
                        "paramName": "",
                        "text": "os.getCurrentDimension"
                    },
                    {
                        "tagName": "docgroup",
                        "paramName": "",
                        "text": "10-config-values\n"
                    }
                ]
            },
            "group": "10-config-values"
        },
        {
            "id": 713,
            "order": 9999,
            "name": "os.getCurrentInst",
            "reflection": {
                "id": 713,
                "name": "__type",
                "kind": 4096,
                "kindString": "Call signature",
                "flags": {},
                "comment": {
                    "shortText": "Gets the inst that is loaded.",
                    "tags": [
                        {
                            "tag": "example",
                            "paramName": "",
                            "text": "Show a message of the current inst.\nconst inst = os.getCurrentInst();\nos.toast(inst);\n"
                        },
                        {
                            "tag": "dochash",
                            "paramName": "",
                            "text": "actions/portals"
                        },
                        {
                            "tag": "docname",
                            "paramName": "",
                            "text": "os.getCurrentInst"
                        },
                        {
                            "tag": "docgroup",
                            "paramName": "",
                            "text": "10-config-values\n"
                        }
                    ]
                },
                "type": {
                    "type": "intrinsic",
                    "name": "string"
                }
            },
            "comment": {
                "shortText": "Gets the inst that is loaded.",
                "text": "",
                "tags": [
                    {
                        "tagName": "example",
                        "paramName": "",
                        "text": "Show a message of the current inst.\nconst inst = os.getCurrentInst();\nos.toast(inst);\n"
                    },
                    {
                        "tagName": "dochash",
                        "paramName": "",
                        "text": "actions/portals"
                    },
                    {
                        "tagName": "docname",
                        "paramName": "",
                        "text": "os.getCurrentInst"
                    },
                    {
                        "tagName": "docgroup",
                        "paramName": "",
                        "text": "10-config-values\n"
                    }
                ]
            },
            "group": "10-config-values"
        },
        {
            "id": 726,
            "order": 9999,
            "name": "os.getDimensionalDepth",
            "reflection": {
                "id": 726,
                "name": "__type",
                "kind": 4096,
                "kindString": "Call signature",
                "flags": {},
                "comment": {
                    "shortText": "Gets the distance that the player bot is from the given dimension.",
                    "text": "Returns `0` if the player bot is in the dimension, `1` if the dimension is in a portal, and `-1` if neither are true.\n",
                    "tags": [
                        {
                            "tag": "example",
                            "paramName": "",
                            "text": "Get the distance to the \"fun\" dimension.\nconst distance = os.getDimensionalDepth(\"fun\");\nif (distance === 0) {\n    os.toast(\"Player is in the fun dimension\");\n} else if(distance === 1) {\n    os.toast(\"Player is viewing the fun dimension\");\n} else {\n    os.toast(\"Player cannot access the fun dimension\");\n}\n"
                        },
                        {
                            "tag": "dochash",
                            "paramName": "",
                            "text": "actions/portals"
                        },
                        {
                            "tag": "docname",
                            "paramName": "",
                            "text": "os.getDimensionalDepth"
                        },
                        {
                            "tag": "docgroup",
                            "paramName": "",
                            "text": "10-config-values\n"
                        }
                    ]
                },
                "parameters": [
                    {
                        "id": 727,
                        "name": "dimension",
                        "kind": 32768,
                        "kindString": "Parameter",
                        "flags": {},
                        "comment": {
                            "shortText": "The dimension to check for.\n",
                            "tags": []
                        },
                        "type": {
                            "type": "intrinsic",
                            "name": "string"
                        }
                    }
                ],
                "type": {
                    "type": "intrinsic",
                    "name": "number"
                }
            },
            "comment": {
                "shortText": "Gets the distance that the player bot is from the given dimension.",
                "text": "Returns `0` if the player bot is in the dimension, `1` if the dimension is in a portal, and `-1` if neither are true.\n",
                "tags": [
                    {
                        "tagName": "example",
                        "paramName": "",
                        "text": "Get the distance to the \"fun\" dimension.\nconst distance = os.getDimensionalDepth(\"fun\");\nif (distance === 0) {\n    os.toast(\"Player is in the fun dimension\");\n} else if(distance === 1) {\n    os.toast(\"Player is viewing the fun dimension\");\n} else {\n    os.toast(\"Player cannot access the fun dimension\");\n}\n"
                    },
                    {
                        "tagName": "dochash",
                        "paramName": "",
                        "text": "actions/portals"
                    },
                    {
                        "tagName": "docname",
                        "paramName": "",
                        "text": "os.getDimensionalDepth"
                    },
                    {
                        "tagName": "docgroup",
                        "paramName": "",
                        "text": "10-config-values\n"
                    }
                ]
            },
            "group": "10-config-values"
        },
        {
            "id": 716,
            "order": 9999,
            "name": "os.getMenuDimension",
            "reflection": {
                "id": 716,
                "name": "__type",
                "kind": 4096,
                "kindString": "Call signature",
                "flags": {},
                "comment": {
                    "shortText": "Gets the dimension that is loaded into the [`#menuPortal`](tags:menuPortal) portal.",
                    "text": "> This function behaves exactly like [`os.getPortalDimension(portal)`](ref:os.getPortalDimension) when given \"menuPortal\".\n",
                    "tags": [
                        {
                            "tag": "example",
                            "paramName": "",
                            "text": "Show a message of the dimension that is currently in the #menuPortal portal.\nconst dimension = os.getMenuDimension();\nos.toast(dimension);\n"
                        },
                        {
                            "tag": "dochash",
                            "paramName": "",
                            "text": "actions/portals"
                        },
                        {
                            "tag": "docname",
                            "paramName": "",
                            "text": "os.getMenuDimension"
                        },
                        {
                            "tag": "docgroup",
                            "paramName": "",
                            "text": "10-config-values\n"
                        }
                    ]
                },
                "type": {
                    "type": "intrinsic",
                    "name": "string"
                }
            },
            "comment": {
                "shortText": "Gets the dimension that is loaded into the {@tag menuPortal} portal.",
                "text": "> This function behaves exactly like {@link os.getPortalDimension} when given \"menuPortal\".\n",
                "tags": [
                    {
                        "tagName": "example",
                        "paramName": "",
                        "text": "Show a message of the dimension that is currently in the #menuPortal portal.\nconst dimension = os.getMenuDimension();\nos.toast(dimension);\n"
                    },
                    {
                        "tagName": "dochash",
                        "paramName": "",
                        "text": "actions/portals"
                    },
                    {
                        "tagName": "docname",
                        "paramName": "",
                        "text": "os.getMenuDimension"
                    },
                    {
                        "tagName": "docgroup",
                        "paramName": "",
                        "text": "10-config-values\n"
                    }
                ]
            },
            "group": "10-config-values"
        },
        {
            "id": 719,
            "order": 9999,
            "name": "os.getMiniPortalDimension",
            "reflection": {
                "id": 719,
                "name": "__type",
                "kind": 4096,
                "kindString": "Call signature",
                "flags": {},
                "comment": {
                    "shortText": "Gets the dimension that is loaded into the #miniGridPortal portal.",
                    "text": "> This function behaves exactly like [`os.getPortalDimension(portal)`](ref:os.getPortalDimension) when given \"miniGridPortal\".\n",
                    "tags": [
                        {
                            "tag": "example",
                            "paramName": "",
                            "text": "Show a message of the dimension that is currently in the #miniGridPortal portal.\nconst dimension = os.getMiniPortalDimension();\nos.toast(dimension);\n"
                        },
                        {
                            "tag": "dochash",
                            "paramName": "",
                            "text": "actions/portals"
                        },
                        {
                            "tag": "docname",
                            "paramName": "",
                            "text": "os.getMiniPortalDimension"
                        },
                        {
                            "tag": "docgroup",
                            "paramName": "",
                            "text": "10-config-values\n"
                        }
                    ]
                },
                "type": {
                    "type": "intrinsic",
                    "name": "string"
                }
            },
            "comment": {
                "shortText": "Gets the dimension that is loaded into the #miniGridPortal portal.",
                "text": "> This function behaves exactly like {@link os.getPortalDimension} when given \"miniGridPortal\".\n",
                "tags": [
                    {
                        "tagName": "example",
                        "paramName": "",
                        "text": "Show a message of the dimension that is currently in the #miniGridPortal portal.\nconst dimension = os.getMiniPortalDimension();\nos.toast(dimension);\n"
                    },
                    {
                        "tagName": "dochash",
                        "paramName": "",
                        "text": "actions/portals"
                    },
                    {
                        "tagName": "docname",
                        "paramName": "",
                        "text": "os.getMiniPortalDimension"
                    },
                    {
                        "tagName": "docgroup",
                        "paramName": "",
                        "text": "10-config-values\n"
                    }
                ]
            },
            "group": "10-config-values"
        },
        {
            "id": 722,
            "order": 9999,
            "name": "os.getPortalDimension",
            "reflection": {
                "id": 722,
                "name": "__type",
                "kind": 4096,
                "kindString": "Call signature",
                "flags": {},
                "comment": {
                    "shortText": "Gets the dimension that is loaded into the given portal.\nIf no dimension is loaded, then `null` is returned.",
                    "tags": [
                        {
                            "tag": "example",
                            "paramName": "",
                            "text": "Get the dimension that is currently showing in the #gridPortal.\nconst dimension = os.getPortalDimension('grid');\n"
                        },
                        {
                            "tag": "example",
                            "paramName": "",
                            "text": "Get the dimension that is currently showing in the #miniGridPortal.\nconst dimension = os.getPortalDimension('miniGrid');\n"
                        },
                        {
                            "tag": "dochash",
                            "paramName": "",
                            "text": "actions/portals"
                        },
                        {
                            "tag": "docname",
                            "paramName": "",
                            "text": "os.getPortalDimension"
                        },
                        {
                            "tag": "docgroup",
                            "paramName": "",
                            "text": "10-config-values\n"
                        }
                    ]
                },
                "parameters": [
                    {
                        "id": 723,
                        "name": "portal",
                        "kind": 32768,
                        "kindString": "Parameter",
                        "flags": {},
                        "comment": {
                            "shortText": "the portal that the dimension should be retrieved for\n",
                            "tags": []
                        },
                        "type": {
                            "type": "intrinsic",
                            "name": "string"
                        }
                    }
                ],
                "type": {
                    "type": "intrinsic",
                    "name": "string"
                }
            },
            "comment": {
                "shortText": "Gets the dimension that is loaded into the given portal.\nIf no dimension is loaded, then `null` is returned.",
                "text": "",
                "tags": [
                    {
                        "tagName": "example",
                        "paramName": "",
                        "text": "Get the dimension that is currently showing in the #gridPortal.\nconst dimension = os.getPortalDimension('grid');\n"
                    },
                    {
                        "tagName": "example",
                        "paramName": "",
                        "text": "Get the dimension that is currently showing in the #miniGridPortal.\nconst dimension = os.getPortalDimension('miniGrid');\n"
                    },
                    {
                        "tagName": "dochash",
                        "paramName": "",
                        "text": "actions/portals"
                    },
                    {
                        "tagName": "docname",
                        "paramName": "",
                        "text": "os.getPortalDimension"
                    },
                    {
                        "tagName": "docgroup",
                        "paramName": "",
                        "text": "10-config-values\n"
                    }
                ]
            },
            "group": "10-config-values"
        },
        {
            "id": 781,
            "order": 9999,
            "name": "os.hasBotInMiniPortal",
            "reflection": {
                "id": 781,
                "name": "__type",
                "kind": 4096,
                "kindString": "Call signature",
                "flags": {},
                "comment": {
                    "shortText": "Determines if the given bot is in the dimension that is currently loaded into the [`#miniGridPortal`](tags:miniGridPortal) portal.",
                    "tags": [
                        {
                            "tag": "example",
                            "paramName": "",
                            "text": "Show a message if a bot named \"bob\" is in the miniGridPortal.\nconst bob = getBot(\"#name\", \"bob\");\nif (os.hasBotInMiniPortal(bob)) {\n    os.toast(\"bob is in the miniGridPortal!\");\n}\n"
                        },
                        {
                            "tag": "dochash",
                            "paramName": "",
                            "text": "actions/portals"
                        },
                        {
                            "tag": "docname",
                            "paramName": "",
                            "text": "os.hasBotInMiniPortal"
                        },
                        {
                            "tag": "docgroup",
                            "paramName": "",
                            "text": "10-config-values\n"
                        }
                    ]
                },
                "parameters": [
                    {
                        "id": 782,
                        "name": "bots",
                        "kind": 32768,
                        "kindString": "Parameter",
                        "flags": {},
                        "comment": {
                            "shortText": "the bot or bots that should be checked.\n",
                            "tags": []
                        },
                        "type": {
                            "type": "union",
                            "types": [
                                {
                                    "type": "reference",
                                    "id": 2709,
                                    "name": "Bot"
                                },
                                {
                                    "type": "array",
                                    "elementType": {
                                        "type": "reference",
                                        "id": 2709,
                                        "name": "Bot"
                                    }
                                }
                            ]
                        }
                    }
                ],
                "type": {
                    "type": "intrinsic",
                    "name": "boolean"
                }
            },
            "comment": {
                "shortText": "Determines if the given bot is in the dimension that is currently loaded into the {@tag miniGridPortal} portal.",
                "text": "",
                "tags": [
                    {
                        "tagName": "example",
                        "paramName": "",
                        "text": "Show a message if a bot named \"bob\" is in the miniGridPortal.\nconst bob = getBot(\"#name\", \"bob\");\nif (os.hasBotInMiniPortal(bob)) {\n    os.toast(\"bob is in the miniGridPortal!\");\n}\n"
                    },
                    {
                        "tagName": "dochash",
                        "paramName": "",
                        "text": "actions/portals"
                    },
                    {
                        "tagName": "docname",
                        "paramName": "",
                        "text": "os.hasBotInMiniPortal"
                    },
                    {
                        "tagName": "docgroup",
                        "paramName": "",
                        "text": "10-config-values\n"
                    }
                ]
            },
            "group": "10-config-values"
        },
        {
            "id": 825,
            "order": 9999,
            "name": "os.inSheet",
            "reflection": {
                "id": 825,
                "name": "__type",
                "kind": 4096,
                "kindString": "Call signature",
                "flags": {},
                "comment": {
                    "shortText": "Gets whether the player is viewing the sheetPortal",
                    "tags": [
                        {
                            "tag": "example",
                            "paramName": "",
                            "text": "Show a toast if the player is viewing the sheet.\nif (os.inSheet()) {\n    os.toast(\"You are in the sheet!\");\n}\n"
                        },
                        {
                            "tag": "dochash",
                            "paramName": "",
                            "text": "actions/portals"
                        },
                        {
                            "tag": "docname",
                            "paramName": "",
                            "text": "os.inSheet"
                        },
                        {
                            "tag": "docgroup",
                            "paramName": "",
                            "text": "10-config-values\n"
                        }
                    ]
                },
                "type": {
                    "type": "intrinsic",
                    "name": "boolean"
                }
            },
            "comment": {
                "shortText": "Gets whether the player is viewing the sheetPortal",
                "text": "",
                "tags": [
                    {
                        "tagName": "example",
                        "paramName": "",
                        "text": "Show a toast if the player is viewing the sheet.\nif (os.inSheet()) {\n    os.toast(\"You are in the sheet!\");\n}\n"
                    },
                    {
                        "tagName": "dochash",
                        "paramName": "",
                        "text": "actions/portals"
                    },
                    {
                        "tagName": "docname",
                        "paramName": "",
                        "text": "os.inSheet"
                    },
                    {
                        "tagName": "docgroup",
                        "paramName": "",
                        "text": "10-config-values\n"
                    }
                ]
            },
            "group": "10-config-values"
        },
        {
            "id": 703,
            "order": 9999,
            "name": "os.isInDimension",
            "reflection": {
                "id": 703,
                "name": "__type",
                "kind": 4096,
                "kindString": "Call signature",
                "flags": {},
                "comment": {
                    "shortText": "Gets whether the given dimension is loaded into the [`#gridPortal`](tags:gridPortal) portal.",
                    "tags": [
                        {
                            "tag": "example",
                            "paramName": "",
                            "text": "Show a toast if the player is viewing the abc dimension.\nif (os.isInDimension(\"abc\")) {\n    os.toast(\"In the dimension!\");\n}\n"
                        },
                        {
                            "tag": "dochash",
                            "paramName": "",
                            "text": "actions/portals"
                        },
                        {
                            "tag": "docname",
                            "paramName": "",
                            "text": "os.isInDimension"
                        },
                        {
                            "tag": "docgroup",
                            "paramName": "",
                            "text": "10-config-values\n"
                        }
                    ]
                },
                "parameters": [
                    {
                        "id": 704,
                        "name": "dimension",
                        "kind": 32768,
                        "kindString": "Parameter",
                        "flags": {},
                        "comment": {
                            "shortText": "the dimension to check for.\n",
                            "tags": []
                        },
                        "type": {
                            "type": "intrinsic",
                            "name": "string"
                        }
                    }
                ],
                "type": {
                    "type": "intrinsic",
                    "name": "boolean"
                }
            },
            "comment": {
                "shortText": "Gets whether the given dimension is loaded into the {@tag gridPortal} portal.",
                "text": "",
                "tags": [
                    {
                        "tagName": "example",
                        "paramName": "",
                        "text": "Show a toast if the player is viewing the abc dimension.\nif (os.isInDimension(\"abc\")) {\n    os.toast(\"In the dimension!\");\n}\n"
                    },
                    {
                        "tagName": "dochash",
                        "paramName": "",
                        "text": "actions/portals"
                    },
                    {
                        "tagName": "docname",
                        "paramName": "",
                        "text": "os.isInDimension"
                    },
                    {
                        "tagName": "docgroup",
                        "paramName": "",
                        "text": "10-config-values\n"
                    }
                ]
            },
            "group": "10-config-values"
        },
        {
            "id": 464,
            "order": 9999,
            "name": "os.exitFullscreenMode",
            "reflection": {
                "id": 464,
                "name": "__type",
                "kind": 4096,
                "kindString": "Call signature",
                "flags": {},
                "comment": {
                    "shortText": "Exits fullscreen mode.",
                    "tags": [
                        {
                            "tag": "example",
                            "paramName": "",
                            "text": "Exit fullscreen mode.\nos.exitFullscreenMode();\n"
                        },
                        {
                            "tag": "dochash",
                            "paramName": "",
                            "text": "actions/portals"
                        },
                        {
                            "tag": "docname",
                            "paramName": "",
                            "text": "os.exitFullscreenMode"
                        },
                        {
                            "tag": "docgroup",
                            "paramName": "",
                            "text": "10-fullscreen\n"
                        }
                    ]
                },
                "type": {
                    "type": "reference",
                    "name": "ExitFullscreenAction"
                }
            },
            "comment": {
                "shortText": "Exits fullscreen mode.",
                "text": "",
                "tags": [
                    {
                        "tagName": "example",
                        "paramName": "",
                        "text": "Exit fullscreen mode.\nos.exitFullscreenMode();\n"
                    },
                    {
                        "tagName": "dochash",
                        "paramName": "",
                        "text": "actions/portals"
                    },
                    {
                        "tagName": "docname",
                        "paramName": "",
                        "text": "os.exitFullscreenMode"
                    },
                    {
                        "tagName": "docgroup",
                        "paramName": "",
                        "text": "10-fullscreen\n"
                    }
                ]
            },
            "group": "10-fullscreen"
        },
        {
            "id": 461,
            "order": 9999,
            "name": "os.requestFullscreenMode",
            "reflection": {
                "id": 461,
                "name": "__type",
                "kind": 4096,
                "kindString": "Call signature",
                "flags": {},
                "comment": {
                    "shortText": "Attempts to enter fullscreen mode. Depending on which web browser the player is using, this might ask for permission to go fullscreen.",
                    "text": "Note that iPhones currently don't support fullscreen mode.\n",
                    "tags": [
                        {
                            "tag": "example",
                            "paramName": "",
                            "text": "Enter fullscreen mode.\nos.requestFullscreenMode();\n"
                        },
                        {
                            "tag": "dochash",
                            "paramName": "",
                            "text": "actions/portals"
                        },
                        {
                            "tag": "docname",
                            "paramName": "",
                            "text": "os.requestFullscreenMode"
                        },
                        {
                            "tag": "docgroup",
                            "paramName": "",
                            "text": "10-fullscreen\n"
                        }
                    ]
                },
                "type": {
                    "type": "reference",
                    "name": "RequestFullscreenAction"
                }
            },
            "comment": {
                "shortText": "Attempts to enter fullscreen mode. Depending on which web browser the player is using, this might ask for permission to go fullscreen.",
                "text": "Note that iPhones currently don't support fullscreen mode.\n",
                "tags": [
                    {
                        "tagName": "example",
                        "paramName": "",
                        "text": "Enter fullscreen mode.\nos.requestFullscreenMode();\n"
                    },
                    {
                        "tagName": "dochash",
                        "paramName": "",
                        "text": "actions/portals"
                    },
                    {
                        "tagName": "docname",
                        "paramName": "",
                        "text": "os.requestFullscreenMode"
                    },
                    {
                        "tagName": "docgroup",
                        "paramName": "",
                        "text": "10-fullscreen\n"
                    }
                ]
            },
            "group": "10-fullscreen"
        },
        {
            "id": 750,
            "order": 9999,
            "name": "os.goToDimension",
            "reflection": {
                "id": 750,
                "name": "__type",
                "kind": 4096,
                "kindString": "Call signature",
                "flags": {},
                "comment": {
                    "shortText": "Loads the given dimension into the [`#gridPortal`](tags:gridPortal) portal. Triggers the [`@onPortalChanged`](tags:@onPortalChanged) shout for the gridPortal.",
                    "tags": [
                        {
                            "tag": "example",
                            "paramName": "",
                            "text": "Load the abc dimension.\nos.goToDimension(\"abc\");\n"
                        },
                        {
                            "tag": "dochash",
                            "paramName": "",
                            "text": "actions/portals"
                        },
                        {
                            "tag": "docname",
                            "paramName": "",
                            "text": "os.goToDimension"
                        },
                        {
                            "tag": "docgroup",
                            "paramName": "",
                            "text": "10-go-to\n"
                        }
                    ]
                },
                "parameters": [
                    {
                        "id": 751,
                        "name": "dimension",
                        "kind": 32768,
                        "kindString": "Parameter",
                        "flags": {},
                        "comment": {
                            "shortText": "the dimension that should be loaded.\n",
                            "tags": []
                        },
                        "type": {
                            "type": "intrinsic",
                            "name": "string"
                        }
                    }
                ],
                "type": {
                    "type": "reference",
                    "name": "GoToDimensionAction"
                }
            },
            "comment": {
                "shortText": "Loads the given dimension into the {@tag gridPortal} portal. Triggers the {@tag @onPortalChanged} shout for the gridPortal.",
                "text": "",
                "tags": [
                    {
                        "tagName": "example",
                        "paramName": "",
                        "text": "Load the abc dimension.\nos.goToDimension(\"abc\");\n"
                    },
                    {
                        "tagName": "dochash",
                        "paramName": "",
                        "text": "actions/portals"
                    },
                    {
                        "tagName": "docname",
                        "paramName": "",
                        "text": "os.goToDimension"
                    },
                    {
                        "tagName": "docgroup",
                        "paramName": "",
                        "text": "10-go-to\n"
                    }
                ]
            },
            "group": "10-go-to"
        },
        {
            "id": 754,
            "order": 9999,
            "name": "os.goToURL",
            "reflection": {
                "id": 754,
                "name": "__type",
                "kind": 4096,
                "kindString": "Call signature",
                "flags": {},
                "comment": {
                    "shortText": "Redirects the current tab to the given URL. Useful for sending the player to another webpage or ambient experience.",
                    "tags": [
                        {
                            "tag": "example",
                            "paramName": "",
                            "text": "Send the player to https://example.com.\nos.goToURL(\"https://example.com\");\n"
                        },
                        {
                            "tag": "dochash",
                            "paramName": "",
                            "text": "actions/portals"
                        },
                        {
                            "tag": "docname",
                            "paramName": "",
                            "text": "os.goToURL"
                        },
                        {
                            "tag": "docgroup",
                            "paramName": "",
                            "text": "10-go-to\n"
                        }
                    ]
                },
                "parameters": [
                    {
                        "id": 755,
                        "name": "url",
                        "kind": 32768,
                        "kindString": "Parameter",
                        "flags": {},
                        "comment": {
                            "shortText": "the [URL](https://en.wikipedia.org/wiki/URL) that the player should be sent to. Usually this is a website like `https://example.com`.\n",
                            "tags": []
                        },
                        "type": {
                            "type": "intrinsic",
                            "name": "string"
                        }
                    }
                ],
                "type": {
                    "type": "reference",
                    "name": "GoToURLAction"
                }
            },
            "comment": {
                "shortText": "Redirects the current tab to the given URL. Useful for sending the player to another webpage or ambient experience.",
                "text": "",
                "tags": [
                    {
                        "tagName": "example",
                        "paramName": "",
                        "text": "Send the player to https://example.com.\nos.goToURL(\"https://example.com\");\n"
                    },
                    {
                        "tagName": "dochash",
                        "paramName": "",
                        "text": "actions/portals"
                    },
                    {
                        "tagName": "docname",
                        "paramName": "",
                        "text": "os.goToURL"
                    },
                    {
                        "tagName": "docgroup",
                        "paramName": "",
                        "text": "10-go-to\n"
                    }
                ]
            },
            "group": "10-go-to"
        },
        {
            "id": 758,
            "order": 9999,
            "name": "os.openURL",
            "reflection": {
                "id": 758,
                "name": "__type",
                "kind": 4096,
                "kindString": "Call signature",
                "flags": {},
                "comment": {
                    "shortText": "Opens a new tab with the given URL. Useful for opening another webpage without redirecting the current tab.",
                    "tags": [
                        {
                            "tag": "example",
                            "paramName": "",
                            "text": "Open https://example.com in a new tab.\nos.openURL(\"https://example.com\");\n"
                        },
                        {
                            "tag": "dochash",
                            "paramName": "",
                            "text": "actions/portals"
                        },
                        {
                            "tag": "docname",
                            "paramName": "",
                            "text": "os.openURL"
                        },
                        {
                            "tag": "docgroup",
                            "paramName": "",
                            "text": "10-go-to\n"
                        }
                    ]
                },
                "parameters": [
                    {
                        "id": 759,
                        "name": "url",
                        "kind": 32768,
                        "kindString": "Parameter",
                        "flags": {},
                        "comment": {
                            "shortText": "the [URL](https://en.wikipedia.org/wiki/URL) that the player should be sent to. Usually this is a website like `https://example.com`.\n",
                            "tags": []
                        },
                        "type": {
                            "type": "intrinsic",
                            "name": "string"
                        }
                    }
                ],
                "type": {
                    "type": "reference",
                    "name": "OpenURLAction"
                }
            },
            "comment": {
                "shortText": "Opens a new tab with the given URL. Useful for opening another webpage without redirecting the current tab.",
                "text": "",
                "tags": [
                    {
                        "tagName": "example",
                        "paramName": "",
                        "text": "Open https://example.com in a new tab.\nos.openURL(\"https://example.com\");\n"
                    },
                    {
                        "tagName": "dochash",
                        "paramName": "",
                        "text": "actions/portals"
                    },
                    {
                        "tagName": "docname",
                        "paramName": "",
                        "text": "os.openURL"
                    },
                    {
                        "tagName": "docgroup",
                        "paramName": "",
                        "text": "10-go-to\n"
                    }
                ]
            },
            "group": "10-go-to"
        },
        {
            "id": 865,
            "order": 9999,
            "name": "os.getInputList",
            "reflection": {
                "id": 865,
                "name": "__type",
                "kind": 4096,
                "kindString": "Call signature",
                "flags": {},
                "comment": {
                    "shortText": "Gets the list of supported inputs. The returned strings can be used for the controller property in [`os.getInputState(controller, button)`](ref:os.getInputState) calls.",
                    "tags": [
                        {
                            "tag": "example",
                            "paramName": "",
                            "text": "Get a list of inputs and toast them.\nconst state = os.getInputList();\nos.toast(state);\n"
                        },
                        {
                            "tag": "dochash",
                            "paramName": "",
                            "text": "actions/portals"
                        },
                        {
                            "tag": "docname",
                            "paramName": "",
                            "text": "os.getInputList"
                        },
                        {
                            "tag": "docgroup",
                            "paramName": "",
                            "text": "10-input\n"
                        }
                    ]
                },
                "type": {
                    "type": "array",
                    "elementType": {
                        "type": "intrinsic",
                        "name": "string"
                    }
                }
            },
            "comment": {
                "shortText": "Gets the list of supported inputs. The returned strings can be used for the controller property in {@link os.getInputState} calls.",
                "text": "",
                "tags": [
                    {
                        "tagName": "example",
                        "paramName": "",
                        "text": "Get a list of inputs and toast them.\nconst state = os.getInputList();\nos.toast(state);\n"
                    },
                    {
                        "tagName": "dochash",
                        "paramName": "",
                        "text": "actions/portals"
                    },
                    {
                        "tagName": "docname",
                        "paramName": "",
                        "text": "os.getInputList"
                    },
                    {
                        "tagName": "docgroup",
                        "paramName": "",
                        "text": "10-input\n"
                    }
                ]
            },
            "group": "10-input"
        },
        {
            "id": 860,
            "order": 9999,
            "name": "os.getInputState",
            "reflection": {
                "id": 860,
                "name": "__type",
                "kind": 4096,
                "kindString": "Call signature",
                "flags": {},
                "comment": {
                    "shortText": "Gets the state of the given button on the given controller.",
                    "tags": [
                        {
                            "tag": "example",
                            "paramName": "",
                            "text": "Send a toast if the left mouse button is clicked.\nconst state = os.getInputState(\"mousePointer\", \"left\");\nif (state) {\n    os.toast(\"Left mouse button is down!\");\n}\n"
                        },
                        {
                            "tag": "example",
                            "paramName": "",
                            "text": "Send a toast if the shift key is down.\nconst state = os.getInputState(\"keyboard\", \"Shift\");\nif (state) {\n    os.toast(\"Shift is down!\");\n}\n"
                        },
                        {
                            "tag": "dochash",
                            "paramName": "",
                            "text": "actions/portals"
                        },
                        {
                            "tag": "docname",
                            "paramName": "",
                            "text": "os.getInputState"
                        },
                        {
                            "tag": "docgroup",
                            "paramName": "",
                            "text": "10-input\n"
                        }
                    ]
                },
                "parameters": [
                    {
                        "id": 861,
                        "name": "controller",
                        "kind": 32768,
                        "kindString": "Parameter",
                        "flags": {},
                        "comment": {
                            "shortText": "The name of the controller that should be checked.\nPossible values are:\n\n-    `mousePointer` - The mouse.\n-    `leftPointer` - The left controller.\n-    `rightPointer` - The right controller.\n-    `keyboard` - The keyboard.\n-    `touch` - The touchscreen.\n",
                            "tags": []
                        },
                        "type": {
                            "type": "intrinsic",
                            "name": "string"
                        }
                    },
                    {
                        "id": 862,
                        "name": "button",
                        "kind": 32768,
                        "kindString": "Parameter",
                        "flags": {},
                        "comment": {
                            "shortText": "the name of the button that you want to get the state of.\nPossible values are:\n\n-    `left` - The left mouse button. Only available on the mouse pointer. On mobile devices this will also be the state of the first touch.\n-    `right` - The right mouse button. Only available on the mouse pointer.\n-    `middle` - The middle mouse button. Only available on the mouse pointer.\n-    `primary` - The primary controller button. Only available on the left and right pointers.\n-    `squeeze` - The squeeze controller button. Only available on the left and right pointers.\n-    `Any` Key - The button for the given key. Only available on the keyboard.\n-    `0` - The first touch. Only available on the touchscreen.\n-    `1` - The second touch. Only available on the touchscreen.\n-    `2` - The third touch. Only available on the touchscreen.\n-    `3` - The fourth touch. Only available on the touchscreen.\n-    `5` - The fifth touch. Only available on the touchscreen.\n",
                            "tags": []
                        },
                        "type": {
                            "type": "intrinsic",
                            "name": "string"
                        }
                    }
                ],
                "type": {
                    "type": "union",
                    "types": [
                        {
                            "type": "literal",
                            "value": null
                        },
                        {
                            "type": "literal",
                            "value": "down"
                        },
                        {
                            "type": "literal",
                            "value": "held"
                        }
                    ]
                }
            },
            "comment": {
                "shortText": "Gets the state of the given button on the given controller.",
                "text": "",
                "tags": [
                    {
                        "tagName": "example",
                        "paramName": "",
                        "text": "Send a toast if the left mouse button is clicked.\nconst state = os.getInputState(\"mousePointer\", \"left\");\nif (state) {\n    os.toast(\"Left mouse button is down!\");\n}\n"
                    },
                    {
                        "tagName": "example",
                        "paramName": "",
                        "text": "Send a toast if the shift key is down.\nconst state = os.getInputState(\"keyboard\", \"Shift\");\nif (state) {\n    os.toast(\"Shift is down!\");\n}\n"
                    },
                    {
                        "tagName": "dochash",
                        "paramName": "",
                        "text": "actions/portals"
                    },
                    {
                        "tagName": "docname",
                        "paramName": "",
                        "text": "os.getInputState"
                    },
                    {
                        "tagName": "docgroup",
                        "paramName": "",
                        "text": "10-input\n"
                    }
                ]
            },
            "group": "10-input"
        },
        {
            "id": 828,
            "order": 9999,
            "name": "os.getCameraPosition",
            "reflection": {
                "id": 828,
                "name": "__type",
                "kind": 4096,
                "kindString": "Call signature",
                "flags": {},
                "comment": {
                    "shortText": "Gets the 3D position that the player's camera is at in the given portal.",
                    "tags": [
                        {
                            "tag": "example",
                            "paramName": "",
                            "text": "Get the position of the camera in the grid portal.\nconst position = os.getCameraPosition('grid');\n"
                        },
                        {
                            "tag": "example",
                            "paramName": "",
                            "text": "Get the position of the camera in the miniGridPortal.\nconst position = os.getCameraPosition(\"mini\");\n"
                        },
                        {
                            "tag": "dochash",
                            "paramName": "",
                            "text": "actions/portals"
                        },
                        {
                            "tag": "docname",
                            "paramName": "",
                            "text": "os.getCameraPosition"
                        },
                        {
                            "tag": "docgroup",
                            "paramName": "",
                            "text": "10-positions\n"
                        }
                    ]
                },
                "parameters": [
                    {
                        "id": 829,
                        "name": "portal",
                        "kind": 32768,
                        "kindString": "Parameter",
                        "flags": {},
                        "comment": {
                            "shortText": "the portal that the camera position should be retrieved for.\n",
                            "tags": []
                        },
                        "type": {
                            "type": "union",
                            "types": [
                                {
                                    "type": "literal",
                                    "value": "grid"
                                },
                                {
                                    "type": "literal",
                                    "value": "miniGrid"
                                }
                            ]
                        },
                        "defaultValue": "'grid'"
                    }
                ],
                "type": {
                    "type": "reference",
                    "id": 3198,
                    "name": "Vector3"
                }
            },
            "comment": {
                "shortText": "Gets the 3D position that the player's camera is at in the given portal.",
                "text": "",
                "tags": [
                    {
                        "tagName": "example",
                        "paramName": "",
                        "text": "Get the position of the camera in the grid portal.\nconst position = os.getCameraPosition('grid');\n"
                    },
                    {
                        "tagName": "example",
                        "paramName": "",
                        "text": "Get the position of the camera in the miniGridPortal.\nconst position = os.getCameraPosition(\"mini\");\n"
                    },
                    {
                        "tagName": "dochash",
                        "paramName": "",
                        "text": "actions/portals"
                    },
                    {
                        "tagName": "docname",
                        "paramName": "",
                        "text": "os.getCameraPosition"
                    },
                    {
                        "tagName": "docgroup",
                        "paramName": "",
                        "text": "10-positions\n"
                    }
                ]
            },
            "group": "10-positions"
        },
        {
            "id": 832,
            "order": 9999,
            "name": "os.getCameraRotation",
            "reflection": {
                "id": 832,
                "name": "__type",
                "kind": 4096,
                "kindString": "Call signature",
                "flags": {},
                "comment": {
                    "shortText": "Gets the 3D rotation that the player's camera is at in the given portal.",
                    "tags": [
                        {
                            "tag": "example",
                            "paramName": "",
                            "text": "Get the rotation of the player in the grid portal.\nconst rotation = os.getCameraRotation('grid');\n"
                        },
                        {
                            "tag": "example",
                            "paramName": "",
                            "text": "Get the rotation of the player in the miniGridPortal.\nconst rotation = os.getCameraRotation(\"mini\");\n"
                        },
                        {
                            "tag": "dochash",
                            "paramName": "",
                            "text": "actions/portals"
                        },
                        {
                            "tag": "docname",
                            "paramName": "",
                            "text": "os.getCameraRotation"
                        },
                        {
                            "tag": "docgroup",
                            "paramName": "",
                            "text": "10-positions\n"
                        }
                    ]
                },
                "parameters": [
                    {
                        "id": 833,
                        "name": "portal",
                        "kind": 32768,
                        "kindString": "Parameter",
                        "flags": {},
                        "comment": {
                            "shortText": "the portal that the camera rotation should be retrieved for.\n",
                            "tags": []
                        },
                        "type": {
                            "type": "union",
                            "types": [
                                {
                                    "type": "literal",
                                    "value": "grid"
                                },
                                {
                                    "type": "literal",
                                    "value": "miniGrid"
                                }
                            ]
                        },
                        "defaultValue": "'grid'"
                    }
                ],
                "type": {
                    "type": "reflection",
                    "declaration": {
                        "id": 834,
                        "name": "__type",
                        "kind": 65536,
                        "kindString": "Type literal",
                        "flags": {},
                        "children": [
                            {
                                "id": 835,
                                "name": "x",
                                "kind": 1024,
                                "kindString": "Property",
                                "flags": {},
                                "sources": [
                                    {
                                        "fileName": "src/aux-common/runtime/AuxLibrary.ts",
                                        "line": 14993,
                                        "character": 8
                                    }
                                ],
                                "type": {
                                    "type": "intrinsic",
                                    "name": "number"
                                }
                            },
                            {
                                "id": 836,
                                "name": "y",
                                "kind": 1024,
                                "kindString": "Property",
                                "flags": {},
                                "sources": [
                                    {
                                        "fileName": "src/aux-common/runtime/AuxLibrary.ts",
                                        "line": 14994,
                                        "character": 8
                                    }
                                ],
                                "type": {
                                    "type": "intrinsic",
                                    "name": "number"
                                }
                            },
                            {
                                "id": 837,
                                "name": "z",
                                "kind": 1024,
                                "kindString": "Property",
                                "flags": {},
                                "sources": [
                                    {
                                        "fileName": "src/aux-common/runtime/AuxLibrary.ts",
                                        "line": 14995,
                                        "character": 8
                                    }
                                ],
                                "type": {
                                    "type": "intrinsic",
                                    "name": "number"
                                }
                            }
                        ],
                        "groups": [
                            {
                                "title": "Properties",
                                "kind": 1024,
                                "children": [
                                    835,
                                    836,
                                    837
                                ]
                            }
                        ],
                        "sources": [
                            {
                                "fileName": "src/aux-common/runtime/AuxLibrary.ts",
                                "line": 14992,
                                "character": 70
                            }
                        ]
                    }
                }
            },
            "comment": {
                "shortText": "Gets the 3D rotation that the player's camera is at in the given portal.",
                "text": "",
                "tags": [
                    {
                        "tagName": "example",
                        "paramName": "",
                        "text": "Get the rotation of the player in the grid portal.\nconst rotation = os.getCameraRotation('grid');\n"
                    },
                    {
                        "tagName": "example",
                        "paramName": "",
                        "text": "Get the rotation of the player in the miniGridPortal.\nconst rotation = os.getCameraRotation(\"mini\");\n"
                    },
                    {
                        "tagName": "dochash",
                        "paramName": "",
                        "text": "actions/portals"
                    },
                    {
                        "tagName": "docname",
                        "paramName": "",
                        "text": "os.getCameraRotation"
                    },
                    {
                        "tagName": "docgroup",
                        "paramName": "",
                        "text": "10-positions\n"
                    }
                ]
            },
            "group": "10-positions"
        },
        {
            "id": 840,
            "order": 9999,
            "name": "os.getFocusPoint",
            "reflection": {
                "id": 840,
                "name": "__type",
                "kind": 4096,
                "kindString": "Call signature",
                "flags": {},
                "comment": {
                    "shortText": "Gets the 3D position that the player's camera is focusing on in the given portal.",
                    "text": "This is the same point that is highlighted when [`#portalShowFocusPoint`](tags:portalShowFocusPoint) is enabled for a portal.\n",
                    "tags": [
                        {
                            "tag": "example",
                            "paramName": "",
                            "text": "Get the focus point of the player in the grid portal.\nconst focusPoint = os.getFocusPoint('grid');\n"
                        },
                        {
                            "tag": "example",
                            "paramName": "",
                            "text": "Get the focus point of the player in the miniGridPortal.\nconst focusPoint = os.getFocusPoint(\"mini\");\n"
                        },
                        {
                            "tag": "dochash",
                            "paramName": "",
                            "text": "actions/portals"
                        },
                        {
                            "tag": "docname",
                            "paramName": "",
                            "text": "os.getFocusPoint"
                        },
                        {
                            "tag": "docgroup",
                            "paramName": "",
                            "text": "10-positions\n"
                        }
                    ]
                },
                "parameters": [
                    {
                        "id": 841,
                        "name": "portal",
                        "kind": 32768,
                        "kindString": "Parameter",
                        "flags": {},
                        "comment": {
                            "shortText": "the portal that the camera focus point should be retrieved for.\n",
                            "tags": []
                        },
                        "type": {
                            "type": "union",
                            "types": [
                                {
                                    "type": "literal",
                                    "value": "grid"
                                },
                                {
                                    "type": "literal",
                                    "value": "miniGrid"
                                }
                            ]
                        },
                        "defaultValue": "'grid'"
                    }
                ],
                "type": {
                    "type": "reference",
                    "id": 3198,
                    "name": "Vector3"
                }
            },
            "comment": {
                "shortText": "Gets the 3D position that the player's camera is focusing on in the given portal.",
                "text": "This is the same point that is highlighted when {@tag portalShowFocusPoint} is enabled for a portal.\n",
                "tags": [
                    {
                        "tagName": "example",
                        "paramName": "",
                        "text": "Get the focus point of the player in the grid portal.\nconst focusPoint = os.getFocusPoint('grid');\n"
                    },
                    {
                        "tagName": "example",
                        "paramName": "",
                        "text": "Get the focus point of the player in the miniGridPortal.\nconst focusPoint = os.getFocusPoint(\"mini\");\n"
                    },
                    {
                        "tagName": "dochash",
                        "paramName": "",
                        "text": "actions/portals"
                    },
                    {
                        "tagName": "docname",
                        "paramName": "",
                        "text": "os.getFocusPoint"
                    },
                    {
                        "tagName": "docgroup",
                        "paramName": "",
                        "text": "10-positions\n"
                    }
                ]
            },
            "group": "10-positions"
        },
        {
            "id": 856,
            "order": 9999,
            "name": "os.getPointerDirection",
            "reflection": {
                "id": 856,
                "name": "__type",
                "kind": 4096,
                "kindString": "Call signature",
                "flags": {},
                "comment": {
                    "shortText": "Gets the direction that the given pointer is pointed in.",
                    "text": "Can be combined with [`math.intersectPlane(origin, direction, planeNormal, planeOrigin)`](ref:math.intersectPlane) to find where on the ground the pointer is pointing.\n",
                    "tags": [
                        {
                            "tag": "example",
                            "paramName": "",
                            "text": "Get the direction of the mouse pointer.\nconst direction = os.getPointerDirection(\"mouse\");\n"
                        },
                        {
                            "tag": "example",
                            "paramName": "",
                            "text": "Get the direction of the left pointer.\nconst direction = os.getPointerDirection(\"left\");\n"
                        },
                        {
                            "tag": "example",
                            "paramName": "",
                            "text": "Find where the mouse is pointing on the ground.\nconst position = os.getPointerPosition();\nconst direction = os.getPointerDirection();\nconst groundPosition = math.intersectPlane(position, direction);\n"
                        },
                        {
                            "tag": "dochash",
                            "paramName": "",
                            "text": "actions/portals"
                        },
                        {
                            "tag": "docname",
                            "paramName": "",
                            "text": "os.getPointerDirection"
                        },
                        {
                            "tag": "docgroup",
                            "paramName": "",
                            "text": "10-positions\n"
                        }
                    ]
                },
                "parameters": [
                    {
                        "id": 857,
                        "name": "pointer",
                        "kind": 32768,
                        "kindString": "Parameter",
                        "flags": {},
                        "comment": {
                            "shortText": "the pointer that the direction should be retrieved for.\n",
                            "tags": []
                        },
                        "type": {
                            "type": "union",
                            "types": [
                                {
                                    "type": "literal",
                                    "value": "left"
                                },
                                {
                                    "type": "literal",
                                    "value": "right"
                                },
                                {
                                    "type": "literal",
                                    "value": "mouse"
                                }
                            ]
                        },
                        "defaultValue": "'mouse'"
                    }
                ],
                "type": {
                    "type": "reference",
                    "id": 3198,
                    "name": "Vector3"
                }
            },
            "comment": {
                "shortText": "Gets the direction that the given pointer is pointed in.",
                "text": "Can be combined with {@link math.intersectPlane} to find where on the ground the pointer is pointing.\n",
                "tags": [
                    {
                        "tagName": "example",
                        "paramName": "",
                        "text": "Get the direction of the mouse pointer.\nconst direction = os.getPointerDirection(\"mouse\");\n"
                    },
                    {
                        "tagName": "example",
                        "paramName": "",
                        "text": "Get the direction of the left pointer.\nconst direction = os.getPointerDirection(\"left\");\n"
                    },
                    {
                        "tagName": "example",
                        "paramName": "",
                        "text": "Find where the mouse is pointing on the ground.\nconst position = os.getPointerPosition();\nconst direction = os.getPointerDirection();\nconst groundPosition = math.intersectPlane(position, direction);\n"
                    },
                    {
                        "tagName": "dochash",
                        "paramName": "",
                        "text": "actions/portals"
                    },
                    {
                        "tagName": "docname",
                        "paramName": "",
                        "text": "os.getPointerDirection"
                    },
                    {
                        "tagName": "docgroup",
                        "paramName": "",
                        "text": "10-positions\n"
                    }
                ]
            },
            "group": "10-positions"
        },
        {
            "id": 844,
            "order": 9999,
            "name": "os.getPointerPosition",
            "reflection": {
                "id": 844,
                "name": "__type",
                "kind": 4096,
                "kindString": "Call signature",
                "flags": {},
                "comment": {
                    "shortText": "Gets the position that the given pointer is at.",
                    "tags": [
                        {
                            "tag": "example",
                            "paramName": "",
                            "text": "Get the position of the mouse pointer.\nconst position = os.getPointerPosition(\"mouse\");\n"
                        },
                        {
                            "tag": "example",
                            "paramName": "",
                            "text": "Get the position of the left pointer.\nconst position = os.getPointerPosition(\"left\");\n"
                        },
                        {
                            "tag": "dochash",
                            "paramName": "",
                            "text": "actions/portals"
                        },
                        {
                            "tag": "docname",
                            "paramName": "",
                            "text": "os.getPointerPosition"
                        },
                        {
                            "tag": "docgroup",
                            "paramName": "",
                            "text": "10-positions\n"
                        }
                    ]
                },
                "parameters": [
                    {
                        "id": 845,
                        "name": "pointer",
                        "kind": 32768,
                        "kindString": "Parameter",
                        "flags": {},
                        "comment": {
                            "shortText": "the pointer that the position should be retrieved for.\n",
                            "tags": []
                        },
                        "type": {
                            "type": "union",
                            "types": [
                                {
                                    "type": "literal",
                                    "value": "left"
                                },
                                {
                                    "type": "literal",
                                    "value": "right"
                                },
                                {
                                    "type": "literal",
                                    "value": "mouse"
                                }
                            ]
                        },
                        "defaultValue": "'mouse'"
                    }
                ],
                "type": {
                    "type": "reference",
                    "id": 3198,
                    "name": "Vector3"
                }
            },
            "comment": {
                "shortText": "Gets the position that the given pointer is at.",
                "text": "",
                "tags": [
                    {
                        "tagName": "example",
                        "paramName": "",
                        "text": "Get the position of the mouse pointer.\nconst position = os.getPointerPosition(\"mouse\");\n"
                    },
                    {
                        "tagName": "example",
                        "paramName": "",
                        "text": "Get the position of the left pointer.\nconst position = os.getPointerPosition(\"left\");\n"
                    },
                    {
                        "tagName": "dochash",
                        "paramName": "",
                        "text": "actions/portals"
                    },
                    {
                        "tagName": "docname",
                        "paramName": "",
                        "text": "os.getPointerPosition"
                    },
                    {
                        "tagName": "docgroup",
                        "paramName": "",
                        "text": "10-positions\n"
                    }
                ]
            },
            "group": "10-positions"
        },
        {
            "id": 848,
            "order": 9999,
            "name": "os.getPointerRotation",
            "reflection": {
                "id": 848,
                "name": "__type",
                "kind": 4096,
                "kindString": "Call signature",
                "flags": {},
                "comment": {
                    "shortText": "Gets the rotation (in euler angles) that the given pointer is at.",
                    "tags": [
                        {
                            "tag": "example",
                            "paramName": "",
                            "text": "Get the rotation of the mouse pointer.\nconst rotation = os.getPointerRotation(\"mouse\");\n"
                        },
                        {
                            "tag": "example",
                            "paramName": "",
                            "text": "Get the rotation of the left pointer.\nconst rotation = os.getPointerRotation(\"left\");\n"
                        },
                        {
                            "tag": "dochash",
                            "paramName": "",
                            "text": "actions/portals"
                        },
                        {
                            "tag": "docname",
                            "paramName": "",
                            "text": "os.getPointerRotation"
                        },
                        {
                            "tag": "docgroup",
                            "paramName": "",
                            "text": "10-positions\n"
                        }
                    ]
                },
                "parameters": [
                    {
                        "id": 849,
                        "name": "pointer",
                        "kind": 32768,
                        "kindString": "Parameter",
                        "flags": {},
                        "comment": {
                            "shortText": "the pointer that the rotation should be retrieved for.\n",
                            "tags": []
                        },
                        "type": {
                            "type": "union",
                            "types": [
                                {
                                    "type": "literal",
                                    "value": "left"
                                },
                                {
                                    "type": "literal",
                                    "value": "right"
                                },
                                {
                                    "type": "literal",
                                    "value": "mouse"
                                }
                            ]
                        },
                        "defaultValue": "'mouse'"
                    }
                ],
                "type": {
                    "type": "reflection",
                    "declaration": {
                        "id": 850,
                        "name": "__type",
                        "kind": 65536,
                        "kindString": "Type literal",
                        "flags": {},
                        "children": [
                            {
                                "id": 851,
                                "name": "x",
                                "kind": 1024,
                                "kindString": "Property",
                                "flags": {},
                                "sources": [
                                    {
                                        "fileName": "src/aux-common/runtime/AuxLibrary.ts",
                                        "line": 15088,
                                        "character": 9
                                    }
                                ],
                                "type": {
                                    "type": "intrinsic",
                                    "name": "number"
                                }
                            },
                            {
                                "id": 852,
                                "name": "y",
                                "kind": 1024,
                                "kindString": "Property",
                                "flags": {},
                                "sources": [
                                    {
                                        "fileName": "src/aux-common/runtime/AuxLibrary.ts",
                                        "line": 15088,
                                        "character": 20
                                    }
                                ],
                                "type": {
                                    "type": "intrinsic",
                                    "name": "number"
                                }
                            },
                            {
                                "id": 853,
                                "name": "z",
                                "kind": 1024,
                                "kindString": "Property",
                                "flags": {},
                                "sources": [
                                    {
                                        "fileName": "src/aux-common/runtime/AuxLibrary.ts",
                                        "line": 15088,
                                        "character": 31
                                    }
                                ],
                                "type": {
                                    "type": "intrinsic",
                                    "name": "number"
                                }
                            }
                        ],
                        "groups": [
                            {
                                "title": "Properties",
                                "kind": 1024,
                                "children": [
                                    851,
                                    852,
                                    853
                                ]
                            }
                        ],
                        "sources": [
                            {
                                "fileName": "src/aux-common/runtime/AuxLibrary.ts",
                                "line": 15088,
                                "character": 7
                            }
                        ]
                    }
                }
            },
            "comment": {
                "shortText": "Gets the rotation (in euler angles) that the given pointer is at.",
                "text": "",
                "tags": [
                    {
                        "tagName": "example",
                        "paramName": "",
                        "text": "Get the rotation of the mouse pointer.\nconst rotation = os.getPointerRotation(\"mouse\");\n"
                    },
                    {
                        "tagName": "example",
                        "paramName": "",
                        "text": "Get the rotation of the left pointer.\nconst rotation = os.getPointerRotation(\"left\");\n"
                    },
                    {
                        "tagName": "dochash",
                        "paramName": "",
                        "text": "actions/portals"
                    },
                    {
                        "tagName": "docname",
                        "paramName": "",
                        "text": "os.getPointerRotation"
                    },
                    {
                        "tagName": "docgroup",
                        "paramName": "",
                        "text": "10-positions\n"
                    }
                ]
            },
            "group": "10-positions"
        },
        {
            "id": 576,
            "order": 9999,
            "name": "os.disablePointOfView",
            "reflection": {
                "id": 576,
                "name": "__type",
                "kind": 4096,
                "kindString": "Call signature",
                "flags": {},
                "comment": {
                    "shortText": "Disables Point-of-View mode on the device. This will return the camera to its original position, set the camera type back to what it was before, and change the camera controls to the defaults.",
                    "tags": [
                        {
                            "tag": "example",
                            "paramName": "",
                            "text": "Disable POV mode.\nos.disablePointOfView();\n"
                        },
                        {
                            "tag": "dochash",
                            "paramName": "",
                            "text": "actions/portals"
                        },
                        {
                            "tag": "docname",
                            "paramName": "",
                            "text": "os.disablePointOfView"
                        },
                        {
                            "tag": "docgroup",
                            "paramName": "",
                            "text": "10-pov\n"
                        }
                    ]
                },
                "type": {
                    "type": "reference",
                    "name": "EnablePOVAction"
                }
            },
            "comment": {
                "shortText": "Disables Point-of-View mode on the device. This will return the camera to its original position, set the camera type back to what it was before, and change the camera controls to the defaults.",
                "text": "",
                "tags": [
                    {
                        "tagName": "example",
                        "paramName": "",
                        "text": "Disable POV mode.\nos.disablePointOfView();\n"
                    },
                    {
                        "tagName": "dochash",
                        "paramName": "",
                        "text": "actions/portals"
                    },
                    {
                        "tagName": "docname",
                        "paramName": "",
                        "text": "os.disablePointOfView"
                    },
                    {
                        "tagName": "docgroup",
                        "paramName": "",
                        "text": "10-pov\n"
                    }
                ]
            },
            "group": "10-pov"
        },
        {
            "id": 567,
            "order": 9999,
            "name": "os.enablePointOfView",
            "reflection": {
                "id": 567,
                "name": "__type",
                "kind": 4096,
                "kindString": "Call signature",
                "flags": {},
                "comment": {
                    "shortText": "Enables Point-of-View mode on the device.\nUseful for getting a \"ground level\" view in the grid portal.\nThis will move the camera to the given position, set the camera type to `perspective`, and change the camera controls so that dragging the screen causes the camera to look around.",
                    "text": "It is not possible to manually move the camera in this mode, however it is still possible to use [`os.focusOn(bot, options)`](ref:os.focusOn-bot) to move the camera.\n",
                    "tags": [
                        {
                            "tag": "example",
                            "paramName": "",
                            "text": "Enable POV mode.\nos.enablePointOfView();\n"
                        },
                        {
                            "tag": "example",
                            "paramName": "",
                            "text": "Enable POV mode at `(5, 0, 3)`.\nos.enablePointOfView({\n    x: 5,\n    y: 0,\n    z: 3\n});\n"
                        },
                        {
                            "tag": "example",
                            "paramName": "",
                            "text": "Enable POV mode with the IMU.\nos.enablePointOfView(undefined, true);\n"
                        },
                        {
                            "tag": "dochash",
                            "paramName": "",
                            "text": "actions/portals"
                        },
                        {
                            "tag": "docname",
                            "paramName": "",
                            "text": "os.enablePointOfView"
                        },
                        {
                            "tag": "docgroup",
                            "paramName": "",
                            "text": "10-pov\n"
                        }
                    ]
                },
                "parameters": [
                    {
                        "id": 568,
                        "name": "center",
                        "kind": 32768,
                        "kindString": "Parameter",
                        "flags": {},
                        "comment": {
                            "shortText": "the position that the camera should be placed at. If not specified, then the camera will be placed at `(0, 0, 0)`.",
                            "tags": []
                        },
                        "type": {
                            "type": "reflection",
                            "declaration": {
                                "id": 569,
                                "name": "__type",
                                "kind": 65536,
                                "kindString": "Type literal",
                                "flags": {},
                                "children": [
                                    {
                                        "id": 570,
                                        "name": "x",
                                        "kind": 1024,
                                        "kindString": "Property",
                                        "flags": {},
                                        "sources": [
                                            {
                                                "fileName": "src/aux-common/runtime/AuxLibrary.ts",
                                                "line": 5621,
                                                "character": 18
                                            }
                                        ],
                                        "type": {
                                            "type": "intrinsic",
                                            "name": "number"
                                        }
                                    },
                                    {
                                        "id": 571,
                                        "name": "y",
                                        "kind": 1024,
                                        "kindString": "Property",
                                        "flags": {},
                                        "sources": [
                                            {
                                                "fileName": "src/aux-common/runtime/AuxLibrary.ts",
                                                "line": 5621,
                                                "character": 29
                                            }
                                        ],
                                        "type": {
                                            "type": "intrinsic",
                                            "name": "number"
                                        }
                                    },
                                    {
                                        "id": 572,
                                        "name": "z",
                                        "kind": 1024,
                                        "kindString": "Property",
                                        "flags": {},
                                        "sources": [
                                            {
                                                "fileName": "src/aux-common/runtime/AuxLibrary.ts",
                                                "line": 5621,
                                                "character": 40
                                            }
                                        ],
                                        "type": {
                                            "type": "intrinsic",
                                            "name": "number"
                                        }
                                    }
                                ],
                                "groups": [
                                    {
                                        "title": "Properties",
                                        "kind": 1024,
                                        "children": [
                                            570,
                                            571,
                                            572
                                        ]
                                    }
                                ]
                            }
                        },
                        "defaultValue": "..."
                    },
                    {
                        "id": 573,
                        "name": "imu",
                        "kind": 32768,
                        "kindString": "Parameter",
                        "flags": {
                            "isOptional": true
                        },
                        "comment": {
                            "shortText": "whether the imuPortal should be used to control the camera rotation while in Point-of-View mode.\n",
                            "tags": []
                        },
                        "type": {
                            "type": "intrinsic",
                            "name": "boolean"
                        }
                    }
                ],
                "type": {
                    "type": "reference",
                    "name": "EnablePOVAction"
                }
            },
            "comment": {
                "shortText": "Enables Point-of-View mode on the device.\nUseful for getting a \"ground level\" view in the grid portal.\nThis will move the camera to the given position, set the camera type to `perspective`, and change the camera controls so that dragging the screen causes the camera to look around.",
                "text": "It is not possible to manually move the camera in this mode, however it is still possible to use {@link os.focusOn-bot} to move the camera.\n",
                "tags": [
                    {
                        "tagName": "example",
                        "paramName": "",
                        "text": "Enable POV mode.\nos.enablePointOfView();\n"
                    },
                    {
                        "tagName": "example",
                        "paramName": "",
                        "text": "Enable POV mode at `(5, 0, 3)`.\nos.enablePointOfView({\n    x: 5,\n    y: 0,\n    z: 3\n});\n"
                    },
                    {
                        "tagName": "example",
                        "paramName": "",
                        "text": "Enable POV mode with the IMU.\nos.enablePointOfView(undefined, true);\n"
                    },
                    {
                        "tagName": "dochash",
                        "paramName": "",
                        "text": "actions/portals"
                    },
                    {
                        "tagName": "docname",
                        "paramName": "",
                        "text": "os.enablePointOfView"
                    },
                    {
                        "tagName": "docgroup",
                        "paramName": "",
                        "text": "10-pov\n"
                    }
                ]
            },
            "group": "10-pov"
        },
        {
            "id": 1202,
            "order": 9999,
            "name": "os.calculateRayFromCamera",
            "reflection": {
                "id": 1202,
                "name": "__type",
                "kind": 4096,
                "kindString": "Call signature",
                "flags": {},
                "comment": {
                    "shortText": "Calculates the ray that starts at the given portal camera and travels along the path emanating from the given viewport position.\nReturns a promise that resolves with information about the calculated ray.",
                    "tags": [
                        {
                            "tag": "example",
                            "paramName": "",
                            "text": "Find the ray that passes through the center of the screen\nconst ray = await os.calculateRayFromCamera(\"grid\", new Vector2(0, 0));\nos.toast('Calculated ray: ' + ray);\n"
                        },
                        {
                            "tag": "example",
                            "paramName": "",
                            "text": "Find the ray that passes through the left-center edge of the screen\nconst ray = await os.raycastFromCamera(\"grid\", new Vector2(-1, 0));\nos.toast('Calculated ray: ' + ray);\n"
                        },
                        {
                            "tag": "dochash",
                            "paramName": "",
                            "text": "actions/portals"
                        },
                        {
                            "tag": "docname",
                            "paramName": "",
                            "text": "os.calculateRayFromCamera"
                        },
                        {
                            "tag": "docgroup",
                            "paramName": "",
                            "text": "10-raycast\n"
                        }
                    ]
                },
                "parameters": [
                    {
                        "id": 1203,
                        "name": "portal",
                        "kind": 32768,
                        "kindString": "Parameter",
                        "flags": {},
                        "comment": {
                            "shortText": "the name of the portal that should be tested.",
                            "tags": []
                        },
                        "type": {
                            "type": "union",
                            "types": [
                                {
                                    "type": "literal",
                                    "value": "grid"
                                },
                                {
                                    "type": "literal",
                                    "value": "miniGrid"
                                },
                                {
                                    "type": "literal",
                                    "value": "map"
                                },
                                {
                                    "type": "literal",
                                    "value": "miniMap"
                                }
                            ]
                        }
                    },
                    {
                        "id": 1204,
                        "name": "viewportCoordinates",
                        "kind": 32768,
                        "kindString": "Parameter",
                        "flags": {},
                        "comment": {
                            "shortText": "the 2D viewport position that the ray should start at.\nViewport positions locate a specific point on the image that the camera produces.\n`(X: 0, Y: 0)` represents the center of the camera while `(X: -1, Y: -1)` represents the lower left corner and `(X: 1, Y: 1)` represents the upper right corner.\n",
                            "tags": []
                        },
                        "type": {
                            "type": "reference",
                            "id": 3141,
                            "name": "Vector2"
                        }
                    }
                ],
                "type": {
                    "type": "reference",
                    "typeArguments": [
                        {
                            "type": "reference",
                            "id": 2187,
                            "name": "RaycastRay"
                        }
                    ],
                    "qualifiedName": "Promise",
                    "package": "typescript",
                    "name": "Promise"
                }
            },
            "comment": {
                "shortText": "Calculates the ray that starts at the given portal camera and travels along the path emanating from the given viewport position.\nReturns a promise that resolves with information about the calculated ray.",
                "text": "",
                "tags": [
                    {
                        "tagName": "example",
                        "paramName": "",
                        "text": "Find the ray that passes through the center of the screen\nconst ray = await os.calculateRayFromCamera(\"grid\", new Vector2(0, 0));\nos.toast('Calculated ray: ' + ray);\n"
                    },
                    {
                        "tagName": "example",
                        "paramName": "",
                        "text": "Find the ray that passes through the left-center edge of the screen\nconst ray = await os.raycastFromCamera(\"grid\", new Vector2(-1, 0));\nos.toast('Calculated ray: ' + ray);\n"
                    },
                    {
                        "tagName": "dochash",
                        "paramName": "",
                        "text": "actions/portals"
                    },
                    {
                        "tagName": "docname",
                        "paramName": "",
                        "text": "os.calculateRayFromCamera"
                    },
                    {
                        "tagName": "docgroup",
                        "paramName": "",
                        "text": "10-raycast\n"
                    }
                ]
            },
            "group": "10-raycast"
        },
        {
            "id": 1196,
            "order": 9999,
            "name": "os.raycast",
            "reflection": {
                "id": 1196,
                "name": "__type",
                "kind": 4096,
                "kindString": "Call signature",
                "flags": {},
                "comment": {
                    "shortText": "Finds the list of bots that are in the given portal and are intersected by a ray starting at the given origin position and traveling in the given direction.\nReturns a promise that resolves with information about the intersected bots.",
                    "tags": [
                        {
                            "tag": "example",
                            "paramName": "",
                            "text": "Find the bots that are directly to the right of `(0,0,0)` in the grid portal\nconst result = await os.raycast(\"grid\", new Vector3(0, 0, 0), new Vector3(1, 0, 0));\nos.toast('Found Bots: ' + result.botIntersections.map(b => b.id).join(', '));\n"
                        },
                        {
                            "tag": "example",
                            "paramName": "",
                            "text": "Find the bots that the mouse pointer is pointing at in the grid portal\nconst result = await os.raycast(\"grid\", os.getPointerPosition(\"mouse\"), os.getPointerDirection(\"mouse\"));\nos.toast('Found Bots: ' + result.botIntersections.map(b => b.id).join(', '));\n"
                        },
                        {
                            "tag": "dochash",
                            "paramName": "",
                            "text": "actions/portals"
                        },
                        {
                            "tag": "docname",
                            "paramName": "",
                            "text": "os.raycast"
                        },
                        {
                            "tag": "docgroup",
                            "paramName": "",
                            "text": "10-raycast\n"
                        }
                    ]
                },
                "parameters": [
                    {
                        "id": 1197,
                        "name": "portal",
                        "kind": 32768,
                        "kindString": "Parameter",
                        "flags": {},
                        "comment": {
                            "shortText": "the name of the portal that should be tested.",
                            "tags": []
                        },
                        "type": {
                            "type": "union",
                            "types": [
                                {
                                    "type": "literal",
                                    "value": "grid"
                                },
                                {
                                    "type": "literal",
                                    "value": "miniGrid"
                                },
                                {
                                    "type": "literal",
                                    "value": "map"
                                },
                                {
                                    "type": "literal",
                                    "value": "miniMap"
                                }
                            ]
                        }
                    },
                    {
                        "id": 1198,
                        "name": "origin",
                        "kind": 32768,
                        "kindString": "Parameter",
                        "flags": {},
                        "comment": {
                            "shortText": "the 3D position that the ray should start at.",
                            "tags": []
                        },
                        "type": {
                            "type": "reference",
                            "id": 3198,
                            "name": "Vector3"
                        }
                    },
                    {
                        "id": 1199,
                        "name": "direction",
                        "kind": 32768,
                        "kindString": "Parameter",
                        "flags": {},
                        "comment": {
                            "shortText": "the 3D direction that the ray should travel along.\n",
                            "tags": []
                        },
                        "type": {
                            "type": "reference",
                            "id": 3198,
                            "name": "Vector3"
                        }
                    }
                ],
                "type": {
                    "type": "reference",
                    "typeArguments": [
                        {
                            "type": "reference",
                            "id": 2184,
                            "name": "RaycastResult"
                        }
                    ],
                    "qualifiedName": "Promise",
                    "package": "typescript",
                    "name": "Promise"
                }
            },
            "comment": {
                "shortText": "Finds the list of bots that are in the given portal and are intersected by a ray starting at the given origin position and traveling in the given direction.\nReturns a promise that resolves with information about the intersected bots.",
                "text": "",
                "tags": [
                    {
                        "tagName": "example",
                        "paramName": "",
                        "text": "Find the bots that are directly to the right of `(0,0,0)` in the grid portal\nconst result = await os.raycast(\"grid\", new Vector3(0, 0, 0), new Vector3(1, 0, 0));\nos.toast('Found Bots: ' + result.botIntersections.map(b => b.id).join(', '));\n"
                    },
                    {
                        "tagName": "example",
                        "paramName": "",
                        "text": "Find the bots that the mouse pointer is pointing at in the grid portal\nconst result = await os.raycast(\"grid\", os.getPointerPosition(\"mouse\"), os.getPointerDirection(\"mouse\"));\nos.toast('Found Bots: ' + result.botIntersections.map(b => b.id).join(', '));\n"
                    },
                    {
                        "tagName": "dochash",
                        "paramName": "",
                        "text": "actions/portals"
                    },
                    {
                        "tagName": "docname",
                        "paramName": "",
                        "text": "os.raycast"
                    },
                    {
                        "tagName": "docgroup",
                        "paramName": "",
                        "text": "10-raycast\n"
                    }
                ]
            },
            "group": "10-raycast"
        },
        {
            "id": 1191,
            "order": 9999,
            "name": "os.raycastFromCamera",
            "reflection": {
                "id": 1191,
                "name": "__type",
                "kind": 4096,
                "kindString": "Call signature",
                "flags": {},
                "comment": {
                    "shortText": "Finds the list of bots that are in the given portal and are intersected by a ray starting at the portal camera and traveling along a path emanating from the given viewport position.\nReturns a promise that resolves with information about the intersected bots.",
                    "tags": [
                        {
                            "tag": "example",
                            "paramName": "",
                            "text": "Find the bots that are in the center of the screen\nconst result = await os.raycastFromCamera(\"grid\", new Vector2(0, 0));\nos.toast('Found Bots: ' + result.botIntersections.map(b => b.id).join(', '));\n"
                        },
                        {
                            "tag": "example",
                            "paramName": "",
                            "text": "Find the bots that are on the left-center edge of the screen\nconst result = await os.raycastFromCamera(\"grid\", new Vector2(-1, 0));\nos.toast('Found Bots: ' + result.botIntersections.map(b => b.id).join(', '));\n"
                        },
                        {
                            "tag": "dochash",
                            "paramName": "",
                            "text": "actions/portals"
                        },
                        {
                            "tag": "docname",
                            "paramName": "",
                            "text": "os.raycastFromCamera"
                        },
                        {
                            "tag": "docgroup",
                            "paramName": "",
                            "text": "10-raycast\n"
                        }
                    ]
                },
                "parameters": [
                    {
                        "id": 1192,
                        "name": "portal",
                        "kind": 32768,
                        "kindString": "Parameter",
                        "flags": {},
                        "comment": {
                            "shortText": "the portal that should be tested.",
                            "tags": []
                        },
                        "type": {
                            "type": "union",
                            "types": [
                                {
                                    "type": "literal",
                                    "value": "grid"
                                },
                                {
                                    "type": "literal",
                                    "value": "miniGrid"
                                },
                                {
                                    "type": "literal",
                                    "value": "map"
                                },
                                {
                                    "type": "literal",
                                    "value": "miniMap"
                                }
                            ]
                        }
                    },
                    {
                        "id": 1193,
                        "name": "viewportCoordinates",
                        "kind": 32768,
                        "kindString": "Parameter",
                        "flags": {},
                        "comment": {
                            "shortText": "the 2D viewport position that the ray should start at.\nViewport positions locate a specific point on the image that the camera produces.\n`(X: 0, Y: 0)` represents the center of the camera while `(X: -1, Y: -1)` represents the lower left corner and `(X: 1, Y: 1)` represents the upper right corner.\n",
                            "tags": []
                        },
                        "type": {
                            "type": "reference",
                            "id": 3141,
                            "name": "Vector2"
                        }
                    }
                ],
                "type": {
                    "type": "reference",
                    "typeArguments": [
                        {
                            "type": "reference",
                            "id": 2184,
                            "name": "RaycastResult"
                        }
                    ],
                    "qualifiedName": "Promise",
                    "package": "typescript",
                    "name": "Promise"
                }
            },
            "comment": {
                "shortText": "Finds the list of bots that are in the given portal and are intersected by a ray starting at the portal camera and traveling along a path emanating from the given viewport position.\nReturns a promise that resolves with information about the intersected bots.",
                "text": "",
                "tags": [
                    {
                        "tagName": "example",
                        "paramName": "",
                        "text": "Find the bots that are in the center of the screen\nconst result = await os.raycastFromCamera(\"grid\", new Vector2(0, 0));\nos.toast('Found Bots: ' + result.botIntersections.map(b => b.id).join(', '));\n"
                    },
                    {
                        "tagName": "example",
                        "paramName": "",
                        "text": "Find the bots that are on the left-center edge of the screen\nconst result = await os.raycastFromCamera(\"grid\", new Vector2(-1, 0));\nos.toast('Found Bots: ' + result.botIntersections.map(b => b.id).join(', '));\n"
                    },
                    {
                        "tagName": "dochash",
                        "paramName": "",
                        "text": "actions/portals"
                    },
                    {
                        "tagName": "docname",
                        "paramName": "",
                        "text": "os.raycastFromCamera"
                    },
                    {
                        "tagName": "docgroup",
                        "paramName": "",
                        "text": "10-raycast\n"
                    }
                ]
            },
            "group": "10-raycast"
        },
        {
            "id": 746,
            "order": 9999,
            "name": "os.showConfirm",
            "reflection": {
                "id": 746,
                "name": "__type",
                "kind": 4096,
                "kindString": "Call signature",
                "flags": {},
                "comment": {
                    "shortText": "Shows a confirmation dialog using the given options. Confirmation dialogs are useful for giving users the ability to quickly confirm or cancel an action.",
                    "text": "Returns a promise that resolves with `true` if the user clicked the \"Confirm\" button and `false` if they closed the dialog or clicked the \"Cancel\" button.\n",
                    "tags": [
                        {
                            "tag": "example",
                            "paramName": "",
                            "text": "Show a confirmation dialog\nlet confirmed = await os.showConfirm({\n    title: 'Confirm',\n    content: 'Please confirm the action.'\n});\n\nos.toast('Confirmed: ' + (confirmed ? 'Yes' : 'No'));\n"
                        },
                        {
                            "tag": "example",
                            "paramName": "",
                            "text": "Show a confirmation dialog with custom button text\nlet confirmed = await os.showConfirm({\n    title: 'Confirm',\n    content: 'Are you sure?',\n    confirmText: 'Yes',\n    cancelText: 'No'\n});\n\nos.toast('Confirmed: ' + (confirmed ? 'Yes' : 'No'));\n"
                        },
                        {
                            "tag": "dochash",
                            "paramName": "",
                            "text": "actions/portals"
                        },
                        {
                            "tag": "docname",
                            "paramName": "",
                            "text": "os.showConfirm"
                        },
                        {
                            "tag": "docgroup",
                            "paramName": "",
                            "text": "10-showInput\n"
                        }
                    ]
                },
                "parameters": [
                    {
                        "id": 747,
                        "name": "options",
                        "kind": 32768,
                        "kindString": "Parameter",
                        "flags": {},
                        "comment": {
                            "shortText": "the options that should be used for the confirmation dialog.\n",
                            "tags": []
                        },
                        "type": {
                            "type": "reference",
                            "id": 2606,
                            "name": "ShowConfirmOptions"
                        }
                    }
                ],
                "type": {
                    "type": "reference",
                    "typeArguments": [
                        {
                            "type": "intrinsic",
                            "name": "boolean"
                        }
                    ],
                    "qualifiedName": "Promise",
                    "package": "typescript",
                    "name": "Promise"
                }
            },
            "comment": {
                "shortText": "Shows a confirmation dialog using the given options. Confirmation dialogs are useful for giving users the ability to quickly confirm or cancel an action.",
                "text": "Returns a promise that resolves with `true` if the user clicked the \"Confirm\" button and `false` if they closed the dialog or clicked the \"Cancel\" button.\n",
                "tags": [
                    {
                        "tagName": "example",
                        "paramName": "",
                        "text": "Show a confirmation dialog\nlet confirmed = await os.showConfirm({\n    title: 'Confirm',\n    content: 'Please confirm the action.'\n});\n\nos.toast('Confirmed: ' + (confirmed ? 'Yes' : 'No'));\n"
                    },
                    {
                        "tagName": "example",
                        "paramName": "",
                        "text": "Show a confirmation dialog with custom button text\nlet confirmed = await os.showConfirm({\n    title: 'Confirm',\n    content: 'Are you sure?',\n    confirmText: 'Yes',\n    cancelText: 'No'\n});\n\nos.toast('Confirmed: ' + (confirmed ? 'Yes' : 'No'));\n"
                    },
                    {
                        "tagName": "dochash",
                        "paramName": "",
                        "text": "actions/portals"
                    },
                    {
                        "tagName": "docname",
                        "paramName": "",
                        "text": "os.showConfirm"
                    },
                    {
                        "tagName": "docgroup",
                        "paramName": "",
                        "text": "10-showInput\n"
                    }
                ]
            },
            "group": "10-showInput"
        },
        {
            "id": 736,
            "order": 9999,
            "name": "os.showInput",
            "reflection": {
                "id": 736,
                "name": "__type",
                "kind": 4096,
                "kindString": "Call signature",
                "flags": {},
                "comment": {
                    "shortText": "Shows an input modal with the given value and options. When shown, the player will be able to change the value.",
                    "text": "Returns a Promise that resolves with the final value when the user is finished editing.\nThis function is similar to [`os.showInputForTag(bot, tag, options)`](ref:os.showInputForTag) except it doesn't require a bot and a tag.\n",
                    "tags": [
                        {
                            "tag": "example",
                            "paramName": "",
                            "text": "Show a basic text input modal and displays a toast message with the input value.\nconst value = await os.showInput();\nos.toast(value);\n"
                        },
                        {
                            "tag": "example",
                            "paramName": "",
                            "text": "Show a text input modal with a placeholder.\nconst name = await os.showInput(null, {\n    placeholder: 'Enter a name'\n});\nos.toast(name);\n"
                        },
                        {
                            "tag": "example",
                            "paramName": "",
                            "text": "Show a input modal with a custom title.\nconst name = await os.showInput('My Name', {\n    title: 'Edit name'\n});\nos.toast(name);\n"
                        },
                        {
                            "tag": "example",
                            "paramName": "",
                            "text": "Show a color input modal with a custom title.\nconst color = await os.showInput('green', {\n    type: 'color',\n    title: 'Enter a custom color'\n});\nos.toast(color);\n"
                        },
                        {
                            "tag": "example",
                            "paramName": "",
                            "text": "Show an input for entering secrets (like passwords).\nconst secret = await os.showInput('', {\n    type: 'secret',\n    title: 'Enter a secret key'\n});\nos.toast(secret);\n"
                        },
                        {
                            "tag": "example",
                            "paramName": "",
                            "text": "Show an input for entering dates.\nconst date = await os.showInput('', {\n    type: 'date',\n    title: 'Enter a date'\n});\nos.toast(date);\n"
                        },
                        {
                            "tag": "example",
                            "paramName": "",
                            "text": "Show an input with a list of options.\n// Null means nothing is selected\n// To pre-select an item, pass in the index of the item you want selected.\nconst selectedItem = await os.showInput(null, {\n    title: 'Select your favorite superhero',\n    type: 'list',\n    placeholder: 'Superhero',\n    items: [\n        {\n            label: 'Superman',\n            value: 1\n        },\n        {\n            label: 'Iron Man',\n            value: 2\n        },\n        {\n            label: 'Batman',\n            value: 3\n        },\n        {\n            label: 'Wonder Woman',\n            value: 4\n        }\n    ]\n});\nos.toast(selectedItem);\n"
                        },
                        {
                            "tag": "example",
                            "paramName": "",
                            "text": "Show an input with a list of checkboxes.\n// Empty array means nothing is selected.\n// To pre-select items, pass in an array with the indexes of the items you want selected.\nconst selectedItems = await os.showInput([], {\n    title: 'Check your favorite superheroes',\n    type: 'list',\n    subtype: 'checkbox',\n    items: [\n        {\n            label: 'Superman',\n            value: 1\n        },\n        {\n            label: 'Iron Man',\n            value: 2\n        },\n        {\n            label: 'Batman',\n            value: 3\n        },\n        {\n            label: 'Wonder Woman',\n            value: 4\n        }\n    ]\n});\nos.toast(selectedItems);\n"
                        },
                        {
                            "tag": "example",
                            "paramName": "",
                            "text": "Show an input with a dropdown of checkboxes.\n// Empty array means nothing is selected.\n// To pre-select items, pass in an array with the indexes of the items you want selected.\nconst selectedItems = await os.showInput([], {\n    title: 'Select your favorite superheroes',\n    type: 'list',\n    subtype: 'multiSelect',\n    placeholder: 'Superhero',\n    items: [\n        {\n            label: 'Superman',\n            value: 1\n        },\n        {\n            label: 'Iron Man',\n            value: 2\n        },\n        {\n            label: 'Batman',\n            value: 3\n        },\n        {\n            label: 'Wonder Woman',\n            value: 4\n        }\n    ]\n});\nos.toast(selectedItems);\n"
                        },
                        {
                            "tag": "example",
                            "paramName": "",
                            "text": "Show an input with a list of radio buttons.\n// Null means nothing is selected.\n// To pre-select an item, pass in the index of the item you want selected.\nconst selectedItem = await os.showInput(null, {\n    title: 'Check your favorite superheroe',\n    type: 'list',\n    subtype: 'radio',\n    placeholder: 'Superhero',\n    items: [\n        {\n            label: 'Superman',\n            value: 1\n        },\n        {\n            label: 'Iron Man',\n            value: 2\n        },\n        {\n            label: 'Batman',\n            value: 3\n        },\n        {\n            label: 'Wonder Woman',\n            value: 4\n        }\n    ]\n});\nos.toast(selectedItem);\n"
                        },
                        {
                            "tag": "dochash",
                            "paramName": "",
                            "text": "actions/portals"
                        },
                        {
                            "tag": "docname",
                            "paramName": "",
                            "text": "os.showInput"
                        },
                        {
                            "tag": "docgroup",
                            "paramName": "",
                            "text": "10-showInput\n"
                        }
                    ]
                },
                "parameters": [
                    {
                        "id": 737,
                        "name": "currentValue",
                        "kind": 32768,
                        "kindString": "Parameter",
                        "flags": {
                            "isOptional": true
                        },
                        "comment": {
                            "shortText": "the value that should be shown in the input modal.",
                            "tags": []
                        },
                        "type": {
                            "type": "intrinsic",
                            "name": "any"
                        }
                    },
                    {
                        "id": 738,
                        "name": "options",
                        "kind": 32768,
                        "kindString": "Parameter",
                        "flags": {
                            "isOptional": true
                        },
                        "comment": {
                            "shortText": "the options that indicate how the input box should be customized.\n",
                            "tags": []
                        },
                        "type": {
                            "type": "reference",
                            "typeArguments": [
                                {
                                    "type": "reference",
                                    "id": 2597,
                                    "name": "ShowInputOptions"
                                }
                            ],
                            "qualifiedName": "Partial",
                            "package": "typescript",
                            "name": "Partial"
                        }
                    }
                ],
                "type": {
                    "type": "reference",
                    "typeArguments": [
                        {
                            "type": "intrinsic",
                            "name": "any"
                        }
                    ],
                    "qualifiedName": "Promise",
                    "package": "typescript",
                    "name": "Promise"
                }
            },
            "comment": {
                "shortText": "Shows an input modal with the given value and options. When shown, the player will be able to change the value.",
                "text": "Returns a Promise that resolves with the final value when the user is finished editing.\nThis function is similar to {@link os.showInputForTag} except it doesn't require a bot and a tag.\n",
                "tags": [
                    {
                        "tagName": "example",
                        "paramName": "",
                        "text": "Show a basic text input modal and displays a toast message with the input value.\nconst value = await os.showInput();\nos.toast(value);\n"
                    },
                    {
                        "tagName": "example",
                        "paramName": "",
                        "text": "Show a text input modal with a placeholder.\nconst name = await os.showInput(null, {\n    placeholder: 'Enter a name'\n});\nos.toast(name);\n"
                    },
                    {
                        "tagName": "example",
                        "paramName": "",
                        "text": "Show a input modal with a custom title.\nconst name = await os.showInput('My Name', {\n    title: 'Edit name'\n});\nos.toast(name);\n"
                    },
                    {
                        "tagName": "example",
                        "paramName": "",
                        "text": "Show a color input modal with a custom title.\nconst color = await os.showInput('green', {\n    type: 'color',\n    title: 'Enter a custom color'\n});\nos.toast(color);\n"
                    },
                    {
                        "tagName": "example",
                        "paramName": "",
                        "text": "Show an input for entering secrets (like passwords).\nconst secret = await os.showInput('', {\n    type: 'secret',\n    title: 'Enter a secret key'\n});\nos.toast(secret);\n"
                    },
                    {
                        "tagName": "example",
                        "paramName": "",
                        "text": "Show an input for entering dates.\nconst date = await os.showInput('', {\n    type: 'date',\n    title: 'Enter a date'\n});\nos.toast(date);\n"
                    },
                    {
                        "tagName": "example",
                        "paramName": "",
                        "text": "Show an input with a list of options.\n// Null means nothing is selected\n// To pre-select an item, pass in the index of the item you want selected.\nconst selectedItem = await os.showInput(null, {\n    title: 'Select your favorite superhero',\n    type: 'list',\n    placeholder: 'Superhero',\n    items: [\n        {\n            label: 'Superman',\n            value: 1\n        },\n        {\n            label: 'Iron Man',\n            value: 2\n        },\n        {\n            label: 'Batman',\n            value: 3\n        },\n        {\n            label: 'Wonder Woman',\n            value: 4\n        }\n    ]\n});\nos.toast(selectedItem);\n"
                    },
                    {
                        "tagName": "example",
                        "paramName": "",
                        "text": "Show an input with a list of checkboxes.\n// Empty array means nothing is selected.\n// To pre-select items, pass in an array with the indexes of the items you want selected.\nconst selectedItems = await os.showInput([], {\n    title: 'Check your favorite superheroes',\n    type: 'list',\n    subtype: 'checkbox',\n    items: [\n        {\n            label: 'Superman',\n            value: 1\n        },\n        {\n            label: 'Iron Man',\n            value: 2\n        },\n        {\n            label: 'Batman',\n            value: 3\n        },\n        {\n            label: 'Wonder Woman',\n            value: 4\n        }\n    ]\n});\nos.toast(selectedItems);\n"
                    },
                    {
                        "tagName": "example",
                        "paramName": "",
                        "text": "Show an input with a dropdown of checkboxes.\n// Empty array means nothing is selected.\n// To pre-select items, pass in an array with the indexes of the items you want selected.\nconst selectedItems = await os.showInput([], {\n    title: 'Select your favorite superheroes',\n    type: 'list',\n    subtype: 'multiSelect',\n    placeholder: 'Superhero',\n    items: [\n        {\n            label: 'Superman',\n            value: 1\n        },\n        {\n            label: 'Iron Man',\n            value: 2\n        },\n        {\n            label: 'Batman',\n            value: 3\n        },\n        {\n            label: 'Wonder Woman',\n            value: 4\n        }\n    ]\n});\nos.toast(selectedItems);\n"
                    },
                    {
                        "tagName": "example",
                        "paramName": "",
                        "text": "Show an input with a list of radio buttons.\n// Null means nothing is selected.\n// To pre-select an item, pass in the index of the item you want selected.\nconst selectedItem = await os.showInput(null, {\n    title: 'Check your favorite superheroe',\n    type: 'list',\n    subtype: 'radio',\n    placeholder: 'Superhero',\n    items: [\n        {\n            label: 'Superman',\n            value: 1\n        },\n        {\n            label: 'Iron Man',\n            value: 2\n        },\n        {\n            label: 'Batman',\n            value: 3\n        },\n        {\n            label: 'Wonder Woman',\n            value: 4\n        }\n    ]\n});\nos.toast(selectedItem);\n"
                    },
                    {
                        "tagName": "dochash",
                        "paramName": "",
                        "text": "actions/portals"
                    },
                    {
                        "tagName": "docname",
                        "paramName": "",
                        "text": "os.showInput"
                    },
                    {
                        "tagName": "docgroup",
                        "paramName": "",
                        "text": "10-showInput\n"
                    }
                ]
            },
            "group": "10-showInput"
        },
        {
            "id": 730,
            "order": 9999,
            "name": "os.showInputForTag",
            "reflection": {
                "id": 730,
                "name": "__type",
                "kind": 4096,
                "kindString": "Call signature",
                "flags": {},
                "comment": {
                    "shortText": "Shows an input modal for the given bot and tag with the given options.\nWhen shown, the player will be able to change the value stored in the given tag.\nTriggers the [`@onSaveInput`](tags:@onSaveInput) whisper when the modal is closed with saving and the [`@onCloseInput`](tags:@onCloseInput) whisper when the modal is closed without saving.",
                    "tags": [
                        {
                            "tag": "example",
                            "paramName": "",
                            "text": "Show a basic text input modal for the #name tag on this bot.\nos.showInputForTag(this, \"name\");\n"
                        },
                        {
                            "tag": "example",
                            "paramName": "",
                            "text": "Show a text input modal with a placeholder for the #name tag.\nos.showInputForTag(this, \"name\", {\n    placeholder: 'Enter a name'\n});\n"
                        },
                        {
                            "tag": "example",
                            "paramName": "",
                            "text": "Show a input modal with a custom title.\nos.showInputForTag(this, \"name\", {\n    title: 'Edit name'\n});\n"
                        },
                        {
                            "tag": "example",
                            "paramName": "",
                            "text": "Show a color input modal with a custom title.\nos.showInputForTag(this, \"color\", {\n    type: 'color',\n    title: 'Enter a custom color'\n});\n"
                        },
                        {
                            "tag": "dochash",
                            "paramName": "",
                            "text": "actions/portals"
                        },
                        {
                            "tag": "docname",
                            "paramName": "",
                            "text": "os.showInputForTag"
                        },
                        {
                            "tag": "docgroup",
                            "paramName": "",
                            "text": "10-showInput\n"
                        }
                    ]
                },
                "parameters": [
                    {
                        "id": 731,
                        "name": "bot",
                        "kind": 32768,
                        "kindString": "Parameter",
                        "flags": {},
                        "comment": {
                            "shortText": "the bot or bot ID that the input should be shown for.",
                            "tags": []
                        },
                        "type": {
                            "type": "union",
                            "types": [
                                {
                                    "type": "intrinsic",
                                    "name": "string"
                                },
                                {
                                    "type": "reference",
                                    "id": 2709,
                                    "name": "Bot"
                                }
                            ]
                        }
                    },
                    {
                        "id": 732,
                        "name": "tag",
                        "kind": 32768,
                        "kindString": "Parameter",
                        "flags": {},
                        "comment": {
                            "shortText": "the tag that should be edited on the bot.",
                            "tags": []
                        },
                        "type": {
                            "type": "intrinsic",
                            "name": "string"
                        }
                    },
                    {
                        "id": 733,
                        "name": "options",
                        "kind": 32768,
                        "kindString": "Parameter",
                        "flags": {
                            "isOptional": true
                        },
                        "comment": {
                            "shortText": "the possible cusomization options for the input modal.\n",
                            "tags": []
                        },
                        "type": {
                            "type": "reference",
                            "typeArguments": [
                                {
                                    "type": "reference",
                                    "id": 2597,
                                    "name": "ShowInputOptions"
                                }
                            ],
                            "qualifiedName": "Partial",
                            "package": "typescript",
                            "name": "Partial"
                        }
                    }
                ],
                "type": {
                    "type": "reference",
                    "name": "ShowInputForTagAction"
                }
            },
            "comment": {
                "shortText": "Shows an input modal for the given bot and tag with the given options.\nWhen shown, the player will be able to change the value stored in the given tag.\nTriggers the {@tag @onSaveInput} whisper when the modal is closed with saving and the {@tag @onCloseInput} whisper when the modal is closed without saving.",
                "text": "",
                "tags": [
                    {
                        "tagName": "example",
                        "paramName": "",
                        "text": "Show a basic text input modal for the #name tag on this bot.\nos.showInputForTag(this, \"name\");\n"
                    },
                    {
                        "tagName": "example",
                        "paramName": "",
                        "text": "Show a text input modal with a placeholder for the #name tag.\nos.showInputForTag(this, \"name\", {\n    placeholder: 'Enter a name'\n});\n"
                    },
                    {
                        "tagName": "example",
                        "paramName": "",
                        "text": "Show a input modal with a custom title.\nos.showInputForTag(this, \"name\", {\n    title: 'Edit name'\n});\n"
                    },
                    {
                        "tagName": "example",
                        "paramName": "",
                        "text": "Show a color input modal with a custom title.\nos.showInputForTag(this, \"color\", {\n    type: 'color',\n    title: 'Enter a custom color'\n});\n"
                    },
                    {
                        "tagName": "dochash",
                        "paramName": "",
                        "text": "actions/portals"
                    },
                    {
                        "tagName": "docname",
                        "paramName": "",
                        "text": "os.showInputForTag"
                    },
                    {
                        "tagName": "docgroup",
                        "paramName": "",
                        "text": "10-showInput\n"
                    }
                ]
            },
            "group": "10-showInput"
        },
        {
            "id": 452,
            "order": 9999,
            "name": "os.hideTips",
            "reflection": {
                "id": 452,
                "name": "__type",
                "kind": 4096,
                "kindString": "Call signature",
                "flags": {},
                "comment": {
                    "shortText": "Hides the tooltips that have the specified IDs. If no arguments are specified, then all tooltips will be hidden.\nReturns a promise that resolves when the tooltips have been hidden.",
                    "tags": [
                        {
                            "tag": "example",
                            "paramName": "",
                            "text": "Show and hide a tooltip message.\nconst id = await os.tip(\"Hello!\");\nawait os.sleep(1000);\nawait os.hideTips(id);\n"
                        },
                        {
                            "tag": "dochash",
                            "paramName": "",
                            "text": "actions/portals"
                        },
                        {
                            "tag": "docname",
                            "paramName": "",
                            "text": "os.hideTips"
                        },
                        {
                            "tag": "docgroup",
                            "paramName": "",
                            "text": "10-tip\n"
                        }
                    ]
                },
                "parameters": [
                    {
                        "id": 453,
                        "name": "tipIds",
                        "kind": 32768,
                        "kindString": "Parameter",
                        "flags": {
                            "isOptional": true
                        },
                        "comment": {
                            "shortText": "the tooltip ID or array of tooltip IDs that should be hidden.\n",
                            "tags": []
                        },
                        "type": {
                            "type": "union",
                            "types": [
                                {
                                    "type": "intrinsic",
                                    "name": "number"
                                },
                                {
                                    "type": "array",
                                    "elementType": {
                                        "type": "intrinsic",
                                        "name": "number"
                                    }
                                }
                            ]
                        }
                    }
                ],
                "type": {
                    "type": "reference",
                    "typeArguments": [
                        {
                            "type": "intrinsic",
                            "name": "void"
                        }
                    ],
                    "qualifiedName": "Promise",
                    "package": "typescript",
                    "name": "Promise"
                }
            },
            "comment": {
                "shortText": "Hides the tooltips that have the specified IDs. If no arguments are specified, then all tooltips will be hidden.\nReturns a promise that resolves when the tooltips have been hidden.",
                "text": "",
                "tags": [
                    {
                        "tagName": "example",
                        "paramName": "",
                        "text": "Show and hide a tooltip message.\nconst id = await os.tip(\"Hello!\");\nawait os.sleep(1000);\nawait os.hideTips(id);\n"
                    },
                    {
                        "tagName": "dochash",
                        "paramName": "",
                        "text": "actions/portals"
                    },
                    {
                        "tagName": "docname",
                        "paramName": "",
                        "text": "os.hideTips"
                    },
                    {
                        "tagName": "docgroup",
                        "paramName": "",
                        "text": "10-tip\n"
                    }
                ]
            },
            "group": "10-tip"
        },
        {
            "id": 445,
            "order": 9999,
            "name": "os.tip",
            "reflection": {
                "id": 445,
                "name": "__type",
                "kind": 4096,
                "kindString": "Call signature",
                "flags": {},
                "comment": {
                    "shortText": "Shows a temporary \"tooltip\" message on the screen. Optionally placed at the specified position and shown for the given duration.\nReturns a promise that resolves with the ID of the new tooltip.",
                    "text": "If a position is not specified, then a position just below the current mouse position will be used.\nIf on mobile, then the last touch position will be used or the center of the screen if the user has not touched the screen.\nAdditionally, if a position is not specified then the tooltip will be automatically hidden if the user moves the mouse significantly away from the position that the mouse was at when the tooltip was shown.\n",
                    "tags": [
                        {
                            "tag": "example",
                            "paramName": "",
                            "text": "Show a \"Hello!\" tip message.\nos.tip(\"Hello!\");\n"
                        },
                        {
                            "tag": "example",
                            "paramName": "",
                            "text": "Show a tip at the center of the screen.\nos.tip(\"This is in the center of the screen.\", gridPortalBot.tags.pixelWidth / 2, gridPortalBot.tags.pixelHeight / 2);\n"
                        },
                        {
                            "tag": "example",
                            "paramName": "",
                            "text": "Show a tip near the mouse cursor for 5 seconds.\nos.tip(\"5 second tip.\", null, null, 5);\n"
                        },
                        {
                            "tag": "example",
                            "paramName": "",
                            "text": "Show a tip and record its ID in a tag mask.\nmasks.tipID = await os.tip(\"Hello!\");\n"
                        },
                        {
                            "tag": "dochash",
                            "paramName": "",
                            "text": "actions/portals"
                        },
                        {
                            "tag": "docname",
                            "paramName": "",
                            "text": "os.tip"
                        },
                        {
                            "tag": "docgroup",
                            "paramName": "",
                            "text": "10-tip\n"
                        }
                    ]
                },
                "parameters": [
                    {
                        "id": 446,
                        "name": "message",
                        "kind": 32768,
                        "kindString": "Parameter",
                        "flags": {},
                        "comment": {
                            "shortText": "the text that the tooltip message should show.",
                            "tags": []
                        },
                        "type": {
                            "type": "union",
                            "types": [
                                {
                                    "type": "intrinsic",
                                    "name": "string"
                                },
                                {
                                    "type": "intrinsic",
                                    "name": "number"
                                },
                                {
                                    "type": "intrinsic",
                                    "name": "boolean"
                                },
                                {
                                    "type": "intrinsic",
                                    "name": "object"
                                },
                                {
                                    "type": "array",
                                    "elementType": {
                                        "type": "intrinsic",
                                        "name": "any"
                                    }
                                }
                            ]
                        }
                    },
                    {
                        "id": 447,
                        "name": "pixelX",
                        "kind": 32768,
                        "kindString": "Parameter",
                        "flags": {
                            "isOptional": true
                        },
                        "comment": {
                            "shortText": "the horizontal pixel position that the tooltip should be shown at on the screen. If not specified then the current mouse position will be used.",
                            "tags": []
                        },
                        "type": {
                            "type": "intrinsic",
                            "name": "number"
                        }
                    },
                    {
                        "id": 448,
                        "name": "pixelY",
                        "kind": 32768,
                        "kindString": "Parameter",
                        "flags": {
                            "isOptional": true
                        },
                        "comment": {
                            "shortText": "the vertical position that the tooltip should be shown at on the screen. If not specified then a position just below the current mouse position will be used.",
                            "tags": []
                        },
                        "type": {
                            "type": "intrinsic",
                            "name": "number"
                        }
                    },
                    {
                        "id": 449,
                        "name": "duration",
                        "kind": 32768,
                        "kindString": "Parameter",
                        "flags": {
                            "isOptional": true
                        },
                        "comment": {
                            "shortText": "the number of seconds that the toast should be shown for before automatically being hidden. (Default is 2)\n",
                            "tags": []
                        },
                        "type": {
                            "type": "intrinsic",
                            "name": "number"
                        }
                    }
                ],
                "type": {
                    "type": "reference",
                    "typeArguments": [
                        {
                            "type": "intrinsic",
                            "name": "number"
                        }
                    ],
                    "qualifiedName": "Promise",
                    "package": "typescript",
                    "name": "Promise"
                }
            },
            "comment": {
                "shortText": "Shows a temporary \"tooltip\" message on the screen. Optionally placed at the specified position and shown for the given duration.\nReturns a promise that resolves with the ID of the new tooltip.",
                "text": "If a position is not specified, then a position just below the current mouse position will be used.\nIf on mobile, then the last touch position will be used or the center of the screen if the user has not touched the screen.\nAdditionally, if a position is not specified then the tooltip will be automatically hidden if the user moves the mouse significantly away from the position that the mouse was at when the tooltip was shown.\n",
                "tags": [
                    {
                        "tagName": "example",
                        "paramName": "",
                        "text": "Show a \"Hello!\" tip message.\nos.tip(\"Hello!\");\n"
                    },
                    {
                        "tagName": "example",
                        "paramName": "",
                        "text": "Show a tip at the center of the screen.\nos.tip(\"This is in the center of the screen.\", gridPortalBot.tags.pixelWidth / 2, gridPortalBot.tags.pixelHeight / 2);\n"
                    },
                    {
                        "tagName": "example",
                        "paramName": "",
                        "text": "Show a tip near the mouse cursor for 5 seconds.\nos.tip(\"5 second tip.\", null, null, 5);\n"
                    },
                    {
                        "tagName": "example",
                        "paramName": "",
                        "text": "Show a tip and record its ID in a tag mask.\nmasks.tipID = await os.tip(\"Hello!\");\n"
                    },
                    {
                        "tagName": "dochash",
                        "paramName": "",
                        "text": "actions/portals"
                    },
                    {
                        "tagName": "docname",
                        "paramName": "",
                        "text": "os.tip"
                    },
                    {
                        "tagName": "docgroup",
                        "paramName": "",
                        "text": "10-tip\n"
                    }
                ]
            },
            "group": "10-tip"
        },
        {
            "id": 810,
            "order": 9999,
            "name": "os.addBotDropGrid",
            "reflection": {
                "id": 810,
                "name": "__type",
                "kind": 4096,
                "kindString": "Call signature",
                "flags": {},
                "comment": {
                    "shortText": "Specifies a list of grids that can be used to position the currently dragged bot when it is being dropped on the given bot.",
                    "text": "If called when the user is not dragging anything, then this function does nothing.\n",
                    "tags": [
                        {
                            "tag": "example",
                            "paramName": "",
                            "text": "Add a grid for the portal that the bot currently exists in when it is being dropped on this bot.\nos.addDropGrid(thisBot, {});\n"
                        },
                        {
                            "tag": "example",
                            "paramName": "",
                            "text": "Add a grid with a 60 degree X rotation when it is being dropped on this bot.\nos.addBotDropGrid(thisBot, {\n    position: { x: 0, y: 0, z: 0 },\n    rotation: { x: 60 * (Math.PI / 180), y: 0, z: 0 },\n});\n"
                        },
                        {
                            "tag": "example",
                            "paramName": "",
                            "text": "Add a grid for a specific portal bot when it is being dropped on this bot.\nos.addBotDropGrid(thisBot, {\n    portalBot: getBot(byTag('form', 'portal'), byTag('formAddress', 'myDimension')),\n});\n"
                        },
                        {
                            "tag": "example",
                            "paramName": "",
                            "text": "Add a grid with a custom size when it is being dropped on this bot.\nos.addBotDropGrid(thisBot, {\n    position: { x: 0, y: 0, z: 3 },\n    bounds: { x: 20, y: 10 }\n});\n"
                        },
                        {
                            "tag": "example",
                            "paramName": "",
                            "text": "Add a grid that the user can see when it is being dropped on this bot.\nos.addBotDropGrid(thisBot, {\n    position: { x: 0, y: 0, z: 3 },\n    showGrid: true\n});\n"
                        },
                        {
                            "tag": "example",
                            "paramName": "",
                            "text": "Add multiple grids with custom priorities when it is being dropped on this bot.\nos.addBotDropGrid(thisBot, {\n    position: { x: 0, y: 0, z: 3 },\n    bounds: { x: 10, y: 10 },\n    showGrid: true,\n    priority: 10\n}, {\n    position: { x: 0, y: 0, z: 0 },\n    bounds: { x: 20, y: 20 },\n    showGrid: true,\n    priority: 20\n});\n"
                        },
                        {
                            "tag": "example",
                            "paramName": "",
                            "text": "Add a spherical grid that the user can see.\nos.addBotDropGrid(thisBot, {\n    type: \"sphere\",\n    position: { x: 0, y: 0, z: 3 },\n    showGrid: true\n});\n"
                        },
                        {
                            "tag": "dochash",
                            "paramName": "",
                            "text": "actions/portals"
                        },
                        {
                            "tag": "docname",
                            "paramName": "",
                            "text": "os.addBotDropGrid\n"
                        }
                    ]
                },
                "parameters": [
                    {
                        "id": 811,
                        "name": "bot",
                        "kind": 32768,
                        "kindString": "Parameter",
                        "flags": {},
                        "comment": {
                            "shortText": "the bot which, when the dragged bot is being dropped onto it (as indicated by [`@onDropEnter`](tags:@onDropEnter)/[`@onDropExit`](tags:@onDropExit)), the specified snap targets will take effect.",
                            "tags": []
                        },
                        "type": {
                            "type": "union",
                            "types": [
                                {
                                    "type": "intrinsic",
                                    "name": "string"
                                },
                                {
                                    "type": "reference",
                                    "id": 2709,
                                    "name": "Bot"
                                }
                            ]
                        }
                    },
                    {
                        "id": 812,
                        "name": "targets",
                        "kind": 32768,
                        "kindString": "Parameter",
                        "flags": {
                            "isRest": true
                        },
                        "comment": {
                            "shortText": "the list of grids to add.\n",
                            "tags": []
                        },
                        "type": {
                            "type": "array",
                            "elementType": {
                                "type": "reference",
                                "id": 2159,
                                "name": "SnapGridTarget"
                            }
                        }
                    }
                ],
                "type": {
                    "type": "reference",
                    "name": "AddDropGridTargetsAction"
                }
            },
            "comment": {
                "shortText": "Specifies a list of grids that can be used to position the currently dragged bot when it is being dropped on the given bot.",
                "text": "If called when the user is not dragging anything, then this function does nothing.\n",
                "tags": [
                    {
                        "tagName": "example",
                        "paramName": "",
                        "text": "Add a grid for the portal that the bot currently exists in when it is being dropped on this bot.\nos.addDropGrid(thisBot, {});\n"
                    },
                    {
                        "tagName": "example",
                        "paramName": "",
                        "text": "Add a grid with a 60 degree X rotation when it is being dropped on this bot.\nos.addBotDropGrid(thisBot, {\n    position: { x: 0, y: 0, z: 0 },\n    rotation: { x: 60 * (Math.PI / 180), y: 0, z: 0 },\n});\n"
                    },
                    {
                        "tagName": "example",
                        "paramName": "",
                        "text": "Add a grid for a specific portal bot when it is being dropped on this bot.\nos.addBotDropGrid(thisBot, {\n    portalBot: getBot(byTag('form', 'portal'), byTag('formAddress', 'myDimension')),\n});\n"
                    },
                    {
                        "tagName": "example",
                        "paramName": "",
                        "text": "Add a grid with a custom size when it is being dropped on this bot.\nos.addBotDropGrid(thisBot, {\n    position: { x: 0, y: 0, z: 3 },\n    bounds: { x: 20, y: 10 }\n});\n"
                    },
                    {
                        "tagName": "example",
                        "paramName": "",
                        "text": "Add a grid that the user can see when it is being dropped on this bot.\nos.addBotDropGrid(thisBot, {\n    position: { x: 0, y: 0, z: 3 },\n    showGrid: true\n});\n"
                    },
                    {
                        "tagName": "example",
                        "paramName": "",
                        "text": "Add multiple grids with custom priorities when it is being dropped on this bot.\nos.addBotDropGrid(thisBot, {\n    position: { x: 0, y: 0, z: 3 },\n    bounds: { x: 10, y: 10 },\n    showGrid: true,\n    priority: 10\n}, {\n    position: { x: 0, y: 0, z: 0 },\n    bounds: { x: 20, y: 20 },\n    showGrid: true,\n    priority: 20\n});\n"
                    },
                    {
                        "tagName": "example",
                        "paramName": "",
                        "text": "Add a spherical grid that the user can see.\nos.addBotDropGrid(thisBot, {\n    type: \"sphere\",\n    position: { x: 0, y: 0, z: 3 },\n    showGrid: true\n});\n"
                    },
                    {
                        "tagName": "dochash",
                        "paramName": "",
                        "text": "actions/portals"
                    },
                    {
                        "tagName": "docname",
                        "paramName": "",
                        "text": "os.addBotDropGrid\n"
                    }
                ]
            },
            "group": null
        },
        {
            "id": 801,
            "order": 9999,
            "name": "os.addBotDropSnap",
            "reflection": {
                "id": 801,
                "name": "__type",
                "kind": 4096,
                "kindString": "Call signature",
                "flags": {},
                "comment": {
                    "shortText": "Specifies a list of snap targets that can be used to position the currently dragged bot when it is being dropped on the given bot. This function is useful for making some bots act like a \"selector\" or mask for drop areas.",
                    "text": "If called when the user is not dragging anything, then this function does nothing.\n",
                    "tags": [
                        {
                            "tag": "example",
                            "paramName": "",
                            "text": "Snap the dragged bot to the grid when it is being dropped on this bot.\nos.addBotDropSnap(thisBot, \"grid\");\n"
                        },
                        {
                            "tag": "example",
                            "paramName": "",
                            "text": "Snap the dragged bot to this bot's faces.\nos.addBotDropSnap(thisBot, \"face\");\n"
                        },
                        {
                            "tag": "example",
                            "paramName": "",
                            "text": "Snap the dragged bot to a point when it is being dropped on this bot.\nos.addBotDropSnap(thisBot, {\n    position: {\n        x: 0,\n        y: 0,\n        z: 3,\n    },\n    distance: 1\n});\n"
                        },
                        {
                            "tag": "example",
                            "paramName": "",
                            "text": "Snap the dragged bot to the center or bot faces when it is being dropped on this bot.\nos.addBotDropSnap(thisBot, {\n    position: {\n        x: 0,\n        y: 0,\n        z: 0,\n    },\n    distance: 1\n}, \"face\");\n"
                        },
                        {
                            "tag": "dochash",
                            "paramName": "",
                            "text": "actions/portals"
                        },
                        {
                            "tag": "docname",
                            "paramName": "",
                            "text": "os.addBotDropSnap\n"
                        }
                    ]
                },
                "parameters": [
                    {
                        "id": 802,
                        "name": "bot",
                        "kind": 32768,
                        "kindString": "Parameter",
                        "flags": {},
                        "comment": {
                            "shortText": "the bot which, when the dragged bot is being dropped onto it (as indicated by [`@onDropEnter`](tags:@onDropEnter)/[`@onDropExit`](tags:@onDropExit)), the specified snap targets will take effect.",
                            "tags": []
                        },
                        "type": {
                            "type": "union",
                            "types": [
                                {
                                    "type": "intrinsic",
                                    "name": "string"
                                },
                                {
                                    "type": "reference",
                                    "id": 2709,
                                    "name": "Bot"
                                }
                            ]
                        }
                    },
                    {
                        "id": 803,
                        "name": "targets",
                        "kind": 32768,
                        "kindString": "Parameter",
                        "flags": {
                            "isRest": true
                        },
                        "comment": {
                            "shortText": "the snap targets that should be enabled when the bot is being dropped on.\n",
                            "tags": []
                        },
                        "type": {
                            "type": "array",
                            "elementType": {
                                "type": "reference",
                                "id": 2563,
                                "name": "SnapTarget"
                            }
                        }
                    }
                ],
                "type": {
                    "type": "reference",
                    "name": "AddDropSnapTargetsAction"
                }
            },
            "comment": {
                "shortText": "Specifies a list of snap targets that can be used to position the currently dragged bot when it is being dropped on the given bot. This function is useful for making some bots act like a \"selector\" or mask for drop areas.",
                "text": "If called when the user is not dragging anything, then this function does nothing.\n",
                "tags": [
                    {
                        "tagName": "example",
                        "paramName": "",
                        "text": "Snap the dragged bot to the grid when it is being dropped on this bot.\nos.addBotDropSnap(thisBot, \"grid\");\n"
                    },
                    {
                        "tagName": "example",
                        "paramName": "",
                        "text": "Snap the dragged bot to this bot's faces.\nos.addBotDropSnap(thisBot, \"face\");\n"
                    },
                    {
                        "tagName": "example",
                        "paramName": "",
                        "text": "Snap the dragged bot to a point when it is being dropped on this bot.\nos.addBotDropSnap(thisBot, {\n    position: {\n        x: 0,\n        y: 0,\n        z: 3,\n    },\n    distance: 1\n});\n"
                    },
                    {
                        "tagName": "example",
                        "paramName": "",
                        "text": "Snap the dragged bot to the center or bot faces when it is being dropped on this bot.\nos.addBotDropSnap(thisBot, {\n    position: {\n        x: 0,\n        y: 0,\n        z: 0,\n    },\n    distance: 1\n}, \"face\");\n"
                    },
                    {
                        "tagName": "dochash",
                        "paramName": "",
                        "text": "actions/portals"
                    },
                    {
                        "tagName": "docname",
                        "paramName": "",
                        "text": "os.addBotDropSnap\n"
                    }
                ]
            },
            "group": null
        },
        {
            "id": 806,
            "order": 9999,
            "name": "os.addDropGrid",
            "reflection": {
                "id": 806,
                "name": "__type",
                "kind": 4096,
                "kindString": "Call signature",
                "flags": {},
                "comment": {
                    "shortText": "Specifies a list of grids that can be used to position the currently dragged bot.",
                    "text": "If called when the user is not dragging anything, then this function does nothing.\n",
                    "tags": [
                        {
                            "tag": "example",
                            "paramName": "",
                            "text": "Add a grid for the portal that the bot currently exists in.\nos.addDropGrid({});\n"
                        },
                        {
                            "tag": "example",
                            "paramName": "",
                            "text": "Add a grid with a 60 degree X rotation.\nos.addDropGrid({\n    position: { x: 0, y: 0, z: 0 },\n    rotation: { x: 60 * (Math.PI / 180), y: 0, z: 0 },\n});\n"
                        },
                        {
                            "tag": "example",
                            "paramName": "",
                            "text": "Add a grid for a specific portal bot.\nos.addDropGrid({\n    portalBot: getBot(byTag('form', 'portal'), byTag('formAddress', 'myDimension')),\n});\n"
                        },
                        {
                            "tag": "example",
                            "paramName": "",
                            "text": "Add a grid with a custom size.\nos.addDropGrid({\n    position: { x: 0, y: 0, z: 3 },\n    bounds: { x: 20, y: 10 }\n});\n"
                        },
                        {
                            "tag": "example",
                            "paramName": "",
                            "text": "Add a grid that the user can see.\nos.addDropGrid({\n    position: { x: 0, y: 0, z: 3 },\n    showGrid: true\n});\n"
                        },
                        {
                            "tag": "example",
                            "paramName": "",
                            "text": "Add multiple grids with custom priorities\nos.addDropGrid({\n    position: { x: 0, y: 0, z: 3 },\n    bounds: { x: 10, y: 10 },\n    showGrid: true,\n    priority: 10\n}, {\n    position: { x: 0, y: 0, z: 0 },\n    bounds: { x: 20, y: 20 },\n    showGrid: true,\n    priority: 20\n});\n"
                        },
                        {
                            "tag": "example",
                            "paramName": "",
                            "text": "Add a spherical grid that the user can see.\nos.addDropGrid({\n    type: \"sphere\",\n    position: { x: 0, y: 0, z: 3 },\n    showGrid: true\n});\n"
                        },
                        {
                            "tag": "dochash",
                            "paramName": "",
                            "text": "actions/portals"
                        },
                        {
                            "tag": "docname",
                            "paramName": "",
                            "text": "os.addDropGrid\n"
                        }
                    ]
                },
                "parameters": [
                    {
                        "id": 807,
                        "name": "targets",
                        "kind": 32768,
                        "kindString": "Parameter",
                        "flags": {
                            "isRest": true
                        },
                        "comment": {
                            "shortText": "the list of grids to add.\n",
                            "tags": []
                        },
                        "type": {
                            "type": "array",
                            "elementType": {
                                "type": "reference",
                                "id": 2159,
                                "name": "SnapGridTarget"
                            }
                        }
                    }
                ],
                "type": {
                    "type": "reference",
                    "name": "AddDropGridTargetsAction"
                }
            },
            "comment": {
                "shortText": "Specifies a list of grids that can be used to position the currently dragged bot.",
                "text": "If called when the user is not dragging anything, then this function does nothing.\n",
                "tags": [
                    {
                        "tagName": "example",
                        "paramName": "",
                        "text": "Add a grid for the portal that the bot currently exists in.\nos.addDropGrid({});\n"
                    },
                    {
                        "tagName": "example",
                        "paramName": "",
                        "text": "Add a grid with a 60 degree X rotation.\nos.addDropGrid({\n    position: { x: 0, y: 0, z: 0 },\n    rotation: { x: 60 * (Math.PI / 180), y: 0, z: 0 },\n});\n"
                    },
                    {
                        "tagName": "example",
                        "paramName": "",
                        "text": "Add a grid for a specific portal bot.\nos.addDropGrid({\n    portalBot: getBot(byTag('form', 'portal'), byTag('formAddress', 'myDimension')),\n});\n"
                    },
                    {
                        "tagName": "example",
                        "paramName": "",
                        "text": "Add a grid with a custom size.\nos.addDropGrid({\n    position: { x: 0, y: 0, z: 3 },\n    bounds: { x: 20, y: 10 }\n});\n"
                    },
                    {
                        "tagName": "example",
                        "paramName": "",
                        "text": "Add a grid that the user can see.\nos.addDropGrid({\n    position: { x: 0, y: 0, z: 3 },\n    showGrid: true\n});\n"
                    },
                    {
                        "tagName": "example",
                        "paramName": "",
                        "text": "Add multiple grids with custom priorities\nos.addDropGrid({\n    position: { x: 0, y: 0, z: 3 },\n    bounds: { x: 10, y: 10 },\n    showGrid: true,\n    priority: 10\n}, {\n    position: { x: 0, y: 0, z: 0 },\n    bounds: { x: 20, y: 20 },\n    showGrid: true,\n    priority: 20\n});\n"
                    },
                    {
                        "tagName": "example",
                        "paramName": "",
                        "text": "Add a spherical grid that the user can see.\nos.addDropGrid({\n    type: \"sphere\",\n    position: { x: 0, y: 0, z: 3 },\n    showGrid: true\n});\n"
                    },
                    {
                        "tagName": "dochash",
                        "paramName": "",
                        "text": "actions/portals"
                    },
                    {
                        "tagName": "docname",
                        "paramName": "",
                        "text": "os.addDropGrid\n"
                    }
                ]
            },
            "group": null
        },
        {
            "id": 797,
            "order": 9999,
            "name": "os.addDropSnap",
            "reflection": {
                "id": 797,
                "name": "__type",
                "kind": 4096,
                "kindString": "Call signature",
                "flags": {},
                "comment": {
                    "shortText": "Specifies a list of snap targets that can be used to position the currently dragged bot.",
                    "text": "If called when the user is not dragging anything, then this function does nothing.\n",
                    "tags": [
                        {
                            "tag": "example",
                            "paramName": "",
                            "text": "Snap the dragged bot to the grid.\nos.addDropSnap(\"grid\");\n"
                        },
                        {
                            "tag": "example",
                            "paramName": "",
                            "text": "Snap the dragged bot to other bot faces.\nos.addDropSnap(\"face\");\n"
                        },
                        {
                            "tag": "example",
                            "paramName": "",
                            "text": "Snap the dragged bot to a point.\nos.addDropSnap({\n    position: {\n        x: 0,\n        y: 0,\n        z: 3,\n    },\n    distance: 1\n});\n"
                        },
                        {
                            "tag": "example",
                            "paramName": "",
                            "text": "Snap the dragged bot to the global X axis.\nos.addDropSnap({\n    direction: {\n        x: 1,\n        y: 0,\n        z: 0,\n    },\n    origin: {\n        x: 0,\n        y: 0,\n        z: 0\n    },\n    distance: 2\n});\n"
                        },
                        {
                            "tag": "example",
                            "paramName": "",
                            "text": "Snap the dragged bot to the center or bot faces.\nos.addDropSnap({\n    position: {\n        x: 0,\n        y: 0,\n        z: 0,\n    },\n    distance: 1\n}, \"face\");\n"
                        },
                        {
                            "tag": "dochash",
                            "paramName": "",
                            "text": "actions/portals"
                        },
                        {
                            "tag": "docname",
                            "paramName": "",
                            "text": "os.addDropSnap\n"
                        }
                    ]
                },
                "parameters": [
                    {
                        "id": 798,
                        "name": "targets",
                        "kind": 32768,
                        "kindString": "Parameter",
                        "flags": {
                            "isRest": true
                        },
                        "comment": {
                            "shortText": "The list of snap targets to add.\n",
                            "tags": []
                        },
                        "type": {
                            "type": "array",
                            "elementType": {
                                "type": "reference",
                                "id": 2563,
                                "name": "SnapTarget"
                            }
                        }
                    }
                ],
                "type": {
                    "type": "reference",
                    "name": "AddDropSnapTargetsAction"
                }
            },
            "comment": {
                "shortText": "Specifies a list of snap targets that can be used to position the currently dragged bot.",
                "text": "If called when the user is not dragging anything, then this function does nothing.\n",
                "tags": [
                    {
                        "tagName": "example",
                        "paramName": "",
                        "text": "Snap the dragged bot to the grid.\nos.addDropSnap(\"grid\");\n"
                    },
                    {
                        "tagName": "example",
                        "paramName": "",
                        "text": "Snap the dragged bot to other bot faces.\nos.addDropSnap(\"face\");\n"
                    },
                    {
                        "tagName": "example",
                        "paramName": "",
                        "text": "Snap the dragged bot to a point.\nos.addDropSnap({\n    position: {\n        x: 0,\n        y: 0,\n        z: 3,\n    },\n    distance: 1\n});\n"
                    },
                    {
                        "tagName": "example",
                        "paramName": "",
                        "text": "Snap the dragged bot to the global X axis.\nos.addDropSnap({\n    direction: {\n        x: 1,\n        y: 0,\n        z: 0,\n    },\n    origin: {\n        x: 0,\n        y: 0,\n        z: 0\n    },\n    distance: 2\n});\n"
                    },
                    {
                        "tagName": "example",
                        "paramName": "",
                        "text": "Snap the dragged bot to the center or bot faces.\nos.addDropSnap({\n    position: {\n        x: 0,\n        y: 0,\n        z: 0,\n    },\n    distance: 1\n}, \"face\");\n"
                    },
                    {
                        "tagName": "dochash",
                        "paramName": "",
                        "text": "actions/portals"
                    },
                    {
                        "tagName": "docname",
                        "paramName": "",
                        "text": "os.addDropSnap\n"
                    }
                ]
            },
            "group": null
        },
        {
            "id": 815,
            "order": 9999,
            "name": "os.enableCustomDragging",
            "reflection": {
                "id": 815,
                "name": "__type",
                "kind": 4096,
                "kindString": "Call signature",
                "flags": {},
                "comment": {
                    "shortText": "Enables \"custom dragging\" for the current bot drag operation.",
                    "text": "Custom dragging tells CasualOS to not move the bot to the dragged position. Instead, it will calculate where the bot would be dragged and send that information in the [`@onDragging`](tags:@onDragging) and [`@onAnyBotDragging`](tags:@onAnyBotDragging) listeners.\n\nThis is useful for custom bot dragging behavior like choosing to scale or rotate a bot instead of moving it.\n",
                    "tags": [
                        {
                            "tag": "example",
                            "paramName": "",
                            "text": "Enable custom dragging for the current drag operation\nos.enableCustomDragging();\n"
                        },
                        {
                            "tag": "dochash",
                            "paramName": "",
                            "text": "actions/portals"
                        },
                        {
                            "tag": "docname",
                            "paramName": "",
                            "text": "os.enableCustomDragging\n"
                        }
                    ]
                },
                "type": {
                    "type": "reference",
                    "name": "EnableCustomDraggingAction"
                }
            },
            "comment": {
                "shortText": "Enables \"custom dragging\" for the current bot drag operation.",
                "text": "Custom dragging tells CasualOS to not move the bot to the dragged position. Instead, it will calculate where the bot would be dragged and send that information in the {@tag @onDragging} and {@tag @onAnyBotDragging} listeners.\n\nThis is useful for custom bot dragging behavior like choosing to scale or rotate a bot instead of moving it.\n",
                "tags": [
                    {
                        "tagName": "example",
                        "paramName": "",
                        "text": "Enable custom dragging for the current drag operation\nos.enableCustomDragging();\n"
                    },
                    {
                        "tagName": "dochash",
                        "paramName": "",
                        "text": "actions/portals"
                    },
                    {
                        "tagName": "docname",
                        "paramName": "",
                        "text": "os.enableCustomDragging\n"
                    }
                ]
            },
            "group": null
        },
        {
            "id": 493,
            "order": 9999,
            "name": "os.focusOn-bot",
            "reflection": {
                "id": 493,
                "name": "__type",
                "kind": 4096,
                "kindString": "Call signature",
                "flags": {},
                "comment": {
                    "shortText": "Focuses on the given bot. For bots in the bot or miniGridPortals, this animates the camera such that the portal focus point is placed on the given bot or position.\nFor input bots in menu portal, this gives keyboard focus to them.",
                    "text": "Returns a promise which resolves when the bot has been focused.\nFor the bot and miniGridPortals this is when the animation finishes and rejects if the user takes control of the camera during the animation. For menu bots this is when the input field is focused and rejects if the bot is not a input bot.\n",
                    "tags": [
                        {
                            "tag": "example",
                            "paramName": "",
                            "text": "Move the player's view to show a bot named bob.\nawait os.focusOn(getBot(\"#name\", \"bob\"));\n"
                        },
                        {
                            "tag": "example",
                            "paramName": "",
                            "text": "Move the player's view to show this bot from the top.\nawait os.focusOn(thisBot, {\n    rotation: {\n        x: 0,\n        y: 0\n    }\n});\n"
                        },
                        {
                            "tag": "example",
                            "paramName": "",
                            "text": "Move the player's view to show this bot with a particular zoom value.\nawait os.focusOn(thisBot, {\n    zoom: 15\n});\n"
                        },
                        {
                            "tag": "example",
                            "paramName": "",
                            "text": "Focus on this bot in the menu portal\nawait os.focusOn(thisBot, {\n    portal: 'menu'\n});\n"
                        },
                        {
                            "tag": "example",
                            "paramName": "",
                            "text": "Rotate the camera around the focus point 3 times.\nawait os.focusOn(thisBot, {\n    rotation: {\n        y: (Math.PI * 2) * 3,\n        normalize: false\n    }\n});\n"
                        },
                        {
                            "tag": "example",
                            "paramName": "",
                            "text": "Focus the onClick tag in the systemPortal\nawait os.focusOn(thisBot, {\n    tag: 'onClick',\n    portal: 'system'\n});\n"
                        },
                        {
                            "tag": "example",
                            "paramName": "",
                            "text": "Focus line 2 in the onClick tag in the sheetPortal\nawait os.focusOn(thisBot, {\n    tag: 'onClick',\n    lineNumber: 2,\n    portal: 'sheet'\n});\n"
                        },
                        {
                            "tag": "example",
                            "paramName": "",
                            "text": "Focus index 9 through 15 in the onClick tag in the tagPortal\nawait os.focusOn(thisBot, {\n    tag: 'onClick',\n    startIndex: 9,\n    endIndex: 15,\n    portal: 'tag'\n});\n"
                        },
                        {
                            "tag": "dochash",
                            "paramName": "",
                            "text": "actions/portals"
                        },
                        {
                            "tag": "docname",
                            "paramName": "",
                            "text": "os.focusOn"
                        },
                        {
                            "tag": "docid",
                            "paramName": "",
                            "text": "os.focusOn-bot\n"
                        }
                    ]
                },
                "parameters": [
                    {
                        "id": 494,
                        "name": "bot",
                        "kind": 32768,
                        "kindString": "Parameter",
                        "flags": {},
                        "type": {
                            "type": "union",
                            "types": [
                                {
                                    "type": "intrinsic",
                                    "name": "string"
                                },
                                {
                                    "type": "reference",
                                    "id": 2709,
                                    "name": "Bot"
                                }
                            ]
                        }
                    },
                    {
                        "id": 495,
                        "name": "options",
                        "kind": 32768,
                        "kindString": "Parameter",
                        "flags": {
                            "isOptional": true
                        },
                        "comment": {
                            "shortText": "the additional options to use for the focus operation. This can be used to change how the camera moves or to specify which portal the bot should be focused in.\n",
                            "tags": []
                        },
                        "type": {
                            "type": "reference",
                            "id": 2574,
                            "name": "FocusOnOptions"
                        }
                    }
                ],
                "type": {
                    "type": "reference",
                    "typeArguments": [
                        {
                            "type": "intrinsic",
                            "name": "void"
                        }
                    ],
                    "qualifiedName": "Promise",
                    "package": "typescript",
                    "name": "Promise"
                }
            },
            "comment": {
                "shortText": "Focuses on the given bot. For bots in the bot or miniGridPortals, this animates the camera such that the portal focus point is placed on the given bot or position.\nFor input bots in menu portal, this gives keyboard focus to them.",
                "text": "Returns a promise which resolves when the bot has been focused.\nFor the bot and miniGridPortals this is when the animation finishes and rejects if the user takes control of the camera during the animation. For menu bots this is when the input field is focused and rejects if the bot is not a input bot.\n",
                "tags": [
                    {
                        "tagName": "example",
                        "paramName": "",
                        "text": "Move the player's view to show a bot named bob.\nawait os.focusOn(getBot(\"#name\", \"bob\"));\n"
                    },
                    {
                        "tagName": "example",
                        "paramName": "",
                        "text": "Move the player's view to show this bot from the top.\nawait os.focusOn(thisBot, {\n    rotation: {\n        x: 0,\n        y: 0\n    }\n});\n"
                    },
                    {
                        "tagName": "example",
                        "paramName": "",
                        "text": "Move the player's view to show this bot with a particular zoom value.\nawait os.focusOn(thisBot, {\n    zoom: 15\n});\n"
                    },
                    {
                        "tagName": "example",
                        "paramName": "",
                        "text": "Focus on this bot in the menu portal\nawait os.focusOn(thisBot, {\n    portal: 'menu'\n});\n"
                    },
                    {
                        "tagName": "example",
                        "paramName": "",
                        "text": "Rotate the camera around the focus point 3 times.\nawait os.focusOn(thisBot, {\n    rotation: {\n        y: (Math.PI * 2) * 3,\n        normalize: false\n    }\n});\n"
                    },
                    {
                        "tagName": "example",
                        "paramName": "",
                        "text": "Focus the onClick tag in the systemPortal\nawait os.focusOn(thisBot, {\n    tag: 'onClick',\n    portal: 'system'\n});\n"
                    },
                    {
                        "tagName": "example",
                        "paramName": "",
                        "text": "Focus line 2 in the onClick tag in the sheetPortal\nawait os.focusOn(thisBot, {\n    tag: 'onClick',\n    lineNumber: 2,\n    portal: 'sheet'\n});\n"
                    },
                    {
                        "tagName": "example",
                        "paramName": "",
                        "text": "Focus index 9 through 15 in the onClick tag in the tagPortal\nawait os.focusOn(thisBot, {\n    tag: 'onClick',\n    startIndex: 9,\n    endIndex: 15,\n    portal: 'tag'\n});\n"
                    },
                    {
                        "tagName": "dochash",
                        "paramName": "",
                        "text": "actions/portals"
                    },
                    {
                        "tagName": "docname",
                        "paramName": "",
                        "text": "os.focusOn"
                    },
                    {
                        "tagName": "docid",
                        "paramName": "",
                        "text": "os.focusOn-bot\n"
                    }
                ]
            },
            "group": null
        },
        {
            "id": 498,
            "order": 9999,
            "name": "os.focusOn-position",
            "reflection": {
                "id": 498,
                "name": "__type",
                "kind": 4096,
                "kindString": "Call signature",
                "flags": {},
                "comment": {
                    "shortText": "Focuses on the given position.",
                    "text": "Returns a promise which resolves when the position has been focused.\n",
                    "tags": [
                        {
                            "tag": "example",
                            "paramName": "",
                            "text": "Move the player's view to a specific position.\nawait os.focusOn({\n    x: 15,\n    y: 9.5\n});\n"
                        },
                        {
                            "tag": "example",
                            "paramName": "",
                            "text": "Focus on Buckingham Palace in the map portal\nawait os.focusOn({\n    x: -0.141329,\n    y: 51.501541\n}, {\n    portal: 'map',\n    zoom: 10000\n});\n"
                        },
                        {
                            "tag": "dochash",
                            "paramName": "",
                            "text": "actions/portals"
                        },
                        {
                            "tag": "docname",
                            "paramName": "",
                            "text": "os.focusOn"
                        },
                        {
                            "tag": "docid",
                            "paramName": "",
                            "text": "os.focusOn-position\n"
                        }
                    ]
                },
                "parameters": [
                    {
                        "id": 499,
                        "name": "position",
                        "kind": 32768,
                        "kindString": "Parameter",
                        "flags": {},
                        "type": {
                            "type": "reflection",
                            "declaration": {
                                "id": 500,
                                "name": "__type",
                                "kind": 65536,
                                "kindString": "Type literal",
                                "flags": {},
                                "children": [
                                    {
                                        "id": 501,
                                        "name": "x",
                                        "kind": 1024,
                                        "kindString": "Property",
                                        "flags": {},
                                        "sources": [
                                            {
                                                "fileName": "src/aux-common/runtime/AuxLibrary.ts",
                                                "line": 5226,
                                                "character": 20
                                            }
                                        ],
                                        "type": {
                                            "type": "intrinsic",
                                            "name": "number"
                                        }
                                    },
                                    {
                                        "id": 502,
                                        "name": "y",
                                        "kind": 1024,
                                        "kindString": "Property",
                                        "flags": {},
                                        "sources": [
                                            {
                                                "fileName": "src/aux-common/runtime/AuxLibrary.ts",
                                                "line": 5226,
                                                "character": 31
                                            }
                                        ],
                                        "type": {
                                            "type": "intrinsic",
                                            "name": "number"
                                        }
                                    },
                                    {
                                        "id": 503,
                                        "name": "z",
                                        "kind": 1024,
                                        "kindString": "Property",
                                        "flags": {
                                            "isOptional": true
                                        },
                                        "sources": [
                                            {
                                                "fileName": "src/aux-common/runtime/AuxLibrary.ts",
                                                "line": 5226,
                                                "character": 42
                                            }
                                        ],
                                        "type": {
                                            "type": "intrinsic",
                                            "name": "number"
                                        }
                                    }
                                ],
                                "groups": [
                                    {
                                        "title": "Properties",
                                        "kind": 1024,
                                        "children": [
                                            501,
                                            502,
                                            503
                                        ]
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "id": 504,
                        "name": "options",
                        "kind": 32768,
                        "kindString": "Parameter",
                        "flags": {
                            "isOptional": true
                        },
                        "comment": {
                            "shortText": "the additional options to use for the focus operation. This can be used to change how the camera moves or to specify which portal the bot should be focused in.\n",
                            "tags": []
                        },
                        "type": {
                            "type": "reference",
                            "id": 2574,
                            "name": "FocusOnOptions"
                        }
                    }
                ],
                "type": {
                    "type": "reference",
                    "typeArguments": [
                        {
                            "type": "intrinsic",
                            "name": "void"
                        }
                    ],
                    "qualifiedName": "Promise",
                    "package": "typescript",
                    "name": "Promise"
                }
            },
            "comment": {
                "shortText": "Focuses on the given position.",
                "text": "Returns a promise which resolves when the position has been focused.\n",
                "tags": [
                    {
                        "tagName": "example",
                        "paramName": "",
                        "text": "Move the player's view to a specific position.\nawait os.focusOn({\n    x: 15,\n    y: 9.5\n});\n"
                    },
                    {
                        "tagName": "example",
                        "paramName": "",
                        "text": "Focus on Buckingham Palace in the map portal\nawait os.focusOn({\n    x: -0.141329,\n    y: 51.501541\n}, {\n    portal: 'map',\n    zoom: 10000\n});\n"
                    },
                    {
                        "tagName": "dochash",
                        "paramName": "",
                        "text": "actions/portals"
                    },
                    {
                        "tagName": "docname",
                        "paramName": "",
                        "text": "os.focusOn"
                    },
                    {
                        "tagName": "docid",
                        "paramName": "",
                        "text": "os.focusOn-position\n"
                    }
                ]
            },
            "group": null
        },
        {
            "id": 699,
            "order": 9999,
            "name": "os.replaceDragBot",
            "reflection": {
                "id": 699,
                "name": "__type",
                "kind": 4096,
                "kindString": "Call signature",
                "flags": {},
                "comment": {
                    "shortText": "Replaces the bot that the user is dragging with the given bot.",
                    "text": "If called when the user is not dragging anything, then the given bot or mod will be dragged using the current input method. When in VR, the current input method is the most recently used VR controller. Otherwise it is the mouse/touchscreen.\n",
                    "tags": [
                        {
                            "tag": "example",
                            "paramName": "",
                            "text": "Drag a clone of this bot.\nlet clone = create(thisBot);\nos.replaceDragBot(clone);\n"
                        },
                        {
                            "tag": "dochash",
                            "paramName": "",
                            "text": "actions/portals"
                        },
                        {
                            "tag": "docname",
                            "paramName": "",
                            "text": "os.replaceDragBot\n"
                        }
                    ]
                },
                "parameters": [
                    {
                        "id": 700,
                        "name": "bot",
                        "kind": 32768,
                        "kindString": "Parameter",
                        "flags": {},
                        "comment": {
                            "shortText": "the bot that should be dragged. If given a bot while dragging, then that bot's [`@onDrag`](tags:@onDrag) will be skippped but [`@onDrop`](tags:@onDrop) will be called. If given a bot when not dragging, then that bot's [`@onDrag`](tags:@onDrag) and [`@onDrop`](tags:@onDrop) will be called.\n",
                            "tags": []
                        },
                        "type": {
                            "type": "reference",
                            "id": 2709,
                            "name": "Bot"
                        }
                    }
                ],
                "type": {
                    "type": "reference",
                    "name": "ReplaceDragBotAction"
                }
            },
            "comment": {
                "shortText": "Replaces the bot that the user is dragging with the given bot.",
                "text": "If called when the user is not dragging anything, then the given bot or mod will be dragged using the current input method. When in VR, the current input method is the most recently used VR controller. Otherwise it is the mouse/touchscreen.\n",
                "tags": [
                    {
                        "tagName": "example",
                        "paramName": "",
                        "text": "Drag a clone of this bot.\nlet clone = create(thisBot);\nos.replaceDragBot(clone);\n"
                    },
                    {
                        "tagName": "dochash",
                        "paramName": "",
                        "text": "actions/portals"
                    },
                    {
                        "tagName": "docname",
                        "paramName": "",
                        "text": "os.replaceDragBot\n"
                    }
                ]
            },
            "group": null
        }
    ],
    "references": {
        "CasualOSError": "types/error",
        "id-2885": "CasualOSError",
        "Quaternion": "types/math/rotations",
        "id-3275": "Quaternion",
        "Rotation": "types/math/rotations",
        "id-3307": "Rotation",
        "Vector2": "types/math/vectors",
        "id-3141": "Vector2",
        "Vector3": "types/math/vectors",
        "id-3198": "Vector3",
        "AIChatMessage": "types/ai",
        "id-2904": "AIChatMessage",
        "AIChatOptions": "types/ai",
        "id-2705": "AIChatOptions",
        "AddCountFailure": "types/records/events",
        "id-3088": "AddCountFailure",
        "AddCountSuccess": "types/records/events",
        "id-3083": "AddCountSuccess",
        "AnimateTagOptions": "types/animation",
        "id-2123": "AnimateTagOptions",
        "AttachDebuggerOptions": "types/debuggers/common",
        "id-2498": "AttachDebuggerOptions",
        "CasualOSDevice": "types/os",
        "id-2873": "CasualOSDevice",
        "CasualOSVersion": "types/os",
        "id-2865": "CasualOSVersion",
        "AxisAndAngle": "types/math/rotations",
        "id-3353": "AxisAndAngle",
        "BotTagMasks": "types/core",
        "id-2842": "BotTagMasks",
        "BotTags": "types/core",
        "id-2757": "BotTags",
        "BotState": "types/core",
        "id-2855": "BotState",
        "CompiledBotListeners": "types/core",
        "id-2836": "CompiledBotListeners",
        "ConvertGeolocationToWhat3WordsOptions": "types/os",
        "id-2540": "ConvertGeolocationToWhat3WordsOptions",
        "CreatePublicRecordKeyFailure": "types/records/key",
        "id-2915": "CreatePublicRecordKeyFailure",
        "CreatePublicRecordKeySuccess": "types/records/key",
        "id-2911": "CreatePublicRecordKeySuccess",
        "DebuggerCallFrame": "types/debuggers/common",
        "id-2451": "DebuggerCallFrame",
        "DebuggerFunctionLocation": "types/debuggers/common",
        "id-2486": "DebuggerFunctionLocation",
        "DebuggerPause": "types/debuggers/common",
        "id-2480": "DebuggerPause",
        "DebuggerTagMaskUpdate": "types/debuggers/common",
        "id-2459": "DebuggerTagMaskUpdate",
        "DebuggerTagUpdate": "types/debuggers/common",
        "id-2465": "DebuggerTagUpdate",
        "DebuggerVariable": "types/debuggers/common",
        "id-2492": "DebuggerVariable",
        "Easing": "types/animation",
        "id-2520": "Easing",
        "EnableXROptions": "types/os",
        "id-2614": "EnableXROptions",
        "EraseDataFailure": "types/records/data",
        "id-3059": "EraseDataFailure",
        "EraseDataSuccess": "types/records/data",
        "id-3055": "EraseDataSuccess",
        "EraseFileFailure": "types/records/files",
        "id-3078": "EraseFileFailure",
        "EraseFileSuccess": "types/records/files",
        "id-3074": "EraseFileSuccess",
        "EulerAnglesRotation": "types/math/rotations",
        "id-3356": "EulerAnglesRotation",
        "FocusOnOptions": "types/os",
        "id-2574": "FocusOnOptions",
        "FocusOnRotation": "types/os",
        "id-2586": "FocusOnRotation",
        "FormAnimationData": "types/os",
        "id-2632": "FormAnimationData",
        "FromToRotation": "types/math/rotations",
        "id-3350": "FromToRotation",
        "GenericError": "types/error",
        "id-2882": "GenericError",
        "GetCountFailure": "types/records/events",
        "id-3099": "GetCountFailure",
        "GetCountSuccess": "types/records/events",
        "id-3093": "GetCountSuccess",
        "GetDataFailure": "types/records/data",
        "id-3050": "GetDataFailure",
        "GetDataSuccess": "types/records/data",
        "id-3041": "GetDataSuccess",
        "GetRoomOptionsFailure": "types/os",
        "id-2213": "GetRoomOptionsFailure",
        "GetRoomOptionsSuccess": "types/os",
        "id-2209": "GetRoomOptionsSuccess",
        "GetRoomRemoteOptionsFailure": "types/os",
        "id-2256": "GetRoomRemoteOptionsFailure",
        "GetRoomRemoteOptionsSuccess": "types/os",
        "id-2251": "GetRoomRemoteOptionsSuccess",
        "GetRoomTrackOptionsFailure": "types/os",
        "id-2232": "GetRoomTrackOptionsFailure",
        "GetRoomTrackOptionsSuccess": "types/os",
        "id-2227": "GetRoomTrackOptionsSuccess",
        "GrantMarkerPermissionFailure": "types/records/policies",
        "id-3127": "GrantMarkerPermissionFailure",
        "GrantMarkerPermissionSuccess": "types/records/policies",
        "id-3125": "GrantMarkerPermissionSuccess",
        "GrantRoleFailure": "types/records/roles",
        "id-3113": "GrantRoleFailure",
        "GrantRoleSuccess": "types/records/roles",
        "id-3111": "GrantRoleSuccess",
        "ImageClassifierOptions": "types/os",
        "id-2592": "ImageClassifierOptions",
        "InstUpdate": "types/os",
        "id-2878": "InstUpdate",
        "JoinRoomFailure": "types/os",
        "id-2194": "JoinRoomFailure",
        "JoinRoomSuccess": "types/os",
        "id-2191": "JoinRoomSuccess",
        "LeaveRoomFailure": "types/os",
        "id-2203": "LeaveRoomFailure",
        "LeaveRoomSuccess": "types/os",
        "id-2200": "LeaveRoomSuccess",
        "ListDataFailure": "types/records/data",
        "id-3069": "ListDataFailure",
        "ListDataSuccess": "types/records/data",
        "id-3064": "ListDataSuccess",
        "LookRotation": "types/math/rotations",
        "id-3373": "LookRotation",
        "MediaPermissionOptions": "types/os",
        "id-2611": "MediaPermissionOptions",
        "Debugger": "types/debuggers/debugger",
        "id-2263": "Debugger",
        "NormalDebuggerOptions": "types/debuggers/common",
        "id-2470": "NormalDebuggerOptions",
        "PhotoCameraOptions": "types/camera",
        "id-2689": "PhotoCameraOptions",
        "ParsedBotLink": "types/core",
        "id-2861": "ParsedBotLink",
        "PartialBotState": "types/core",
        "id-2858": "PartialBotState",
        "PausableDebugger": "types/debuggers/pausable-debugger",
        "id-2319": "PausableDebugger",
        "PausableDebuggerOptions": "types/debuggers/common",
        "id-2475": "PausableDebuggerOptions",
        "PauseTrigger": "types/debuggers/common",
        "id-2438": "PauseTrigger",
        "PauseTriggerOptions": "types/debuggers/common",
        "id-2446": "PauseTriggerOptions",
        "Photo": "types/camera",
        "id-2701": "Photo",
        "PossiblePauseTriggerLocation": "types/debuggers/common",
        "id-2433": "PossiblePauseTriggerLocation",
        "PseudoRandomNumberGenerator": "types/core",
        "id-2507": "PseudoRandomNumberGenerator",
        "QuaternionRotation": "types/math/rotations",
        "id-3366": "QuaternionRotation",
        "RaycastRay": "types/os",
        "id-2187": "RaycastRay",
        "RaycastResult": "types/os",
        "id-2184": "RaycastResult",
        "RecordActionOptions": "types/records/extra",
        "id-2523": "RecordActionOptions",
        "RecordDataFailure": "types/records/data",
        "id-3036": "RecordDataFailure",
        "RecordDataSuccess": "types/records/data",
        "id-3032": "RecordDataSuccess",
        "RecordFileFailure": "types/records/files",
        "id-2154": "RecordFileFailure",
        "RecordFileSuccess": "types/records/files",
        "id-2150": "RecordFileSuccess",
        "RecordedFile": "types/experimental",
        "id-2676": "RecordedFile",
        "Recording": "types/experimental",
        "id-2674": "Recording",
        "RecordingOptions": "types/experimental",
        "id-2681": "RecordingOptions",
        "RegisterPrefixOptions": "types/core",
        "id-2671": "RegisterPrefixOptions",
        "RevokeMarkerPermissionFailure": "types/records/policies",
        "id-3134": "RevokeMarkerPermissionFailure",
        "RevokeMarkerPermissionSuccess": "types/records/policies",
        "id-3132": "RevokeMarkerPermissionSuccess",
        "RevokeRoleFailure": "types/records/roles",
        "id-3120": "RevokeRoleFailure",
        "RevokeRoleSuccess": "types/records/roles",
        "id-3118": "RevokeRoleSuccess",
        "RoomJoinOptions": "types/os",
        "id-2637": "RoomJoinOptions",
        "RoomOptions": "types/os",
        "id-2646": "RoomOptions",
        "RoomRemoteOptions": "types/os",
        "id-2662": "RoomRemoteOptions",
        "RoomTrackOptions": "types/os",
        "id-2650": "RoomTrackOptions",
        "RuntimeBot": "types/core",
        "id-2709": "RuntimeBot",
        "RuntimeBotLinks": "types/core",
        "id-2848": "RuntimeBotLinks",
        "RuntimeBotVars": "types/core",
        "id-2845": "RuntimeBotVars",
        "SequenceRotation": "types/math/rotations",
        "id-3364": "SequenceRotation",
        "SetRoomOptionsSuccess": "types/os",
        "id-2218": "SetRoomOptionsSuccess",
        "SetRoomTrackOptions": "types/os",
        "id-2668": "SetRoomTrackOptions",
        "SetRoomTrackOptionsFailure": "types/os",
        "id-2244": "SetRoomTrackOptionsFailure",
        "SetRoomTrackOptionsSuccess": "types/os",
        "id-2239": "SetRoomTrackOptionsSuccess",
        "ShareOptions": "types/os",
        "id-2570": "ShareOptions",
        "ShowChatOptions": "types/os",
        "id-2564": "ShowChatOptions",
        "ShowConfirmOptions": "types/os",
        "id-2606": "ShowConfirmOptions",
        "ShowInputOptions": "types/os",
        "id-2597": "ShowInputOptions",
        "SnapAxis": "types/os",
        "id-2544": "SnapAxis",
        "SnapGridTarget": "types/os",
        "id-2159": "SnapGridTarget",
        "SnapPoint": "types/os",
        "id-2556": "SnapPoint",
        "SpeakTextOptions": "types/experimental",
        "id-2503": "SpeakTextOptions",
        "StartFormAnimationOptions": "types/os",
        "id-2616": "StartFormAnimationOptions",
        "StopFormAnimationOptions": "types/os",
        "id-2629": "StopFormAnimationOptions",
        "SuccessfulGeolocation": "types/os",
        "id-2526": "SuccessfulGeolocation",
        "SyntheticVoice": "types/experimental",
        "id-2685": "SyntheticVoice",
        "TweenOptions": "types/experimental",
        "id-2500": "TweenOptions",
        "UnsuccessfulGeolocation": "types/os",
        "id-2536": "UnsuccessfulGeolocation",
        "UpdateEventRecordFailure": "types/records/events",
        "id-3106": "UpdateEventRecordFailure",
        "UpdateEventRecordSuccess": "types/records/events",
        "id-3104": "UpdateEventRecordSuccess",
        "UploadedFile": "types/os",
        "id-2180": "UploadedFile",
        "WebhookOptions": "types/web",
        "id-2104": "WebhookOptions",
        "WebhookResult": "types/web",
        "id-2116": "WebhookResult",
        "AddCountResult": "types/records/events",
        "id-3082": "AddCountResult",
        "AvailablePermissions": "types/permissions",
        "id-2920": "AvailablePermissions",
        "BarcodeFormat": "types/os",
        "id-2591": "BarcodeFormat",
        "BotFilter": "types/core",
        "id-2138": "BotFilter",
        "BotSpace": "types/core",
        "id-2832": "BotSpace",
        "CameraType": "types/os",
        "id-2590": "CameraType",
        "CreatePublicRecordKeyResult": "types/records/key",
        "id-2910": "CreatePublicRecordKeyResult",
        "EaseMode": "types/animation",
        "id-2519": "EaseMode",
        "EaseType": "types/animation",
        "id-2518": "EaseType",
        "EraseDataResult": "types/records/data",
        "id-3054": "EraseDataResult",
        "EraseFileResult": "types/records/files",
        "id-3073": "EraseFileResult",
        "Geolocation": "types/os",
        "id-2525": "Geolocation",
        "GetCountResult": "types/records/events",
        "id-3092": "GetCountResult",
        "GetDataResult": "types/records/data",
        "id-3040": "GetDataResult",
        "GetRoomOptionsResult": "types/os",
        "id-2208": "GetRoomOptionsResult",
        "GetRoomRemoteOptionsResult": "types/os",
        "id-2250": "GetRoomRemoteOptionsResult",
        "GetRoomTrackOptionsResult": "types/os",
        "id-2226": "GetRoomTrackOptionsResult",
        "GrantMarkerPermissionResult": "types/records/policies",
        "id-3124": "GrantMarkerPermissionResult",
        "GrantRoleResult": "types/records/roles",
        "id-3110": "GrantRoleResult",
        "JoinRoomResult": "types/os",
        "id-2190": "JoinRoomResult",
        "LeaveRoomResult": "types/os",
        "id-2199": "LeaveRoomResult",
        "ListDataResult": "types/records/data",
        "id-3063": "ListDataResult",
        "Mod": "types/core",
        "id-2133": "Mod",
        "PortalType": "types/core",
        "id-2864": "PortalType",
        "PossiblePauseTriggerStates": "types/debuggers/common",
        "id-2437": "PossiblePauseTriggerStates",
        "RecordDataResult": "types/records/data",
        "id-3031": "RecordDataResult",
        "RecordFileResult": "types/records/files",
        "id-2149": "RecordFileResult",
        "RevokeMarkerPermissionResult": "types/records/policies",
        "id-3131": "RevokeMarkerPermissionResult",
        "RevokeRoleResult": "types/records/roles",
        "id-3117": "RevokeRoleResult",
        "SetRoomOptionsResult": "types/os",
        "id-2217": "SetRoomOptionsResult",
        "SetRoomTrackOptionsResult": "types/os",
        "id-2238": "SetRoomTrackOptionsResult",
        "SnapTarget": "types/os",
        "id-2563": "SnapTarget",
        "TagFilter": "types/core",
        "id-2134": "TagFilter",
        "UpdateEventRecordResult": "types/records/events",
        "id-3103": "UpdateEventRecordResult",
        "animateTag-byOptions": "actions/utility",
        "id-364": "animateTag-byOptions",
        "getbot-tag": "actions/data",
        "id-33": "getbot-tag",
        "getbots-tag": "actions/data",
        "id-17": "getbots-tag",
        "animateTag-byTag": "actions/utility",
        "id-358": "animateTag-byTag",
        "changeState": "actions/data",
        "id-177": "changeState",
        "create": "actions/data",
        "id-162": "create",
        "destroy": "actions/data",
        "id-166": "destroy",
        "getbot-filters": "actions/data",
        "id-26": "getbot-filters",
        "getbots-filters": "actions/data",
        "id-10": "getbots-filters",
        "priorityShout": "actions/event",
        "id-225": "priorityShout",
        "shout": "actions/event",
        "id-237": "shout",
        "updateBotLinks": "actions/data",
        "id-198": "updateBotLinks",
        "whisper": "actions/event",
        "id-263": "whisper",
        "action.perform": "actions/event",
        "id-1613": "action.perform",
        "action.reject": "actions/event",
        "id-1617": "action.reject",
        "ai.chat-string": "actions/ai",
        "id-423": "ai.chat-string",
        "ai.chat-message": "actions/ai",
        "id-426": "ai.chat-message",
        "ai.chat-messages": "actions/ai",
        "id-429": "ai.chat-messages",
        "applyDiffToSnapshot": "actions/data",
        "id-83": "applyDiffToSnapshot",
        "applyMod": "actions/mods",
        "id-152": "applyMod",
        "assert": "actions/debuggers",
        "id-407": "assert",
        "assertEqual": "actions/debuggers",
        "id-412": "assertEqual",
        "atPosition": "actions/bot-filters",
        "id-293": "atPosition",
        "byCreator": "actions/bot-filters",
        "id-314": "byCreator",
        "byID": "actions/bot-filters",
        "id-281": "byID",
        "byMod": "actions/bot-filters",
        "id-285": "byMod",
        "bySpace": "actions/bot-filters",
        "id-310": "bySpace",
        "byTag": "actions/bot-filters",
        "id-276": "byTag",
        "bytes.fromBase64String": "actions/bytes",
        "id-1837": "bytes.fromBase64String",
        "bytes.fromHexString": "actions/bytes",
        "id-1845": "bytes.fromHexString",
        "bytes.toBase64String": "actions/bytes",
        "id-1833": "bytes.toBase64String",
        "bytes.toHexString": "actions/bytes",
        "id-1841": "bytes.toHexString",
        "clearAnimations": "actions/utility",
        "id-378": "clearAnimations",
        "clearTagMasks": "actions/data",
        "id-106": "clearTagMasks",
        "crypto.hash-raw": "actions/crypto",
        "id-1851": "crypto.hash-raw",
        "crypto.hash-string": "actions/crypto",
        "id-1857": "crypto.hash-string",
        "crypto.hmac-raw": "actions/crypto",
        "id-1888": "crypto.hmac-raw",
        "crypto.hmac-string": "actions/crypto",
        "id-1881": "crypto.hmac-string",
        "crypto.asymmetric.decrypt": "actions/crypto",
        "id-1946": "crypto.asymmetric.decrypt",
        "crypto.asymmetric.encrypt": "actions/crypto",
        "id-1941": "crypto.asymmetric.encrypt",
        "crypto.asymmetric.isEncrypted": "actions/crypto",
        "id-1952": "crypto.asymmetric.isEncrypted",
        "crypto.asymmetric.isKeypair": "actions/crypto",
        "id-1937": "crypto.asymmetric.isKeypair",
        "crypto.asymmetric.keypair": "actions/crypto",
        "id-1933": "crypto.asymmetric.keypair",
        "crypto.encrypt": "actions/crypto",
        "id-1917": "crypto.encrypt",
        "crypto.hmacSha256": "actions/crypto",
        "id-1907": "crypto.hmacSha256",
        "crypto.hmacSha512": "actions/crypto",
        "id-1912": "crypto.hmacSha512",
        "crypto.isEncrypted": "actions/crypto",
        "id-1927": "crypto.isEncrypted",
        "crypto.keypair": "actions/crypto",
        "id-1956": "crypto.keypair",
        "crypto.sha256": "actions/crypto",
        "id-1873": "crypto.sha256",
        "crypto.sha512": "actions/crypto",
        "id-1877": "crypto.sha512",
        "crypto.sign": "actions/crypto",
        "id-1960": "crypto.sign",
        "deleteTagMaskText": "actions/data",
        "id-133": "deleteTagMaskText",
        "deleteTagText": "actions/data",
        "id-126": "deleteTagText",
        "diffSnapshots": "actions/data",
        "id-78": "diffSnapshots",
        "either": "actions/bot-filters",
        "id-318": "either",
        "os.beginAudioRecording": "actions/audio",
        "id-1671": "os.beginAudioRecording",
        "experiment.beginRecording": "actions/experimental",
        "id-1678": "experiment.beginRecording",
        "os.endAudioRecording": "actions/audio",
        "id-1675": "os.endAudioRecording",
        "experiment.endRecording": "actions/experimental",
        "id-1682": "experiment.endRecording",
        "experiment.getAnchorPointPosition": "actions/experimental",
        "id-1661": "experiment.getAnchorPointPosition",
        "experiment.getVoices": "actions/experimental",
        "id-1690": "experiment.getVoices",
        "experiment.localFormAnimation": "actions/experimental",
        "id-1634": "experiment.localFormAnimation",
        "experiment.localPositionTween": "actions/experimental",
        "id-1639": "experiment.localPositionTween",
        "experiment.localRotationTween": "actions/experimental",
        "id-1650": "experiment.localRotationTween",
        "experiment.speakText": "actions/experimental",
        "id-1685": "experiment.speakText",
        "getBotLinks": "actions/data",
        "id-194": "getBotLinks",
        "getBotPosition": "actions/data",
        "id-52": "getBotPosition",
        "getBotRotation": "actions/data",
        "id-57": "getBotRotation",
        "getBotTagValues": "actions/data",
        "id-42": "getBotTagValues",
        "getFormattedJSON": "actions/data",
        "id-70": "getFormattedJSON",
        "getID": "actions/data",
        "id-62": "getID",
        "getJSON": "actions/data",
        "id-66": "getJSON",
        "getLink": "actions/data",
        "id-190": "getLink",
        "getMod": "actions/mods",
        "id-47": "getMod",
        "getSnapshot": "actions/data",
        "id-74": "getSnapshot",
        "getTag": "actions/data",
        "id-88": "getTag",
        "inDimension": "actions/bot-filters",
        "id-289": "inDimension",
        "inStack": "actions/bot-filters",
        "id-299": "inStack",
        "insertTagMaskText": "actions/data",
        "id-118": "insertTagMaskText",
        "insertTagText": "actions/data",
        "id-111": "insertTagText",
        "math.abs": "actions/math",
        "id-1707": "math.abs",
        "math.addVectors": "actions/math",
        "id-1777": "math.addVectors",
        "math.areClose": "actions/math",
        "id-1808": "math.areClose",
        "math.avg": "actions/math",
        "id-1699": "math.avg",
        "math.degreesToRadians": "actions/math",
        "id-1733": "math.degreesToRadians",
        "math.getAnchorPointOffset": "actions/math",
        "id-1773": "math.getAnchorPointOffset",
        "math.getForwardDirection": "actions/math",
        "id-1741": "math.getForwardDirection",
        "math.getSeededRandomNumberGenerator": "actions/math",
        "id-1715": "math.getSeededRandomNumberGenerator",
        "math.intersectPlane": "actions/math",
        "id-1750": "math.intersectPlane",
        "math.negateVector": "actions/math",
        "id-1787": "math.negateVector",
        "math.normalizeVector": "actions/math",
        "id-1792": "math.normalizeVector",
        "math.radiansToDegrees": "actions/math",
        "id-1737": "math.radiansToDegrees",
        "math.random": "actions/math",
        "id-1728": "math.random",
        "math.randomInt": "actions/math",
        "id-1723": "math.randomInt",
        "math.scaleVector": "actions/math",
        "id-1802": "math.scaleVector",
        "math.setRandomSeed": "actions/math",
        "id-1719": "math.setRandomSeed",
        "math.sqrt": "actions/math",
        "id-1703": "math.sqrt",
        "math.stdDev": "actions/math",
        "id-1711": "math.stdDev",
        "math.subtractVectors": "actions/math",
        "id-1782": "math.subtractVectors",
        "math.sum": "actions/math",
        "id-1695": "math.sum",
        "math.vectorLength": "actions/math",
        "id-1797": "math.vectorLength",
        "neighboring": "actions/bot-filters",
        "id-304": "neighboring",
        "not": "actions/bot-filters",
        "id-325": "not",
        "os.attachDebugger": "actions/debuggers",
        "id-1311": "os.attachDebugger",
        "os.createDebugger-normal": "actions/debuggers",
        "id-1300": "os.createDebugger-normal",
        "os.createDebugger-pausable": "actions/debuggers",
        "id-1304": "os.createDebugger-pausable",
        "os.focusOn-bot": "actions/portals",
        "id-493": "os.focusOn-bot",
        "os.focusOn-position": "actions/portals",
        "id-498": "os.focusOn-position",
        "os.getExecutingDebugger": "actions/debuggers",
        "id-1308": "os.getExecutingDebugger",
        "showChat-options": "actions/os",
        "id-520": "showChat-options",
        "showChat-placeholder": "actions/os",
        "id-516": "showChat-placeholder",
        "os.showInput": "actions/portals",
        "id-736": "os.showInput",
        "os.addBotDropGrid": "actions/portals",
        "id-810": "os.addBotDropGrid",
        "os.addBotDropSnap": "actions/portals",
        "id-801": "os.addBotDropSnap",
        "os.addDropGrid": "actions/portals",
        "id-806": "os.addDropGrid",
        "os.addDropSnap": "actions/portals",
        "id-797": "os.addDropSnap",
        "os.applyUpdatesToInst": "actions/os",
        "id-1254": "os.applyUpdatesToInst",
        "os.arSupported": "actions/xr",
        "id-561": "os.arSupported",
        "os.bufferFormAddressGLTF": "actions/animations",
        "id-1207": "os.bufferFormAddressGLTF",
        "os.bufferSound": "actions/audio",
        "id-773": "os.bufferSound",
        "os.calculateRayFromCamera": "actions/portals",
        "id-1202": "os.calculateRayFromCamera",
        "os.cancelSound": "actions/audio",
        "id-777": "os.cancelSound",
        "os.capturePhoto": "actions/camera",
        "id-656": "os.capturePhoto",
        "os.closeBarcodeScanner": "actions/barcodes",
        "id-634": "os.closeBarcodeScanner",
        "os.closeCircleWipe": "actions/portals",
        "id-789": "os.closeCircleWipe",
        "os.closeImageClassifier": "actions/image-classification",
        "id-649": "os.closeImageClassifier",
        "os.closePhotoCamera": "actions/camera",
        "id-660": "os.closePhotoCamera",
        "os.closeQRCodeScanner": "actions/barcodes",
        "id-620": "os.closeQRCodeScanner",
        "os.compileApp": "actions/app",
        "id-924": "os.compileApp",
        "os.convertGeolocationToWhat3Words": "actions/os",
        "id-1187": "os.convertGeolocationToWhat3Words",
        "os.countEvents": "actions/records",
        "id-1181": "os.countEvents",
        "os.createInitializationUpdate": "actions/os",
        "id-1250": "os.createInitializationUpdate",
        "os.device": "actions/os",
        "id-538": "os.device",
        "os.disableAR": "actions/xr",
        "id-551": "os.disableAR",
        "os.disablePointOfView": "actions/portals",
        "id-576": "os.disablePointOfView",
        "os.disableVR": "actions/xr",
        "id-558": "os.disableVR",
        "os.disableWakeLock": "actions/os",
        "id-582": "os.disableWakeLock",
        "os.download": "actions/files",
        "id-588": "os.download",
        "os.downloadBots": "actions/files",
        "id-594": "os.downloadBots",
        "os.downloadBotsAsInitialzationUpdate": "actions/files",
        "id-599": "os.downloadBotsAsInitialzationUpdate",
        "os.downloadInst": "actions/files",
        "id-607": "os.downloadInst",
        "os.enableAR": "actions/xr",
        "id-547": "os.enableAR",
        "os.enableCustomDragging": "actions/portals",
        "id-815": "os.enableCustomDragging",
        "os.enablePointOfView": "actions/portals",
        "id-567": "os.enablePointOfView",
        "os.enableVR": "actions/xr",
        "id-554": "os.enableVR",
        "os.eraseData": "actions/records",
        "id-1124": "os.eraseData",
        "os.eraseManualApprovalData": "actions/records",
        "id-1130": "os.eraseManualApprovalData",
        "os.exitFullscreenMode": "actions/portals",
        "id-464": "os.exitFullscreenMode",
        "os.getAverageFrameRate": "actions/os",
        "id-872": "os.getAverageFrameRate",
        "os.getCameraPosition": "actions/portals",
        "id-828": "os.getCameraPosition",
        "os.getCameraRotation": "actions/portals",
        "id-832": "os.getCameraRotation",
        "os.getCurrentDimension": "actions/portals",
        "id-707": "os.getCurrentDimension",
        "os.getCurrentInst": "actions/portals",
        "id-713": "os.getCurrentInst",
        "os.getCurrentInstUpdate": "actions/os",
        "id-1258": "os.getCurrentInstUpdate",
        "os.getData": "actions/records",
        "id-1106": "os.getData",
        "os.getDimensionalDepth": "actions/portals",
        "id-726": "os.getDimensionalDepth",
        "os.getFocusPoint": "actions/portals",
        "id-840": "os.getFocusPoint",
        "os.getGeolocation": "actions/os",
        "id-822": "os.getGeolocation",
        "os.getInputList": "actions/portals",
        "id-865": "os.getInputList",
        "os.getInputState": "actions/portals",
        "id-860": "os.getInputState",
        "os.getInstStateFromUpdates": "actions/os",
        "id-1246": "os.getInstStateFromUpdates",
        "os.getManualApprovalData": "actions/records",
        "id-1112": "os.getManualApprovalData",
        "os.getMediaPermission": "actions/os",
        "id-868": "os.getMediaPermission",
        "os.getMenuDimension": "actions/portals",
        "id-716": "os.getMenuDimension",
        "os.getMiniPortalDimension": "actions/portals",
        "id-719": "os.getMiniPortalDimension",
        "os.getPointerDirection": "actions/portals",
        "id-856": "os.getPointerDirection",
        "os.getPointerPosition": "actions/portals",
        "id-844": "os.getPointerPosition",
        "os.getPointerRotation": "actions/portals",
        "id-848": "os.getPointerRotation",
        "os.getPortalDimension": "actions/portals",
        "id-722": "os.getPortalDimension",
        "os.getPublicRecordKey": "actions/records",
        "id-1031": "os.getPublicRecordKey",
        "os.getRoomOptions": "actions/rooms",
        "id-890": "os.getRoomOptions",
        "os.getRoomRemoteOptions": "actions/rooms",
        "id-905": "os.getRoomRemoteOptions",
        "os.getRoomTrackOptions": "actions/rooms",
        "id-894": "os.getRoomTrackOptions",
        "os.getSubjectlessPublicRecordKey": "actions/records",
        "id-1035": "os.getSubjectlessPublicRecordKey",
        "os.getWakeLockConfiguration": "actions/os",
        "id-585": "os.getWakeLockConfiguration",
        "os.goToDimension": "actions/portals",
        "id-750": "os.goToDimension",
        "os.goToURL": "actions/portals",
        "id-754": "os.goToURL",
        "os.grantInstAdminPermission": "actions/records",
        "id-1053": "os.grantInstAdminPermission",
        "os.grantInstRole": "actions/records",
        "id-1073": "os.grantInstRole",
        "os.grantRecordMarkerPermission": "actions/records",
        "id-1039": "os.grantRecordMarkerPermission",
        "os.grantUserRole": "actions/records",
        "id-1058": "os.grantUserRole",
        "os.hasBotInMiniPortal": "actions/portals",
        "id-781": "os.hasBotInMiniPortal",
        "os.hideBarcode": "actions/barcodes",
        "id-642": "os.hideBarcode",
        "os.hideChat": "actions/os",
        "id-528": "os.hideChat",
        "os.hideHtml": "actions/os",
        "id-471": "os.hideHtml",
        "os.hideQRCode": "actions/barcodes",
        "id-627": "os.hideQRCode",
        "os.hideTips": "actions/portals",
        "id-452": "os.hideTips",
        "os.importAUX": "actions/files",
        "id-691": "os.importAUX",
        "os.inSheet": "actions/portals",
        "id-825": "os.inSheet",
        "os.instStatuses": "actions/os",
        "id-1275": "os.instStatuses",
        "os.instances": "actions/os",
        "id-1265": "os.instances",
        "os.isCollaborative": "actions/os",
        "id-541": "os.isCollaborative",
        "os.isInDimension": "actions/portals",
        "id-703": "os.isInDimension",
        "os.isRecordKey": "actions/records",
        "id-1088": "os.isRecordKey",
        "os.joinRoom": "actions/rooms",
        "id-875": "os.joinRoom",
        "os.leaveRoom": "actions/rooms",
        "id-880": "os.leaveRoom",
        "os.listBuiltinTags": "actions/app",
        "id-1025": "os.listBuiltinTags",
        "os.listData": "actions/records",
        "id-1118": "os.listData",
        "os.listFormAnimations": "actions/animations",
        "id-1222": "os.listFormAnimations",
        "os.listInstUpdates": "actions/os",
        "id-1243": "os.listInstUpdates",
        "os.loadInst": "actions/os",
        "id-683": "os.loadInst",
        "os.log": "actions/os",
        "id-818": "os.log",
        "os.meetCommand": "actions/os",
        "id-1288": "os.meetCommand",
        "os.meetFunction": "actions/os",
        "id-1293": "os.meetFunction",
        "os.openBarcodeScanner": "actions/barcodes",
        "id-630": "os.openBarcodeScanner",
        "os.openCircleWipe": "actions/portals",
        "id-793": "os.openCircleWipe",
        "os.openDevConsole": "actions/os",
        "id-762": "os.openDevConsole",
        "os.openImageClassifier": "actions/image-classification",
        "id-645": "os.openImageClassifier",
        "os.openPhotoCamera": "actions/camera",
        "id-652": "os.openPhotoCamera",
        "os.openQRCodeScanner": "actions/barcodes",
        "id-616": "os.openQRCodeScanner",
        "os.openURL": "actions/portals",
        "id-758": "os.openURL",
        "os.parseBotsFromData": "actions/files",
        "id-695": "os.parseBotsFromData",
        "os.playSound": "actions/audio",
        "id-769": "os.playSound",
        "os.raycast": "actions/portals",
        "id-1196": "os.raycast",
        "os.raycastFromCamera": "actions/portals",
        "id-1191": "os.raycastFromCamera",
        "os.recordData": "actions/records",
        "id-1092": "os.recordData",
        "os.recordEvent": "actions/records",
        "id-1175": "os.recordEvent",
        "os.recordFile": "actions/records",
        "id-1136": "os.recordFile",
        "os.recordManualApprovalData": "actions/records",
        "id-1099": "os.recordManualApprovalData",
        "os.registerApp": "actions/app",
        "id-915": "os.registerApp",
        "os.registerTagPrefix": "actions/app",
        "id-910": "os.registerTagPrefix",
        "os.remoteCount": "actions/os",
        "id-1268": "os.remoteCount",
        "os.remotes": "actions/os",
        "id-1240": "os.remotes",
        "os.replaceDragBot": "actions/portals",
        "id-699": "os.replaceDragBot",
        "os.requestAuthBot": "actions/records",
        "id-1028": "os.requestAuthBot",
        "os.requestFullscreenMode": "actions/portals",
        "id-461": "os.requestFullscreenMode",
        "os.requestWakeLock": "actions/os",
        "id-579": "os.requestWakeLock",
        "os.revokeInstRole": "actions/records",
        "id-1081": "os.revokeInstRole",
        "os.revokeRecordMarkerPermission": "actions/records",
        "id-1046": "os.revokeRecordMarkerPermission",
        "os.revokeUserRole": "actions/records",
        "id-1066": "os.revokeUserRole",
        "os.run": "actions/os",
        "id-531": "os.run",
        "os.setClipboard": "actions/os",
        "id-474": "os.setClipboard",
        "os.setRoomOptions": "actions/rooms",
        "id-885": "os.setRoomOptions",
        "os.setRoomTrackOptions": "actions/rooms",
        "id-899": "os.setRoomTrackOptions",
        "os.share": "actions/os",
        "id-785": "os.share",
        "os.showBarcode": "actions/barcodes",
        "id-637": "os.showBarcode",
        "os.showConfirm": "actions/portals",
        "id-746": "os.showConfirm",
        "os.showHtml": "actions/os",
        "id-467": "os.showHtml",
        "os.showInputForTag": "actions/portals",
        "id-730": "os.showInputForTag",
        "os.showJoinCode": "actions/barcodes",
        "id-456": "os.showJoinCode",
        "os.showQRCode": "actions/barcodes",
        "id-623": "os.showQRCode",
        "os.showUploadAuxFile": "actions/files",
        "id-610": "os.showUploadAuxFile",
        "os.showUploadFiles": "actions/files",
        "id-613": "os.showUploadFiles",
        "os.sleep": "actions/os",
        "id-436": "os.sleep",
        "os.startFormAnimation": "actions/animations",
        "id-1211": "os.startFormAnimation",
        "os.stopFormAnimation": "actions/animations",
        "id-1217": "os.stopFormAnimation",
        "os.tip": "actions/portals",
        "id-445": "os.tip",
        "os.toast": "actions/os",
        "id-440": "os.toast",
        "os.totalRemoteCount": "actions/os",
        "id-1272": "os.totalRemoteCount",
        "os.unloadInst": "actions/os",
        "id-687": "os.unloadInst",
        "os.unregisterApp": "actions/app",
        "id-920": "os.unregisterApp",
        "os.version": "actions/os",
        "id-535": "os.version",
        "os.vrSupported": "actions/xr",
        "id-564": "os.vrSupported",
        "os.agreedUponTime": "actions/time",
        "id-664": "os.agreedUponTime",
        "os.deadReckoningTime": "actions/time",
        "id-672": "os.deadReckoningTime",
        "os.instLatency": "actions/time",
        "id-666": "os.instLatency",
        "os.instTimeOffset": "actions/time",
        "id-668": "os.instTimeOffset",
        "os.instTimeOffsetSpread": "actions/time",
        "id-670": "os.instTimeOffsetSpread",
        "os.localTime": "actions/time",
        "id-662": "os.localTime",
        "removeTags": "actions/data",
        "id-141": "removeTags",
        "renameTag": "actions/data",
        "id-146": "renameTag",
        "setTag": "actions/data",
        "id-93": "setTag",
        "setTagMask": "actions/data",
        "id-99": "setTagMask",
        "subtractMods": "actions/mods",
        "id-157": "subtractMods",
        "superShout": "actions/event",
        "id-220": "superShout",
        "uuid": "actions/data",
        "id-355": "uuid",
        "web.get": "actions/web",
        "id-2003": "web.get",
        "web.hook": "actions/web",
        "id-2014": "web.hook",
        "web.post": "actions/web",
        "id-2008": "web.post",
        "configBot": "actions/os",
        "id-418": "configBot"
    }
}