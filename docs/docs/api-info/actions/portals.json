{
    "hash": "actions/portals",
    "pageTitle": "Portal Actions",
    "pageDescription": "Actions for working with portals.",
    "pageSidebarLabel": "Portals",
    "contents": [
        {
            "id": 1032,
            "order": 9999,
            "name": "os.closeCircleWipe",
            "reflection": {
                "id": 1032,
                "name": "__type",
                "variant": "signature",
                "kind": 4096,
                "flags": {},
                "comment": {
                    "summary": [
                        {
                            "kind": "text",
                            "text": "Causes a circular wipe animation to close around the screen.\nThis can be used to cover the grid portal while transitioning between scenes.\nReturns a promise that resolves when the animation has finished running.\nThe promise will throw an exception if "
                        },
                        {
                            "kind": "text",
                            "text": "[`os.openCircleWipe(options)`](ref:os.openCircleWipe)"
                        },
                        {
                            "kind": "text",
                            "text": " is called while the animation is running."
                        }
                    ],
                    "blockTags": [
                        {
                            "tag": "@example",
                            "content": [
                                {
                                    "kind": "code",
                                    "text": "```ts\nHide the grid portal with a circular wipe animation.\nawait os.closeCircleWipe();\nos.toast(\"Hidden!\");\n```"
                                }
                            ]
                        },
                        {
                            "tag": "@example",
                            "content": [
                                {
                                    "kind": "code",
                                    "text": "```ts\nHide the grid portal and show it after an additional second.\nawait os.closeCircleWipe();\nawait os.sleep(1000);\nawait os.openCircleWipe();\n```"
                                }
                            ]
                        },
                        {
                            "tag": "@example",
                            "content": [
                                {
                                    "kind": "code",
                                    "text": "```ts\nUse a custom color for the circle wipe.\nawait os.closeCircleWipe({\n    color: '#63f1aa'\n});\n```"
                                }
                            ]
                        },
                        {
                            "tag": "@example",
                            "content": [
                                {
                                    "kind": "code",
                                    "text": "```ts\nMake the circle wipe take 5 seconds to complete.\nawait os.closeCircleWipe({\n    duration: 5\n});\n```"
                                }
                            ]
                        },
                        {
                            "tag": "@dochash",
                            "content": [
                                {
                                    "kind": "text",
                                    "text": "actions/portals"
                                }
                            ]
                        },
                        {
                            "tag": "@docname",
                            "content": [
                                {
                                    "kind": "text",
                                    "text": "os.closeCircleWipe"
                                }
                            ]
                        },
                        {
                            "tag": "@docgroup",
                            "content": [
                                {
                                    "kind": "text",
                                    "text": "10-circle-wipe"
                                }
                            ]
                        }
                    ]
                },
                "sources": [
                    {
                        "fileName": "src/aux-runtime/runtime/AuxLibrary.ts",
                        "line": 7301,
                        "character": 13,
                        "url": "https://github.com/KallynGowdy/casualos/blob/56c869f96/src/aux-runtime/runtime/AuxLibrary.ts#L7301"
                    }
                ],
                "parameters": [
                    {
                        "id": 1033,
                        "name": "options",
                        "variant": "param",
                        "kind": 32768,
                        "flags": {
                            "isOptional": true
                        },
                        "comment": {
                            "summary": [
                                {
                                    "kind": "text",
                                    "text": "the options that should be used for the effect."
                                }
                            ],
                            "blockTags": []
                        },
                        "type": {
                            "type": "reference",
                            "target": {
                                "sourceFileName": "node_modules/typescript/lib/lib.es5.d.ts",
                                "qualifiedName": "Partial"
                            },
                            "typeArguments": [
                                {
                                    "type": "reference",
                                    "target": 3157,
                                    "name": "OpenCircleWipeOptions",
                                    "package": "@casual-simulation/aux-common",
                                    "id": 3157,
                                    "qualifiedName": "OpenCircleWipeOptions"
                                }
                            ],
                            "name": "Partial",
                            "package": "typescript"
                        }
                    }
                ],
                "type": {
                    "type": "reference",
                    "target": {
                        "sourceFileName": "node_modules/typescript/lib/lib.es5.d.ts",
                        "qualifiedName": "Promise"
                    },
                    "typeArguments": [
                        {
                            "type": "intrinsic",
                            "name": "void"
                        }
                    ],
                    "name": "Promise",
                    "package": "typescript"
                }
            },
            "comment": {
                "text": "Causes a circular wipe animation to close around the screen.\nThis can be used to cover the grid portal while transitioning between scenes.\nReturns a promise that resolves when the animation has finished running.\nThe promise will throw an exception if os.openCircleWipe is called while the animation is running.",
                "tags": [
                    {
                        "tagName": "example",
                        "text": "```ts\nHide the grid portal with a circular wipe animation.\nawait os.closeCircleWipe();\nos.toast(\"Hidden!\");\n```"
                    },
                    {
                        "tagName": "example",
                        "text": "```ts\nHide the grid portal and show it after an additional second.\nawait os.closeCircleWipe();\nawait os.sleep(1000);\nawait os.openCircleWipe();\n```"
                    },
                    {
                        "tagName": "example",
                        "text": "```ts\nUse a custom color for the circle wipe.\nawait os.closeCircleWipe({\n    color: '#63f1aa'\n});\n```"
                    },
                    {
                        "tagName": "example",
                        "text": "```ts\nMake the circle wipe take 5 seconds to complete.\nawait os.closeCircleWipe({\n    duration: 5\n});\n```"
                    },
                    {
                        "tagName": "dochash",
                        "text": "actions/portals"
                    },
                    {
                        "tagName": "docname",
                        "text": "os.closeCircleWipe"
                    },
                    {
                        "tagName": "docgroup",
                        "text": "10-circle-wipe"
                    }
                ]
            },
            "group": "10-circle-wipe"
        },
        {
            "id": 1036,
            "order": 9999,
            "name": "os.openCircleWipe",
            "reflection": {
                "id": 1036,
                "name": "__type",
                "variant": "signature",
                "kind": 4096,
                "flags": {},
                "comment": {
                    "summary": [
                        {
                            "kind": "text",
                            "text": "Causes the circular wipe animation to open around the screen.\nThis can be used to reveal the grid portal after transitioning between screens.\nReturns a promise that resolves when the animation has finished running.\nThe promise will throw an exception if "
                        },
                        {
                            "kind": "text",
                            "text": "[`os.closeCircleWipe(options)`](ref:os.closeCircleWipe)"
                        },
                        {
                            "kind": "text",
                            "text": " is called while the animation is running."
                        }
                    ],
                    "blockTags": [
                        {
                            "tag": "@example",
                            "content": [
                                {
                                    "kind": "code",
                                    "text": "```ts\nReveal the grid portal with a circular wipe animation.\nawait os.openCircleWipe();\nos.toast(\"Revealed!\");\n```"
                                }
                            ]
                        },
                        {
                            "tag": "@example",
                            "content": [
                                {
                                    "kind": "code",
                                    "text": "```ts\nHide the grid portal and show it after an additional second.\nawait os.closeCircleWipe();\nawait os.sleep(1000);\nawait os.openCircleWipe();\n```"
                                }
                            ]
                        },
                        {
                            "tag": "@example",
                            "content": [
                                {
                                    "kind": "code",
                                    "text": "```ts\nUse a custom color for the circle wipe.\nawait os.openCircleWipe({\n    color: '#63f1aa'\n});\n```"
                                }
                            ]
                        },
                        {
                            "tag": "@example",
                            "content": [
                                {
                                    "kind": "code",
                                    "text": "```ts\nMake the circle wipe take 5 seconds to complete.\nawait os.openCircleWipe({\n    duration: 5\n});\n```"
                                }
                            ]
                        },
                        {
                            "tag": "@dochash",
                            "content": [
                                {
                                    "kind": "text",
                                    "text": "actions/portals"
                                }
                            ]
                        },
                        {
                            "tag": "@docname",
                            "content": [
                                {
                                    "kind": "text",
                                    "text": "os.openCircleWipe"
                                }
                            ]
                        },
                        {
                            "tag": "@docgroup",
                            "content": [
                                {
                                    "kind": "text",
                                    "text": "10-circle-wipe"
                                }
                            ]
                        }
                    ]
                },
                "sources": [
                    {
                        "fileName": "src/aux-runtime/runtime/AuxLibrary.ts",
                        "line": 7347,
                        "character": 13,
                        "url": "https://github.com/KallynGowdy/casualos/blob/56c869f96/src/aux-runtime/runtime/AuxLibrary.ts#L7347"
                    }
                ],
                "parameters": [
                    {
                        "id": 1037,
                        "name": "options",
                        "variant": "param",
                        "kind": 32768,
                        "flags": {
                            "isOptional": true
                        },
                        "comment": {
                            "summary": [
                                {
                                    "kind": "text",
                                    "text": "the options that should be used for the effect."
                                }
                            ],
                            "blockTags": []
                        },
                        "type": {
                            "type": "reference",
                            "target": {
                                "sourceFileName": "node_modules/typescript/lib/lib.es5.d.ts",
                                "qualifiedName": "Partial"
                            },
                            "typeArguments": [
                                {
                                    "type": "reference",
                                    "target": 3157,
                                    "name": "OpenCircleWipeOptions",
                                    "package": "@casual-simulation/aux-common",
                                    "id": 3157,
                                    "qualifiedName": "OpenCircleWipeOptions"
                                }
                            ],
                            "name": "Partial",
                            "package": "typescript"
                        }
                    }
                ],
                "type": {
                    "type": "reference",
                    "target": {
                        "sourceFileName": "node_modules/typescript/lib/lib.es5.d.ts",
                        "qualifiedName": "Promise"
                    },
                    "typeArguments": [
                        {
                            "type": "intrinsic",
                            "name": "void"
                        }
                    ],
                    "name": "Promise",
                    "package": "typescript"
                }
            },
            "comment": {
                "text": "Causes the circular wipe animation to open around the screen.\nThis can be used to reveal the grid portal after transitioning between screens.\nReturns a promise that resolves when the animation has finished running.\nThe promise will throw an exception if os.closeCircleWipe is called while the animation is running.",
                "tags": [
                    {
                        "tagName": "example",
                        "text": "```ts\nReveal the grid portal with a circular wipe animation.\nawait os.openCircleWipe();\nos.toast(\"Revealed!\");\n```"
                    },
                    {
                        "tagName": "example",
                        "text": "```ts\nHide the grid portal and show it after an additional second.\nawait os.closeCircleWipe();\nawait os.sleep(1000);\nawait os.openCircleWipe();\n```"
                    },
                    {
                        "tagName": "example",
                        "text": "```ts\nUse a custom color for the circle wipe.\nawait os.openCircleWipe({\n    color: '#63f1aa'\n});\n```"
                    },
                    {
                        "tagName": "example",
                        "text": "```ts\nMake the circle wipe take 5 seconds to complete.\nawait os.openCircleWipe({\n    duration: 5\n});\n```"
                    },
                    {
                        "tagName": "dochash",
                        "text": "actions/portals"
                    },
                    {
                        "tagName": "docname",
                        "text": "os.openCircleWipe"
                    },
                    {
                        "tagName": "docgroup",
                        "text": "10-circle-wipe"
                    }
                ]
            },
            "group": "10-circle-wipe"
        },
        {
            "id": 954,
            "order": 9999,
            "name": "os.getCurrentDimension",
            "reflection": {
                "id": 954,
                "name": "__type",
                "variant": "signature",
                "kind": 4096,
                "flags": {},
                "comment": {
                    "summary": [
                        {
                            "kind": "text",
                            "text": "Gets the dimension that is loaded into the "
                        },
                        {
                            "kind": "text",
                            "text": "[`#gridPortal`](tags:gridPortal)"
                        },
                        {
                            "kind": "text",
                            "text": " portal.\n\n> This function behaves exactly like "
                        },
                        {
                            "kind": "text",
                            "text": "[`os.getPortalDimension(portal)`](ref:os.getPortalDimension)"
                        },
                        {
                            "kind": "text",
                            "text": " when given \"gridPortal\"."
                        }
                    ],
                    "blockTags": [
                        {
                            "tag": "@example",
                            "content": [
                                {
                                    "kind": "code",
                                    "text": "```ts\nShow a message of the dimension that is currently in the #gridPortal portal.\nconst dimension = os.getCurrentDimension();\nos.toast(dimension);\n```"
                                }
                            ]
                        },
                        {
                            "tag": "@dochash",
                            "content": [
                                {
                                    "kind": "text",
                                    "text": "actions/portals"
                                }
                            ]
                        },
                        {
                            "tag": "@doctitle",
                            "content": [
                                {
                                    "kind": "text",
                                    "text": "Portal Actions"
                                }
                            ]
                        },
                        {
                            "tag": "@docsidebar",
                            "content": [
                                {
                                    "kind": "text",
                                    "text": "Portals"
                                }
                            ]
                        },
                        {
                            "tag": "@docdescription",
                            "content": [
                                {
                                    "kind": "text",
                                    "text": "Actions for working with portals."
                                }
                            ]
                        },
                        {
                            "tag": "@docname",
                            "content": [
                                {
                                    "kind": "text",
                                    "text": "os.getCurrentDimension"
                                }
                            ]
                        },
                        {
                            "tag": "@docgroup",
                            "content": [
                                {
                                    "kind": "text",
                                    "text": "10-config-values"
                                }
                            ]
                        }
                    ]
                },
                "sources": [
                    {
                        "fileName": "src/aux-runtime/runtime/AuxLibrary.ts",
                        "line": 6677,
                        "character": 13,
                        "url": "https://github.com/KallynGowdy/casualos/blob/56c869f96/src/aux-runtime/runtime/AuxLibrary.ts#L6677"
                    }
                ],
                "type": {
                    "type": "intrinsic",
                    "name": "string"
                }
            },
            "comment": {
                "text": "Gets the dimension that is loaded into the gridPortal portal.\n\n> This function behaves exactly like os.getPortalDimension when given \"gridPortal\".",
                "tags": [
                    {
                        "tagName": "example",
                        "text": "```ts\nShow a message of the dimension that is currently in the #gridPortal portal.\nconst dimension = os.getCurrentDimension();\nos.toast(dimension);\n```"
                    },
                    {
                        "tagName": "dochash",
                        "text": "actions/portals"
                    },
                    {
                        "tagName": "doctitle",
                        "text": "Portal Actions"
                    },
                    {
                        "tagName": "docsidebar",
                        "text": "Portals"
                    },
                    {
                        "tagName": "docdescription",
                        "text": "Actions for working with portals."
                    },
                    {
                        "tagName": "docname",
                        "text": "os.getCurrentDimension"
                    },
                    {
                        "tagName": "docgroup",
                        "text": "10-config-values"
                    }
                ]
            },
            "group": "10-config-values"
        },
        {
            "id": 960,
            "order": 9999,
            "name": "os.getCurrentInst",
            "reflection": {
                "id": 960,
                "name": "__type",
                "variant": "signature",
                "kind": 4096,
                "flags": {},
                "comment": {
                    "summary": [
                        {
                            "kind": "text",
                            "text": "Gets the inst that is loaded."
                        }
                    ],
                    "blockTags": [
                        {
                            "tag": "@example",
                            "content": [
                                {
                                    "kind": "code",
                                    "text": "```ts\nShow a message of the current inst.\nconst inst = os.getCurrentInst();\nos.toast(inst);\n```"
                                }
                            ]
                        },
                        {
                            "tag": "@dochash",
                            "content": [
                                {
                                    "kind": "text",
                                    "text": "actions/portals"
                                }
                            ]
                        },
                        {
                            "tag": "@docname",
                            "content": [
                                {
                                    "kind": "text",
                                    "text": "os.getCurrentInst"
                                }
                            ]
                        },
                        {
                            "tag": "@docgroup",
                            "content": [
                                {
                                    "kind": "text",
                                    "text": "10-config-values"
                                }
                            ]
                        }
                    ]
                },
                "sources": [
                    {
                        "fileName": "src/aux-runtime/runtime/AuxLibrary.ts",
                        "line": 6700,
                        "character": 13,
                        "url": "https://github.com/KallynGowdy/casualos/blob/56c869f96/src/aux-runtime/runtime/AuxLibrary.ts#L6700"
                    }
                ],
                "type": {
                    "type": "intrinsic",
                    "name": "string"
                }
            },
            "comment": {
                "text": "Gets the inst that is loaded.",
                "tags": [
                    {
                        "tagName": "example",
                        "text": "```ts\nShow a message of the current inst.\nconst inst = os.getCurrentInst();\nos.toast(inst);\n```"
                    },
                    {
                        "tagName": "dochash",
                        "text": "actions/portals"
                    },
                    {
                        "tagName": "docname",
                        "text": "os.getCurrentInst"
                    },
                    {
                        "tagName": "docgroup",
                        "text": "10-config-values"
                    }
                ]
            },
            "group": "10-config-values"
        },
        {
            "id": 973,
            "order": 9999,
            "name": "os.getDimensionalDepth",
            "reflection": {
                "id": 973,
                "name": "__type",
                "variant": "signature",
                "kind": 4096,
                "flags": {},
                "comment": {
                    "summary": [
                        {
                            "kind": "text",
                            "text": "Gets the distance that the player bot is from the given dimension.\n\nReturns "
                        },
                        {
                            "kind": "code",
                            "text": "`0`"
                        },
                        {
                            "kind": "text",
                            "text": " if the player bot is in the dimension, "
                        },
                        {
                            "kind": "code",
                            "text": "`1`"
                        },
                        {
                            "kind": "text",
                            "text": " if the dimension is in a portal, and "
                        },
                        {
                            "kind": "code",
                            "text": "`-1`"
                        },
                        {
                            "kind": "text",
                            "text": " if neither are true."
                        }
                    ],
                    "blockTags": [
                        {
                            "tag": "@example",
                            "content": [
                                {
                                    "kind": "code",
                                    "text": "```ts\nGet the distance to the \"fun\" dimension.\nconst distance = os.getDimensionalDepth(\"fun\");\nif (distance === 0) {\n    os.toast(\"Player is in the fun dimension\");\n} else if(distance === 1) {\n    os.toast(\"Player is viewing the fun dimension\");\n} else {\n    os.toast(\"Player cannot access the fun dimension\");\n}\n```"
                                }
                            ]
                        },
                        {
                            "tag": "@dochash",
                            "content": [
                                {
                                    "kind": "text",
                                    "text": "actions/portals"
                                }
                            ]
                        },
                        {
                            "tag": "@docname",
                            "content": [
                                {
                                    "kind": "text",
                                    "text": "os.getDimensionalDepth"
                                }
                            ]
                        },
                        {
                            "tag": "@docgroup",
                            "content": [
                                {
                                    "kind": "text",
                                    "text": "10-config-values"
                                }
                            ]
                        }
                    ]
                },
                "sources": [
                    {
                        "fileName": "src/aux-runtime/runtime/AuxLibrary.ts",
                        "line": 6820,
                        "character": 13,
                        "url": "https://github.com/KallynGowdy/casualos/blob/56c869f96/src/aux-runtime/runtime/AuxLibrary.ts#L6820"
                    }
                ],
                "parameters": [
                    {
                        "id": 974,
                        "name": "dimension",
                        "variant": "param",
                        "kind": 32768,
                        "flags": {},
                        "comment": {
                            "summary": [
                                {
                                    "kind": "text",
                                    "text": "The dimension to check for."
                                }
                            ],
                            "blockTags": []
                        },
                        "type": {
                            "type": "intrinsic",
                            "name": "string"
                        }
                    }
                ],
                "type": {
                    "type": "intrinsic",
                    "name": "number"
                }
            },
            "comment": {
                "text": "Gets the distance that the player bot is from the given dimension.\n\nReturns `0` if the player bot is in the dimension, `1` if the dimension is in a portal, and `-1` if neither are true.",
                "tags": [
                    {
                        "tagName": "example",
                        "text": "```ts\nGet the distance to the \"fun\" dimension.\nconst distance = os.getDimensionalDepth(\"fun\");\nif (distance === 0) {\n    os.toast(\"Player is in the fun dimension\");\n} else if(distance === 1) {\n    os.toast(\"Player is viewing the fun dimension\");\n} else {\n    os.toast(\"Player cannot access the fun dimension\");\n}\n```"
                    },
                    {
                        "tagName": "dochash",
                        "text": "actions/portals"
                    },
                    {
                        "tagName": "docname",
                        "text": "os.getDimensionalDepth"
                    },
                    {
                        "tagName": "docgroup",
                        "text": "10-config-values"
                    }
                ]
            },
            "group": "10-config-values"
        },
        {
            "id": 963,
            "order": 9999,
            "name": "os.getMenuDimension",
            "reflection": {
                "id": 963,
                "name": "__type",
                "variant": "signature",
                "kind": 4096,
                "flags": {},
                "comment": {
                    "summary": [
                        {
                            "kind": "text",
                            "text": "Gets the dimension that is loaded into the "
                        },
                        {
                            "kind": "text",
                            "text": "[`#menuPortal`](tags:menuPortal)"
                        },
                        {
                            "kind": "text",
                            "text": " portal.\n\n> This function behaves exactly like "
                        },
                        {
                            "kind": "text",
                            "text": "[`os.getPortalDimension(portal)`](ref:os.getPortalDimension)"
                        },
                        {
                            "kind": "text",
                            "text": " when given \"menuPortal\"."
                        }
                    ],
                    "blockTags": [
                        {
                            "tag": "@example",
                            "content": [
                                {
                                    "kind": "code",
                                    "text": "```ts\nShow a message of the dimension that is currently in the #menuPortal portal.\nconst dimension = os.getMenuDimension();\nos.toast(dimension);\n```"
                                }
                            ]
                        },
                        {
                            "tag": "@dochash",
                            "content": [
                                {
                                    "kind": "text",
                                    "text": "actions/portals"
                                }
                            ]
                        },
                        {
                            "tag": "@docname",
                            "content": [
                                {
                                    "kind": "text",
                                    "text": "os.getMenuDimension"
                                }
                            ]
                        },
                        {
                            "tag": "@docgroup",
                            "content": [
                                {
                                    "kind": "text",
                                    "text": "10-config-values"
                                }
                            ]
                        }
                    ]
                },
                "sources": [
                    {
                        "fileName": "src/aux-runtime/runtime/AuxLibrary.ts",
                        "line": 6754,
                        "character": 13,
                        "url": "https://github.com/KallynGowdy/casualos/blob/56c869f96/src/aux-runtime/runtime/AuxLibrary.ts#L6754"
                    }
                ],
                "type": {
                    "type": "intrinsic",
                    "name": "string"
                }
            },
            "comment": {
                "text": "Gets the dimension that is loaded into the menuPortal portal.\n\n> This function behaves exactly like os.getPortalDimension when given \"menuPortal\".",
                "tags": [
                    {
                        "tagName": "example",
                        "text": "```ts\nShow a message of the dimension that is currently in the #menuPortal portal.\nconst dimension = os.getMenuDimension();\nos.toast(dimension);\n```"
                    },
                    {
                        "tagName": "dochash",
                        "text": "actions/portals"
                    },
                    {
                        "tagName": "docname",
                        "text": "os.getMenuDimension"
                    },
                    {
                        "tagName": "docgroup",
                        "text": "10-config-values"
                    }
                ]
            },
            "group": "10-config-values"
        },
        {
            "id": 966,
            "order": 9999,
            "name": "os.getMiniPortalDimension",
            "reflection": {
                "id": 966,
                "name": "__type",
                "variant": "signature",
                "kind": 4096,
                "flags": {},
                "comment": {
                    "summary": [
                        {
                            "kind": "text",
                            "text": "Gets the dimension that is loaded into the #miniGridPortal portal.\n\n> This function behaves exactly like "
                        },
                        {
                            "kind": "text",
                            "text": "[`os.getPortalDimension(portal)`](ref:os.getPortalDimension)"
                        },
                        {
                            "kind": "text",
                            "text": " when given \"miniGridPortal\"."
                        }
                    ],
                    "blockTags": [
                        {
                            "tag": "@example",
                            "content": [
                                {
                                    "kind": "code",
                                    "text": "```ts\nShow a message of the dimension that is currently in the #miniGridPortal portal.\nconst dimension = os.getMiniPortalDimension();\nos.toast(dimension);\n```"
                                }
                            ]
                        },
                        {
                            "tag": "@dochash",
                            "content": [
                                {
                                    "kind": "text",
                                    "text": "actions/portals"
                                }
                            ]
                        },
                        {
                            "tag": "@docname",
                            "content": [
                                {
                                    "kind": "text",
                                    "text": "os.getMiniPortalDimension"
                                }
                            ]
                        },
                        {
                            "tag": "@docgroup",
                            "content": [
                                {
                                    "kind": "text",
                                    "text": "10-config-values"
                                }
                            ]
                        }
                    ]
                },
                "sources": [
                    {
                        "fileName": "src/aux-runtime/runtime/AuxLibrary.ts",
                        "line": 6728,
                        "character": 13,
                        "url": "https://github.com/KallynGowdy/casualos/blob/56c869f96/src/aux-runtime/runtime/AuxLibrary.ts#L6728"
                    }
                ],
                "type": {
                    "type": "intrinsic",
                    "name": "string"
                }
            },
            "comment": {
                "text": "Gets the dimension that is loaded into the #miniGridPortal portal.\n\n> This function behaves exactly like os.getPortalDimension when given \"miniGridPortal\".",
                "tags": [
                    {
                        "tagName": "example",
                        "text": "```ts\nShow a message of the dimension that is currently in the #miniGridPortal portal.\nconst dimension = os.getMiniPortalDimension();\nos.toast(dimension);\n```"
                    },
                    {
                        "tagName": "dochash",
                        "text": "actions/portals"
                    },
                    {
                        "tagName": "docname",
                        "text": "os.getMiniPortalDimension"
                    },
                    {
                        "tagName": "docgroup",
                        "text": "10-config-values"
                    }
                ]
            },
            "group": "10-config-values"
        },
        {
            "id": 969,
            "order": 9999,
            "name": "os.getPortalDimension",
            "reflection": {
                "id": 969,
                "name": "__type",
                "variant": "signature",
                "kind": 4096,
                "flags": {},
                "comment": {
                    "summary": [
                        {
                            "kind": "text",
                            "text": "Gets the dimension that is loaded into the given portal.\nIf no dimension is loaded, then "
                        },
                        {
                            "kind": "code",
                            "text": "`null`"
                        },
                        {
                            "kind": "text",
                            "text": " is returned."
                        }
                    ],
                    "blockTags": [
                        {
                            "tag": "@example",
                            "content": [
                                {
                                    "kind": "code",
                                    "text": "```ts\nGet the dimension that is currently showing in the #gridPortal.\nconst dimension = os.getPortalDimension('grid');\n```"
                                }
                            ]
                        },
                        {
                            "tag": "@example",
                            "content": [
                                {
                                    "kind": "code",
                                    "text": "```ts\nGet the dimension that is currently showing in the #miniGridPortal.\nconst dimension = os.getPortalDimension('miniGrid');\n```"
                                }
                            ]
                        },
                        {
                            "tag": "@dochash",
                            "content": [
                                {
                                    "kind": "text",
                                    "text": "actions/portals"
                                }
                            ]
                        },
                        {
                            "tag": "@docname",
                            "content": [
                                {
                                    "kind": "text",
                                    "text": "os.getPortalDimension"
                                }
                            ]
                        },
                        {
                            "tag": "@docgroup",
                            "content": [
                                {
                                    "kind": "text",
                                    "text": "10-config-values"
                                }
                            ]
                        }
                    ]
                },
                "sources": [
                    {
                        "fileName": "src/aux-runtime/runtime/AuxLibrary.ts",
                        "line": 6783,
                        "character": 13,
                        "url": "https://github.com/KallynGowdy/casualos/blob/56c869f96/src/aux-runtime/runtime/AuxLibrary.ts#L6783"
                    }
                ],
                "parameters": [
                    {
                        "id": 970,
                        "name": "portal",
                        "variant": "param",
                        "kind": 32768,
                        "flags": {},
                        "comment": {
                            "summary": [
                                {
                                    "kind": "text",
                                    "text": "the portal that the dimension should be retrieved for"
                                }
                            ],
                            "blockTags": []
                        },
                        "type": {
                            "type": "intrinsic",
                            "name": "string"
                        }
                    }
                ],
                "type": {
                    "type": "intrinsic",
                    "name": "string"
                }
            },
            "comment": {
                "text": "Gets the dimension that is loaded into the given portal.\nIf no dimension is loaded, then `null` is returned.",
                "tags": [
                    {
                        "tagName": "example",
                        "text": "```ts\nGet the dimension that is currently showing in the #gridPortal.\nconst dimension = os.getPortalDimension('grid');\n```"
                    },
                    {
                        "tagName": "example",
                        "text": "```ts\nGet the dimension that is currently showing in the #miniGridPortal.\nconst dimension = os.getPortalDimension('miniGrid');\n```"
                    },
                    {
                        "tagName": "dochash",
                        "text": "actions/portals"
                    },
                    {
                        "tagName": "docname",
                        "text": "os.getPortalDimension"
                    },
                    {
                        "tagName": "docgroup",
                        "text": "10-config-values"
                    }
                ]
            },
            "group": "10-config-values"
        },
        {
            "id": 1024,
            "order": 9999,
            "name": "os.hasBotInMiniPortal",
            "reflection": {
                "id": 1024,
                "name": "__type",
                "variant": "signature",
                "kind": 4096,
                "flags": {},
                "comment": {
                    "summary": [
                        {
                            "kind": "text",
                            "text": "Determines if the given bot is in the dimension that is currently loaded into the "
                        },
                        {
                            "kind": "text",
                            "text": "[`#miniGridPortal`](tags:miniGridPortal)"
                        },
                        {
                            "kind": "text",
                            "text": " portal."
                        }
                    ],
                    "blockTags": [
                        {
                            "tag": "@example",
                            "content": [
                                {
                                    "kind": "code",
                                    "text": "```ts\nShow a message if a bot named \"bob\" is in the miniGridPortal.\nconst bob = getBot(\"#name\", \"bob\");\nif (os.hasBotInMiniPortal(bob)) {\n    os.toast(\"bob is in the miniGridPortal!\");\n}\n```"
                                }
                            ]
                        },
                        {
                            "tag": "@dochash",
                            "content": [
                                {
                                    "kind": "text",
                                    "text": "actions/portals"
                                }
                            ]
                        },
                        {
                            "tag": "@docname",
                            "content": [
                                {
                                    "kind": "text",
                                    "text": "os.hasBotInMiniPortal"
                                }
                            ]
                        },
                        {
                            "tag": "@docgroup",
                            "content": [
                                {
                                    "kind": "text",
                                    "text": "10-config-values"
                                }
                            ]
                        }
                    ]
                },
                "sources": [
                    {
                        "fileName": "src/aux-runtime/runtime/AuxLibrary.ts",
                        "line": 7235,
                        "character": 13,
                        "url": "https://github.com/KallynGowdy/casualos/blob/56c869f96/src/aux-runtime/runtime/AuxLibrary.ts#L7235"
                    }
                ],
                "parameters": [
                    {
                        "id": 1025,
                        "name": "bots",
                        "variant": "param",
                        "kind": 32768,
                        "flags": {},
                        "comment": {
                            "summary": [
                                {
                                    "kind": "text",
                                    "text": "the bot or bots that should be checked."
                                }
                            ],
                            "blockTags": []
                        },
                        "type": {
                            "type": "union",
                            "types": [
                                {
                                    "type": "reference",
                                    "target": 3355,
                                    "name": "Bot",
                                    "package": "@casual-simulation/aux-common",
                                    "id": 3355,
                                    "qualifiedName": "Bot"
                                },
                                {
                                    "type": "array",
                                    "elementType": {
                                        "type": "reference",
                                        "target": 3355,
                                        "name": "Bot",
                                        "package": "@casual-simulation/aux-common",
                                        "id": 3355,
                                        "qualifiedName": "Bot"
                                    }
                                }
                            ]
                        }
                    }
                ],
                "type": {
                    "type": "intrinsic",
                    "name": "boolean"
                }
            },
            "comment": {
                "text": "Determines if the given bot is in the dimension that is currently loaded into the miniGridPortal portal.",
                "tags": [
                    {
                        "tagName": "example",
                        "text": "```ts\nShow a message if a bot named \"bob\" is in the miniGridPortal.\nconst bob = getBot(\"#name\", \"bob\");\nif (os.hasBotInMiniPortal(bob)) {\n    os.toast(\"bob is in the miniGridPortal!\");\n}\n```"
                    },
                    {
                        "tagName": "dochash",
                        "text": "actions/portals"
                    },
                    {
                        "tagName": "docname",
                        "text": "os.hasBotInMiniPortal"
                    },
                    {
                        "tagName": "docgroup",
                        "text": "10-config-values"
                    }
                ]
            },
            "group": "10-config-values"
        },
        {
            "id": 1068,
            "order": 9999,
            "name": "os.inSheet",
            "reflection": {
                "id": 1068,
                "name": "__type",
                "variant": "signature",
                "kind": 4096,
                "flags": {},
                "comment": {
                    "summary": [
                        {
                            "kind": "text",
                            "text": "Gets whether the player is viewing the sheetPortal"
                        }
                    ],
                    "blockTags": [
                        {
                            "tag": "@example",
                            "content": [
                                {
                                    "kind": "code",
                                    "text": "```ts\nShow a toast if the player is viewing the sheet.\nif (os.inSheet()) {\n    os.toast(\"You are in the sheet!\");\n}\n```"
                                }
                            ]
                        },
                        {
                            "tag": "@dochash",
                            "content": [
                                {
                                    "kind": "text",
                                    "text": "actions/portals"
                                }
                            ]
                        },
                        {
                            "tag": "@docname",
                            "content": [
                                {
                                    "kind": "text",
                                    "text": "os.inSheet"
                                }
                            ]
                        },
                        {
                            "tag": "@docgroup",
                            "content": [
                                {
                                    "kind": "text",
                                    "text": "10-config-values"
                                }
                            ]
                        }
                    ]
                },
                "sources": [
                    {
                        "fileName": "src/aux-runtime/runtime/AuxLibrary.ts",
                        "line": 14052,
                        "character": 13,
                        "url": "https://github.com/KallynGowdy/casualos/blob/56c869f96/src/aux-runtime/runtime/AuxLibrary.ts#L14052"
                    }
                ],
                "type": {
                    "type": "intrinsic",
                    "name": "boolean"
                }
            },
            "comment": {
                "text": "Gets whether the player is viewing the sheetPortal",
                "tags": [
                    {
                        "tagName": "example",
                        "text": "```ts\nShow a toast if the player is viewing the sheet.\nif (os.inSheet()) {\n    os.toast(\"You are in the sheet!\");\n}\n```"
                    },
                    {
                        "tagName": "dochash",
                        "text": "actions/portals"
                    },
                    {
                        "tagName": "docname",
                        "text": "os.inSheet"
                    },
                    {
                        "tagName": "docgroup",
                        "text": "10-config-values"
                    }
                ]
            },
            "group": "10-config-values"
        },
        {
            "id": 950,
            "order": 9999,
            "name": "os.isInDimension",
            "reflection": {
                "id": 950,
                "name": "__type",
                "variant": "signature",
                "kind": 4096,
                "flags": {},
                "comment": {
                    "summary": [
                        {
                            "kind": "text",
                            "text": "Gets whether the given dimension is loaded into the "
                        },
                        {
                            "kind": "text",
                            "text": "[`#gridPortal`](tags:gridPortal)"
                        },
                        {
                            "kind": "text",
                            "text": " portal."
                        }
                    ],
                    "blockTags": [
                        {
                            "tag": "@example",
                            "content": [
                                {
                                    "kind": "code",
                                    "text": "```ts\nShow a toast if the player is viewing the abc dimension.\nif (os.isInDimension(\"abc\")) {\n    os.toast(\"In the dimension!\");\n}\n```"
                                }
                            ]
                        },
                        {
                            "tag": "@dochash",
                            "content": [
                                {
                                    "kind": "text",
                                    "text": "actions/portals"
                                }
                            ]
                        },
                        {
                            "tag": "@docname",
                            "content": [
                                {
                                    "kind": "text",
                                    "text": "os.isInDimension"
                                }
                            ]
                        },
                        {
                            "tag": "@docgroup",
                            "content": [
                                {
                                    "kind": "text",
                                    "text": "10-config-values"
                                }
                            ]
                        }
                    ]
                },
                "sources": [
                    {
                        "fileName": "src/aux-runtime/runtime/AuxLibrary.ts",
                        "line": 6654,
                        "character": 13,
                        "url": "https://github.com/KallynGowdy/casualos/blob/56c869f96/src/aux-runtime/runtime/AuxLibrary.ts#L6654"
                    }
                ],
                "parameters": [
                    {
                        "id": 951,
                        "name": "dimension",
                        "variant": "param",
                        "kind": 32768,
                        "flags": {},
                        "comment": {
                            "summary": [
                                {
                                    "kind": "text",
                                    "text": "the dimension to check for."
                                }
                            ],
                            "blockTags": []
                        },
                        "type": {
                            "type": "intrinsic",
                            "name": "string"
                        }
                    }
                ],
                "type": {
                    "type": "intrinsic",
                    "name": "boolean"
                }
            },
            "comment": {
                "text": "Gets whether the given dimension is loaded into the gridPortal portal.",
                "tags": [
                    {
                        "tagName": "example",
                        "text": "```ts\nShow a toast if the player is viewing the abc dimension.\nif (os.isInDimension(\"abc\")) {\n    os.toast(\"In the dimension!\");\n}\n```"
                    },
                    {
                        "tagName": "dochash",
                        "text": "actions/portals"
                    },
                    {
                        "tagName": "docname",
                        "text": "os.isInDimension"
                    },
                    {
                        "tagName": "docgroup",
                        "text": "10-config-values"
                    }
                ]
            },
            "group": "10-config-values"
        },
        {
            "id": 708,
            "order": 9999,
            "name": "os.exitFullscreenMode",
            "reflection": {
                "id": 708,
                "name": "__type",
                "variant": "signature",
                "kind": 4096,
                "flags": {},
                "comment": {
                    "summary": [
                        {
                            "kind": "text",
                            "text": "Exits fullscreen mode."
                        }
                    ],
                    "blockTags": [
                        {
                            "tag": "@example",
                            "content": [
                                {
                                    "kind": "code",
                                    "text": "```ts\nExit fullscreen mode.\nos.exitFullscreenMode();\n```"
                                }
                            ]
                        },
                        {
                            "tag": "@dochash",
                            "content": [
                                {
                                    "kind": "text",
                                    "text": "actions/portals"
                                }
                            ]
                        },
                        {
                            "tag": "@docname",
                            "content": [
                                {
                                    "kind": "text",
                                    "text": "os.exitFullscreenMode"
                                }
                            ]
                        },
                        {
                            "tag": "@docgroup",
                            "content": [
                                {
                                    "kind": "text",
                                    "text": "10-fullscreen"
                                }
                            ]
                        }
                    ]
                },
                "sources": [
                    {
                        "fileName": "src/aux-runtime/runtime/AuxLibrary.ts",
                        "line": 5207,
                        "character": 13,
                        "url": "https://github.com/KallynGowdy/casualos/blob/56c869f96/src/aux-runtime/runtime/AuxLibrary.ts#L5207"
                    }
                ],
                "type": {
                    "type": "reference",
                    "target": 3102,
                    "name": "ExitFullscreenAction",
                    "package": "@casual-simulation/aux-common",
                    "id": 3102,
                    "qualifiedName": "ExitFullscreenAction"
                }
            },
            "comment": {
                "text": "Exits fullscreen mode.",
                "tags": [
                    {
                        "tagName": "example",
                        "text": "```ts\nExit fullscreen mode.\nos.exitFullscreenMode();\n```"
                    },
                    {
                        "tagName": "dochash",
                        "text": "actions/portals"
                    },
                    {
                        "tagName": "docname",
                        "text": "os.exitFullscreenMode"
                    },
                    {
                        "tagName": "docgroup",
                        "text": "10-fullscreen"
                    }
                ]
            },
            "group": "10-fullscreen"
        },
        {
            "id": 705,
            "order": 9999,
            "name": "os.requestFullscreenMode",
            "reflection": {
                "id": 705,
                "name": "__type",
                "variant": "signature",
                "kind": 4096,
                "flags": {},
                "comment": {
                    "summary": [
                        {
                            "kind": "text",
                            "text": "Attempts to enter fullscreen mode. Depending on which web browser the player is using, this might ask for permission to go fullscreen.\n\nNote that iPhones currently don't support fullscreen mode."
                        }
                    ],
                    "blockTags": [
                        {
                            "tag": "@example",
                            "content": [
                                {
                                    "kind": "code",
                                    "text": "```ts\nEnter fullscreen mode.\nos.requestFullscreenMode();\n```"
                                }
                            ]
                        },
                        {
                            "tag": "@dochash",
                            "content": [
                                {
                                    "kind": "text",
                                    "text": "actions/portals"
                                }
                            ]
                        },
                        {
                            "tag": "@docname",
                            "content": [
                                {
                                    "kind": "text",
                                    "text": "os.requestFullscreenMode"
                                }
                            ]
                        },
                        {
                            "tag": "@docgroup",
                            "content": [
                                {
                                    "kind": "text",
                                    "text": "10-fullscreen"
                                }
                            ]
                        }
                    ]
                },
                "sources": [
                    {
                        "fileName": "src/aux-runtime/runtime/AuxLibrary.ts",
                        "line": 5193,
                        "character": 13,
                        "url": "https://github.com/KallynGowdy/casualos/blob/56c869f96/src/aux-runtime/runtime/AuxLibrary.ts#L5193"
                    }
                ],
                "type": {
                    "type": "reference",
                    "target": 3100,
                    "name": "RequestFullscreenAction",
                    "package": "@casual-simulation/aux-common",
                    "id": 3100,
                    "qualifiedName": "RequestFullscreenAction"
                }
            },
            "comment": {
                "text": "Attempts to enter fullscreen mode. Depending on which web browser the player is using, this might ask for permission to go fullscreen.\n\nNote that iPhones currently don't support fullscreen mode.",
                "tags": [
                    {
                        "tagName": "example",
                        "text": "```ts\nEnter fullscreen mode.\nos.requestFullscreenMode();\n```"
                    },
                    {
                        "tagName": "dochash",
                        "text": "actions/portals"
                    },
                    {
                        "tagName": "docname",
                        "text": "os.requestFullscreenMode"
                    },
                    {
                        "tagName": "docgroup",
                        "text": "10-fullscreen"
                    }
                ]
            },
            "group": "10-fullscreen"
        },
        {
            "id": 997,
            "order": 9999,
            "name": "os.goToDimension",
            "reflection": {
                "id": 997,
                "name": "__type",
                "variant": "signature",
                "kind": 4096,
                "flags": {},
                "comment": {
                    "summary": [
                        {
                            "kind": "text",
                            "text": "Loads the given dimension into the "
                        },
                        {
                            "kind": "text",
                            "text": "[`#gridPortal`](tags:gridPortal)"
                        },
                        {
                            "kind": "text",
                            "text": " portal. Triggers the "
                        },
                        {
                            "kind": "text",
                            "text": "[`@onPortalChanged`](tags:@onPortalChanged)"
                        },
                        {
                            "kind": "text",
                            "text": " shout for the gridPortal."
                        }
                    ],
                    "blockTags": [
                        {
                            "tag": "@example",
                            "content": [
                                {
                                    "kind": "code",
                                    "text": "```ts\nLoad the abc dimension.\nos.goToDimension(\"abc\");\n```"
                                }
                            ]
                        },
                        {
                            "tag": "@dochash",
                            "content": [
                                {
                                    "kind": "text",
                                    "text": "actions/portals"
                                }
                            ]
                        },
                        {
                            "tag": "@docname",
                            "content": [
                                {
                                    "kind": "text",
                                    "text": "os.goToDimension"
                                }
                            ]
                        },
                        {
                            "tag": "@docgroup",
                            "content": [
                                {
                                    "kind": "text",
                                    "text": "10-go-to"
                                }
                            ]
                        }
                    ]
                },
                "sources": [
                    {
                        "fileName": "src/aux-runtime/runtime/AuxLibrary.ts",
                        "line": 7099,
                        "character": 13,
                        "url": "https://github.com/KallynGowdy/casualos/blob/56c869f96/src/aux-runtime/runtime/AuxLibrary.ts#L7099"
                    }
                ],
                "parameters": [
                    {
                        "id": 998,
                        "name": "dimension",
                        "variant": "param",
                        "kind": 32768,
                        "flags": {},
                        "comment": {
                            "summary": [
                                {
                                    "kind": "text",
                                    "text": "the dimension that should be loaded."
                                }
                            ],
                            "blockTags": []
                        },
                        "type": {
                            "type": "intrinsic",
                            "name": "string"
                        }
                    }
                ],
                "type": {
                    "type": "reference",
                    "target": 2863,
                    "name": "GoToDimensionAction",
                    "package": "@casual-simulation/aux-common",
                    "id": 2863,
                    "qualifiedName": "GoToDimensionAction"
                }
            },
            "comment": {
                "text": "Loads the given dimension into the gridPortal portal. Triggers the @onPortalChanged shout for the gridPortal.",
                "tags": [
                    {
                        "tagName": "example",
                        "text": "```ts\nLoad the abc dimension.\nos.goToDimension(\"abc\");\n```"
                    },
                    {
                        "tagName": "dochash",
                        "text": "actions/portals"
                    },
                    {
                        "tagName": "docname",
                        "text": "os.goToDimension"
                    },
                    {
                        "tagName": "docgroup",
                        "text": "10-go-to"
                    }
                ]
            },
            "group": "10-go-to"
        },
        {
            "id": 1001,
            "order": 9999,
            "name": "os.goToURL",
            "reflection": {
                "id": 1001,
                "name": "__type",
                "variant": "signature",
                "kind": 4096,
                "flags": {},
                "comment": {
                    "summary": [
                        {
                            "kind": "text",
                            "text": "Redirects the current tab to the given URL. Useful for sending the player to another webpage or ambient experience."
                        }
                    ],
                    "blockTags": [
                        {
                            "tag": "@example",
                            "content": [
                                {
                                    "kind": "code",
                                    "text": "```ts\nSend the player to https://example.com.\nos.goToURL(\"https://example.com\");\n```"
                                }
                            ]
                        },
                        {
                            "tag": "@dochash",
                            "content": [
                                {
                                    "kind": "text",
                                    "text": "actions/portals"
                                }
                            ]
                        },
                        {
                            "tag": "@docname",
                            "content": [
                                {
                                    "kind": "text",
                                    "text": "os.goToURL"
                                }
                            ]
                        },
                        {
                            "tag": "@docgroup",
                            "content": [
                                {
                                    "kind": "text",
                                    "text": "10-go-to"
                                }
                            ]
                        }
                    ]
                },
                "sources": [
                    {
                        "fileName": "src/aux-runtime/runtime/AuxLibrary.ts",
                        "line": 7116,
                        "character": 13,
                        "url": "https://github.com/KallynGowdy/casualos/blob/56c869f96/src/aux-runtime/runtime/AuxLibrary.ts#L7116"
                    }
                ],
                "parameters": [
                    {
                        "id": 1002,
                        "name": "url",
                        "variant": "param",
                        "kind": 32768,
                        "flags": {},
                        "comment": {
                            "summary": [
                                {
                                    "kind": "text",
                                    "text": "the [URL](https://en.wikipedia.org/wiki/URL) that the player should be sent to. Usually this is a website like "
                                },
                                {
                                    "kind": "code",
                                    "text": "`https://example.com`"
                                },
                                {
                                    "kind": "text",
                                    "text": "."
                                }
                            ],
                            "blockTags": []
                        },
                        "type": {
                            "type": "intrinsic",
                            "name": "string"
                        }
                    }
                ],
                "type": {
                    "type": "reference",
                    "target": {
                        "sourceFileName": "../src/aux-common/bots/BotEvents.ts",
                        "qualifiedName": "GoToURLAction"
                    },
                    "name": "GoToURLAction",
                    "package": "@casual-simulation/aux-common"
                }
            },
            "comment": {
                "text": "Redirects the current tab to the given URL. Useful for sending the player to another webpage or ambient experience.",
                "tags": [
                    {
                        "tagName": "example",
                        "text": "```ts\nSend the player to https://example.com.\nos.goToURL(\"https://example.com\");\n```"
                    },
                    {
                        "tagName": "dochash",
                        "text": "actions/portals"
                    },
                    {
                        "tagName": "docname",
                        "text": "os.goToURL"
                    },
                    {
                        "tagName": "docgroup",
                        "text": "10-go-to"
                    }
                ]
            },
            "group": "10-go-to"
        },
        {
            "id": 1005,
            "order": 9999,
            "name": "os.openURL",
            "reflection": {
                "id": 1005,
                "name": "__type",
                "variant": "signature",
                "kind": 4096,
                "flags": {},
                "comment": {
                    "summary": [
                        {
                            "kind": "text",
                            "text": "Opens a new tab with the given URL. Useful for opening another webpage without redirecting the current tab."
                        }
                    ],
                    "blockTags": [
                        {
                            "tag": "@example",
                            "content": [
                                {
                                    "kind": "code",
                                    "text": "```ts\nOpen https://example.com in a new tab.\nos.openURL(\"https://example.com\");\n```"
                                }
                            ]
                        },
                        {
                            "tag": "@dochash",
                            "content": [
                                {
                                    "kind": "text",
                                    "text": "actions/portals"
                                }
                            ]
                        },
                        {
                            "tag": "@docname",
                            "content": [
                                {
                                    "kind": "text",
                                    "text": "os.openURL"
                                }
                            ]
                        },
                        {
                            "tag": "@docgroup",
                            "content": [
                                {
                                    "kind": "text",
                                    "text": "10-go-to"
                                }
                            ]
                        }
                    ]
                },
                "sources": [
                    {
                        "fileName": "src/aux-runtime/runtime/AuxLibrary.ts",
                        "line": 7133,
                        "character": 13,
                        "url": "https://github.com/KallynGowdy/casualos/blob/56c869f96/src/aux-runtime/runtime/AuxLibrary.ts#L7133"
                    }
                ],
                "parameters": [
                    {
                        "id": 1006,
                        "name": "url",
                        "variant": "param",
                        "kind": 32768,
                        "flags": {},
                        "comment": {
                            "summary": [
                                {
                                    "kind": "text",
                                    "text": "the [URL](https://en.wikipedia.org/wiki/URL) that the player should be sent to. Usually this is a website like "
                                },
                                {
                                    "kind": "code",
                                    "text": "`https://example.com`"
                                },
                                {
                                    "kind": "text",
                                    "text": "."
                                }
                            ],
                            "blockTags": []
                        },
                        "type": {
                            "type": "intrinsic",
                            "name": "string"
                        }
                    }
                ],
                "type": {
                    "type": "reference",
                    "target": 2873,
                    "name": "OpenURLAction",
                    "package": "@casual-simulation/aux-common",
                    "id": 2873,
                    "qualifiedName": "OpenURLAction"
                }
            },
            "comment": {
                "text": "Opens a new tab with the given URL. Useful for opening another webpage without redirecting the current tab.",
                "tags": [
                    {
                        "tagName": "example",
                        "text": "```ts\nOpen https://example.com in a new tab.\nos.openURL(\"https://example.com\");\n```"
                    },
                    {
                        "tagName": "dochash",
                        "text": "actions/portals"
                    },
                    {
                        "tagName": "docname",
                        "text": "os.openURL"
                    },
                    {
                        "tagName": "docgroup",
                        "text": "10-go-to"
                    }
                ]
            },
            "group": "10-go-to"
        },
        {
            "id": 1108,
            "order": 9999,
            "name": "os.getInputList",
            "reflection": {
                "id": 1108,
                "name": "__type",
                "variant": "signature",
                "kind": 4096,
                "flags": {},
                "comment": {
                    "summary": [
                        {
                            "kind": "text",
                            "text": "Gets the list of supported inputs. The returned strings can be used for the controller property in "
                        },
                        {
                            "kind": "text",
                            "text": "[`os.getInputState(controller, button)`](ref:os.getInputState)"
                        },
                        {
                            "kind": "text",
                            "text": " calls."
                        }
                    ],
                    "blockTags": [
                        {
                            "tag": "@example",
                            "content": [
                                {
                                    "kind": "code",
                                    "text": "```ts\nGet a list of inputs and toast them.\nconst state = os.getInputList();\nos.toast(state);\n```"
                                }
                            ]
                        },
                        {
                            "tag": "@dochash",
                            "content": [
                                {
                                    "kind": "text",
                                    "text": "actions/portals"
                                }
                            ]
                        },
                        {
                            "tag": "@docname",
                            "content": [
                                {
                                    "kind": "text",
                                    "text": "os.getInputList"
                                }
                            ]
                        },
                        {
                            "tag": "@docgroup",
                            "content": [
                                {
                                    "kind": "text",
                                    "text": "10-input"
                                }
                            ]
                        }
                    ]
                },
                "sources": [
                    {
                        "fileName": "src/aux-runtime/runtime/AuxLibrary.ts",
                        "line": 14310,
                        "character": 13,
                        "url": "https://github.com/KallynGowdy/casualos/blob/56c869f96/src/aux-runtime/runtime/AuxLibrary.ts#L14310"
                    }
                ],
                "type": {
                    "type": "array",
                    "elementType": {
                        "type": "intrinsic",
                        "name": "string"
                    }
                }
            },
            "comment": {
                "text": "Gets the list of supported inputs. The returned strings can be used for the controller property in os.getInputState calls.",
                "tags": [
                    {
                        "tagName": "example",
                        "text": "```ts\nGet a list of inputs and toast them.\nconst state = os.getInputList();\nos.toast(state);\n```"
                    },
                    {
                        "tagName": "dochash",
                        "text": "actions/portals"
                    },
                    {
                        "tagName": "docname",
                        "text": "os.getInputList"
                    },
                    {
                        "tagName": "docgroup",
                        "text": "10-input"
                    }
                ]
            },
            "group": "10-input"
        },
        {
            "id": 1103,
            "order": 9999,
            "name": "os.getInputState",
            "reflection": {
                "id": 1103,
                "name": "__type",
                "variant": "signature",
                "kind": 4096,
                "flags": {},
                "comment": {
                    "summary": [
                        {
                            "kind": "text",
                            "text": "Gets the state of the given button on the given controller."
                        }
                    ],
                    "blockTags": [
                        {
                            "tag": "@example",
                            "content": [
                                {
                                    "kind": "code",
                                    "text": "```ts\nSend a toast if the left mouse button is clicked.\nconst state = os.getInputState(\"mousePointer\", \"left\");\nif (state) {\n    os.toast(\"Left mouse button is down!\");\n}\n```"
                                }
                            ]
                        },
                        {
                            "tag": "@example",
                            "content": [
                                {
                                    "kind": "code",
                                    "text": "```ts\nSend a toast if the shift key is down.\nconst state = os.getInputState(\"keyboard\", \"Shift\");\nif (state) {\n    os.toast(\"Shift is down!\");\n}\n```"
                                }
                            ]
                        },
                        {
                            "tag": "@dochash",
                            "content": [
                                {
                                    "kind": "text",
                                    "text": "actions/portals"
                                }
                            ]
                        },
                        {
                            "tag": "@docname",
                            "content": [
                                {
                                    "kind": "text",
                                    "text": "os.getInputState"
                                }
                            ]
                        },
                        {
                            "tag": "@docgroup",
                            "content": [
                                {
                                    "kind": "text",
                                    "text": "10-input"
                                }
                            ]
                        }
                    ]
                },
                "sources": [
                    {
                        "fileName": "src/aux-runtime/runtime/AuxLibrary.ts",
                        "line": 14287,
                        "character": 13,
                        "url": "https://github.com/KallynGowdy/casualos/blob/56c869f96/src/aux-runtime/runtime/AuxLibrary.ts#L14287"
                    }
                ],
                "parameters": [
                    {
                        "id": 1104,
                        "name": "controller",
                        "variant": "param",
                        "kind": 32768,
                        "flags": {},
                        "comment": {
                            "summary": [
                                {
                                    "kind": "text",
                                    "text": "The name of the controller that should be checked.\nPossible values are:\n\n-    "
                                },
                                {
                                    "kind": "code",
                                    "text": "`mousePointer`"
                                },
                                {
                                    "kind": "text",
                                    "text": " - The mouse.\n-    "
                                },
                                {
                                    "kind": "code",
                                    "text": "`leftPointer`"
                                },
                                {
                                    "kind": "text",
                                    "text": " - The left controller.\n-    "
                                },
                                {
                                    "kind": "code",
                                    "text": "`rightPointer`"
                                },
                                {
                                    "kind": "text",
                                    "text": " - The right controller.\n-    "
                                },
                                {
                                    "kind": "code",
                                    "text": "`keyboard`"
                                },
                                {
                                    "kind": "text",
                                    "text": " - The keyboard.\n-    "
                                },
                                {
                                    "kind": "code",
                                    "text": "`touch`"
                                },
                                {
                                    "kind": "text",
                                    "text": " - The touchscreen."
                                }
                            ],
                            "blockTags": []
                        },
                        "type": {
                            "type": "intrinsic",
                            "name": "string"
                        }
                    },
                    {
                        "id": 1105,
                        "name": "button",
                        "variant": "param",
                        "kind": 32768,
                        "flags": {},
                        "comment": {
                            "summary": [
                                {
                                    "kind": "text",
                                    "text": "the name of the button that you want to get the state of.\nPossible values are:\n\n-    "
                                },
                                {
                                    "kind": "code",
                                    "text": "`left`"
                                },
                                {
                                    "kind": "text",
                                    "text": " - The left mouse button. Only available on the mouse pointer. On mobile devices this will also be the state of the first touch.\n-    "
                                },
                                {
                                    "kind": "code",
                                    "text": "`right`"
                                },
                                {
                                    "kind": "text",
                                    "text": " - The right mouse button. Only available on the mouse pointer.\n-    "
                                },
                                {
                                    "kind": "code",
                                    "text": "`middle`"
                                },
                                {
                                    "kind": "text",
                                    "text": " - The middle mouse button. Only available on the mouse pointer.\n-    "
                                },
                                {
                                    "kind": "code",
                                    "text": "`primary`"
                                },
                                {
                                    "kind": "text",
                                    "text": " - The primary controller button. Only available on the left and right pointers.\n-    "
                                },
                                {
                                    "kind": "code",
                                    "text": "`squeeze`"
                                },
                                {
                                    "kind": "text",
                                    "text": " - The squeeze controller button. Only available on the left and right pointers.\n-    "
                                },
                                {
                                    "kind": "code",
                                    "text": "`Any`"
                                },
                                {
                                    "kind": "text",
                                    "text": " Key - The button for the given key. Only available on the keyboard.\n-    "
                                },
                                {
                                    "kind": "code",
                                    "text": "`0`"
                                },
                                {
                                    "kind": "text",
                                    "text": " - The first touch. Only available on the touchscreen.\n-    "
                                },
                                {
                                    "kind": "code",
                                    "text": "`1`"
                                },
                                {
                                    "kind": "text",
                                    "text": " - The second touch. Only available on the touchscreen.\n-    "
                                },
                                {
                                    "kind": "code",
                                    "text": "`2`"
                                },
                                {
                                    "kind": "text",
                                    "text": " - The third touch. Only available on the touchscreen.\n-    "
                                },
                                {
                                    "kind": "code",
                                    "text": "`3`"
                                },
                                {
                                    "kind": "text",
                                    "text": " - The fourth touch. Only available on the touchscreen.\n-    "
                                },
                                {
                                    "kind": "code",
                                    "text": "`5`"
                                },
                                {
                                    "kind": "text",
                                    "text": " - The fifth touch. Only available on the touchscreen."
                                }
                            ],
                            "blockTags": []
                        },
                        "type": {
                            "type": "intrinsic",
                            "name": "string"
                        }
                    }
                ],
                "type": {
                    "type": "union",
                    "types": [
                        {
                            "type": "literal",
                            "value": null
                        },
                        {
                            "type": "literal",
                            "value": "down"
                        },
                        {
                            "type": "literal",
                            "value": "held"
                        }
                    ]
                }
            },
            "comment": {
                "text": "Gets the state of the given button on the given controller.",
                "tags": [
                    {
                        "tagName": "example",
                        "text": "```ts\nSend a toast if the left mouse button is clicked.\nconst state = os.getInputState(\"mousePointer\", \"left\");\nif (state) {\n    os.toast(\"Left mouse button is down!\");\n}\n```"
                    },
                    {
                        "tagName": "example",
                        "text": "```ts\nSend a toast if the shift key is down.\nconst state = os.getInputState(\"keyboard\", \"Shift\");\nif (state) {\n    os.toast(\"Shift is down!\");\n}\n```"
                    },
                    {
                        "tagName": "dochash",
                        "text": "actions/portals"
                    },
                    {
                        "tagName": "docname",
                        "text": "os.getInputState"
                    },
                    {
                        "tagName": "docgroup",
                        "text": "10-input"
                    }
                ]
            },
            "group": "10-input"
        },
        {
            "id": 1071,
            "order": 9999,
            "name": "os.getCameraPosition",
            "reflection": {
                "id": 1071,
                "name": "__type",
                "variant": "signature",
                "kind": 4096,
                "flags": {},
                "comment": {
                    "summary": [
                        {
                            "kind": "text",
                            "text": "Gets the 3D position that the player's camera is at in the given portal."
                        }
                    ],
                    "blockTags": [
                        {
                            "tag": "@example",
                            "content": [
                                {
                                    "kind": "code",
                                    "text": "```ts\nGet the position of the camera in the grid portal.\nconst position = os.getCameraPosition('grid');\n```"
                                }
                            ]
                        },
                        {
                            "tag": "@example",
                            "content": [
                                {
                                    "kind": "code",
                                    "text": "```ts\nGet the position of the camera in the miniGridPortal.\nconst position = os.getCameraPosition(\"mini\");\n```"
                                }
                            ]
                        },
                        {
                            "tag": "@dochash",
                            "content": [
                                {
                                    "kind": "text",
                                    "text": "actions/portals"
                                }
                            ]
                        },
                        {
                            "tag": "@docname",
                            "content": [
                                {
                                    "kind": "text",
                                    "text": "os.getCameraPosition"
                                }
                            ]
                        },
                        {
                            "tag": "@docgroup",
                            "content": [
                                {
                                    "kind": "text",
                                    "text": "10-positions"
                                }
                            ]
                        }
                    ]
                },
                "sources": [
                    {
                        "fileName": "src/aux-runtime/runtime/AuxLibrary.ts",
                        "line": 14071,
                        "character": 13,
                        "url": "https://github.com/KallynGowdy/casualos/blob/56c869f96/src/aux-runtime/runtime/AuxLibrary.ts#L14071"
                    }
                ],
                "parameters": [
                    {
                        "id": 1072,
                        "name": "portal",
                        "variant": "param",
                        "kind": 32768,
                        "flags": {},
                        "comment": {
                            "summary": [
                                {
                                    "kind": "text",
                                    "text": "the portal that the camera position should be retrieved for."
                                }
                            ],
                            "blockTags": []
                        },
                        "type": {
                            "type": "union",
                            "types": [
                                {
                                    "type": "literal",
                                    "value": "grid"
                                },
                                {
                                    "type": "literal",
                                    "value": "miniGrid"
                                }
                            ]
                        },
                        "defaultValue": "'grid'"
                    }
                ],
                "type": {
                    "type": "reference",
                    "target": 58,
                    "name": "Vector3",
                    "package": "@casual-simulation/aux-common",
                    "id": 58,
                    "qualifiedName": "Vector3"
                }
            },
            "comment": {
                "text": "Gets the 3D position that the player's camera is at in the given portal.",
                "tags": [
                    {
                        "tagName": "example",
                        "text": "```ts\nGet the position of the camera in the grid portal.\nconst position = os.getCameraPosition('grid');\n```"
                    },
                    {
                        "tagName": "example",
                        "text": "```ts\nGet the position of the camera in the miniGridPortal.\nconst position = os.getCameraPosition(\"mini\");\n```"
                    },
                    {
                        "tagName": "dochash",
                        "text": "actions/portals"
                    },
                    {
                        "tagName": "docname",
                        "text": "os.getCameraPosition"
                    },
                    {
                        "tagName": "docgroup",
                        "text": "10-positions"
                    }
                ]
            },
            "group": "10-positions"
        },
        {
            "id": 1075,
            "order": 9999,
            "name": "os.getCameraRotation",
            "reflection": {
                "id": 1075,
                "name": "__type",
                "variant": "signature",
                "kind": 4096,
                "flags": {},
                "comment": {
                    "summary": [
                        {
                            "kind": "text",
                            "text": "Gets the 3D rotation that the player's camera is at in the given portal."
                        }
                    ],
                    "blockTags": [
                        {
                            "tag": "@example",
                            "content": [
                                {
                                    "kind": "code",
                                    "text": "```ts\nGet the rotation of the player in the grid portal.\nconst rotation = os.getCameraRotation('grid');\n```"
                                }
                            ]
                        },
                        {
                            "tag": "@example",
                            "content": [
                                {
                                    "kind": "code",
                                    "text": "```ts\nGet the rotation of the player in the miniGridPortal.\nconst rotation = os.getCameraRotation(\"mini\");\n```"
                                }
                            ]
                        },
                        {
                            "tag": "@dochash",
                            "content": [
                                {
                                    "kind": "text",
                                    "text": "actions/portals"
                                }
                            ]
                        },
                        {
                            "tag": "@docname",
                            "content": [
                                {
                                    "kind": "text",
                                    "text": "os.getCameraRotation"
                                }
                            ]
                        },
                        {
                            "tag": "@docgroup",
                            "content": [
                                {
                                    "kind": "text",
                                    "text": "10-positions"
                                }
                            ]
                        }
                    ]
                },
                "sources": [
                    {
                        "fileName": "src/aux-runtime/runtime/AuxLibrary.ts",
                        "line": 14099,
                        "character": 13,
                        "url": "https://github.com/KallynGowdy/casualos/blob/56c869f96/src/aux-runtime/runtime/AuxLibrary.ts#L14099"
                    }
                ],
                "parameters": [
                    {
                        "id": 1076,
                        "name": "portal",
                        "variant": "param",
                        "kind": 32768,
                        "flags": {},
                        "comment": {
                            "summary": [
                                {
                                    "kind": "text",
                                    "text": "the portal that the camera rotation should be retrieved for."
                                }
                            ],
                            "blockTags": []
                        },
                        "type": {
                            "type": "union",
                            "types": [
                                {
                                    "type": "literal",
                                    "value": "grid"
                                },
                                {
                                    "type": "literal",
                                    "value": "miniGrid"
                                }
                            ]
                        },
                        "defaultValue": "'grid'"
                    }
                ],
                "type": {
                    "type": "reflection",
                    "declaration": {
                        "id": 1077,
                        "name": "__type",
                        "variant": "declaration",
                        "kind": 65536,
                        "flags": {},
                        "children": [
                            {
                                "id": 1078,
                                "name": "x",
                                "variant": "declaration",
                                "kind": 1024,
                                "flags": {},
                                "sources": [
                                    {
                                        "fileName": "src/aux-runtime/runtime/AuxLibrary.ts",
                                        "line": 14100,
                                        "character": 8,
                                        "url": "https://github.com/KallynGowdy/casualos/blob/56c869f96/src/aux-runtime/runtime/AuxLibrary.ts#L14100"
                                    }
                                ],
                                "type": {
                                    "type": "intrinsic",
                                    "name": "number"
                                }
                            },
                            {
                                "id": 1079,
                                "name": "y",
                                "variant": "declaration",
                                "kind": 1024,
                                "flags": {},
                                "sources": [
                                    {
                                        "fileName": "src/aux-runtime/runtime/AuxLibrary.ts",
                                        "line": 14101,
                                        "character": 8,
                                        "url": "https://github.com/KallynGowdy/casualos/blob/56c869f96/src/aux-runtime/runtime/AuxLibrary.ts#L14101"
                                    }
                                ],
                                "type": {
                                    "type": "intrinsic",
                                    "name": "number"
                                }
                            },
                            {
                                "id": 1080,
                                "name": "z",
                                "variant": "declaration",
                                "kind": 1024,
                                "flags": {},
                                "sources": [
                                    {
                                        "fileName": "src/aux-runtime/runtime/AuxLibrary.ts",
                                        "line": 14102,
                                        "character": 8,
                                        "url": "https://github.com/KallynGowdy/casualos/blob/56c869f96/src/aux-runtime/runtime/AuxLibrary.ts#L14102"
                                    }
                                ],
                                "type": {
                                    "type": "intrinsic",
                                    "name": "number"
                                }
                            }
                        ],
                        "groups": [
                            {
                                "title": "Properties",
                                "children": [
                                    1078,
                                    1079,
                                    1080
                                ]
                            }
                        ],
                        "sources": [
                            {
                                "fileName": "src/aux-runtime/runtime/AuxLibrary.ts",
                                "line": 14099,
                                "character": 70,
                                "url": "https://github.com/KallynGowdy/casualos/blob/56c869f96/src/aux-runtime/runtime/AuxLibrary.ts#L14099"
                            }
                        ]
                    }
                }
            },
            "comment": {
                "text": "Gets the 3D rotation that the player's camera is at in the given portal.",
                "tags": [
                    {
                        "tagName": "example",
                        "text": "```ts\nGet the rotation of the player in the grid portal.\nconst rotation = os.getCameraRotation('grid');\n```"
                    },
                    {
                        "tagName": "example",
                        "text": "```ts\nGet the rotation of the player in the miniGridPortal.\nconst rotation = os.getCameraRotation(\"mini\");\n```"
                    },
                    {
                        "tagName": "dochash",
                        "text": "actions/portals"
                    },
                    {
                        "tagName": "docname",
                        "text": "os.getCameraRotation"
                    },
                    {
                        "tagName": "docgroup",
                        "text": "10-positions"
                    }
                ]
            },
            "group": "10-positions"
        },
        {
            "id": 1083,
            "order": 9999,
            "name": "os.getFocusPoint",
            "reflection": {
                "id": 1083,
                "name": "__type",
                "variant": "signature",
                "kind": 4096,
                "flags": {},
                "comment": {
                    "summary": [
                        {
                            "kind": "text",
                            "text": "Gets the 3D position that the player's camera is focusing on in the given portal.\n\nThis is the same point that is highlighted when "
                        },
                        {
                            "kind": "text",
                            "text": "[`#portalShowFocusPoint`](tags:portalShowFocusPoint)"
                        },
                        {
                            "kind": "text",
                            "text": " is enabled for a portal."
                        }
                    ],
                    "blockTags": [
                        {
                            "tag": "@example",
                            "content": [
                                {
                                    "kind": "code",
                                    "text": "```ts\nGet the focus point of the player in the grid portal.\nconst focusPoint = os.getFocusPoint('grid');\n```"
                                }
                            ]
                        },
                        {
                            "tag": "@example",
                            "content": [
                                {
                                    "kind": "code",
                                    "text": "```ts\nGet the focus point of the player in the miniGridPortal.\nconst focusPoint = os.getFocusPoint(\"mini\");\n```"
                                }
                            ]
                        },
                        {
                            "tag": "@dochash",
                            "content": [
                                {
                                    "kind": "text",
                                    "text": "actions/portals"
                                }
                            ]
                        },
                        {
                            "tag": "@docname",
                            "content": [
                                {
                                    "kind": "text",
                                    "text": "os.getFocusPoint"
                                }
                            ]
                        },
                        {
                            "tag": "@docgroup",
                            "content": [
                                {
                                    "kind": "text",
                                    "text": "10-positions"
                                }
                            ]
                        }
                    ]
                },
                "sources": [
                    {
                        "fileName": "src/aux-runtime/runtime/AuxLibrary.ts",
                        "line": 14137,
                        "character": 13,
                        "url": "https://github.com/KallynGowdy/casualos/blob/56c869f96/src/aux-runtime/runtime/AuxLibrary.ts#L14137"
                    }
                ],
                "parameters": [
                    {
                        "id": 1084,
                        "name": "portal",
                        "variant": "param",
                        "kind": 32768,
                        "flags": {},
                        "comment": {
                            "summary": [
                                {
                                    "kind": "text",
                                    "text": "the portal that the camera focus point should be retrieved for."
                                }
                            ],
                            "blockTags": []
                        },
                        "type": {
                            "type": "union",
                            "types": [
                                {
                                    "type": "literal",
                                    "value": "grid"
                                },
                                {
                                    "type": "literal",
                                    "value": "miniGrid"
                                }
                            ]
                        },
                        "defaultValue": "'grid'"
                    }
                ],
                "type": {
                    "type": "reference",
                    "target": 58,
                    "name": "Vector3",
                    "package": "@casual-simulation/aux-common",
                    "id": 58,
                    "qualifiedName": "Vector3"
                }
            },
            "comment": {
                "text": "Gets the 3D position that the player's camera is focusing on in the given portal.\n\nThis is the same point that is highlighted when portalShowFocusPoint is enabled for a portal.",
                "tags": [
                    {
                        "tagName": "example",
                        "text": "```ts\nGet the focus point of the player in the grid portal.\nconst focusPoint = os.getFocusPoint('grid');\n```"
                    },
                    {
                        "tagName": "example",
                        "text": "```ts\nGet the focus point of the player in the miniGridPortal.\nconst focusPoint = os.getFocusPoint(\"mini\");\n```"
                    },
                    {
                        "tagName": "dochash",
                        "text": "actions/portals"
                    },
                    {
                        "tagName": "docname",
                        "text": "os.getFocusPoint"
                    },
                    {
                        "tagName": "docgroup",
                        "text": "10-positions"
                    }
                ]
            },
            "group": "10-positions"
        },
        {
            "id": 1099,
            "order": 9999,
            "name": "os.getPointerDirection",
            "reflection": {
                "id": 1099,
                "name": "__type",
                "variant": "signature",
                "kind": 4096,
                "flags": {},
                "comment": {
                    "summary": [
                        {
                            "kind": "text",
                            "text": "Gets the direction that the given pointer is pointed in.\n\nCan be combined with "
                        },
                        {
                            "kind": "text",
                            "text": "[`math.intersectPlane(origin, direction, planeNormal, planeOrigin)`](ref:math.intersectPlane)"
                        },
                        {
                            "kind": "text",
                            "text": " to find where on the ground the pointer is pointing."
                        }
                    ],
                    "blockTags": [
                        {
                            "tag": "@example",
                            "content": [
                                {
                                    "kind": "code",
                                    "text": "```ts\nGet the direction of the mouse pointer.\nconst direction = os.getPointerDirection(\"mouse\");\n```"
                                }
                            ]
                        },
                        {
                            "tag": "@example",
                            "content": [
                                {
                                    "kind": "code",
                                    "text": "```ts\nGet the direction of the left pointer.\nconst direction = os.getPointerDirection(\"left\");\n```"
                                }
                            ]
                        },
                        {
                            "tag": "@example",
                            "content": [
                                {
                                    "kind": "code",
                                    "text": "```ts\nFind where the mouse is pointing on the ground.\nconst position = os.getPointerPosition();\nconst direction = os.getPointerDirection();\nconst groundPosition = math.intersectPlane(position, direction);\n```"
                                }
                            ]
                        },
                        {
                            "tag": "@dochash",
                            "content": [
                                {
                                    "kind": "text",
                                    "text": "actions/portals"
                                }
                            ]
                        },
                        {
                            "tag": "@docname",
                            "content": [
                                {
                                    "kind": "text",
                                    "text": "os.getPointerDirection"
                                }
                            ]
                        },
                        {
                            "tag": "@docgroup",
                            "content": [
                                {
                                    "kind": "text",
                                    "text": "10-positions"
                                }
                            ]
                        }
                    ]
                },
                "sources": [
                    {
                        "fileName": "src/aux-runtime/runtime/AuxLibrary.ts",
                        "line": 14234,
                        "character": 13,
                        "url": "https://github.com/KallynGowdy/casualos/blob/56c869f96/src/aux-runtime/runtime/AuxLibrary.ts#L14234"
                    }
                ],
                "parameters": [
                    {
                        "id": 1100,
                        "name": "pointer",
                        "variant": "param",
                        "kind": 32768,
                        "flags": {},
                        "comment": {
                            "summary": [
                                {
                                    "kind": "text",
                                    "text": "the pointer that the direction should be retrieved for."
                                }
                            ],
                            "blockTags": []
                        },
                        "type": {
                            "type": "union",
                            "types": [
                                {
                                    "type": "literal",
                                    "value": "left"
                                },
                                {
                                    "type": "literal",
                                    "value": "right"
                                },
                                {
                                    "type": "literal",
                                    "value": "mouse"
                                }
                            ]
                        },
                        "defaultValue": "'mouse'"
                    }
                ],
                "type": {
                    "type": "reference",
                    "target": 58,
                    "name": "Vector3",
                    "package": "@casual-simulation/aux-common",
                    "id": 58,
                    "qualifiedName": "Vector3"
                }
            },
            "comment": {
                "text": "Gets the direction that the given pointer is pointed in.\n\nCan be combined with math.intersectPlane to find where on the ground the pointer is pointing.",
                "tags": [
                    {
                        "tagName": "example",
                        "text": "```ts\nGet the direction of the mouse pointer.\nconst direction = os.getPointerDirection(\"mouse\");\n```"
                    },
                    {
                        "tagName": "example",
                        "text": "```ts\nGet the direction of the left pointer.\nconst direction = os.getPointerDirection(\"left\");\n```"
                    },
                    {
                        "tagName": "example",
                        "text": "```ts\nFind where the mouse is pointing on the ground.\nconst position = os.getPointerPosition();\nconst direction = os.getPointerDirection();\nconst groundPosition = math.intersectPlane(position, direction);\n```"
                    },
                    {
                        "tagName": "dochash",
                        "text": "actions/portals"
                    },
                    {
                        "tagName": "docname",
                        "text": "os.getPointerDirection"
                    },
                    {
                        "tagName": "docgroup",
                        "text": "10-positions"
                    }
                ]
            },
            "group": "10-positions"
        },
        {
            "id": 1087,
            "order": 9999,
            "name": "os.getPointerPosition",
            "reflection": {
                "id": 1087,
                "name": "__type",
                "variant": "signature",
                "kind": 4096,
                "flags": {},
                "comment": {
                    "summary": [
                        {
                            "kind": "text",
                            "text": "Gets the position that the given pointer is at."
                        }
                    ],
                    "blockTags": [
                        {
                            "tag": "@example",
                            "content": [
                                {
                                    "kind": "code",
                                    "text": "```ts\nGet the position of the mouse pointer.\nconst position = os.getPointerPosition(\"mouse\");\n```"
                                }
                            ]
                        },
                        {
                            "tag": "@example",
                            "content": [
                                {
                                    "kind": "code",
                                    "text": "```ts\nGet the position of the left pointer.\nconst position = os.getPointerPosition(\"left\");\n```"
                                }
                            ]
                        },
                        {
                            "tag": "@dochash",
                            "content": [
                                {
                                    "kind": "text",
                                    "text": "actions/portals"
                                }
                            ]
                        },
                        {
                            "tag": "@docname",
                            "content": [
                                {
                                    "kind": "text",
                                    "text": "os.getPointerPosition"
                                }
                            ]
                        },
                        {
                            "tag": "@docgroup",
                            "content": [
                                {
                                    "kind": "text",
                                    "text": "10-positions"
                                }
                            ]
                        }
                    ]
                },
                "sources": [
                    {
                        "fileName": "src/aux-runtime/runtime/AuxLibrary.ts",
                        "line": 14164,
                        "character": 13,
                        "url": "https://github.com/KallynGowdy/casualos/blob/56c869f96/src/aux-runtime/runtime/AuxLibrary.ts#L14164"
                    }
                ],
                "parameters": [
                    {
                        "id": 1088,
                        "name": "pointer",
                        "variant": "param",
                        "kind": 32768,
                        "flags": {},
                        "comment": {
                            "summary": [
                                {
                                    "kind": "text",
                                    "text": "the pointer that the position should be retrieved for."
                                }
                            ],
                            "blockTags": []
                        },
                        "type": {
                            "type": "union",
                            "types": [
                                {
                                    "type": "literal",
                                    "value": "left"
                                },
                                {
                                    "type": "literal",
                                    "value": "right"
                                },
                                {
                                    "type": "literal",
                                    "value": "mouse"
                                }
                            ]
                        },
                        "defaultValue": "'mouse'"
                    }
                ],
                "type": {
                    "type": "reference",
                    "target": 58,
                    "name": "Vector3",
                    "package": "@casual-simulation/aux-common",
                    "id": 58,
                    "qualifiedName": "Vector3"
                }
            },
            "comment": {
                "text": "Gets the position that the given pointer is at.",
                "tags": [
                    {
                        "tagName": "example",
                        "text": "```ts\nGet the position of the mouse pointer.\nconst position = os.getPointerPosition(\"mouse\");\n```"
                    },
                    {
                        "tagName": "example",
                        "text": "```ts\nGet the position of the left pointer.\nconst position = os.getPointerPosition(\"left\");\n```"
                    },
                    {
                        "tagName": "dochash",
                        "text": "actions/portals"
                    },
                    {
                        "tagName": "docname",
                        "text": "os.getPointerPosition"
                    },
                    {
                        "tagName": "docgroup",
                        "text": "10-positions"
                    }
                ]
            },
            "group": "10-positions"
        },
        {
            "id": 1091,
            "order": 9999,
            "name": "os.getPointerRotation",
            "reflection": {
                "id": 1091,
                "name": "__type",
                "variant": "signature",
                "kind": 4096,
                "flags": {},
                "comment": {
                    "summary": [
                        {
                            "kind": "text",
                            "text": "Gets the rotation (in euler angles) that the given pointer is at."
                        }
                    ],
                    "blockTags": [
                        {
                            "tag": "@example",
                            "content": [
                                {
                                    "kind": "code",
                                    "text": "```ts\nGet the rotation of the mouse pointer.\nconst rotation = os.getPointerRotation(\"mouse\");\n```"
                                }
                            ]
                        },
                        {
                            "tag": "@example",
                            "content": [
                                {
                                    "kind": "code",
                                    "text": "```ts\nGet the rotation of the left pointer.\nconst rotation = os.getPointerRotation(\"left\");\n```"
                                }
                            ]
                        },
                        {
                            "tag": "@dochash",
                            "content": [
                                {
                                    "kind": "text",
                                    "text": "actions/portals"
                                }
                            ]
                        },
                        {
                            "tag": "@docname",
                            "content": [
                                {
                                    "kind": "text",
                                    "text": "os.getPointerRotation"
                                }
                            ]
                        },
                        {
                            "tag": "@docgroup",
                            "content": [
                                {
                                    "kind": "text",
                                    "text": "10-positions"
                                }
                            ]
                        }
                    ]
                },
                "sources": [
                    {
                        "fileName": "src/aux-runtime/runtime/AuxLibrary.ts",
                        "line": 14193,
                        "character": 13,
                        "url": "https://github.com/KallynGowdy/casualos/blob/56c869f96/src/aux-runtime/runtime/AuxLibrary.ts#L14193"
                    }
                ],
                "parameters": [
                    {
                        "id": 1092,
                        "name": "pointer",
                        "variant": "param",
                        "kind": 32768,
                        "flags": {},
                        "comment": {
                            "summary": [
                                {
                                    "kind": "text",
                                    "text": "the pointer that the rotation should be retrieved for."
                                }
                            ],
                            "blockTags": []
                        },
                        "type": {
                            "type": "union",
                            "types": [
                                {
                                    "type": "literal",
                                    "value": "left"
                                },
                                {
                                    "type": "literal",
                                    "value": "right"
                                },
                                {
                                    "type": "literal",
                                    "value": "mouse"
                                }
                            ]
                        },
                        "defaultValue": "'mouse'"
                    }
                ],
                "type": {
                    "type": "reflection",
                    "declaration": {
                        "id": 1093,
                        "name": "__type",
                        "variant": "declaration",
                        "kind": 65536,
                        "flags": {},
                        "children": [
                            {
                                "id": 1094,
                                "name": "x",
                                "variant": "declaration",
                                "kind": 1024,
                                "flags": {},
                                "sources": [
                                    {
                                        "fileName": "src/aux-runtime/runtime/AuxLibrary.ts",
                                        "line": 14195,
                                        "character": 9,
                                        "url": "https://github.com/KallynGowdy/casualos/blob/56c869f96/src/aux-runtime/runtime/AuxLibrary.ts#L14195"
                                    }
                                ],
                                "type": {
                                    "type": "intrinsic",
                                    "name": "number"
                                }
                            },
                            {
                                "id": 1095,
                                "name": "y",
                                "variant": "declaration",
                                "kind": 1024,
                                "flags": {},
                                "sources": [
                                    {
                                        "fileName": "src/aux-runtime/runtime/AuxLibrary.ts",
                                        "line": 14195,
                                        "character": 20,
                                        "url": "https://github.com/KallynGowdy/casualos/blob/56c869f96/src/aux-runtime/runtime/AuxLibrary.ts#L14195"
                                    }
                                ],
                                "type": {
                                    "type": "intrinsic",
                                    "name": "number"
                                }
                            },
                            {
                                "id": 1096,
                                "name": "z",
                                "variant": "declaration",
                                "kind": 1024,
                                "flags": {},
                                "sources": [
                                    {
                                        "fileName": "src/aux-runtime/runtime/AuxLibrary.ts",
                                        "line": 14195,
                                        "character": 31,
                                        "url": "https://github.com/KallynGowdy/casualos/blob/56c869f96/src/aux-runtime/runtime/AuxLibrary.ts#L14195"
                                    }
                                ],
                                "type": {
                                    "type": "intrinsic",
                                    "name": "number"
                                }
                            }
                        ],
                        "groups": [
                            {
                                "title": "Properties",
                                "children": [
                                    1094,
                                    1095,
                                    1096
                                ]
                            }
                        ],
                        "sources": [
                            {
                                "fileName": "src/aux-runtime/runtime/AuxLibrary.ts",
                                "line": 14195,
                                "character": 7,
                                "url": "https://github.com/KallynGowdy/casualos/blob/56c869f96/src/aux-runtime/runtime/AuxLibrary.ts#L14195"
                            }
                        ]
                    }
                }
            },
            "comment": {
                "text": "Gets the rotation (in euler angles) that the given pointer is at.",
                "tags": [
                    {
                        "tagName": "example",
                        "text": "```ts\nGet the rotation of the mouse pointer.\nconst rotation = os.getPointerRotation(\"mouse\");\n```"
                    },
                    {
                        "tagName": "example",
                        "text": "```ts\nGet the rotation of the left pointer.\nconst rotation = os.getPointerRotation(\"left\");\n```"
                    },
                    {
                        "tagName": "dochash",
                        "text": "actions/portals"
                    },
                    {
                        "tagName": "docname",
                        "text": "os.getPointerRotation"
                    },
                    {
                        "tagName": "docgroup",
                        "text": "10-positions"
                    }
                ]
            },
            "group": "10-positions"
        },
        {
            "id": 823,
            "order": 9999,
            "name": "os.disablePointOfView",
            "reflection": {
                "id": 823,
                "name": "__type",
                "variant": "signature",
                "kind": 4096,
                "flags": {},
                "comment": {
                    "summary": [
                        {
                            "kind": "text",
                            "text": "Disables Point-of-View mode on the device. This will return the camera to its original position, set the camera type back to what it was before, and change the camera controls to the defaults."
                        }
                    ],
                    "blockTags": [
                        {
                            "tag": "@example",
                            "content": [
                                {
                                    "kind": "code",
                                    "text": "```ts\nDisable POV mode.\nos.disablePointOfView();\n```"
                                }
                            ]
                        },
                        {
                            "tag": "@dochash",
                            "content": [
                                {
                                    "kind": "text",
                                    "text": "actions/portals"
                                }
                            ]
                        },
                        {
                            "tag": "@docname",
                            "content": [
                                {
                                    "kind": "text",
                                    "text": "os.disablePointOfView"
                                }
                            ]
                        },
                        {
                            "tag": "@docgroup",
                            "content": [
                                {
                                    "kind": "text",
                                    "text": "10-pov"
                                }
                            ]
                        }
                    ]
                },
                "sources": [
                    {
                        "fileName": "src/aux-runtime/runtime/AuxLibrary.ts",
                        "line": 5857,
                        "character": 13,
                        "url": "https://github.com/KallynGowdy/casualos/blob/56c869f96/src/aux-runtime/runtime/AuxLibrary.ts#L5857"
                    }
                ],
                "type": {
                    "type": "reference",
                    "target": 3087,
                    "name": "EnablePOVAction",
                    "package": "@casual-simulation/aux-common",
                    "id": 3087,
                    "qualifiedName": "EnablePOVAction"
                }
            },
            "comment": {
                "text": "Disables Point-of-View mode on the device. This will return the camera to its original position, set the camera type back to what it was before, and change the camera controls to the defaults.",
                "tags": [
                    {
                        "tagName": "example",
                        "text": "```ts\nDisable POV mode.\nos.disablePointOfView();\n```"
                    },
                    {
                        "tagName": "dochash",
                        "text": "actions/portals"
                    },
                    {
                        "tagName": "docname",
                        "text": "os.disablePointOfView"
                    },
                    {
                        "tagName": "docgroup",
                        "text": "10-pov"
                    }
                ]
            },
            "group": "10-pov"
        },
        {
            "id": 814,
            "order": 9999,
            "name": "os.enablePointOfView",
            "reflection": {
                "id": 814,
                "name": "__type",
                "variant": "signature",
                "kind": 4096,
                "flags": {},
                "comment": {
                    "summary": [
                        {
                            "kind": "text",
                            "text": "Enables Point-of-View mode on the device.\nUseful for getting a \"ground level\" view in the grid portal.\nThis will move the camera to the given position, set the camera type to "
                        },
                        {
                            "kind": "code",
                            "text": "`perspective`"
                        },
                        {
                            "kind": "text",
                            "text": ", and change the camera controls so that dragging the screen causes the camera to look around.\n\nIt is not possible to manually move the camera in this mode, however it is still possible to use "
                        },
                        {
                            "kind": "text",
                            "text": "[`os.focusOn(bot, options)`](ref:os.focusOn-bot)"
                        },
                        {
                            "kind": "text",
                            "text": " to move the camera."
                        }
                    ],
                    "blockTags": [
                        {
                            "tag": "@example",
                            "content": [
                                {
                                    "kind": "code",
                                    "text": "```ts\nEnable POV mode.\nos.enablePointOfView();\n```"
                                }
                            ]
                        },
                        {
                            "tag": "@example",
                            "content": [
                                {
                                    "kind": "code",
                                    "text": "```ts\nEnable POV mode at `(5, 0, 3)`.\nos.enablePointOfView({\n    x: 5,\n    y: 0,\n    z: 3\n});\n```"
                                }
                            ]
                        },
                        {
                            "tag": "@example",
                            "content": [
                                {
                                    "kind": "code",
                                    "text": "```ts\nEnable POV mode with the IMU.\nos.enablePointOfView(undefined, true);\n```"
                                }
                            ]
                        },
                        {
                            "tag": "@dochash",
                            "content": [
                                {
                                    "kind": "text",
                                    "text": "actions/portals"
                                }
                            ]
                        },
                        {
                            "tag": "@docname",
                            "content": [
                                {
                                    "kind": "text",
                                    "text": "os.enablePointOfView"
                                }
                            ]
                        },
                        {
                            "tag": "@docgroup",
                            "content": [
                                {
                                    "kind": "text",
                                    "text": "10-pov"
                                }
                            ]
                        }
                    ]
                },
                "sources": [
                    {
                        "fileName": "src/aux-runtime/runtime/AuxLibrary.ts",
                        "line": 5840,
                        "character": 13,
                        "url": "https://github.com/KallynGowdy/casualos/blob/56c869f96/src/aux-runtime/runtime/AuxLibrary.ts#L5840"
                    }
                ],
                "parameters": [
                    {
                        "id": 815,
                        "name": "center",
                        "variant": "param",
                        "kind": 32768,
                        "flags": {},
                        "comment": {
                            "summary": [
                                {
                                    "kind": "text",
                                    "text": "the position that the camera should be placed at. If not specified, then the camera will be placed at "
                                },
                                {
                                    "kind": "code",
                                    "text": "`(0, 0, 0)`"
                                },
                                {
                                    "kind": "text",
                                    "text": "."
                                }
                            ],
                            "blockTags": []
                        },
                        "type": {
                            "type": "reflection",
                            "declaration": {
                                "id": 816,
                                "name": "__type",
                                "variant": "declaration",
                                "kind": 65536,
                                "flags": {},
                                "children": [
                                    {
                                        "id": 817,
                                        "name": "x",
                                        "variant": "declaration",
                                        "kind": 1024,
                                        "flags": {},
                                        "sources": [
                                            {
                                                "fileName": "src/aux-runtime/runtime/AuxLibrary.ts",
                                                "line": 5841,
                                                "character": 18,
                                                "url": "https://github.com/KallynGowdy/casualos/blob/56c869f96/src/aux-runtime/runtime/AuxLibrary.ts#L5841"
                                            }
                                        ],
                                        "type": {
                                            "type": "intrinsic",
                                            "name": "number"
                                        }
                                    },
                                    {
                                        "id": 818,
                                        "name": "y",
                                        "variant": "declaration",
                                        "kind": 1024,
                                        "flags": {},
                                        "sources": [
                                            {
                                                "fileName": "src/aux-runtime/runtime/AuxLibrary.ts",
                                                "line": 5841,
                                                "character": 29,
                                                "url": "https://github.com/KallynGowdy/casualos/blob/56c869f96/src/aux-runtime/runtime/AuxLibrary.ts#L5841"
                                            }
                                        ],
                                        "type": {
                                            "type": "intrinsic",
                                            "name": "number"
                                        }
                                    },
                                    {
                                        "id": 819,
                                        "name": "z",
                                        "variant": "declaration",
                                        "kind": 1024,
                                        "flags": {},
                                        "sources": [
                                            {
                                                "fileName": "src/aux-runtime/runtime/AuxLibrary.ts",
                                                "line": 5841,
                                                "character": 40,
                                                "url": "https://github.com/KallynGowdy/casualos/blob/56c869f96/src/aux-runtime/runtime/AuxLibrary.ts#L5841"
                                            }
                                        ],
                                        "type": {
                                            "type": "intrinsic",
                                            "name": "number"
                                        }
                                    }
                                ],
                                "groups": [
                                    {
                                        "title": "Properties",
                                        "children": [
                                            817,
                                            818,
                                            819
                                        ]
                                    }
                                ],
                                "sources": [
                                    {
                                        "fileName": "src/aux-runtime/runtime/AuxLibrary.ts",
                                        "line": 5841,
                                        "character": 16,
                                        "url": "https://github.com/KallynGowdy/casualos/blob/56c869f96/src/aux-runtime/runtime/AuxLibrary.ts#L5841"
                                    }
                                ]
                            }
                        },
                        "defaultValue": "..."
                    },
                    {
                        "id": 820,
                        "name": "imu",
                        "variant": "param",
                        "kind": 32768,
                        "flags": {
                            "isOptional": true
                        },
                        "comment": {
                            "summary": [
                                {
                                    "kind": "text",
                                    "text": "whether the imuPortal should be used to control the camera rotation while in Point-of-View mode."
                                }
                            ],
                            "blockTags": []
                        },
                        "type": {
                            "type": "intrinsic",
                            "name": "boolean"
                        }
                    }
                ],
                "type": {
                    "type": "reference",
                    "target": 3087,
                    "name": "EnablePOVAction",
                    "package": "@casual-simulation/aux-common",
                    "id": 3087,
                    "qualifiedName": "EnablePOVAction"
                }
            },
            "comment": {
                "text": "Enables Point-of-View mode on the device.\nUseful for getting a \"ground level\" view in the grid portal.\nThis will move the camera to the given position, set the camera type to `perspective`, and change the camera controls so that dragging the screen causes the camera to look around.\n\nIt is not possible to manually move the camera in this mode, however it is still possible to use os.focusOn-bot to move the camera.",
                "tags": [
                    {
                        "tagName": "example",
                        "text": "```ts\nEnable POV mode.\nos.enablePointOfView();\n```"
                    },
                    {
                        "tagName": "example",
                        "text": "```ts\nEnable POV mode at `(5, 0, 3)`.\nos.enablePointOfView({\n    x: 5,\n    y: 0,\n    z: 3\n});\n```"
                    },
                    {
                        "tagName": "example",
                        "text": "```ts\nEnable POV mode with the IMU.\nos.enablePointOfView(undefined, true);\n```"
                    },
                    {
                        "tagName": "dochash",
                        "text": "actions/portals"
                    },
                    {
                        "tagName": "docname",
                        "text": "os.enablePointOfView"
                    },
                    {
                        "tagName": "docgroup",
                        "text": "10-pov"
                    }
                ]
            },
            "group": "10-pov"
        },
        {
            "id": 1452,
            "order": 9999,
            "name": "os.calculateRayFromCamera",
            "reflection": {
                "id": 1452,
                "name": "__type",
                "variant": "signature",
                "kind": 4096,
                "flags": {},
                "comment": {
                    "summary": [
                        {
                            "kind": "text",
                            "text": "Calculates the ray that starts at the given portal camera and travels along the path emanating from the given viewport position.\nReturns a promise that resolves with information about the calculated ray."
                        }
                    ],
                    "blockTags": [
                        {
                            "tag": "@example",
                            "content": [
                                {
                                    "kind": "code",
                                    "text": "```ts\nFind the ray that passes through the center of the screen\nconst ray = await os.calculateRayFromCamera(\"grid\", new Vector2(0, 0));\nos.toast('Calculated ray: ' + ray);\n```"
                                }
                            ]
                        },
                        {
                            "tag": "@example",
                            "content": [
                                {
                                    "kind": "code",
                                    "text": "```ts\nFind the ray that passes through the left-center edge of the screen\nconst ray = await os.raycastFromCamera(\"grid\", new Vector2(-1, 0));\nos.toast('Calculated ray: ' + ray);\n```"
                                }
                            ]
                        },
                        {
                            "tag": "@dochash",
                            "content": [
                                {
                                    "kind": "text",
                                    "text": "actions/portals"
                                }
                            ]
                        },
                        {
                            "tag": "@docname",
                            "content": [
                                {
                                    "kind": "text",
                                    "text": "os.calculateRayFromCamera"
                                }
                            ]
                        },
                        {
                            "tag": "@docgroup",
                            "content": [
                                {
                                    "kind": "text",
                                    "text": "10-raycast"
                                }
                            ]
                        }
                    ]
                },
                "sources": [
                    {
                        "fileName": "src/aux-runtime/runtime/AuxLibrary.ts",
                        "line": 9296,
                        "character": 13,
                        "url": "https://github.com/KallynGowdy/casualos/blob/56c869f96/src/aux-runtime/runtime/AuxLibrary.ts#L9296"
                    }
                ],
                "parameters": [
                    {
                        "id": 1453,
                        "name": "portal",
                        "variant": "param",
                        "kind": 32768,
                        "flags": {},
                        "comment": {
                            "summary": [
                                {
                                    "kind": "text",
                                    "text": "the name of the portal that should be tested."
                                }
                            ],
                            "blockTags": []
                        },
                        "type": {
                            "type": "union",
                            "types": [
                                {
                                    "type": "literal",
                                    "value": "map"
                                },
                                {
                                    "type": "literal",
                                    "value": "grid"
                                },
                                {
                                    "type": "literal",
                                    "value": "miniGrid"
                                },
                                {
                                    "type": "literal",
                                    "value": "miniMap"
                                }
                            ]
                        }
                    },
                    {
                        "id": 1454,
                        "name": "viewportCoordinates",
                        "variant": "param",
                        "kind": 32768,
                        "flags": {},
                        "comment": {
                            "summary": [
                                {
                                    "kind": "text",
                                    "text": "the 2D viewport position that the ray should start at.\nViewport positions locate a specific point on the image that the camera produces.\n"
                                },
                                {
                                    "kind": "code",
                                    "text": "`(X: 0, Y: 0)`"
                                },
                                {
                                    "kind": "text",
                                    "text": " represents the center of the camera while "
                                },
                                {
                                    "kind": "code",
                                    "text": "`(X: -1, Y: -1)`"
                                },
                                {
                                    "kind": "text",
                                    "text": " represents the lower left corner and "
                                },
                                {
                                    "kind": "code",
                                    "text": "`(X: 1, Y: 1)`"
                                },
                                {
                                    "kind": "text",
                                    "text": " represents the upper right corner."
                                }
                            ],
                            "blockTags": []
                        },
                        "type": {
                            "type": "reference",
                            "target": 1,
                            "name": "Vector2",
                            "package": "@casual-simulation/aux-common",
                            "id": 1,
                            "qualifiedName": "Vector2"
                        }
                    }
                ],
                "type": {
                    "type": "reference",
                    "target": {
                        "sourceFileName": "node_modules/typescript/lib/lib.es5.d.ts",
                        "qualifiedName": "Promise"
                    },
                    "typeArguments": [
                        {
                            "type": "reference",
                            "target": 2140,
                            "name": "RaycastRay",
                            "package": "@casual-simulation/aux-runtime",
                            "id": 2140,
                            "qualifiedName": "RaycastRay"
                        }
                    ],
                    "name": "Promise",
                    "package": "typescript"
                }
            },
            "comment": {
                "text": "Calculates the ray that starts at the given portal camera and travels along the path emanating from the given viewport position.\nReturns a promise that resolves with information about the calculated ray.",
                "tags": [
                    {
                        "tagName": "example",
                        "text": "```ts\nFind the ray that passes through the center of the screen\nconst ray = await os.calculateRayFromCamera(\"grid\", new Vector2(0, 0));\nos.toast('Calculated ray: ' + ray);\n```"
                    },
                    {
                        "tagName": "example",
                        "text": "```ts\nFind the ray that passes through the left-center edge of the screen\nconst ray = await os.raycastFromCamera(\"grid\", new Vector2(-1, 0));\nos.toast('Calculated ray: ' + ray);\n```"
                    },
                    {
                        "tagName": "dochash",
                        "text": "actions/portals"
                    },
                    {
                        "tagName": "docname",
                        "text": "os.calculateRayFromCamera"
                    },
                    {
                        "tagName": "docgroup",
                        "text": "10-raycast"
                    }
                ]
            },
            "group": "10-raycast"
        },
        {
            "id": 1446,
            "order": 9999,
            "name": "os.raycast",
            "reflection": {
                "id": 1446,
                "name": "__type",
                "variant": "signature",
                "kind": 4096,
                "flags": {},
                "comment": {
                    "summary": [
                        {
                            "kind": "text",
                            "text": "Finds the list of bots that are in the given portal and are intersected by a ray starting at the given origin position and traveling in the given direction.\nReturns a promise that resolves with information about the intersected bots."
                        }
                    ],
                    "blockTags": [
                        {
                            "tag": "@example",
                            "content": [
                                {
                                    "kind": "code",
                                    "text": "```ts\nFind the bots that are directly to the right of `(0,0,0)` in the grid portal\nconst result = await os.raycast(\"grid\", new Vector3(0, 0, 0), new Vector3(1, 0, 0));\nos.toast('Found Bots: ' + result.botIntersections.map(b => b.id).join(', '));\n```"
                                }
                            ]
                        },
                        {
                            "tag": "@example",
                            "content": [
                                {
                                    "kind": "code",
                                    "text": "```ts\nFind the bots that the mouse pointer is pointing at in the grid portal\nconst result = await os.raycast(\"grid\", os.getPointerPosition(\"mouse\"), os.getPointerDirection(\"mouse\"));\nos.toast('Found Bots: ' + result.botIntersections.map(b => b.id).join(', '));\n```"
                                }
                            ]
                        },
                        {
                            "tag": "@dochash",
                            "content": [
                                {
                                    "kind": "text",
                                    "text": "actions/portals"
                                }
                            ]
                        },
                        {
                            "tag": "@docname",
                            "content": [
                                {
                                    "kind": "text",
                                    "text": "os.raycast"
                                }
                            ]
                        },
                        {
                            "tag": "@docgroup",
                            "content": [
                                {
                                    "kind": "text",
                                    "text": "10-raycast"
                                }
                            ]
                        }
                    ]
                },
                "sources": [
                    {
                        "fileName": "src/aux-runtime/runtime/AuxLibrary.ts",
                        "line": 9251,
                        "character": 13,
                        "url": "https://github.com/KallynGowdy/casualos/blob/56c869f96/src/aux-runtime/runtime/AuxLibrary.ts#L9251"
                    }
                ],
                "parameters": [
                    {
                        "id": 1447,
                        "name": "portal",
                        "variant": "param",
                        "kind": 32768,
                        "flags": {},
                        "comment": {
                            "summary": [
                                {
                                    "kind": "text",
                                    "text": "the name of the portal that should be tested."
                                }
                            ],
                            "blockTags": []
                        },
                        "type": {
                            "type": "union",
                            "types": [
                                {
                                    "type": "literal",
                                    "value": "map"
                                },
                                {
                                    "type": "literal",
                                    "value": "grid"
                                },
                                {
                                    "type": "literal",
                                    "value": "miniGrid"
                                },
                                {
                                    "type": "literal",
                                    "value": "miniMap"
                                }
                            ]
                        }
                    },
                    {
                        "id": 1448,
                        "name": "origin",
                        "variant": "param",
                        "kind": 32768,
                        "flags": {},
                        "comment": {
                            "summary": [
                                {
                                    "kind": "text",
                                    "text": "the 3D position that the ray should start at."
                                }
                            ],
                            "blockTags": []
                        },
                        "type": {
                            "type": "reference",
                            "target": 58,
                            "name": "Vector3",
                            "package": "@casual-simulation/aux-common",
                            "id": 58,
                            "qualifiedName": "Vector3"
                        }
                    },
                    {
                        "id": 1449,
                        "name": "direction",
                        "variant": "param",
                        "kind": 32768,
                        "flags": {},
                        "comment": {
                            "summary": [
                                {
                                    "kind": "text",
                                    "text": "the 3D direction that the ray should travel along."
                                }
                            ],
                            "blockTags": []
                        },
                        "type": {
                            "type": "reference",
                            "target": 58,
                            "name": "Vector3",
                            "package": "@casual-simulation/aux-common",
                            "id": 58,
                            "qualifiedName": "Vector3"
                        }
                    }
                ],
                "type": {
                    "type": "reference",
                    "target": {
                        "sourceFileName": "node_modules/typescript/lib/lib.es5.d.ts",
                        "qualifiedName": "Promise"
                    },
                    "typeArguments": [
                        {
                            "type": "reference",
                            "target": 2137,
                            "name": "RaycastResult",
                            "package": "@casual-simulation/aux-runtime",
                            "id": 2137,
                            "qualifiedName": "RaycastResult"
                        }
                    ],
                    "name": "Promise",
                    "package": "typescript"
                }
            },
            "comment": {
                "text": "Finds the list of bots that are in the given portal and are intersected by a ray starting at the given origin position and traveling in the given direction.\nReturns a promise that resolves with information about the intersected bots.",
                "tags": [
                    {
                        "tagName": "example",
                        "text": "```ts\nFind the bots that are directly to the right of `(0,0,0)` in the grid portal\nconst result = await os.raycast(\"grid\", new Vector3(0, 0, 0), new Vector3(1, 0, 0));\nos.toast('Found Bots: ' + result.botIntersections.map(b => b.id).join(', '));\n```"
                    },
                    {
                        "tagName": "example",
                        "text": "```ts\nFind the bots that the mouse pointer is pointing at in the grid portal\nconst result = await os.raycast(\"grid\", os.getPointerPosition(\"mouse\"), os.getPointerDirection(\"mouse\"));\nos.toast('Found Bots: ' + result.botIntersections.map(b => b.id).join(', '));\n```"
                    },
                    {
                        "tagName": "dochash",
                        "text": "actions/portals"
                    },
                    {
                        "tagName": "docname",
                        "text": "os.raycast"
                    },
                    {
                        "tagName": "docgroup",
                        "text": "10-raycast"
                    }
                ]
            },
            "group": "10-raycast"
        },
        {
            "id": 1441,
            "order": 9999,
            "name": "os.raycastFromCamera",
            "reflection": {
                "id": 1441,
                "name": "__type",
                "variant": "signature",
                "kind": 4096,
                "flags": {},
                "comment": {
                    "summary": [
                        {
                            "kind": "text",
                            "text": "Finds the list of bots that are in the given portal and are intersected by a ray starting at the portal camera and traveling along a path emanating from the given viewport position.\nReturns a promise that resolves with information about the intersected bots."
                        }
                    ],
                    "blockTags": [
                        {
                            "tag": "@example",
                            "content": [
                                {
                                    "kind": "code",
                                    "text": "```ts\nFind the bots that are in the center of the screen\nconst result = await os.raycastFromCamera(\"grid\", new Vector2(0, 0));\nos.toast('Found Bots: ' + result.botIntersections.map(b => b.id).join(', '));\n```"
                                }
                            ]
                        },
                        {
                            "tag": "@example",
                            "content": [
                                {
                                    "kind": "code",
                                    "text": "```ts\nFind the bots that are on the left-center edge of the screen\nconst result = await os.raycastFromCamera(\"grid\", new Vector2(-1, 0));\nos.toast('Found Bots: ' + result.botIntersections.map(b => b.id).join(', '));\n```"
                                }
                            ]
                        },
                        {
                            "tag": "@dochash",
                            "content": [
                                {
                                    "kind": "text",
                                    "text": "actions/portals"
                                }
                            ]
                        },
                        {
                            "tag": "@docname",
                            "content": [
                                {
                                    "kind": "text",
                                    "text": "os.raycastFromCamera"
                                }
                            ]
                        },
                        {
                            "tag": "@docgroup",
                            "content": [
                                {
                                    "kind": "text",
                                    "text": "10-raycast"
                                }
                            ]
                        }
                    ]
                },
                "sources": [
                    {
                        "fileName": "src/aux-runtime/runtime/AuxLibrary.ts",
                        "line": 9218,
                        "character": 13,
                        "url": "https://github.com/KallynGowdy/casualos/blob/56c869f96/src/aux-runtime/runtime/AuxLibrary.ts#L9218"
                    }
                ],
                "parameters": [
                    {
                        "id": 1442,
                        "name": "portal",
                        "variant": "param",
                        "kind": 32768,
                        "flags": {},
                        "comment": {
                            "summary": [
                                {
                                    "kind": "text",
                                    "text": "the portal that should be tested."
                                }
                            ],
                            "blockTags": []
                        },
                        "type": {
                            "type": "union",
                            "types": [
                                {
                                    "type": "literal",
                                    "value": "map"
                                },
                                {
                                    "type": "literal",
                                    "value": "grid"
                                },
                                {
                                    "type": "literal",
                                    "value": "miniGrid"
                                },
                                {
                                    "type": "literal",
                                    "value": "miniMap"
                                }
                            ]
                        }
                    },
                    {
                        "id": 1443,
                        "name": "viewportCoordinates",
                        "variant": "param",
                        "kind": 32768,
                        "flags": {},
                        "comment": {
                            "summary": [
                                {
                                    "kind": "text",
                                    "text": "the 2D viewport position that the ray should start at.\nViewport positions locate a specific point on the image that the camera produces.\n"
                                },
                                {
                                    "kind": "code",
                                    "text": "`(X: 0, Y: 0)`"
                                },
                                {
                                    "kind": "text",
                                    "text": " represents the center of the camera while "
                                },
                                {
                                    "kind": "code",
                                    "text": "`(X: -1, Y: -1)`"
                                },
                                {
                                    "kind": "text",
                                    "text": " represents the lower left corner and "
                                },
                                {
                                    "kind": "code",
                                    "text": "`(X: 1, Y: 1)`"
                                },
                                {
                                    "kind": "text",
                                    "text": " represents the upper right corner."
                                }
                            ],
                            "blockTags": []
                        },
                        "type": {
                            "type": "reference",
                            "target": 1,
                            "name": "Vector2",
                            "package": "@casual-simulation/aux-common",
                            "id": 1,
                            "qualifiedName": "Vector2"
                        }
                    }
                ],
                "type": {
                    "type": "reference",
                    "target": {
                        "sourceFileName": "node_modules/typescript/lib/lib.es5.d.ts",
                        "qualifiedName": "Promise"
                    },
                    "typeArguments": [
                        {
                            "type": "reference",
                            "target": 2137,
                            "name": "RaycastResult",
                            "package": "@casual-simulation/aux-runtime",
                            "id": 2137,
                            "qualifiedName": "RaycastResult"
                        }
                    ],
                    "name": "Promise",
                    "package": "typescript"
                }
            },
            "comment": {
                "text": "Finds the list of bots that are in the given portal and are intersected by a ray starting at the portal camera and traveling along a path emanating from the given viewport position.\nReturns a promise that resolves with information about the intersected bots.",
                "tags": [
                    {
                        "tagName": "example",
                        "text": "```ts\nFind the bots that are in the center of the screen\nconst result = await os.raycastFromCamera(\"grid\", new Vector2(0, 0));\nos.toast('Found Bots: ' + result.botIntersections.map(b => b.id).join(', '));\n```"
                    },
                    {
                        "tagName": "example",
                        "text": "```ts\nFind the bots that are on the left-center edge of the screen\nconst result = await os.raycastFromCamera(\"grid\", new Vector2(-1, 0));\nos.toast('Found Bots: ' + result.botIntersections.map(b => b.id).join(', '));\n```"
                    },
                    {
                        "tagName": "dochash",
                        "text": "actions/portals"
                    },
                    {
                        "tagName": "docname",
                        "text": "os.raycastFromCamera"
                    },
                    {
                        "tagName": "docgroup",
                        "text": "10-raycast"
                    }
                ]
            },
            "group": "10-raycast"
        },
        {
            "id": 993,
            "order": 9999,
            "name": "os.showConfirm",
            "reflection": {
                "id": 993,
                "name": "__type",
                "variant": "signature",
                "kind": 4096,
                "flags": {},
                "comment": {
                    "summary": [
                        {
                            "kind": "text",
                            "text": "Shows a confirmation dialog using the given options. Confirmation dialogs are useful for giving users the ability to quickly confirm or cancel an action.\n\nReturns a promise that resolves with "
                        },
                        {
                            "kind": "code",
                            "text": "`true`"
                        },
                        {
                            "kind": "text",
                            "text": " if the user clicked the \"Confirm\" button and "
                        },
                        {
                            "kind": "code",
                            "text": "`false`"
                        },
                        {
                            "kind": "text",
                            "text": " if they closed the dialog or clicked the \"Cancel\" button."
                        }
                    ],
                    "blockTags": [
                        {
                            "tag": "@example",
                            "content": [
                                {
                                    "kind": "code",
                                    "text": "```ts\nShow a confirmation dialog\nlet confirmed = await os.showConfirm({\n    title: 'Confirm',\n    content: 'Please confirm the action.'\n});\n\nos.toast('Confirmed: ' + (confirmed ? 'Yes' : 'No'));\n```"
                                }
                            ]
                        },
                        {
                            "tag": "@example",
                            "content": [
                                {
                                    "kind": "code",
                                    "text": "```ts\nShow a confirmation dialog with custom button text\nlet confirmed = await os.showConfirm({\n    title: 'Confirm',\n    content: 'Are you sure?',\n    confirmText: 'Yes',\n    cancelText: 'No'\n});\n\nos.toast('Confirmed: ' + (confirmed ? 'Yes' : 'No'));\n```"
                                }
                            ]
                        },
                        {
                            "tag": "@dochash",
                            "content": [
                                {
                                    "kind": "text",
                                    "text": "actions/portals"
                                }
                            ]
                        },
                        {
                            "tag": "@docname",
                            "content": [
                                {
                                    "kind": "text",
                                    "text": "os.showConfirm"
                                }
                            ]
                        },
                        {
                            "tag": "@docgroup",
                            "content": [
                                {
                                    "kind": "text",
                                    "text": "10-showInput"
                                }
                            ]
                        }
                    ]
                },
                "sources": [
                    {
                        "fileName": "src/aux-runtime/runtime/AuxLibrary.ts",
                        "line": 7077,
                        "character": 13,
                        "url": "https://github.com/KallynGowdy/casualos/blob/56c869f96/src/aux-runtime/runtime/AuxLibrary.ts#L7077"
                    }
                ],
                "parameters": [
                    {
                        "id": 994,
                        "name": "options",
                        "variant": "param",
                        "kind": 32768,
                        "flags": {},
                        "comment": {
                            "summary": [
                                {
                                    "kind": "text",
                                    "text": "the options that should be used for the confirmation dialog."
                                }
                            ],
                            "blockTags": []
                        },
                        "type": {
                            "type": "reference",
                            "target": 2753,
                            "name": "ShowConfirmOptions",
                            "package": "@casual-simulation/aux-common",
                            "id": 2753,
                            "qualifiedName": "ShowConfirmOptions"
                        }
                    }
                ],
                "type": {
                    "type": "reference",
                    "target": {
                        "sourceFileName": "node_modules/typescript/lib/lib.es5.d.ts",
                        "qualifiedName": "Promise"
                    },
                    "typeArguments": [
                        {
                            "type": "intrinsic",
                            "name": "boolean"
                        }
                    ],
                    "name": "Promise",
                    "package": "typescript"
                }
            },
            "comment": {
                "text": "Shows a confirmation dialog using the given options. Confirmation dialogs are useful for giving users the ability to quickly confirm or cancel an action.\n\nReturns a promise that resolves with `true` if the user clicked the \"Confirm\" button and `false` if they closed the dialog or clicked the \"Cancel\" button.",
                "tags": [
                    {
                        "tagName": "example",
                        "text": "```ts\nShow a confirmation dialog\nlet confirmed = await os.showConfirm({\n    title: 'Confirm',\n    content: 'Please confirm the action.'\n});\n\nos.toast('Confirmed: ' + (confirmed ? 'Yes' : 'No'));\n```"
                    },
                    {
                        "tagName": "example",
                        "text": "```ts\nShow a confirmation dialog with custom button text\nlet confirmed = await os.showConfirm({\n    title: 'Confirm',\n    content: 'Are you sure?',\n    confirmText: 'Yes',\n    cancelText: 'No'\n});\n\nos.toast('Confirmed: ' + (confirmed ? 'Yes' : 'No'));\n```"
                    },
                    {
                        "tagName": "dochash",
                        "text": "actions/portals"
                    },
                    {
                        "tagName": "docname",
                        "text": "os.showConfirm"
                    },
                    {
                        "tagName": "docgroup",
                        "text": "10-showInput"
                    }
                ]
            },
            "group": "10-showInput"
        },
        {
            "id": 983,
            "order": 9999,
            "name": "os.showInput",
            "reflection": {
                "id": 983,
                "name": "__type",
                "variant": "signature",
                "kind": 4096,
                "flags": {},
                "comment": {
                    "summary": [
                        {
                            "kind": "text",
                            "text": "Shows an input modal with the given value and options. When shown, the player will be able to change the value.\n\nReturns a Promise that resolves with the final value when the user is finished editing.\nThis function is similar to "
                        },
                        {
                            "kind": "text",
                            "text": "[`os.showInputForTag(bot, tag, options)`](ref:os.showInputForTag)"
                        },
                        {
                            "kind": "text",
                            "text": " except it doesn't require a bot and a tag."
                        }
                    ],
                    "blockTags": [
                        {
                            "tag": "@example",
                            "content": [
                                {
                                    "kind": "code",
                                    "text": "```ts\nShow a basic text input modal and displays a toast message with the input value.\nconst value = await os.showInput();\nos.toast(value);\n```"
                                }
                            ]
                        },
                        {
                            "tag": "@example",
                            "content": [
                                {
                                    "kind": "code",
                                    "text": "```ts\nShow a text input modal with a placeholder.\nconst name = await os.showInput(null, {\n    placeholder: 'Enter a name'\n});\nos.toast(name);\n```"
                                }
                            ]
                        },
                        {
                            "tag": "@example",
                            "content": [
                                {
                                    "kind": "code",
                                    "text": "```ts\nShow a input modal with a custom title.\nconst name = await os.showInput('My Name', {\n    title: 'Edit name'\n});\nos.toast(name);\n```"
                                }
                            ]
                        },
                        {
                            "tag": "@example",
                            "content": [
                                {
                                    "kind": "code",
                                    "text": "```ts\nShow a color input modal with a custom title.\nconst color = await os.showInput('green', {\n    type: 'color',\n    title: 'Enter a custom color'\n});\nos.toast(color);\n```"
                                }
                            ]
                        },
                        {
                            "tag": "@example",
                            "content": [
                                {
                                    "kind": "code",
                                    "text": "```ts\nShow an input for entering secrets (like passwords).\nconst secret = await os.showInput('', {\n    type: 'secret',\n    title: 'Enter a secret key'\n});\nos.toast(secret);\n```"
                                }
                            ]
                        },
                        {
                            "tag": "@example",
                            "content": [
                                {
                                    "kind": "code",
                                    "text": "```ts\nShow an input for entering dates.\nconst date = await os.showInput('', {\n    type: 'date',\n    title: 'Enter a date'\n});\nos.toast(date);\n```"
                                }
                            ]
                        },
                        {
                            "tag": "@example",
                            "content": [
                                {
                                    "kind": "code",
                                    "text": "```ts\nShow an input with a list of options.\n// Null means nothing is selected\n// To pre-select an item, pass in the index of the item you want selected.\nconst selectedItem = await os.showInput(null, {\n    title: 'Select your favorite superhero',\n    type: 'list',\n    placeholder: 'Superhero',\n    items: [\n        {\n            label: 'Superman',\n            value: 1\n        },\n        {\n            label: 'Iron Man',\n            value: 2\n        },\n        {\n            label: 'Batman',\n            value: 3\n        },\n        {\n            label: 'Wonder Woman',\n            value: 4\n        }\n    ]\n});\nos.toast(selectedItem);\n```"
                                }
                            ]
                        },
                        {
                            "tag": "@example",
                            "content": [
                                {
                                    "kind": "code",
                                    "text": "```ts\nShow an input with a list of checkboxes.\n// Empty array means nothing is selected.\n// To pre-select items, pass in an array with the indexes of the items you want selected.\nconst selectedItems = await os.showInput([], {\n    title: 'Check your favorite superheroes',\n    type: 'list',\n    subtype: 'checkbox',\n    items: [\n        {\n            label: 'Superman',\n            value: 1\n        },\n        {\n            label: 'Iron Man',\n            value: 2\n        },\n        {\n            label: 'Batman',\n            value: 3\n        },\n        {\n            label: 'Wonder Woman',\n            value: 4\n        }\n    ]\n});\nos.toast(selectedItems);\n```"
                                }
                            ]
                        },
                        {
                            "tag": "@example",
                            "content": [
                                {
                                    "kind": "code",
                                    "text": "```ts\nShow an input with a dropdown of checkboxes.\n// Empty array means nothing is selected.\n// To pre-select items, pass in an array with the indexes of the items you want selected.\nconst selectedItems = await os.showInput([], {\n    title: 'Select your favorite superheroes',\n    type: 'list',\n    subtype: 'multiSelect',\n    placeholder: 'Superhero',\n    items: [\n        {\n            label: 'Superman',\n            value: 1\n        },\n        {\n            label: 'Iron Man',\n            value: 2\n        },\n        {\n            label: 'Batman',\n            value: 3\n        },\n        {\n            label: 'Wonder Woman',\n            value: 4\n        }\n    ]\n});\nos.toast(selectedItems);\n```"
                                }
                            ]
                        },
                        {
                            "tag": "@example",
                            "content": [
                                {
                                    "kind": "code",
                                    "text": "```ts\nShow an input with a list of radio buttons.\n// Null means nothing is selected.\n// To pre-select an item, pass in the index of the item you want selected.\nconst selectedItem = await os.showInput(null, {\n    title: 'Check your favorite superheroe',\n    type: 'list',\n    subtype: 'radio',\n    placeholder: 'Superhero',\n    items: [\n        {\n            label: 'Superman',\n            value: 1\n        },\n        {\n            label: 'Iron Man',\n            value: 2\n        },\n        {\n            label: 'Batman',\n            value: 3\n        },\n        {\n            label: 'Wonder Woman',\n            value: 4\n        }\n    ]\n});\nos.toast(selectedItem);\n```"
                                }
                            ]
                        },
                        {
                            "tag": "@dochash",
                            "content": [
                                {
                                    "kind": "text",
                                    "text": "actions/portals"
                                }
                            ]
                        },
                        {
                            "tag": "@docname",
                            "content": [
                                {
                                    "kind": "text",
                                    "text": "os.showInput"
                                }
                            ]
                        },
                        {
                            "tag": "@docgroup",
                            "content": [
                                {
                                    "kind": "text",
                                    "text": "10-showInput"
                                }
                            ]
                        }
                    ]
                },
                "sources": [
                    {
                        "fileName": "src/aux-runtime/runtime/AuxLibrary.ts",
                        "line": 7039,
                        "character": 13,
                        "url": "https://github.com/KallynGowdy/casualos/blob/56c869f96/src/aux-runtime/runtime/AuxLibrary.ts#L7039"
                    }
                ],
                "parameters": [
                    {
                        "id": 984,
                        "name": "currentValue",
                        "variant": "param",
                        "kind": 32768,
                        "flags": {
                            "isOptional": true
                        },
                        "comment": {
                            "summary": [
                                {
                                    "kind": "text",
                                    "text": "the value that should be shown in the input modal."
                                }
                            ],
                            "blockTags": []
                        },
                        "type": {
                            "type": "intrinsic",
                            "name": "any"
                        }
                    },
                    {
                        "id": 985,
                        "name": "options",
                        "variant": "param",
                        "kind": 32768,
                        "flags": {
                            "isOptional": true
                        },
                        "comment": {
                            "summary": [
                                {
                                    "kind": "text",
                                    "text": "the options that indicate how the input box should be customized."
                                }
                            ],
                            "blockTags": []
                        },
                        "type": {
                            "type": "reference",
                            "target": {
                                "sourceFileName": "node_modules/typescript/lib/lib.es5.d.ts",
                                "qualifiedName": "Partial"
                            },
                            "typeArguments": [
                                {
                                    "type": "reference",
                                    "target": 2742,
                                    "name": "ShowInputOptions",
                                    "package": "@casual-simulation/aux-common",
                                    "id": 2742,
                                    "qualifiedName": "ShowInputOptions"
                                }
                            ],
                            "name": "Partial",
                            "package": "typescript"
                        }
                    }
                ],
                "type": {
                    "type": "reference",
                    "target": {
                        "sourceFileName": "node_modules/typescript/lib/lib.es5.d.ts",
                        "qualifiedName": "Promise"
                    },
                    "typeArguments": [
                        {
                            "type": "intrinsic",
                            "name": "any"
                        }
                    ],
                    "name": "Promise",
                    "package": "typescript"
                }
            },
            "comment": {
                "text": "Shows an input modal with the given value and options. When shown, the player will be able to change the value.\n\nReturns a Promise that resolves with the final value when the user is finished editing.\nThis function is similar to os.showInputForTag except it doesn't require a bot and a tag.",
                "tags": [
                    {
                        "tagName": "example",
                        "text": "```ts\nShow a basic text input modal and displays a toast message with the input value.\nconst value = await os.showInput();\nos.toast(value);\n```"
                    },
                    {
                        "tagName": "example",
                        "text": "```ts\nShow a text input modal with a placeholder.\nconst name = await os.showInput(null, {\n    placeholder: 'Enter a name'\n});\nos.toast(name);\n```"
                    },
                    {
                        "tagName": "example",
                        "text": "```ts\nShow a input modal with a custom title.\nconst name = await os.showInput('My Name', {\n    title: 'Edit name'\n});\nos.toast(name);\n```"
                    },
                    {
                        "tagName": "example",
                        "text": "```ts\nShow a color input modal with a custom title.\nconst color = await os.showInput('green', {\n    type: 'color',\n    title: 'Enter a custom color'\n});\nos.toast(color);\n```"
                    },
                    {
                        "tagName": "example",
                        "text": "```ts\nShow an input for entering secrets (like passwords).\nconst secret = await os.showInput('', {\n    type: 'secret',\n    title: 'Enter a secret key'\n});\nos.toast(secret);\n```"
                    },
                    {
                        "tagName": "example",
                        "text": "```ts\nShow an input for entering dates.\nconst date = await os.showInput('', {\n    type: 'date',\n    title: 'Enter a date'\n});\nos.toast(date);\n```"
                    },
                    {
                        "tagName": "example",
                        "text": "```ts\nShow an input with a list of options.\n// Null means nothing is selected\n// To pre-select an item, pass in the index of the item you want selected.\nconst selectedItem = await os.showInput(null, {\n    title: 'Select your favorite superhero',\n    type: 'list',\n    placeholder: 'Superhero',\n    items: [\n        {\n            label: 'Superman',\n            value: 1\n        },\n        {\n            label: 'Iron Man',\n            value: 2\n        },\n        {\n            label: 'Batman',\n            value: 3\n        },\n        {\n            label: 'Wonder Woman',\n            value: 4\n        }\n    ]\n});\nos.toast(selectedItem);\n```"
                    },
                    {
                        "tagName": "example",
                        "text": "```ts\nShow an input with a list of checkboxes.\n// Empty array means nothing is selected.\n// To pre-select items, pass in an array with the indexes of the items you want selected.\nconst selectedItems = await os.showInput([], {\n    title: 'Check your favorite superheroes',\n    type: 'list',\n    subtype: 'checkbox',\n    items: [\n        {\n            label: 'Superman',\n            value: 1\n        },\n        {\n            label: 'Iron Man',\n            value: 2\n        },\n        {\n            label: 'Batman',\n            value: 3\n        },\n        {\n            label: 'Wonder Woman',\n            value: 4\n        }\n    ]\n});\nos.toast(selectedItems);\n```"
                    },
                    {
                        "tagName": "example",
                        "text": "```ts\nShow an input with a dropdown of checkboxes.\n// Empty array means nothing is selected.\n// To pre-select items, pass in an array with the indexes of the items you want selected.\nconst selectedItems = await os.showInput([], {\n    title: 'Select your favorite superheroes',\n    type: 'list',\n    subtype: 'multiSelect',\n    placeholder: 'Superhero',\n    items: [\n        {\n            label: 'Superman',\n            value: 1\n        },\n        {\n            label: 'Iron Man',\n            value: 2\n        },\n        {\n            label: 'Batman',\n            value: 3\n        },\n        {\n            label: 'Wonder Woman',\n            value: 4\n        }\n    ]\n});\nos.toast(selectedItems);\n```"
                    },
                    {
                        "tagName": "example",
                        "text": "```ts\nShow an input with a list of radio buttons.\n// Null means nothing is selected.\n// To pre-select an item, pass in the index of the item you want selected.\nconst selectedItem = await os.showInput(null, {\n    title: 'Check your favorite superheroe',\n    type: 'list',\n    subtype: 'radio',\n    placeholder: 'Superhero',\n    items: [\n        {\n            label: 'Superman',\n            value: 1\n        },\n        {\n            label: 'Iron Man',\n            value: 2\n        },\n        {\n            label: 'Batman',\n            value: 3\n        },\n        {\n            label: 'Wonder Woman',\n            value: 4\n        }\n    ]\n});\nos.toast(selectedItem);\n```"
                    },
                    {
                        "tagName": "dochash",
                        "text": "actions/portals"
                    },
                    {
                        "tagName": "docname",
                        "text": "os.showInput"
                    },
                    {
                        "tagName": "docgroup",
                        "text": "10-showInput"
                    }
                ]
            },
            "group": "10-showInput"
        },
        {
            "id": 977,
            "order": 9999,
            "name": "os.showInputForTag",
            "reflection": {
                "id": 977,
                "name": "__type",
                "variant": "signature",
                "kind": 4096,
                "flags": {},
                "comment": {
                    "summary": [
                        {
                            "kind": "text",
                            "text": "Shows an input modal for the given bot and tag with the given options.\nWhen shown, the player will be able to change the value stored in the given tag.\nTriggers the "
                        },
                        {
                            "kind": "text",
                            "text": "[`@onSaveInput`](tags:@onSaveInput)"
                        },
                        {
                            "kind": "text",
                            "text": " whisper when the modal is closed with saving and the "
                        },
                        {
                            "kind": "text",
                            "text": "[`@onCloseInput`](tags:@onCloseInput)"
                        },
                        {
                            "kind": "text",
                            "text": " whisper when the modal is closed without saving."
                        }
                    ],
                    "blockTags": [
                        {
                            "tag": "@example",
                            "content": [
                                {
                                    "kind": "code",
                                    "text": "```ts\nShow a basic text input modal for the #name tag on this bot.\nos.showInputForTag(this, \"name\");\n```"
                                }
                            ]
                        },
                        {
                            "tag": "@example",
                            "content": [
                                {
                                    "kind": "code",
                                    "text": "```ts\nShow a text input modal with a placeholder for the #name tag.\nos.showInputForTag(this, \"name\", {\n    placeholder: 'Enter a name'\n});\n```"
                                }
                            ]
                        },
                        {
                            "tag": "@example",
                            "content": [
                                {
                                    "kind": "code",
                                    "text": "```ts\nShow a input modal with a custom title.\nos.showInputForTag(this, \"name\", {\n    title: 'Edit name'\n});\n```"
                                }
                            ]
                        },
                        {
                            "tag": "@example",
                            "content": [
                                {
                                    "kind": "code",
                                    "text": "```ts\nShow a color input modal with a custom title.\nos.showInputForTag(this, \"color\", {\n    type: 'color',\n    title: 'Enter a custom color'\n});\n```"
                                }
                            ]
                        },
                        {
                            "tag": "@dochash",
                            "content": [
                                {
                                    "kind": "text",
                                    "text": "actions/portals"
                                }
                            ]
                        },
                        {
                            "tag": "@docname",
                            "content": [
                                {
                                    "kind": "text",
                                    "text": "os.showInputForTag"
                                }
                            ]
                        },
                        {
                            "tag": "@docgroup",
                            "content": [
                                {
                                    "kind": "text",
                                    "text": "10-showInput"
                                }
                            ]
                        }
                    ]
                },
                "sources": [
                    {
                        "fileName": "src/aux-runtime/runtime/AuxLibrary.ts",
                        "line": 6865,
                        "character": 13,
                        "url": "https://github.com/KallynGowdy/casualos/blob/56c869f96/src/aux-runtime/runtime/AuxLibrary.ts#L6865"
                    }
                ],
                "parameters": [
                    {
                        "id": 978,
                        "name": "bot",
                        "variant": "param",
                        "kind": 32768,
                        "flags": {},
                        "comment": {
                            "summary": [
                                {
                                    "kind": "text",
                                    "text": "the bot or bot ID that the input should be shown for."
                                }
                            ],
                            "blockTags": []
                        },
                        "type": {
                            "type": "union",
                            "types": [
                                {
                                    "type": "intrinsic",
                                    "name": "string"
                                },
                                {
                                    "type": "reference",
                                    "target": 3355,
                                    "name": "Bot",
                                    "package": "@casual-simulation/aux-common",
                                    "id": 3355,
                                    "qualifiedName": "Bot"
                                }
                            ]
                        }
                    },
                    {
                        "id": 979,
                        "name": "tag",
                        "variant": "param",
                        "kind": 32768,
                        "flags": {},
                        "comment": {
                            "summary": [
                                {
                                    "kind": "text",
                                    "text": "the tag that should be edited on the bot."
                                }
                            ],
                            "blockTags": []
                        },
                        "type": {
                            "type": "intrinsic",
                            "name": "string"
                        }
                    },
                    {
                        "id": 980,
                        "name": "options",
                        "variant": "param",
                        "kind": 32768,
                        "flags": {
                            "isOptional": true
                        },
                        "comment": {
                            "summary": [
                                {
                                    "kind": "text",
                                    "text": "the possible cusomization options for the input modal."
                                }
                            ],
                            "blockTags": []
                        },
                        "type": {
                            "type": "reference",
                            "target": {
                                "sourceFileName": "node_modules/typescript/lib/lib.es5.d.ts",
                                "qualifiedName": "Partial"
                            },
                            "typeArguments": [
                                {
                                    "type": "reference",
                                    "target": 2742,
                                    "name": "ShowInputOptions",
                                    "package": "@casual-simulation/aux-common",
                                    "id": 2742,
                                    "qualifiedName": "ShowInputOptions"
                                }
                            ],
                            "name": "Partial",
                            "package": "typescript"
                        }
                    }
                ],
                "type": {
                    "type": "reference",
                    "target": 2867,
                    "name": "ShowInputForTagAction",
                    "package": "@casual-simulation/aux-common",
                    "id": 2867,
                    "qualifiedName": "ShowInputForTagAction"
                }
            },
            "comment": {
                "text": "Shows an input modal for the given bot and tag with the given options.\nWhen shown, the player will be able to change the value stored in the given tag.\nTriggers the @onSaveInput whisper when the modal is closed with saving and the @onCloseInput whisper when the modal is closed without saving.",
                "tags": [
                    {
                        "tagName": "example",
                        "text": "```ts\nShow a basic text input modal for the #name tag on this bot.\nos.showInputForTag(this, \"name\");\n```"
                    },
                    {
                        "tagName": "example",
                        "text": "```ts\nShow a text input modal with a placeholder for the #name tag.\nos.showInputForTag(this, \"name\", {\n    placeholder: 'Enter a name'\n});\n```"
                    },
                    {
                        "tagName": "example",
                        "text": "```ts\nShow a input modal with a custom title.\nos.showInputForTag(this, \"name\", {\n    title: 'Edit name'\n});\n```"
                    },
                    {
                        "tagName": "example",
                        "text": "```ts\nShow a color input modal with a custom title.\nos.showInputForTag(this, \"color\", {\n    type: 'color',\n    title: 'Enter a custom color'\n});\n```"
                    },
                    {
                        "tagName": "dochash",
                        "text": "actions/portals"
                    },
                    {
                        "tagName": "docname",
                        "text": "os.showInputForTag"
                    },
                    {
                        "tagName": "docgroup",
                        "text": "10-showInput"
                    }
                ]
            },
            "group": "10-showInput"
        },
        {
            "id": 696,
            "order": 9999,
            "name": "os.hideTips",
            "reflection": {
                "id": 696,
                "name": "__type",
                "variant": "signature",
                "kind": 4096,
                "flags": {},
                "comment": {
                    "summary": [
                        {
                            "kind": "text",
                            "text": "Hides the tooltips that have the specified IDs. If no arguments are specified, then all tooltips will be hidden.\nReturns a promise that resolves when the tooltips have been hidden."
                        }
                    ],
                    "blockTags": [
                        {
                            "tag": "@example",
                            "content": [
                                {
                                    "kind": "code",
                                    "text": "```ts\nShow and hide a tooltip message.\nconst id = await os.tip(\"Hello!\");\nawait os.sleep(1000);\nawait os.hideTips(id);\n```"
                                }
                            ]
                        },
                        {
                            "tag": "@dochash",
                            "content": [
                                {
                                    "kind": "text",
                                    "text": "actions/portals"
                                }
                            ]
                        },
                        {
                            "tag": "@docname",
                            "content": [
                                {
                                    "kind": "text",
                                    "text": "os.hideTips"
                                }
                            ]
                        },
                        {
                            "tag": "@docgroup",
                            "content": [
                                {
                                    "kind": "text",
                                    "text": "10-tip"
                                }
                            ]
                        }
                    ]
                },
                "sources": [
                    {
                        "fileName": "src/aux-runtime/runtime/AuxLibrary.ts",
                        "line": 5145,
                        "character": 13,
                        "url": "https://github.com/KallynGowdy/casualos/blob/56c869f96/src/aux-runtime/runtime/AuxLibrary.ts#L5145"
                    }
                ],
                "parameters": [
                    {
                        "id": 697,
                        "name": "tipIds",
                        "variant": "param",
                        "kind": 32768,
                        "flags": {
                            "isOptional": true
                        },
                        "comment": {
                            "summary": [
                                {
                                    "kind": "text",
                                    "text": "the tooltip ID or array of tooltip IDs that should be hidden."
                                }
                            ],
                            "blockTags": []
                        },
                        "type": {
                            "type": "union",
                            "types": [
                                {
                                    "type": "intrinsic",
                                    "name": "number"
                                },
                                {
                                    "type": "array",
                                    "elementType": {
                                        "type": "intrinsic",
                                        "name": "number"
                                    }
                                }
                            ]
                        }
                    }
                ],
                "type": {
                    "type": "reference",
                    "target": {
                        "sourceFileName": "node_modules/typescript/lib/lib.es5.d.ts",
                        "qualifiedName": "Promise"
                    },
                    "typeArguments": [
                        {
                            "type": "intrinsic",
                            "name": "void"
                        }
                    ],
                    "name": "Promise",
                    "package": "typescript"
                }
            },
            "comment": {
                "text": "Hides the tooltips that have the specified IDs. If no arguments are specified, then all tooltips will be hidden.\nReturns a promise that resolves when the tooltips have been hidden.",
                "tags": [
                    {
                        "tagName": "example",
                        "text": "```ts\nShow and hide a tooltip message.\nconst id = await os.tip(\"Hello!\");\nawait os.sleep(1000);\nawait os.hideTips(id);\n```"
                    },
                    {
                        "tagName": "dochash",
                        "text": "actions/portals"
                    },
                    {
                        "tagName": "docname",
                        "text": "os.hideTips"
                    },
                    {
                        "tagName": "docgroup",
                        "text": "10-tip"
                    }
                ]
            },
            "group": "10-tip"
        },
        {
            "id": 689,
            "order": 9999,
            "name": "os.tip",
            "reflection": {
                "id": 689,
                "name": "__type",
                "variant": "signature",
                "kind": 4096,
                "flags": {},
                "comment": {
                    "summary": [
                        {
                            "kind": "text",
                            "text": "Shows a temporary \"tooltip\" message on the screen. Optionally placed at the specified position and shown for the given duration.\nReturns a promise that resolves with the ID of the new tooltip.\n\nIf a position is not specified, then a position just below the current mouse position will be used.\nIf on mobile, then the last touch position will be used or the center of the screen if the user has not touched the screen.\nAdditionally, if a position is not specified then the tooltip will be automatically hidden if the user moves the mouse significantly away from the position that the mouse was at when the tooltip was shown."
                        }
                    ],
                    "blockTags": [
                        {
                            "tag": "@example",
                            "content": [
                                {
                                    "kind": "code",
                                    "text": "```ts\nShow a \"Hello!\" tip message.\nos.tip(\"Hello!\");\n```"
                                }
                            ]
                        },
                        {
                            "tag": "@example",
                            "content": [
                                {
                                    "kind": "code",
                                    "text": "```ts\nShow a tip at the center of the screen.\nos.tip(\"This is in the center of the screen.\", gridPortalBot.tags.pixelWidth / 2, gridPortalBot.tags.pixelHeight / 2);\n```"
                                }
                            ]
                        },
                        {
                            "tag": "@example",
                            "content": [
                                {
                                    "kind": "code",
                                    "text": "```ts\nShow a tip near the mouse cursor for 5 seconds.\nos.tip(\"5 second tip.\", null, null, 5);\n```"
                                }
                            ]
                        },
                        {
                            "tag": "@example",
                            "content": [
                                {
                                    "kind": "code",
                                    "text": "```ts\nShow a tip and record its ID in a tag mask.\nmasks.tipID = await os.tip(\"Hello!\");\n```"
                                }
                            ]
                        },
                        {
                            "tag": "@dochash",
                            "content": [
                                {
                                    "kind": "text",
                                    "text": "actions/portals"
                                }
                            ]
                        },
                        {
                            "tag": "@docname",
                            "content": [
                                {
                                    "kind": "text",
                                    "text": "os.tip"
                                }
                            ]
                        },
                        {
                            "tag": "@docgroup",
                            "content": [
                                {
                                    "kind": "text",
                                    "text": "10-tip"
                                }
                            ]
                        }
                    ]
                },
                "sources": [
                    {
                        "fileName": "src/aux-runtime/runtime/AuxLibrary.ts",
                        "line": 5113,
                        "character": 13,
                        "url": "https://github.com/KallynGowdy/casualos/blob/56c869f96/src/aux-runtime/runtime/AuxLibrary.ts#L5113"
                    }
                ],
                "parameters": [
                    {
                        "id": 690,
                        "name": "message",
                        "variant": "param",
                        "kind": 32768,
                        "flags": {},
                        "comment": {
                            "summary": [
                                {
                                    "kind": "text",
                                    "text": "the text that the tooltip message should show."
                                }
                            ],
                            "blockTags": []
                        },
                        "type": {
                            "type": "union",
                            "types": [
                                {
                                    "type": "intrinsic",
                                    "name": "string"
                                },
                                {
                                    "type": "intrinsic",
                                    "name": "number"
                                },
                                {
                                    "type": "intrinsic",
                                    "name": "boolean"
                                },
                                {
                                    "type": "intrinsic",
                                    "name": "object"
                                },
                                {
                                    "type": "array",
                                    "elementType": {
                                        "type": "intrinsic",
                                        "name": "any"
                                    }
                                }
                            ]
                        }
                    },
                    {
                        "id": 691,
                        "name": "pixelX",
                        "variant": "param",
                        "kind": 32768,
                        "flags": {
                            "isOptional": true
                        },
                        "comment": {
                            "summary": [
                                {
                                    "kind": "text",
                                    "text": "the horizontal pixel position that the tooltip should be shown at on the screen. If not specified then the current mouse position will be used."
                                }
                            ],
                            "blockTags": []
                        },
                        "type": {
                            "type": "intrinsic",
                            "name": "number"
                        }
                    },
                    {
                        "id": 692,
                        "name": "pixelY",
                        "variant": "param",
                        "kind": 32768,
                        "flags": {
                            "isOptional": true
                        },
                        "comment": {
                            "summary": [
                                {
                                    "kind": "text",
                                    "text": "the vertical position that the tooltip should be shown at on the screen. If not specified then a position just below the current mouse position will be used."
                                }
                            ],
                            "blockTags": []
                        },
                        "type": {
                            "type": "intrinsic",
                            "name": "number"
                        }
                    },
                    {
                        "id": 693,
                        "name": "duration",
                        "variant": "param",
                        "kind": 32768,
                        "flags": {
                            "isOptional": true
                        },
                        "comment": {
                            "summary": [
                                {
                                    "kind": "text",
                                    "text": "the number of seconds that the toast should be shown for before automatically being hidden. (Default is 2)"
                                }
                            ],
                            "blockTags": []
                        },
                        "type": {
                            "type": "intrinsic",
                            "name": "number"
                        }
                    }
                ],
                "type": {
                    "type": "reference",
                    "target": {
                        "sourceFileName": "node_modules/typescript/lib/lib.es5.d.ts",
                        "qualifiedName": "Promise"
                    },
                    "typeArguments": [
                        {
                            "type": "intrinsic",
                            "name": "number"
                        }
                    ],
                    "name": "Promise",
                    "package": "typescript"
                }
            },
            "comment": {
                "text": "Shows a temporary \"tooltip\" message on the screen. Optionally placed at the specified position and shown for the given duration.\nReturns a promise that resolves with the ID of the new tooltip.\n\nIf a position is not specified, then a position just below the current mouse position will be used.\nIf on mobile, then the last touch position will be used or the center of the screen if the user has not touched the screen.\nAdditionally, if a position is not specified then the tooltip will be automatically hidden if the user moves the mouse significantly away from the position that the mouse was at when the tooltip was shown.",
                "tags": [
                    {
                        "tagName": "example",
                        "text": "```ts\nShow a \"Hello!\" tip message.\nos.tip(\"Hello!\");\n```"
                    },
                    {
                        "tagName": "example",
                        "text": "```ts\nShow a tip at the center of the screen.\nos.tip(\"This is in the center of the screen.\", gridPortalBot.tags.pixelWidth / 2, gridPortalBot.tags.pixelHeight / 2);\n```"
                    },
                    {
                        "tagName": "example",
                        "text": "```ts\nShow a tip near the mouse cursor for 5 seconds.\nos.tip(\"5 second tip.\", null, null, 5);\n```"
                    },
                    {
                        "tagName": "example",
                        "text": "```ts\nShow a tip and record its ID in a tag mask.\nmasks.tipID = await os.tip(\"Hello!\");\n```"
                    },
                    {
                        "tagName": "dochash",
                        "text": "actions/portals"
                    },
                    {
                        "tagName": "docname",
                        "text": "os.tip"
                    },
                    {
                        "tagName": "docgroup",
                        "text": "10-tip"
                    }
                ]
            },
            "group": "10-tip"
        },
        {
            "id": 1053,
            "order": 9999,
            "name": "os.addBotDropGrid",
            "reflection": {
                "id": 1053,
                "name": "__type",
                "variant": "signature",
                "kind": 4096,
                "flags": {},
                "comment": {
                    "summary": [
                        {
                            "kind": "text",
                            "text": "Specifies a list of grids that can be used to position the currently dragged bot when it is being dropped on the given bot.\n\nIf called when the user is not dragging anything, then this function does nothing."
                        }
                    ],
                    "blockTags": [
                        {
                            "tag": "@example",
                            "content": [
                                {
                                    "kind": "code",
                                    "text": "```ts\nAdd a grid for the portal that the bot currently exists in when it is being dropped on this bot.\nos.addDropGrid(thisBot, {});\n```"
                                }
                            ]
                        },
                        {
                            "tag": "@example",
                            "content": [
                                {
                                    "kind": "code",
                                    "text": "```ts\nAdd a grid with a 60 degree X rotation when it is being dropped on this bot.\nos.addBotDropGrid(thisBot, {\n    position: { x: 0, y: 0, z: 0 },\n    rotation: { x: 60 * (Math.PI / 180), y: 0, z: 0 },\n});\n```"
                                }
                            ]
                        },
                        {
                            "tag": "@example",
                            "content": [
                                {
                                    "kind": "code",
                                    "text": "```ts\nAdd a grid for a specific portal bot when it is being dropped on this bot.\nos.addBotDropGrid(thisBot, {\n    portalBot: getBot(byTag('form', 'portal'), byTag('formAddress', 'myDimension')),\n});\n```"
                                }
                            ]
                        },
                        {
                            "tag": "@example",
                            "content": [
                                {
                                    "kind": "code",
                                    "text": "```ts\nAdd a grid with a custom size when it is being dropped on this bot.\nos.addBotDropGrid(thisBot, {\n    position: { x: 0, y: 0, z: 3 },\n    bounds: { x: 20, y: 10 }\n});\n```"
                                }
                            ]
                        },
                        {
                            "tag": "@example",
                            "content": [
                                {
                                    "kind": "code",
                                    "text": "```ts\nAdd a grid that the user can see when it is being dropped on this bot.\nos.addBotDropGrid(thisBot, {\n    position: { x: 0, y: 0, z: 3 },\n    showGrid: true\n});\n```"
                                }
                            ]
                        },
                        {
                            "tag": "@example",
                            "content": [
                                {
                                    "kind": "code",
                                    "text": "```ts\nAdd multiple grids with custom priorities when it is being dropped on this bot.\nos.addBotDropGrid(thisBot, {\n    position: { x: 0, y: 0, z: 3 },\n    bounds: { x: 10, y: 10 },\n    showGrid: true,\n    priority: 10\n}, {\n    position: { x: 0, y: 0, z: 0 },\n    bounds: { x: 20, y: 20 },\n    showGrid: true,\n    priority: 20\n});\n```"
                                }
                            ]
                        },
                        {
                            "tag": "@example",
                            "content": [
                                {
                                    "kind": "code",
                                    "text": "```ts\nAdd a spherical grid that the user can see.\nos.addBotDropGrid(thisBot, {\n    type: \"sphere\",\n    position: { x: 0, y: 0, z: 3 },\n    showGrid: true\n});\n```"
                                }
                            ]
                        },
                        {
                            "tag": "@dochash",
                            "content": [
                                {
                                    "kind": "text",
                                    "text": "actions/portals"
                                }
                            ]
                        },
                        {
                            "tag": "@docname",
                            "content": [
                                {
                                    "kind": "text",
                                    "text": "os.addBotDropGrid"
                                }
                            ]
                        }
                    ]
                },
                "sources": [
                    {
                        "fileName": "src/aux-runtime/runtime/AuxLibrary.ts",
                        "line": 7580,
                        "character": 13,
                        "url": "https://github.com/KallynGowdy/casualos/blob/56c869f96/src/aux-runtime/runtime/AuxLibrary.ts#L7580"
                    }
                ],
                "parameters": [
                    {
                        "id": 1054,
                        "name": "bot",
                        "variant": "param",
                        "kind": 32768,
                        "flags": {},
                        "comment": {
                            "summary": [
                                {
                                    "kind": "text",
                                    "text": "the bot which, when the dragged bot is being dropped onto it (as indicated by "
                                },
                                {
                                    "kind": "text",
                                    "text": "[`@onDropEnter`](tags:@onDropEnter)"
                                },
                                {
                                    "kind": "text",
                                    "text": "/"
                                },
                                {
                                    "kind": "text",
                                    "text": "[`@onDropExit`](tags:@onDropExit)"
                                },
                                {
                                    "kind": "text",
                                    "text": "), the specified snap targets will take effect."
                                }
                            ],
                            "blockTags": []
                        },
                        "type": {
                            "type": "union",
                            "types": [
                                {
                                    "type": "intrinsic",
                                    "name": "string"
                                },
                                {
                                    "type": "reference",
                                    "target": 3355,
                                    "name": "Bot",
                                    "package": "@casual-simulation/aux-common",
                                    "id": 3355,
                                    "qualifiedName": "Bot"
                                }
                            ]
                        }
                    },
                    {
                        "id": 1055,
                        "name": "targets",
                        "variant": "param",
                        "kind": 32768,
                        "flags": {
                            "isRest": true
                        },
                        "comment": {
                            "summary": [
                                {
                                    "kind": "text",
                                    "text": "the list of grids to add."
                                }
                            ],
                            "blockTags": []
                        },
                        "type": {
                            "type": "array",
                            "elementType": {
                                "type": "reference",
                                "target": 2112,
                                "name": "SnapGridTarget",
                                "package": "@casual-simulation/aux-runtime",
                                "id": 2112,
                                "qualifiedName": "SnapGridTarget"
                            }
                        }
                    }
                ],
                "type": {
                    "type": "reference",
                    "target": {
                        "sourceFileName": "../src/aux-common/bots/BotEvents.ts",
                        "qualifiedName": "AddDropGridTargetsAction"
                    },
                    "name": "AddDropGridTargetsAction",
                    "package": "@casual-simulation/aux-common"
                }
            },
            "comment": {
                "text": "Specifies a list of grids that can be used to position the currently dragged bot when it is being dropped on the given bot.\n\nIf called when the user is not dragging anything, then this function does nothing.",
                "tags": [
                    {
                        "tagName": "example",
                        "text": "```ts\nAdd a grid for the portal that the bot currently exists in when it is being dropped on this bot.\nos.addDropGrid(thisBot, {});\n```"
                    },
                    {
                        "tagName": "example",
                        "text": "```ts\nAdd a grid with a 60 degree X rotation when it is being dropped on this bot.\nos.addBotDropGrid(thisBot, {\n    position: { x: 0, y: 0, z: 0 },\n    rotation: { x: 60 * (Math.PI / 180), y: 0, z: 0 },\n});\n```"
                    },
                    {
                        "tagName": "example",
                        "text": "```ts\nAdd a grid for a specific portal bot when it is being dropped on this bot.\nos.addBotDropGrid(thisBot, {\n    portalBot: getBot(byTag('form', 'portal'), byTag('formAddress', 'myDimension')),\n});\n```"
                    },
                    {
                        "tagName": "example",
                        "text": "```ts\nAdd a grid with a custom size when it is being dropped on this bot.\nos.addBotDropGrid(thisBot, {\n    position: { x: 0, y: 0, z: 3 },\n    bounds: { x: 20, y: 10 }\n});\n```"
                    },
                    {
                        "tagName": "example",
                        "text": "```ts\nAdd a grid that the user can see when it is being dropped on this bot.\nos.addBotDropGrid(thisBot, {\n    position: { x: 0, y: 0, z: 3 },\n    showGrid: true\n});\n```"
                    },
                    {
                        "tagName": "example",
                        "text": "```ts\nAdd multiple grids with custom priorities when it is being dropped on this bot.\nos.addBotDropGrid(thisBot, {\n    position: { x: 0, y: 0, z: 3 },\n    bounds: { x: 10, y: 10 },\n    showGrid: true,\n    priority: 10\n}, {\n    position: { x: 0, y: 0, z: 0 },\n    bounds: { x: 20, y: 20 },\n    showGrid: true,\n    priority: 20\n});\n```"
                    },
                    {
                        "tagName": "example",
                        "text": "```ts\nAdd a spherical grid that the user can see.\nos.addBotDropGrid(thisBot, {\n    type: \"sphere\",\n    position: { x: 0, y: 0, z: 3 },\n    showGrid: true\n});\n```"
                    },
                    {
                        "tagName": "dochash",
                        "text": "actions/portals"
                    },
                    {
                        "tagName": "docname",
                        "text": "os.addBotDropGrid"
                    }
                ]
            },
            "group": null
        },
        {
            "id": 1044,
            "order": 9999,
            "name": "os.addBotDropSnap",
            "reflection": {
                "id": 1044,
                "name": "__type",
                "variant": "signature",
                "kind": 4096,
                "flags": {},
                "comment": {
                    "summary": [
                        {
                            "kind": "text",
                            "text": "Specifies a list of snap targets that can be used to position the currently dragged bot when it is being dropped on the given bot. This function is useful for making some bots act like a \"selector\" or mask for drop areas.\n\nIf called when the user is not dragging anything, then this function does nothing."
                        }
                    ],
                    "blockTags": [
                        {
                            "tag": "@example",
                            "content": [
                                {
                                    "kind": "code",
                                    "text": "```ts\nSnap the dragged bot to the grid when it is being dropped on this bot.\nos.addBotDropSnap(thisBot, \"grid\");\n```"
                                }
                            ]
                        },
                        {
                            "tag": "@example",
                            "content": [
                                {
                                    "kind": "code",
                                    "text": "```ts\nSnap the dragged bot to this bot's faces.\nos.addBotDropSnap(thisBot, \"face\");\n```"
                                }
                            ]
                        },
                        {
                            "tag": "@example",
                            "content": [
                                {
                                    "kind": "code",
                                    "text": "```ts\nSnap the dragged bot to a point when it is being dropped on this bot.\nos.addBotDropSnap(thisBot, {\n    position: {\n        x: 0,\n        y: 0,\n        z: 3,\n    },\n    distance: 1\n});\n```"
                                }
                            ]
                        },
                        {
                            "tag": "@example",
                            "content": [
                                {
                                    "kind": "code",
                                    "text": "```ts\nSnap the dragged bot to the center or bot faces when it is being dropped on this bot.\nos.addBotDropSnap(thisBot, {\n    position: {\n        x: 0,\n        y: 0,\n        z: 0,\n    },\n    distance: 1\n}, \"face\");\n```"
                                }
                            ]
                        },
                        {
                            "tag": "@dochash",
                            "content": [
                                {
                                    "kind": "text",
                                    "text": "actions/portals"
                                }
                            ]
                        },
                        {
                            "tag": "@docname",
                            "content": [
                                {
                                    "kind": "text",
                                    "text": "os.addBotDropSnap"
                                }
                            ]
                        }
                    ]
                },
                "sources": [
                    {
                        "fileName": "src/aux-runtime/runtime/AuxLibrary.ts",
                        "line": 7454,
                        "character": 13,
                        "url": "https://github.com/KallynGowdy/casualos/blob/56c869f96/src/aux-runtime/runtime/AuxLibrary.ts#L7454"
                    }
                ],
                "parameters": [
                    {
                        "id": 1045,
                        "name": "bot",
                        "variant": "param",
                        "kind": 32768,
                        "flags": {},
                        "comment": {
                            "summary": [
                                {
                                    "kind": "text",
                                    "text": "the bot which, when the dragged bot is being dropped onto it (as indicated by "
                                },
                                {
                                    "kind": "text",
                                    "text": "[`@onDropEnter`](tags:@onDropEnter)"
                                },
                                {
                                    "kind": "text",
                                    "text": "/"
                                },
                                {
                                    "kind": "text",
                                    "text": "[`@onDropExit`](tags:@onDropExit)"
                                },
                                {
                                    "kind": "text",
                                    "text": "), the specified snap targets will take effect."
                                }
                            ],
                            "blockTags": []
                        },
                        "type": {
                            "type": "union",
                            "types": [
                                {
                                    "type": "intrinsic",
                                    "name": "string"
                                },
                                {
                                    "type": "reference",
                                    "target": 3355,
                                    "name": "Bot",
                                    "package": "@casual-simulation/aux-common",
                                    "id": 3355,
                                    "qualifiedName": "RuntimeBot"
                                }
                            ]
                        }
                    },
                    {
                        "id": 1046,
                        "name": "targets",
                        "variant": "param",
                        "kind": 32768,
                        "flags": {
                            "isRest": true
                        },
                        "comment": {
                            "summary": [
                                {
                                    "kind": "text",
                                    "text": "the snap targets that should be enabled when the bot is being dropped on."
                                }
                            ],
                            "blockTags": []
                        },
                        "type": {
                            "type": "array",
                            "elementType": {
                                "type": "reference",
                                "target": 2675,
                                "name": "SnapTarget",
                                "package": "@casual-simulation/aux-common",
                                "id": 2675,
                                "qualifiedName": "SnapTarget"
                            }
                        }
                    }
                ],
                "type": {
                    "type": "reference",
                    "target": 2706,
                    "name": "AddDropSnapPointsAction",
                    "package": "@casual-simulation/aux-common",
                    "id": 2706,
                    "qualifiedName": "AddDropSnapTargetsAction"
                }
            },
            "comment": {
                "text": "Specifies a list of snap targets that can be used to position the currently dragged bot when it is being dropped on the given bot. This function is useful for making some bots act like a \"selector\" or mask for drop areas.\n\nIf called when the user is not dragging anything, then this function does nothing.",
                "tags": [
                    {
                        "tagName": "example",
                        "text": "```ts\nSnap the dragged bot to the grid when it is being dropped on this bot.\nos.addBotDropSnap(thisBot, \"grid\");\n```"
                    },
                    {
                        "tagName": "example",
                        "text": "```ts\nSnap the dragged bot to this bot's faces.\nos.addBotDropSnap(thisBot, \"face\");\n```"
                    },
                    {
                        "tagName": "example",
                        "text": "```ts\nSnap the dragged bot to a point when it is being dropped on this bot.\nos.addBotDropSnap(thisBot, {\n    position: {\n        x: 0,\n        y: 0,\n        z: 3,\n    },\n    distance: 1\n});\n```"
                    },
                    {
                        "tagName": "example",
                        "text": "```ts\nSnap the dragged bot to the center or bot faces when it is being dropped on this bot.\nos.addBotDropSnap(thisBot, {\n    position: {\n        x: 0,\n        y: 0,\n        z: 0,\n    },\n    distance: 1\n}, \"face\");\n```"
                    },
                    {
                        "tagName": "dochash",
                        "text": "actions/portals"
                    },
                    {
                        "tagName": "docname",
                        "text": "os.addBotDropSnap"
                    }
                ]
            },
            "group": null
        },
        {
            "id": 1049,
            "order": 9999,
            "name": "os.addDropGrid",
            "reflection": {
                "id": 1049,
                "name": "__type",
                "variant": "signature",
                "kind": 4096,
                "flags": {},
                "comment": {
                    "summary": [
                        {
                            "kind": "text",
                            "text": "Specifies a list of grids that can be used to position the currently dragged bot.\n\nIf called when the user is not dragging anything, then this function does nothing."
                        }
                    ],
                    "blockTags": [
                        {
                            "tag": "@example",
                            "content": [
                                {
                                    "kind": "code",
                                    "text": "```ts\nAdd a grid for the portal that the bot currently exists in.\nos.addDropGrid({});\n```"
                                }
                            ]
                        },
                        {
                            "tag": "@example",
                            "content": [
                                {
                                    "kind": "code",
                                    "text": "```ts\nAdd a grid with a 60 degree X rotation.\nos.addDropGrid({\n    position: { x: 0, y: 0, z: 0 },\n    rotation: { x: 60 * (Math.PI / 180), y: 0, z: 0 },\n});\n```"
                                }
                            ]
                        },
                        {
                            "tag": "@example",
                            "content": [
                                {
                                    "kind": "code",
                                    "text": "```ts\nAdd a grid for a specific portal bot.\nos.addDropGrid({\n    portalBot: getBot(byTag('form', 'portal'), byTag('formAddress', 'myDimension')),\n});\n```"
                                }
                            ]
                        },
                        {
                            "tag": "@example",
                            "content": [
                                {
                                    "kind": "code",
                                    "text": "```ts\nAdd a grid with a custom size.\nos.addDropGrid({\n    position: { x: 0, y: 0, z: 3 },\n    bounds: { x: 20, y: 10 }\n});\n```"
                                }
                            ]
                        },
                        {
                            "tag": "@example",
                            "content": [
                                {
                                    "kind": "code",
                                    "text": "```ts\nAdd a grid that the user can see.\nos.addDropGrid({\n    position: { x: 0, y: 0, z: 3 },\n    showGrid: true\n});\n```"
                                }
                            ]
                        },
                        {
                            "tag": "@example",
                            "content": [
                                {
                                    "kind": "code",
                                    "text": "```ts\nAdd multiple grids with custom priorities\nos.addDropGrid({\n    position: { x: 0, y: 0, z: 3 },\n    bounds: { x: 10, y: 10 },\n    showGrid: true,\n    priority: 10\n}, {\n    position: { x: 0, y: 0, z: 0 },\n    bounds: { x: 20, y: 20 },\n    showGrid: true,\n    priority: 20\n});\n```"
                                }
                            ]
                        },
                        {
                            "tag": "@example",
                            "content": [
                                {
                                    "kind": "code",
                                    "text": "```ts\nAdd a spherical grid that the user can see.\nos.addDropGrid({\n    type: \"sphere\",\n    position: { x: 0, y: 0, z: 3 },\n    showGrid: true\n});\n```"
                                }
                            ]
                        },
                        {
                            "tag": "@dochash",
                            "content": [
                                {
                                    "kind": "text",
                                    "text": "actions/portals"
                                }
                            ]
                        },
                        {
                            "tag": "@docname",
                            "content": [
                                {
                                    "kind": "text",
                                    "text": "os.addDropGrid"
                                }
                            ]
                        }
                    ]
                },
                "sources": [
                    {
                        "fileName": "src/aux-runtime/runtime/AuxLibrary.ts",
                        "line": 7517,
                        "character": 13,
                        "url": "https://github.com/KallynGowdy/casualos/blob/56c869f96/src/aux-runtime/runtime/AuxLibrary.ts#L7517"
                    }
                ],
                "parameters": [
                    {
                        "id": 1050,
                        "name": "targets",
                        "variant": "param",
                        "kind": 32768,
                        "flags": {
                            "isRest": true
                        },
                        "comment": {
                            "summary": [
                                {
                                    "kind": "text",
                                    "text": "the list of grids to add."
                                }
                            ],
                            "blockTags": []
                        },
                        "type": {
                            "type": "array",
                            "elementType": {
                                "type": "reference",
                                "target": 2112,
                                "name": "SnapGridTarget",
                                "package": "@casual-simulation/aux-runtime",
                                "id": 2112,
                                "qualifiedName": "SnapGridTarget"
                            }
                        }
                    }
                ],
                "type": {
                    "type": "reference",
                    "target": {
                        "sourceFileName": "../src/aux-common/bots/BotEvents.ts",
                        "qualifiedName": "AddDropGridTargetsAction"
                    },
                    "name": "AddDropGridTargetsAction",
                    "package": "@casual-simulation/aux-common"
                }
            },
            "comment": {
                "text": "Specifies a list of grids that can be used to position the currently dragged bot.\n\nIf called when the user is not dragging anything, then this function does nothing.",
                "tags": [
                    {
                        "tagName": "example",
                        "text": "```ts\nAdd a grid for the portal that the bot currently exists in.\nos.addDropGrid({});\n```"
                    },
                    {
                        "tagName": "example",
                        "text": "```ts\nAdd a grid with a 60 degree X rotation.\nos.addDropGrid({\n    position: { x: 0, y: 0, z: 0 },\n    rotation: { x: 60 * (Math.PI / 180), y: 0, z: 0 },\n});\n```"
                    },
                    {
                        "tagName": "example",
                        "text": "```ts\nAdd a grid for a specific portal bot.\nos.addDropGrid({\n    portalBot: getBot(byTag('form', 'portal'), byTag('formAddress', 'myDimension')),\n});\n```"
                    },
                    {
                        "tagName": "example",
                        "text": "```ts\nAdd a grid with a custom size.\nos.addDropGrid({\n    position: { x: 0, y: 0, z: 3 },\n    bounds: { x: 20, y: 10 }\n});\n```"
                    },
                    {
                        "tagName": "example",
                        "text": "```ts\nAdd a grid that the user can see.\nos.addDropGrid({\n    position: { x: 0, y: 0, z: 3 },\n    showGrid: true\n});\n```"
                    },
                    {
                        "tagName": "example",
                        "text": "```ts\nAdd multiple grids with custom priorities\nos.addDropGrid({\n    position: { x: 0, y: 0, z: 3 },\n    bounds: { x: 10, y: 10 },\n    showGrid: true,\n    priority: 10\n}, {\n    position: { x: 0, y: 0, z: 0 },\n    bounds: { x: 20, y: 20 },\n    showGrid: true,\n    priority: 20\n});\n```"
                    },
                    {
                        "tagName": "example",
                        "text": "```ts\nAdd a spherical grid that the user can see.\nos.addDropGrid({\n    type: \"sphere\",\n    position: { x: 0, y: 0, z: 3 },\n    showGrid: true\n});\n```"
                    },
                    {
                        "tagName": "dochash",
                        "text": "actions/portals"
                    },
                    {
                        "tagName": "docname",
                        "text": "os.addDropGrid"
                    }
                ]
            },
            "group": null
        },
        {
            "id": 1040,
            "order": 9999,
            "name": "os.addDropSnap",
            "reflection": {
                "id": 1040,
                "name": "__type",
                "variant": "signature",
                "kind": 4096,
                "flags": {},
                "comment": {
                    "summary": [
                        {
                            "kind": "text",
                            "text": "Specifies a list of snap targets that can be used to position the currently dragged bot.\n\nIf called when the user is not dragging anything, then this function does nothing."
                        }
                    ],
                    "blockTags": [
                        {
                            "tag": "@example",
                            "content": [
                                {
                                    "kind": "code",
                                    "text": "```ts\nSnap the dragged bot to the grid.\nos.addDropSnap(\"grid\");\n```"
                                }
                            ]
                        },
                        {
                            "tag": "@example",
                            "content": [
                                {
                                    "kind": "code",
                                    "text": "```ts\nSnap the dragged bot to other bot faces.\nos.addDropSnap(\"face\");\n```"
                                }
                            ]
                        },
                        {
                            "tag": "@example",
                            "content": [
                                {
                                    "kind": "code",
                                    "text": "```ts\nSnap the dragged bot to a point.\nos.addDropSnap({\n    position: {\n        x: 0,\n        y: 0,\n        z: 3,\n    },\n    distance: 1\n});\n```"
                                }
                            ]
                        },
                        {
                            "tag": "@example",
                            "content": [
                                {
                                    "kind": "code",
                                    "text": "```ts\nSnap the dragged bot to the global X axis.\nos.addDropSnap({\n    direction: {\n        x: 1,\n        y: 0,\n        z: 0,\n    },\n    origin: {\n        x: 0,\n        y: 0,\n        z: 0\n    },\n    distance: 2\n});\n```"
                                }
                            ]
                        },
                        {
                            "tag": "@example",
                            "content": [
                                {
                                    "kind": "code",
                                    "text": "```ts\nSnap the dragged bot to the center or bot faces.\nos.addDropSnap({\n    position: {\n        x: 0,\n        y: 0,\n        z: 0,\n    },\n    distance: 1\n}, \"face\");\n```"
                                }
                            ]
                        },
                        {
                            "tag": "@dochash",
                            "content": [
                                {
                                    "kind": "text",
                                    "text": "actions/portals"
                                }
                            ]
                        },
                        {
                            "tag": "@docname",
                            "content": [
                                {
                                    "kind": "text",
                                    "text": "os.addDropSnap"
                                }
                            ]
                        }
                    ]
                },
                "sources": [
                    {
                        "fileName": "src/aux-runtime/runtime/AuxLibrary.ts",
                        "line": 7413,
                        "character": 13,
                        "url": "https://github.com/KallynGowdy/casualos/blob/56c869f96/src/aux-runtime/runtime/AuxLibrary.ts#L7413"
                    }
                ],
                "parameters": [
                    {
                        "id": 1041,
                        "name": "targets",
                        "variant": "param",
                        "kind": 32768,
                        "flags": {
                            "isRest": true
                        },
                        "comment": {
                            "summary": [
                                {
                                    "kind": "text",
                                    "text": "The list of snap targets to add."
                                }
                            ],
                            "blockTags": []
                        },
                        "type": {
                            "type": "array",
                            "elementType": {
                                "type": "reference",
                                "target": 2675,
                                "name": "SnapTarget",
                                "package": "@casual-simulation/aux-common",
                                "id": 2675,
                                "qualifiedName": "SnapTarget"
                            }
                        }
                    }
                ],
                "type": {
                    "type": "reference",
                    "target": 2706,
                    "name": "AddDropSnapPointsAction",
                    "package": "@casual-simulation/aux-common",
                    "id": 2706,
                    "qualifiedName": "AddDropSnapTargetsAction"
                }
            },
            "comment": {
                "text": "Specifies a list of snap targets that can be used to position the currently dragged bot.\n\nIf called when the user is not dragging anything, then this function does nothing.",
                "tags": [
                    {
                        "tagName": "example",
                        "text": "```ts\nSnap the dragged bot to the grid.\nos.addDropSnap(\"grid\");\n```"
                    },
                    {
                        "tagName": "example",
                        "text": "```ts\nSnap the dragged bot to other bot faces.\nos.addDropSnap(\"face\");\n```"
                    },
                    {
                        "tagName": "example",
                        "text": "```ts\nSnap the dragged bot to a point.\nos.addDropSnap({\n    position: {\n        x: 0,\n        y: 0,\n        z: 3,\n    },\n    distance: 1\n});\n```"
                    },
                    {
                        "tagName": "example",
                        "text": "```ts\nSnap the dragged bot to the global X axis.\nos.addDropSnap({\n    direction: {\n        x: 1,\n        y: 0,\n        z: 0,\n    },\n    origin: {\n        x: 0,\n        y: 0,\n        z: 0\n    },\n    distance: 2\n});\n```"
                    },
                    {
                        "tagName": "example",
                        "text": "```ts\nSnap the dragged bot to the center or bot faces.\nos.addDropSnap({\n    position: {\n        x: 0,\n        y: 0,\n        z: 0,\n    },\n    distance: 1\n}, \"face\");\n```"
                    },
                    {
                        "tagName": "dochash",
                        "text": "actions/portals"
                    },
                    {
                        "tagName": "docname",
                        "text": "os.addDropSnap"
                    }
                ]
            },
            "group": null
        },
        {
            "id": 1058,
            "order": 9999,
            "name": "os.enableCustomDragging",
            "reflection": {
                "id": 1058,
                "name": "__type",
                "variant": "signature",
                "kind": 4096,
                "flags": {},
                "comment": {
                    "summary": [
                        {
                            "kind": "text",
                            "text": "Enables \"custom dragging\" for the current bot drag operation.\n\nCustom dragging tells CasualOS to not move the bot to the dragged position. Instead, it will calculate where the bot would be dragged and send that information in the "
                        },
                        {
                            "kind": "text",
                            "text": "[`@onDragging`](tags:@onDragging)"
                        },
                        {
                            "kind": "text",
                            "text": " and "
                        },
                        {
                            "kind": "text",
                            "text": "[`@onAnyBotDragging`](tags:@onAnyBotDragging)"
                        },
                        {
                            "kind": "text",
                            "text": " listeners.\n\nThis is useful for custom bot dragging behavior like choosing to scale or rotate a bot instead of moving it."
                        }
                    ],
                    "blockTags": [
                        {
                            "tag": "@example",
                            "content": [
                                {
                                    "kind": "code",
                                    "text": "```ts\nEnable custom dragging for the current drag operation\nos.enableCustomDragging();\n```"
                                }
                            ]
                        },
                        {
                            "tag": "@dochash",
                            "content": [
                                {
                                    "kind": "text",
                                    "text": "actions/portals"
                                }
                            ]
                        },
                        {
                            "tag": "@docname",
                            "content": [
                                {
                                    "kind": "text",
                                    "text": "os.enableCustomDragging"
                                }
                            ]
                        }
                    ]
                },
                "sources": [
                    {
                        "fileName": "src/aux-runtime/runtime/AuxLibrary.ts",
                        "line": 7618,
                        "character": 13,
                        "url": "https://github.com/KallynGowdy/casualos/blob/56c869f96/src/aux-runtime/runtime/AuxLibrary.ts#L7618"
                    }
                ],
                "type": {
                    "type": "reference",
                    "target": 2732,
                    "name": "EnableCustomDraggingAction",
                    "package": "@casual-simulation/aux-common",
                    "id": 2732,
                    "qualifiedName": "EnableCustomDraggingAction"
                }
            },
            "comment": {
                "text": "Enables \"custom dragging\" for the current bot drag operation.\n\nCustom dragging tells CasualOS to not move the bot to the dragged position. Instead, it will calculate where the bot would be dragged and send that information in the @onDragging and @onAnyBotDragging listeners.\n\nThis is useful for custom bot dragging behavior like choosing to scale or rotate a bot instead of moving it.",
                "tags": [
                    {
                        "tagName": "example",
                        "text": "```ts\nEnable custom dragging for the current drag operation\nos.enableCustomDragging();\n```"
                    },
                    {
                        "tagName": "dochash",
                        "text": "actions/portals"
                    },
                    {
                        "tagName": "docname",
                        "text": "os.enableCustomDragging"
                    }
                ]
            },
            "group": null
        },
        {
            "id": 737,
            "order": 9999,
            "name": "os.focusOn-bot",
            "reflection": {
                "id": 737,
                "name": "__type",
                "variant": "signature",
                "kind": 4096,
                "flags": {},
                "comment": {
                    "summary": [
                        {
                            "kind": "text",
                            "text": "Focuses on the given bot. For bots in the bot or miniGridPortals, this animates the camera such that the portal focus point is placed on the given bot or position.\nFor input bots in menu portal, this gives keyboard focus to them.\n\nReturns a promise which resolves when the bot has been focused.\nFor the bot and miniGridPortals this is when the animation finishes and rejects if the user takes control of the camera during the animation. For menu bots this is when the input field is focused and rejects if the bot is not a input bot."
                        }
                    ],
                    "blockTags": [
                        {
                            "tag": "@example",
                            "content": [
                                {
                                    "kind": "code",
                                    "text": "```ts\nMove the player's view to show a bot named bob.\nawait os.focusOn(getBot(\"#name\", \"bob\"));\n```"
                                }
                            ]
                        },
                        {
                            "tag": "@example",
                            "content": [
                                {
                                    "kind": "code",
                                    "text": "```ts\nMove the player's view to show this bot from the top.\nawait os.focusOn(thisBot, {\n    rotation: {\n        x: 0,\n        y: 0\n    }\n});\n```"
                                }
                            ]
                        },
                        {
                            "tag": "@example",
                            "content": [
                                {
                                    "kind": "code",
                                    "text": "```ts\nMove the player's view to show this bot with a particular zoom value.\nawait os.focusOn(thisBot, {\n    zoom: 15\n});\n```"
                                }
                            ]
                        },
                        {
                            "tag": "@example",
                            "content": [
                                {
                                    "kind": "code",
                                    "text": "```ts\nFocus on this bot in the menu portal\nawait os.focusOn(thisBot, {\n    portal: 'menu'\n});\n```"
                                }
                            ]
                        },
                        {
                            "tag": "@example",
                            "content": [
                                {
                                    "kind": "code",
                                    "text": "```ts\nRotate the camera around the focus point 3 times.\nawait os.focusOn(thisBot, {\n    rotation: {\n        y: (Math.PI * 2) * 3,\n        normalize: false\n    }\n});\n```"
                                }
                            ]
                        },
                        {
                            "tag": "@example",
                            "content": [
                                {
                                    "kind": "code",
                                    "text": "```ts\nFocus the onClick tag in the systemPortal\nawait os.focusOn(thisBot, {\n    tag: 'onClick',\n    portal: 'system'\n});\n```"
                                }
                            ]
                        },
                        {
                            "tag": "@example",
                            "content": [
                                {
                                    "kind": "code",
                                    "text": "```ts\nFocus line 2 in the onClick tag in the sheetPortal\nawait os.focusOn(thisBot, {\n    tag: 'onClick',\n    lineNumber: 2,\n    portal: 'sheet'\n});\n```"
                                }
                            ]
                        },
                        {
                            "tag": "@example",
                            "content": [
                                {
                                    "kind": "code",
                                    "text": "```ts\nFocus index 9 through 15 in the onClick tag in the tagPortal\nawait os.focusOn(thisBot, {\n    tag: 'onClick',\n    startIndex: 9,\n    endIndex: 15,\n    portal: 'tag'\n});\n```"
                                }
                            ]
                        },
                        {
                            "tag": "@dochash",
                            "content": [
                                {
                                    "kind": "text",
                                    "text": "actions/portals"
                                }
                            ]
                        },
                        {
                            "tag": "@docname",
                            "content": [
                                {
                                    "kind": "text",
                                    "text": "os.focusOn"
                                }
                            ]
                        },
                        {
                            "tag": "@docid",
                            "content": [
                                {
                                    "kind": "text",
                                    "text": "os.focusOn-bot"
                                }
                            ]
                        }
                    ]
                },
                "sources": [
                    {
                        "fileName": "src/aux-runtime/runtime/AuxLibrary.ts",
                        "line": 5381,
                        "character": 13,
                        "url": "https://github.com/KallynGowdy/casualos/blob/56c869f96/src/aux-runtime/runtime/AuxLibrary.ts#L5381"
                    }
                ],
                "parameters": [
                    {
                        "id": 738,
                        "name": "bot",
                        "variant": "param",
                        "kind": 32768,
                        "flags": {},
                        "type": {
                            "type": "union",
                            "types": [
                                {
                                    "type": "intrinsic",
                                    "name": "string"
                                },
                                {
                                    "type": "reference",
                                    "target": 3355,
                                    "name": "Bot",
                                    "package": "@casual-simulation/aux-common",
                                    "id": 3355,
                                    "qualifiedName": "Bot"
                                }
                            ]
                        }
                    },
                    {
                        "id": 739,
                        "name": "options",
                        "variant": "param",
                        "kind": 32768,
                        "flags": {
                            "isOptional": true
                        },
                        "comment": {
                            "summary": [
                                {
                                    "kind": "text",
                                    "text": "the additional options to use for the focus operation. This can be used to change how the camera moves or to specify which portal the bot should be focused in."
                                }
                            ],
                            "blockTags": []
                        },
                        "type": {
                            "type": "reference",
                            "target": 2686,
                            "name": "FocusOnOptions",
                            "package": "@casual-simulation/aux-common",
                            "id": 2686,
                            "qualifiedName": "FocusOnOptions"
                        }
                    }
                ],
                "type": {
                    "type": "reference",
                    "target": {
                        "sourceFileName": "node_modules/typescript/lib/lib.es5.d.ts",
                        "qualifiedName": "Promise"
                    },
                    "typeArguments": [
                        {
                            "type": "intrinsic",
                            "name": "void"
                        }
                    ],
                    "name": "Promise",
                    "package": "typescript"
                }
            },
            "comment": {
                "text": "Focuses on the given bot. For bots in the bot or miniGridPortals, this animates the camera such that the portal focus point is placed on the given bot or position.\nFor input bots in menu portal, this gives keyboard focus to them.\n\nReturns a promise which resolves when the bot has been focused.\nFor the bot and miniGridPortals this is when the animation finishes and rejects if the user takes control of the camera during the animation. For menu bots this is when the input field is focused and rejects if the bot is not a input bot.",
                "tags": [
                    {
                        "tagName": "example",
                        "text": "```ts\nMove the player's view to show a bot named bob.\nawait os.focusOn(getBot(\"#name\", \"bob\"));\n```"
                    },
                    {
                        "tagName": "example",
                        "text": "```ts\nMove the player's view to show this bot from the top.\nawait os.focusOn(thisBot, {\n    rotation: {\n        x: 0,\n        y: 0\n    }\n});\n```"
                    },
                    {
                        "tagName": "example",
                        "text": "```ts\nMove the player's view to show this bot with a particular zoom value.\nawait os.focusOn(thisBot, {\n    zoom: 15\n});\n```"
                    },
                    {
                        "tagName": "example",
                        "text": "```ts\nFocus on this bot in the menu portal\nawait os.focusOn(thisBot, {\n    portal: 'menu'\n});\n```"
                    },
                    {
                        "tagName": "example",
                        "text": "```ts\nRotate the camera around the focus point 3 times.\nawait os.focusOn(thisBot, {\n    rotation: {\n        y: (Math.PI * 2) * 3,\n        normalize: false\n    }\n});\n```"
                    },
                    {
                        "tagName": "example",
                        "text": "```ts\nFocus the onClick tag in the systemPortal\nawait os.focusOn(thisBot, {\n    tag: 'onClick',\n    portal: 'system'\n});\n```"
                    },
                    {
                        "tagName": "example",
                        "text": "```ts\nFocus line 2 in the onClick tag in the sheetPortal\nawait os.focusOn(thisBot, {\n    tag: 'onClick',\n    lineNumber: 2,\n    portal: 'sheet'\n});\n```"
                    },
                    {
                        "tagName": "example",
                        "text": "```ts\nFocus index 9 through 15 in the onClick tag in the tagPortal\nawait os.focusOn(thisBot, {\n    tag: 'onClick',\n    startIndex: 9,\n    endIndex: 15,\n    portal: 'tag'\n});\n```"
                    },
                    {
                        "tagName": "dochash",
                        "text": "actions/portals"
                    },
                    {
                        "tagName": "docname",
                        "text": "os.focusOn"
                    },
                    {
                        "tagName": "docid",
                        "text": "os.focusOn-bot"
                    }
                ]
            },
            "group": null
        },
        {
            "id": 742,
            "order": 9999,
            "name": "os.focusOn-position",
            "reflection": {
                "id": 742,
                "name": "__type",
                "variant": "signature",
                "kind": 4096,
                "flags": {},
                "comment": {
                    "summary": [
                        {
                            "kind": "text",
                            "text": "Focuses on the given position.\n\nReturns a promise which resolves when the position has been focused."
                        }
                    ],
                    "blockTags": [
                        {
                            "tag": "@example",
                            "content": [
                                {
                                    "kind": "code",
                                    "text": "```ts\nMove the player's view to a specific position.\nawait os.focusOn({\n    x: 15,\n    y: 9.5\n});\n```"
                                }
                            ]
                        },
                        {
                            "tag": "@example",
                            "content": [
                                {
                                    "kind": "code",
                                    "text": "```ts\nFocus on Buckingham Palace in the map portal\nawait os.focusOn({\n    x: -0.141329,\n    y: 51.501541\n}, {\n    portal: 'map',\n    zoom: 10000\n});\n```"
                                }
                            ]
                        },
                        {
                            "tag": "@dochash",
                            "content": [
                                {
                                    "kind": "text",
                                    "text": "actions/portals"
                                }
                            ]
                        },
                        {
                            "tag": "@docname",
                            "content": [
                                {
                                    "kind": "text",
                                    "text": "os.focusOn"
                                }
                            ]
                        },
                        {
                            "tag": "@docid",
                            "content": [
                                {
                                    "kind": "text",
                                    "text": "os.focusOn-position"
                                }
                            ]
                        }
                    ]
                },
                "sources": [
                    {
                        "fileName": "src/aux-runtime/runtime/AuxLibrary.ts",
                        "line": 5415,
                        "character": 13,
                        "url": "https://github.com/KallynGowdy/casualos/blob/56c869f96/src/aux-runtime/runtime/AuxLibrary.ts#L5415"
                    }
                ],
                "parameters": [
                    {
                        "id": 743,
                        "name": "position",
                        "variant": "param",
                        "kind": 32768,
                        "flags": {},
                        "type": {
                            "type": "reflection",
                            "declaration": {
                                "id": 744,
                                "name": "__type",
                                "variant": "declaration",
                                "kind": 65536,
                                "flags": {},
                                "children": [
                                    {
                                        "id": 745,
                                        "name": "x",
                                        "variant": "declaration",
                                        "kind": 1024,
                                        "flags": {},
                                        "sources": [
                                            {
                                                "fileName": "src/aux-runtime/runtime/AuxLibrary.ts",
                                                "line": 5416,
                                                "character": 20,
                                                "url": "https://github.com/KallynGowdy/casualos/blob/56c869f96/src/aux-runtime/runtime/AuxLibrary.ts#L5416"
                                            }
                                        ],
                                        "type": {
                                            "type": "intrinsic",
                                            "name": "number"
                                        }
                                    },
                                    {
                                        "id": 746,
                                        "name": "y",
                                        "variant": "declaration",
                                        "kind": 1024,
                                        "flags": {},
                                        "sources": [
                                            {
                                                "fileName": "src/aux-runtime/runtime/AuxLibrary.ts",
                                                "line": 5416,
                                                "character": 31,
                                                "url": "https://github.com/KallynGowdy/casualos/blob/56c869f96/src/aux-runtime/runtime/AuxLibrary.ts#L5416"
                                            }
                                        ],
                                        "type": {
                                            "type": "intrinsic",
                                            "name": "number"
                                        }
                                    },
                                    {
                                        "id": 747,
                                        "name": "z",
                                        "variant": "declaration",
                                        "kind": 1024,
                                        "flags": {
                                            "isOptional": true
                                        },
                                        "sources": [
                                            {
                                                "fileName": "src/aux-runtime/runtime/AuxLibrary.ts",
                                                "line": 5416,
                                                "character": 42,
                                                "url": "https://github.com/KallynGowdy/casualos/blob/56c869f96/src/aux-runtime/runtime/AuxLibrary.ts#L5416"
                                            }
                                        ],
                                        "type": {
                                            "type": "intrinsic",
                                            "name": "number"
                                        }
                                    }
                                ],
                                "groups": [
                                    {
                                        "title": "Properties",
                                        "children": [
                                            745,
                                            746,
                                            747
                                        ]
                                    }
                                ],
                                "sources": [
                                    {
                                        "fileName": "src/aux-runtime/runtime/AuxLibrary.ts",
                                        "line": 5416,
                                        "character": 18,
                                        "url": "https://github.com/KallynGowdy/casualos/blob/56c869f96/src/aux-runtime/runtime/AuxLibrary.ts#L5416"
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "id": 748,
                        "name": "options",
                        "variant": "param",
                        "kind": 32768,
                        "flags": {
                            "isOptional": true
                        },
                        "comment": {
                            "summary": [
                                {
                                    "kind": "text",
                                    "text": "the additional options to use for the focus operation. This can be used to change how the camera moves or to specify which portal the bot should be focused in."
                                }
                            ],
                            "blockTags": []
                        },
                        "type": {
                            "type": "reference",
                            "target": 2686,
                            "name": "FocusOnOptions",
                            "package": "@casual-simulation/aux-common",
                            "id": 2686,
                            "qualifiedName": "FocusOnOptions"
                        }
                    }
                ],
                "type": {
                    "type": "reference",
                    "target": {
                        "sourceFileName": "node_modules/typescript/lib/lib.es5.d.ts",
                        "qualifiedName": "Promise"
                    },
                    "typeArguments": [
                        {
                            "type": "intrinsic",
                            "name": "void"
                        }
                    ],
                    "name": "Promise",
                    "package": "typescript"
                }
            },
            "comment": {
                "text": "Focuses on the given position.\n\nReturns a promise which resolves when the position has been focused.",
                "tags": [
                    {
                        "tagName": "example",
                        "text": "```ts\nMove the player's view to a specific position.\nawait os.focusOn({\n    x: 15,\n    y: 9.5\n});\n```"
                    },
                    {
                        "tagName": "example",
                        "text": "```ts\nFocus on Buckingham Palace in the map portal\nawait os.focusOn({\n    x: -0.141329,\n    y: 51.501541\n}, {\n    portal: 'map',\n    zoom: 10000\n});\n```"
                    },
                    {
                        "tagName": "dochash",
                        "text": "actions/portals"
                    },
                    {
                        "tagName": "docname",
                        "text": "os.focusOn"
                    },
                    {
                        "tagName": "docid",
                        "text": "os.focusOn-position"
                    }
                ]
            },
            "group": null
        },
        {
            "id": 946,
            "order": 9999,
            "name": "os.replaceDragBot",
            "reflection": {
                "id": 946,
                "name": "__type",
                "variant": "signature",
                "kind": 4096,
                "flags": {},
                "comment": {
                    "summary": [
                        {
                            "kind": "text",
                            "text": "Replaces the bot that the user is dragging with the given bot.\n\nIf called when the user is not dragging anything, then the given bot or mod will be dragged using the current input method. When in VR, the current input method is the most recently used VR controller. Otherwise it is the mouse/touchscreen."
                        }
                    ],
                    "blockTags": [
                        {
                            "tag": "@example",
                            "content": [
                                {
                                    "kind": "code",
                                    "text": "```ts\nDrag a clone of this bot.\nlet clone = create(thisBot);\nos.replaceDragBot(clone);\n```"
                                }
                            ]
                        },
                        {
                            "tag": "@dochash",
                            "content": [
                                {
                                    "kind": "text",
                                    "text": "actions/portals"
                                }
                            ]
                        },
                        {
                            "tag": "@docname",
                            "content": [
                                {
                                    "kind": "text",
                                    "text": "os.replaceDragBot"
                                }
                            ]
                        }
                    ]
                },
                "sources": [
                    {
                        "fileName": "src/aux-runtime/runtime/AuxLibrary.ts",
                        "line": 6635,
                        "character": 13,
                        "url": "https://github.com/KallynGowdy/casualos/blob/56c869f96/src/aux-runtime/runtime/AuxLibrary.ts#L6635"
                    }
                ],
                "parameters": [
                    {
                        "id": 947,
                        "name": "bot",
                        "variant": "param",
                        "kind": 32768,
                        "flags": {},
                        "comment": {
                            "summary": [
                                {
                                    "kind": "text",
                                    "text": "the bot that should be dragged. If given a bot while dragging, then that bot's "
                                },
                                {
                                    "kind": "text",
                                    "text": "[`@onDrag`](tags:@onDrag)"
                                },
                                {
                                    "kind": "text",
                                    "text": " will be skippped but "
                                },
                                {
                                    "kind": "text",
                                    "text": "[`@onDrop`](tags:@onDrop)"
                                },
                                {
                                    "kind": "text",
                                    "text": " will be called. If given a bot when not dragging, then that bot's "
                                },
                                {
                                    "kind": "text",
                                    "text": "[`@onDrag`](tags:@onDrag)"
                                },
                                {
                                    "kind": "text",
                                    "text": " and "
                                },
                                {
                                    "kind": "text",
                                    "text": "[`@onDrop`](tags:@onDrop)"
                                },
                                {
                                    "kind": "text",
                                    "text": " will be called."
                                }
                            ],
                            "blockTags": []
                        },
                        "type": {
                            "type": "reference",
                            "target": 3355,
                            "name": "Bot",
                            "package": "@casual-simulation/aux-common",
                            "id": 3355,
                            "qualifiedName": "RuntimeBot"
                        }
                    }
                ],
                "type": {
                    "type": "reference",
                    "target": 2505,
                    "name": "ReplaceDragBotAction",
                    "package": "@casual-simulation/aux-common",
                    "id": 2505,
                    "qualifiedName": "ReplaceDragBotAction"
                }
            },
            "comment": {
                "text": "Replaces the bot that the user is dragging with the given bot.\n\nIf called when the user is not dragging anything, then the given bot or mod will be dragged using the current input method. When in VR, the current input method is the most recently used VR controller. Otherwise it is the mouse/touchscreen.",
                "tags": [
                    {
                        "tagName": "example",
                        "text": "```ts\nDrag a clone of this bot.\nlet clone = create(thisBot);\nos.replaceDragBot(clone);\n```"
                    },
                    {
                        "tagName": "dochash",
                        "text": "actions/portals"
                    },
                    {
                        "tagName": "docname",
                        "text": "os.replaceDragBot"
                    }
                ]
            },
            "group": null
        }
    ],
    "references": {
        "CasualOSError": "types/error",
        "id-3539": "CasualOSError",
        "Quaternion": "types/math/rotations",
        "id-127": "Quaternion",
        "Rotation": "types/math/rotations",
        "id-154": "Rotation",
        "Vector2": "types/math/vectors",
        "id-1": "Vector2",
        "Vector3": "types/math/vectors",
        "id-58": "Vector3",
        "AIChatMessage": "types/ai",
        "id-3558": "AIChatMessage",
        "AIChatOptions": "types/ai",
        "id-3328": "AIChatOptions",
        "AIGenerateImageSuccess": "types/ai",
        "id-2478": "AIGenerateImageSuccess",
        "AIGenerateImageOptions": "types/ai",
        "id-3342": "AIGenerateImageOptions",
        "AIGenerateSkyboxOptions": "types/ai",
        "id-3338": "AIGenerateSkyboxOptions",
        "AIGenerateSkyboxRequest": "types/ai",
        "id-2471": "AIGenerateSkyboxRequest",
        "AIGenerateSkyboxResult": "types/ai",
        "id-2475": "AIGenerateSkyboxResult",
        "AIGeneratedImage": "types/ai",
        "id-2481": "AIGeneratedImage",
        "ARSupportedAction": "types/os",
        "id-3073": "ARSupportedAction",
        "AddCountFailure": "types/records/events",
        "id-3743": "AddCountFailure",
        "AddCountSuccess": "types/records/events",
        "id-3738": "AddCountSuccess",
        "AddDropSnapAction": "types/os",
        "id-2702": "AddDropSnapAction",
        "AddDropSnapPointsAction": "types/os",
        "id-2706": "AddDropSnapPointsAction",
        "AnalyticsRecordEventAction": "types/os",
        "id-3278": "AnalyticsRecordEventAction",
        "AnimateTagOptions": "types/animation",
        "id-2075": "AnimateTagOptions",
        "AttachDebuggerOptions": "types/debuggers/common",
        "id-2451": "AttachDebuggerOptions",
        "AuthData": "types/os",
        "id-3217": "AuthData",
        "CasualOSDevice": "types/os",
        "id-3526": "CasualOSDevice",
        "CasualOSVersion": "types/os",
        "id-3518": "CasualOSVersion",
        "AxisAndAngle": "types/math/rotations",
        "id-200": "AxisAndAngle",
        "BeginRecordingAction": "types/os",
        "id-3160": "BeginRecordingAction",
        "BotTagMasks": "types/core",
        "id-3495": "BotTagMasks",
        "BotTags": "types/core",
        "id-3410": "BotTags",
        "BotState": "types/core",
        "id-3508": "BotState",
        "BufferFormAddressGLTFAction": "types/os",
        "id-3285": "BufferFormAddressGLTFAction",
        "BufferSoundAction": "types/os",
        "id-2884": "BufferSoundAction",
        "CalculateRayFromCameraAction": "types/os",
        "id-3258": "CalculateRayFromCameraAction",
        "CancelSoundAction": "types/os",
        "id-2890": "CancelSoundAction",
        "CompiledBotListeners": "types/core",
        "id-3489": "CompiledBotListeners",
        "ConfigureWakeLockAction": "types/os",
        "id-3265": "ConfigureWakeLockAction",
        "ConvertGeolocationToWhat3WordsAction": "types/os",
        "id-2648": "ConvertGeolocationToWhat3WordsAction",
        "ConvertGeolocationToWhat3WordsOptions": "types/os",
        "id-2637": "ConvertGeolocationToWhat3WordsOptions",
        "CreatePublicRecordKeyFailure": "types/records/key",
        "id-3680": "CreatePublicRecordKeyFailure",
        "CreatePublicRecordKeySuccess": "types/records/key",
        "id-3676": "CreatePublicRecordKeySuccess",
        "CustomAppContainerAvailableAction": "types/os",
        "id-3117": "CustomAppContainerAvailableAction",
        "DebuggerCallFrame": "types/debuggers/common",
        "id-2404": "DebuggerCallFrame",
        "DebuggerFunctionLocation": "types/debuggers/common",
        "id-2439": "DebuggerFunctionLocation",
        "DebuggerPause": "types/debuggers/common",
        "id-2433": "DebuggerPause",
        "DebuggerTagMaskUpdate": "types/debuggers/common",
        "id-2412": "DebuggerTagMaskUpdate",
        "DebuggerTagUpdate": "types/debuggers/common",
        "id-2418": "DebuggerTagUpdate",
        "DebuggerVariable": "types/debuggers/common",
        "id-2445": "DebuggerVariable",
        "DefineGlobalBotAction": "types/os",
        "id-2641": "DefineGlobalBotAction",
        "DownloadAction": "types/os",
        "id-2896": "DownloadAction",
        "Easing": "types/animation",
        "id-2619": "Easing",
        "EnableARAction": "types/os",
        "id-3069": "EnableARAction",
        "EnableCollaborationAction": "types/os",
        "id-3028": "EnableCollaborationAction",
        "EnableCustomDraggingAction": "types/os",
        "id-2732": "EnableCustomDraggingAction",
        "EnablePOVAction": "types/os",
        "id-3087": "EnablePOVAction",
        "EnableVRAction": "types/os",
        "id-3083": "EnableVRAction",
        "EnableXROptions": "types/os",
        "id-2939": "EnableXROptions",
        "EndRecordingAction": "types/os",
        "id-3168": "EndRecordingAction",
        "EraseDataFailure": "types/records/data",
        "id-3714": "EraseDataFailure",
        "EraseDataSuccess": "types/records/data",
        "id-3710": "EraseDataSuccess",
        "EraseFileFailure": "types/records/files",
        "id-3733": "EraseFileFailure",
        "EraseFileSuccess": "types/records/files",
        "id-3729": "EraseFileSuccess",
        "EulerAnglesRotation": "types/math/rotations",
        "id-203": "EulerAnglesRotation",
        "ExitFullscreenAction": "types/os",
        "id-3102": "ExitFullscreenAction",
        "FocusOnOptions": "types/os",
        "id-2686": "FocusOnOptions",
        "FocusOnRotation": "types/os",
        "id-2698": "FocusOnRotation",
        "FormAnimationData": "types/os",
        "id-2984": "FormAnimationData",
        "FromToRotation": "types/math/rotations",
        "id-197": "FromToRotation",
        "GenericError": "types/error",
        "id-3536": "GenericError",
        "GetAverageFrameRateAction": "types/os",
        "id-3238": "GetAverageFrameRateAction",
        "GetCountFailure": "types/records/events",
        "id-3754": "GetCountFailure",
        "GetCountSuccess": "types/records/events",
        "id-3748": "GetCountSuccess",
        "GetDataFailure": "types/records/data",
        "id-3705": "GetDataFailure",
        "GetDataSuccess": "types/records/data",
        "id-3696": "GetDataSuccess",
        "GetGeolocationAction": "types/os",
        "id-3201": "GetGeolocationAction",
        "GetRoomOptionsFailure": "types/os",
        "id-2166": "GetRoomOptionsFailure",
        "GetRoomOptionsSuccess": "types/os",
        "id-2162": "GetRoomOptionsSuccess",
        "GetRoomRemoteOptionsFailure": "types/os",
        "id-2209": "GetRoomRemoteOptionsFailure",
        "GetRoomRemoteOptionsSuccess": "types/os",
        "id-2204": "GetRoomRemoteOptionsSuccess",
        "GetRoomTrackOptionsFailure": "types/os",
        "id-2185": "GetRoomTrackOptionsFailure",
        "GetRoomTrackOptionsSuccess": "types/os",
        "id-2180": "GetRoomTrackOptionsSuccess",
        "GetVoicesAction": "types/os",
        "id-3196": "GetVoicesAction",
        "GetWakeLockConfigurationAction": "types/os",
        "id-3271": "GetWakeLockConfigurationAction",
        "GoToTagAction": "types/os",
        "id-3206": "GoToTagAction",
        "GrantMarkerPermissionFailure": "types/records/policies",
        "id-3782": "GrantMarkerPermissionFailure",
        "GrantMarkerPermissionSuccess": "types/records/policies",
        "id-3780": "GrantMarkerPermissionSuccess",
        "GrantRoleFailure": "types/records/roles",
        "id-3768": "GrantRoleFailure",
        "GrantRoleSuccess": "types/records/roles",
        "id-3766": "GrantRoleSuccess",
        "HtmlAppEventAction": "types/os",
        "id-2548": "HtmlAppEventAction",
        "HtmlAppMethodCallAction": "types/os",
        "id-2553": "HtmlAppMethodCallAction",
        "ImageClassifierOptions": "types/os",
        "id-2737": "ImageClassifierOptions",
        "InstUpdate": "types/os",
        "id-3532": "InstUpdate",
        "JoinRoomFailure": "types/os",
        "id-2147": "JoinRoomFailure",
        "JoinRoomSuccess": "types/os",
        "id-2144": "JoinRoomSuccess",
        "LeaveRoomFailure": "types/os",
        "id-2156": "LeaveRoomFailure",
        "LeaveRoomSuccess": "types/os",
        "id-2153": "LeaveRoomSuccess",
        "ListDataFailure": "types/records/data",
        "id-3724": "ListDataFailure",
        "ListDataSuccess": "types/records/data",
        "id-3719": "ListDataSuccess",
        "ListFormAnimationsAction": "types/os",
        "id-2988": "ListFormAnimationsAction",
        "ListStudiosFailure": "types/records/studios",
        "id-3797": "ListStudiosFailure",
        "ListStudiosSuccess": "types/records/studios",
        "id-3794": "ListStudiosSuccess",
        "ListedStudio": "types/records/studios",
        "id-3801": "ListedStudio",
        "LoadBotsAction": "types/os",
        "id-3033": "LoadBotsAction",
        "LoadSpaceAction": "types/os",
        "id-2929": "LoadSpaceAction",
        "LocalFormAnimationAction": "types/os",
        "id-3040": "LocalFormAnimationAction",
        "LocalPositionTweenAction": "types/os",
        "id-3054": "LocalPositionTweenAction",
        "LocalTweenAction": "types/os",
        "id-3044": "LocalTweenAction",
        "LookRotation": "types/math/rotations",
        "id-211": "LookRotation",
        "MediaPermissionAction": "types/os",
        "id-3231": "MediaPermissionAction",
        "MediaPermissionOptions": "types/os",
        "id-2936": "MediaPermissionOptions",
        "MeetCommandAction": "types/os",
        "id-3173": "MeetCommandAction",
        "MeetFunctionAction": "types/os",
        "id-3180": "MeetFunctionAction",
        "Debugger": "types/debuggers/debugger",
        "id-2216": "Debugger",
        "NormalDebuggerOptions": "types/debuggers/common",
        "id-2423": "NormalDebuggerOptions",
        "OpenCircleWipeAction": "types/os",
        "id-3150": "OpenCircleWipeAction",
        "OpenCircleWipeOptions": "types/os",
        "id-3157": "OpenCircleWipeOptions",
        "PhotoCameraOptions": "types/camera",
        "id-3012": "PhotoCameraOptions",
        "OpenURLAction": "types/os",
        "id-2873": "OpenURLAction",
        "ParsedBotLink": "types/core",
        "id-3514": "ParsedBotLink",
        "PartialBotState": "types/core",
        "id-3511": "PartialBotState",
        "PausableDebugger": "types/debuggers/pausable-debugger",
        "id-2272": "PausableDebugger",
        "PausableDebuggerOptions": "types/debuggers/common",
        "id-2428": "PausableDebuggerOptions",
        "PauseTrigger": "types/debuggers/common",
        "id-2391": "PauseTrigger",
        "PauseTriggerOptions": "types/debuggers/common",
        "id-2399": "PauseTriggerOptions",
        "Photo": "types/camera",
        "id-3024": "Photo",
        "PlaySoundAction": "types/os",
        "id-2877": "PlaySoundAction",
        "PossiblePauseTriggerLocation": "types/debuggers/common",
        "id-2386": "PossiblePauseTriggerLocation",
        "PseudoRandomNumberGenerator": "types/core",
        "id-2460": "PseudoRandomNumberGenerator",
        "QuaternionRotation": "types/math/rotations",
        "id-215": "QuaternionRotation",
        "RaycastFromCameraAction": "types/os",
        "id-3243": "RaycastFromCameraAction",
        "RaycastInPortalAction": "types/os",
        "id-3250": "RaycastInPortalAction",
        "RaycastRay": "types/os",
        "id-2140": "RaycastRay",
        "RaycastResult": "types/os",
        "id-2137": "RaycastResult",
        "RecordActionOptions": "types/records/extra",
        "id-3291": "RecordActionOptions",
        "RecordDataFailure": "types/records/data",
        "id-3690": "RecordDataFailure",
        "RecordDataSuccess": "types/records/data",
        "id-3686": "RecordDataSuccess",
        "RecordFileFailure": "types/records/files",
        "id-2107": "RecordFileFailure",
        "RecordFileSuccess": "types/records/files",
        "id-2103": "RecordFileSuccess",
        "RecordedFile": "types/experimental",
        "id-2999": "RecordedFile",
        "Recording": "types/experimental",
        "id-2997": "Recording",
        "RecordingOptions": "types/experimental",
        "id-3004": "RecordingOptions",
        "RegisterBuiltinPortalAction": "types/os",
        "id-3112": "RegisterBuiltinPortalAction",
        "RegisterCustomAppAction": "types/os",
        "id-3120": "RegisterCustomAppAction",
        "RegisterHtmlAppAction": "types/os",
        "id-3133": "RegisterHtmlAppAction",
        "RegisterPrefixOptions": "types/core",
        "id-2994": "RegisterPrefixOptions",
        "RejectAction": "types/os",
        "id-2902": "RejectAction",
        "RemoteAction": "types/os",
        "id-3807": "RemoteAction",
        "RequestAuthDataAction": "types/os",
        "id-3211": "RequestAuthDataAction",
        "RequestFullscreenAction": "types/os",
        "id-3100": "RequestFullscreenAction",
        "RevokeMarkerPermissionFailure": "types/records/policies",
        "id-3789": "RevokeMarkerPermissionFailure",
        "RevokeMarkerPermissionSuccess": "types/records/policies",
        "id-3787": "RevokeMarkerPermissionSuccess",
        "RevokeRoleFailure": "types/records/roles",
        "id-3775": "RevokeRoleFailure",
        "RevokeRoleSuccess": "types/records/roles",
        "id-3773": "RevokeRoleSuccess",
        "RoomJoinOptions": "types/os",
        "id-3294": "RoomJoinOptions",
        "RoomOptions": "types/os",
        "id-3303": "RoomOptions",
        "RoomRemoteOptions": "types/os",
        "id-3319": "RoomRemoteOptions",
        "RoomTrackOptions": "types/os",
        "id-3307": "RoomTrackOptions",
        "RunScriptAction": "types/os",
        "id-2916": "RunScriptAction",
        "RuntimeBot": "types/core",
        "id-3355": "RuntimeBot",
        "RuntimeBotLinks": "types/core",
        "id-3501": "RuntimeBotLinks",
        "RuntimeBotVars": "types/core",
        "id-3498": "RuntimeBotVars",
        "SequenceRotation": "types/math/rotations",
        "id-222": "SequenceRotation",
        "SerializableMutationRecord": "types/os",
        "id-2562": "SerializableMutationRecord",
        "SessionSelector": "types/os",
        "id-2486": "SessionSelector",
        "SetAppOutputAction": "types/os",
        "id-3145": "SetAppOutputAction",
        "SetClipboardAction": "types/os",
        "id-2905": "SetClipboardAction",
        "SetRoomOptionsSuccess": "types/os",
        "id-2171": "SetRoomOptionsSuccess",
        "SetRoomTrackOptions": "types/os",
        "id-3325": "SetRoomTrackOptions",
        "SetRoomTrackOptionsFailure": "types/os",
        "id-2197": "SetRoomTrackOptionsFailure",
        "SetRoomTrackOptionsSuccess": "types/os",
        "id-2192": "SetRoomTrackOptionsSuccess",
        "ShareAction": "types/os",
        "id-3104": "ShareAction",
        "ShareOptions": "types/os",
        "id-2682": "ShareOptions",
        "ShowChatBarAction": "types/os",
        "id-2908": "ShowChatBarAction",
        "ShowChatOptions": "types/os",
        "id-2676": "ShowChatOptions",
        "ShowConfirmAction": "types/os",
        "id-2758": "ShowConfirmAction",
        "ShowConfirmOptions": "types/os",
        "id-2753": "ShowConfirmOptions",
        "ShowInputOptions": "types/os",
        "id-2742": "ShowInputOptions",
        "ShowJoinCodeAction": "types/os",
        "id-3096": "ShowJoinCodeAction",
        "ShowUploadAuxFileAction": "types/os",
        "id-2922": "ShowUploadAuxFileAction",
        "ShowUploadFilesAction": "types/os",
        "id-2924": "ShowUploadFilesAction",
        "SnapAxis": "types/os",
        "id-2656": "SnapAxis",
        "SnapGrid": "types/os",
        "id-2711": "SnapGrid",
        "SnapGridTarget": "types/os",
        "id-2112": "SnapGridTarget",
        "SnapPoint": "types/os",
        "id-2668": "SnapPoint",
        "SpeakTextAction": "types/os",
        "id-3187": "SpeakTextAction",
        "SpeakTextOptions": "types/experimental",
        "id-2456": "SpeakTextOptions",
        "StartFormAnimationAction": "types/os",
        "id-2965": "StartFormAnimationAction",
        "StartFormAnimationOptions": "types/os",
        "id-2941": "StartFormAnimationOptions",
        "StopFormAnimationAction": "types/os",
        "id-2954": "StopFormAnimationAction",
        "StopFormAnimationOptions": "types/os",
        "id-2962": "StopFormAnimationOptions",
        "SuccessfulGeolocation": "types/os",
        "id-2623": "SuccessfulGeolocation",
        "SyntheticVoice": "types/experimental",
        "id-3008": "SyntheticVoice",
        "TweenOptions": "types/experimental",
        "id-2453": "TweenOptions",
        "UnregisterCustomAppAction": "types/os",
        "id-3127": "UnregisterCustomAppAction",
        "UnregisterHtmlAppAction": "types/os",
        "id-3140": "UnregisterHtmlAppAction",
        "UnsuccessfulGeolocation": "types/os",
        "id-2633": "UnsuccessfulGeolocation",
        "UpdateEventRecordFailure": "types/records/events",
        "id-3761": "UpdateEventRecordFailure",
        "UpdateEventRecordSuccess": "types/records/events",
        "id-3759": "UpdateEventRecordSuccess",
        "UpdateHtmlAppAction": "types/os",
        "id-2542": "UpdateHtmlAppAction",
        "UploadedFile": "types/os",
        "id-2133": "UploadedFile",
        "VRSupportedAction": "types/os",
        "id-3078": "VRSupportedAction",
        "WakeLockConfiguration": "types/os",
        "id-3276": "WakeLockConfiguration",
        "WebhookOptions": "types/web",
        "id-2056": "WebhookOptions",
        "WebhookResult": "types/web",
        "id-2068": "WebhookResult",
        "AddCountResult": "types/records/events",
        "id-3737": "AddCountResult",
        "AvailablePermissions": "types/permissions",
        "id-3564": "AvailablePermissions",
        "BarcodeFormat": "types/os",
        "id-2736": "BarcodeFormat",
        "BotFilter": "types/core",
        "id-2090": "BotFilter",
        "BotSpace": "types/core",
        "id-3485": "BotSpace",
        "CameraType": "types/os",
        "id-2735": "CameraType",
        "CreatePublicRecordKeyResult": "types/records/key",
        "id-3675": "CreatePublicRecordKeyResult",
        "CustomAppOutputType": "types/os",
        "id-3115": "CustomAppOutputType",
        "CustomPortalOutputMode": "types/os",
        "id-3116": "CustomPortalOutputMode",
        "EaseMode": "types/animation",
        "id-2618": "EaseMode",
        "EaseType": "types/animation",
        "id-2617": "EaseType",
        "EraseDataResult": "types/records/data",
        "id-3709": "EraseDataResult",
        "EraseFileResult": "types/records/files",
        "id-3728": "EraseFileResult",
        "Geolocation": "types/os",
        "id-2622": "Geolocation",
        "GetCountResult": "types/records/events",
        "id-3747": "GetCountResult",
        "GetDataResult": "types/records/data",
        "id-3695": "GetDataResult",
        "GetRoomOptionsResult": "types/os",
        "id-2161": "GetRoomOptionsResult",
        "GetRoomRemoteOptionsResult": "types/os",
        "id-2203": "GetRoomRemoteOptionsResult",
        "GetRoomTrackOptionsResult": "types/os",
        "id-2179": "GetRoomTrackOptionsResult",
        "GrantMarkerPermissionResult": "types/records/policies",
        "id-3779": "GrantMarkerPermissionResult",
        "GrantRoleResult": "types/records/roles",
        "id-3765": "GrantRoleResult",
        "JoinRoomResult": "types/os",
        "id-2143": "JoinRoomResult",
        "LeaveRoomResult": "types/os",
        "id-2152": "LeaveRoomResult",
        "ListDataResult": "types/records/data",
        "id-3718": "ListDataResult",
        "ListStudiosResult": "types/records/studios",
        "id-3793": "ListStudiosResult",
        "Mod": "types/core",
        "id-2085": "Mod",
        "PortalType": "types/core",
        "id-3517": "PortalType",
        "PossiblePauseTriggerStates": "types/debuggers/common",
        "id-2390": "PossiblePauseTriggerStates",
        "RecordDataResult": "types/records/data",
        "id-3685": "RecordDataResult",
        "RecordFileResult": "types/records/files",
        "id-2102": "RecordFileResult",
        "RevokeMarkerPermissionResult": "types/records/policies",
        "id-3786": "RevokeMarkerPermissionResult",
        "RevokeRoleResult": "types/records/roles",
        "id-3772": "RevokeRoleResult",
        "SetRoomOptionsResult": "types/os",
        "id-2170": "SetRoomOptionsResult",
        "SetRoomTrackOptionsResult": "types/os",
        "id-2191": "SetRoomTrackOptionsResult",
        "ShowInputSuptype": "types/os",
        "id-2752": "ShowInputSuptype",
        "ShowInputType": "types/os",
        "id-2751": "ShowInputType",
        "SnapTarget": "types/os",
        "id-2675": "SnapTarget",
        "TagFilter": "types/core",
        "id-2086": "TagFilter",
        "UpdateEventRecordResult": "types/records/events",
        "id-3758": "UpdateEventRecordResult",
        "animateTag-byOptions": "actions/utility",
        "id-591": "animateTag-byOptions",
        "getbot-tag": "actions/data",
        "id-256": "getbot-tag",
        "getbots-tag": "actions/data",
        "id-240": "getbots-tag",
        "animateTag-byTag": "actions/utility",
        "id-585": "animateTag-byTag",
        "changeState": "actions/data",
        "id-401": "changeState",
        "create": "actions/data",
        "id-385": "create",
        "destroy": "actions/data",
        "id-389": "destroy",
        "getbot-filters": "actions/data",
        "id-249": "getbot-filters",
        "getbots-filters": "actions/data",
        "id-233": "getbots-filters",
        "priorityShout": "actions/event",
        "id-450": "priorityShout",
        "shout": "actions/event",
        "id-463": "shout",
        "updateBotLinks": "actions/data",
        "id-423": "updateBotLinks",
        "whisper": "actions/event",
        "id-489": "whisper",
        "action.perform": "actions/event",
        "id-1591": "action.perform",
        "action.reject": "actions/event",
        "id-1595": "action.reject",
        "ai.chat-string": "actions/ai",
        "id-650": "ai.chat-string",
        "ai.chat-message": "actions/ai",
        "id-653": "ai.chat-message",
        "ai.chat-messages": "actions/ai",
        "id-656": "ai.chat-messages",
        "ai.generateImage-string": "actions/ai",
        "id-669": "ai.generateImage-string",
        "ai.generateImage-request": "actions/ai",
        "id-673": "ai.generateImage-request",
        "ai.generateSkybox-string": "actions/ai",
        "id-661": "ai.generateSkybox-string",
        "ai.generateSkybox-request": "actions/ai",
        "id-665": "ai.generateSkybox-request",
        "applyDiffToSnapshot": "actions/data",
        "id-306": "applyDiffToSnapshot",
        "applyMod": "actions/mods",
        "id-375": "applyMod",
        "assert": "actions/debuggers",
        "id-634": "assert",
        "assertEqual": "actions/debuggers",
        "id-639": "assertEqual",
        "atPosition": "actions/bot-filters",
        "id-520": "atPosition",
        "byCreator": "actions/bot-filters",
        "id-541": "byCreator",
        "byID": "actions/bot-filters",
        "id-508": "byID",
        "byMod": "actions/bot-filters",
        "id-512": "byMod",
        "bySpace": "actions/bot-filters",
        "id-537": "bySpace",
        "byTag": "actions/bot-filters",
        "id-503": "byTag",
        "bytes.fromBase64String": "actions/bytes",
        "id-1804": "bytes.fromBase64String",
        "bytes.fromBase64Url": "actions/bytes",
        "id-1821": "bytes.fromBase64Url",
        "bytes.fromHexString": "actions/bytes",
        "id-1812": "bytes.fromHexString",
        "bytes.toBase64String": "actions/bytes",
        "id-1800": "bytes.toBase64String",
        "bytes.toBase64Url": "actions/bytes",
        "id-1816": "bytes.toBase64Url",
        "bytes.toHexString": "actions/bytes",
        "id-1808": "bytes.toHexString",
        "clearAnimations": "actions/utility",
        "id-605": "clearAnimations",
        "clearTagMasks": "actions/data",
        "id-329": "clearTagMasks",
        "crypto.hash-raw": "actions/crypto",
        "id-1827": "crypto.hash-raw",
        "crypto.hash-string": "actions/crypto",
        "id-1833": "crypto.hash-string",
        "crypto.hmac-raw": "actions/crypto",
        "id-1864": "crypto.hmac-raw",
        "crypto.hmac-string": "actions/crypto",
        "id-1857": "crypto.hmac-string",
        "crypto.asymmetric.decrypt": "actions/crypto",
        "id-1922": "crypto.asymmetric.decrypt",
        "crypto.asymmetric.encrypt": "actions/crypto",
        "id-1917": "crypto.asymmetric.encrypt",
        "crypto.asymmetric.isEncrypted": "actions/crypto",
        "id-1928": "crypto.asymmetric.isEncrypted",
        "crypto.asymmetric.isKeypair": "actions/crypto",
        "id-1913": "crypto.asymmetric.isKeypair",
        "crypto.asymmetric.keypair": "actions/crypto",
        "id-1909": "crypto.asymmetric.keypair",
        "crypto.encrypt": "actions/crypto",
        "id-1893": "crypto.encrypt",
        "crypto.hmacSha256": "actions/crypto",
        "id-1883": "crypto.hmacSha256",
        "crypto.hmacSha512": "actions/crypto",
        "id-1888": "crypto.hmacSha512",
        "crypto.isEncrypted": "actions/crypto",
        "id-1903": "crypto.isEncrypted",
        "crypto.keypair": "actions/crypto",
        "id-1932": "crypto.keypair",
        "crypto.sha256": "actions/crypto",
        "id-1849": "crypto.sha256",
        "crypto.sha512": "actions/crypto",
        "id-1853": "crypto.sha512",
        "crypto.sign": "actions/crypto",
        "id-1936": "crypto.sign",
        "deleteTagMaskText": "actions/data",
        "id-356": "deleteTagMaskText",
        "deleteTagText": "actions/data",
        "id-349": "deleteTagText",
        "diffSnapshots": "actions/data",
        "id-301": "diffSnapshots",
        "either": "actions/bot-filters",
        "id-545": "either",
        "os.beginAudioRecording": "actions/audio",
        "id-1638": "os.beginAudioRecording",
        "experiment.beginRecording": "actions/experimental",
        "id-1645": "experiment.beginRecording",
        "os.endAudioRecording": "actions/audio",
        "id-1642": "os.endAudioRecording",
        "experiment.endRecording": "actions/experimental",
        "id-1649": "experiment.endRecording",
        "experiment.getAnchorPointPosition": "actions/experimental",
        "id-1628": "experiment.getAnchorPointPosition",
        "experiment.getVoices": "actions/experimental",
        "id-1657": "experiment.getVoices",
        "experiment.localFormAnimation": "actions/experimental",
        "id-1601": "experiment.localFormAnimation",
        "experiment.localPositionTween": "actions/experimental",
        "id-1606": "experiment.localPositionTween",
        "experiment.localRotationTween": "actions/experimental",
        "id-1617": "experiment.localRotationTween",
        "experiment.speakText": "actions/experimental",
        "id-1652": "experiment.speakText",
        "getBotLinks": "actions/data",
        "id-419": "getBotLinks",
        "getBotPosition": "actions/data",
        "id-275": "getBotPosition",
        "getBotRotation": "actions/data",
        "id-280": "getBotRotation",
        "getBotTagValues": "actions/data",
        "id-265": "getBotTagValues",
        "getFormattedJSON": "actions/data",
        "id-293": "getFormattedJSON",
        "getID": "actions/data",
        "id-285": "getID",
        "getJSON": "actions/data",
        "id-289": "getJSON",
        "getLink": "actions/data",
        "id-415": "getLink",
        "getMod": "actions/mods",
        "id-270": "getMod",
        "getSnapshot": "actions/data",
        "id-297": "getSnapshot",
        "getTag": "actions/data",
        "id-311": "getTag",
        "inDimension": "actions/bot-filters",
        "id-516": "inDimension",
        "inStack": "actions/bot-filters",
        "id-526": "inStack",
        "insertTagMaskText": "actions/data",
        "id-341": "insertTagMaskText",
        "insertTagText": "actions/data",
        "id-334": "insertTagText",
        "math.abs": "actions/math",
        "id-1674": "math.abs",
        "math.addVectors": "actions/math",
        "id-1744": "math.addVectors",
        "math.areClose": "actions/math",
        "id-1775": "math.areClose",
        "math.avg": "actions/math",
        "id-1666": "math.avg",
        "math.degreesToRadians": "actions/math",
        "id-1700": "math.degreesToRadians",
        "math.getAnchorPointOffset": "actions/math",
        "id-1740": "math.getAnchorPointOffset",
        "math.getForwardDirection": "actions/math",
        "id-1708": "math.getForwardDirection",
        "math.getSeededRandomNumberGenerator": "actions/math",
        "id-1682": "math.getSeededRandomNumberGenerator",
        "math.intersectPlane": "actions/math",
        "id-1717": "math.intersectPlane",
        "math.negateVector": "actions/math",
        "id-1754": "math.negateVector",
        "math.normalizeVector": "actions/math",
        "id-1759": "math.normalizeVector",
        "math.radiansToDegrees": "actions/math",
        "id-1704": "math.radiansToDegrees",
        "math.random": "actions/math",
        "id-1695": "math.random",
        "math.randomInt": "actions/math",
        "id-1690": "math.randomInt",
        "math.scaleVector": "actions/math",
        "id-1769": "math.scaleVector",
        "math.setRandomSeed": "actions/math",
        "id-1686": "math.setRandomSeed",
        "math.sqrt": "actions/math",
        "id-1670": "math.sqrt",
        "math.stdDev": "actions/math",
        "id-1678": "math.stdDev",
        "math.subtractVectors": "actions/math",
        "id-1749": "math.subtractVectors",
        "math.sum": "actions/math",
        "id-1662": "math.sum",
        "math.vectorLength": "actions/math",
        "id-1764": "math.vectorLength",
        "neighboring": "actions/bot-filters",
        "id-531": "neighboring",
        "not": "actions/bot-filters",
        "id-552": "not",
        "os.attachDebugger": "actions/debuggers",
        "id-1547": "os.attachDebugger",
        "os.createDebugger-normal": "actions/debuggers",
        "id-1536": "os.createDebugger-normal",
        "os.createDebugger-pausable": "actions/debuggers",
        "id-1540": "os.createDebugger-pausable",
        "os.focusOn-bot": "actions/portals",
        "id-737": "os.focusOn-bot",
        "os.focusOn-position": "actions/portals",
        "id-742": "os.focusOn-position",
        "os.getExecutingDebugger": "actions/debuggers",
        "id-1544": "os.getExecutingDebugger",
        "showChat-options": "actions/os",
        "id-764": "showChat-options",
        "showChat-placeholder": "actions/os",
        "id-760": "showChat-placeholder",
        "os.showInput": "actions/portals",
        "id-983": "os.showInput",
        "os.addBotDropGrid": "actions/portals",
        "id-1053": "os.addBotDropGrid",
        "os.addBotDropSnap": "actions/portals",
        "id-1044": "os.addBotDropSnap",
        "os.addDropGrid": "actions/portals",
        "id-1049": "os.addDropGrid",
        "os.addDropSnap": "actions/portals",
        "id-1040": "os.addDropSnap",
        "os.applyUpdatesToInst": "actions/os",
        "id-1499": "os.applyUpdatesToInst",
        "os.arSupported": "actions/xr",
        "id-808": "os.arSupported",
        "os.bufferFormAddressGLTF": "actions/animations",
        "id-1457": "os.bufferFormAddressGLTF",
        "os.bufferSound": "actions/audio",
        "id-1016": "os.bufferSound",
        "os.calculateRayFromCamera": "actions/portals",
        "id-1452": "os.calculateRayFromCamera",
        "os.cancelSound": "actions/audio",
        "id-1020": "os.cancelSound",
        "os.capturePhoto": "actions/camera",
        "id-903": "os.capturePhoto",
        "os.closeBarcodeScanner": "actions/barcodes",
        "id-881": "os.closeBarcodeScanner",
        "os.closeCircleWipe": "actions/portals",
        "id-1032": "os.closeCircleWipe",
        "os.closeImageClassifier": "actions/image-classification",
        "id-896": "os.closeImageClassifier",
        "os.closePhotoCamera": "actions/camera",
        "id-907": "os.closePhotoCamera",
        "os.closeQRCodeScanner": "actions/barcodes",
        "id-867": "os.closeQRCodeScanner",
        "os.compileApp": "actions/app",
        "id-1167": "os.compileApp",
        "os.convertGeolocationToWhat3Words": "actions/os",
        "id-1437": "os.convertGeolocationToWhat3Words",
        "os.countEvents": "actions/records",
        "id-1427": "os.countEvents",
        "os.createInitializationUpdate": "actions/os",
        "id-1495": "os.createInitializationUpdate",
        "os.device": "actions/os",
        "id-782": "os.device",
        "os.disableAR": "actions/xr",
        "id-798": "os.disableAR",
        "os.disablePointOfView": "actions/portals",
        "id-823": "os.disablePointOfView",
        "os.disableVR": "actions/xr",
        "id-805": "os.disableVR",
        "os.disableWakeLock": "actions/os",
        "id-829": "os.disableWakeLock",
        "os.download": "actions/files",
        "id-835": "os.download",
        "os.downloadBots": "actions/files",
        "id-841": "os.downloadBots",
        "os.downloadBotsAsInitialzationUpdate": "actions/files",
        "id-846": "os.downloadBotsAsInitialzationUpdate",
        "os.downloadInst": "actions/files",
        "id-854": "os.downloadInst",
        "os.enableAR": "actions/xr",
        "id-794": "os.enableAR",
        "os.enableCollaboration": "actions/os",
        "id-788": "os.enableCollaboration",
        "os.enableCustomDragging": "actions/portals",
        "id-1058": "os.enableCustomDragging",
        "os.enablePointOfView": "actions/portals",
        "id-814": "os.enablePointOfView",
        "os.enableVR": "actions/xr",
        "id-801": "os.enableVR",
        "os.eraseData": "actions/records",
        "id-1370": "os.eraseData",
        "os.eraseManualApprovalData": "actions/records",
        "id-1376": "os.eraseManualApprovalData",
        "os.exitFullscreenMode": "actions/portals",
        "id-708": "os.exitFullscreenMode",
        "os.getAverageFrameRate": "actions/os",
        "id-1115": "os.getAverageFrameRate",
        "os.getCameraPosition": "actions/portals",
        "id-1071": "os.getCameraPosition",
        "os.getCameraRotation": "actions/portals",
        "id-1075": "os.getCameraRotation",
        "os.getCurrentDimension": "actions/portals",
        "id-954": "os.getCurrentDimension",
        "os.getCurrentInst": "actions/portals",
        "id-960": "os.getCurrentInst",
        "os.getCurrentInstUpdate": "actions/os",
        "id-1503": "os.getCurrentInstUpdate",
        "os.getData": "actions/records",
        "id-1352": "os.getData",
        "os.getDimensionalDepth": "actions/portals",
        "id-973": "os.getDimensionalDepth",
        "os.getFocusPoint": "actions/portals",
        "id-1083": "os.getFocusPoint",
        "os.getGeolocation": "actions/os",
        "id-1065": "os.getGeolocation",
        "os.getInputList": "actions/portals",
        "id-1108": "os.getInputList",
        "os.getInputState": "actions/portals",
        "id-1103": "os.getInputState",
        "os.getInstStateFromUpdates": "actions/os",
        "id-1491": "os.getInstStateFromUpdates",
        "os.getManualApprovalData": "actions/records",
        "id-1358": "os.getManualApprovalData",
        "os.getMediaPermission": "actions/os",
        "id-1111": "os.getMediaPermission",
        "os.getMenuDimension": "actions/portals",
        "id-963": "os.getMenuDimension",
        "os.getMiniPortalDimension": "actions/portals",
        "id-966": "os.getMiniPortalDimension",
        "os.getPointerDirection": "actions/portals",
        "id-1099": "os.getPointerDirection",
        "os.getPointerPosition": "actions/portals",
        "id-1087": "os.getPointerPosition",
        "os.getPointerRotation": "actions/portals",
        "id-1091": "os.getPointerRotation",
        "os.getPortalDimension": "actions/portals",
        "id-969": "os.getPortalDimension",
        "os.getPublicRecordKey": "actions/records",
        "id-1277": "os.getPublicRecordKey",
        "os.getRoomOptions": "actions/rooms",
        "id-1133": "os.getRoomOptions",
        "os.getRoomRemoteOptions": "actions/rooms",
        "id-1148": "os.getRoomRemoteOptions",
        "os.getRoomTrackOptions": "actions/rooms",
        "id-1137": "os.getRoomTrackOptions",
        "os.getSubjectlessPublicRecordKey": "actions/records",
        "id-1281": "os.getSubjectlessPublicRecordKey",
        "os.getWakeLockConfiguration": "actions/os",
        "id-832": "os.getWakeLockConfiguration",
        "os.goToDimension": "actions/portals",
        "id-997": "os.goToDimension",
        "os.goToURL": "actions/portals",
        "id-1001": "os.goToURL",
        "os.grantInstAdminPermission": "actions/records",
        "id-1299": "os.grantInstAdminPermission",
        "os.grantInstRole": "actions/records",
        "id-1319": "os.grantInstRole",
        "os.grantRecordMarkerPermission": "actions/records",
        "id-1285": "os.grantRecordMarkerPermission",
        "os.grantUserRole": "actions/records",
        "id-1304": "os.grantUserRole",
        "os.hasBotInMiniPortal": "actions/portals",
        "id-1024": "os.hasBotInMiniPortal",
        "os.hideBarcode": "actions/barcodes",
        "id-889": "os.hideBarcode",
        "os.hideChat": "actions/os",
        "id-772": "os.hideChat",
        "os.hideHtml": "actions/os",
        "id-715": "os.hideHtml",
        "os.hideQRCode": "actions/barcodes",
        "id-874": "os.hideQRCode",
        "os.hideTips": "actions/portals",
        "id-696": "os.hideTips",
        "os.importAUX": "actions/files",
        "id-938": "os.importAUX",
        "os.inSheet": "actions/portals",
        "id-1068": "os.inSheet",
        "os.isCollaborative": "actions/os",
        "id-785": "os.isCollaborative",
        "os.isInDimension": "actions/portals",
        "id-950": "os.isInDimension",
        "os.isRecordKey": "actions/records",
        "id-1334": "os.isRecordKey",
        "os.joinRoom": "actions/rooms",
        "id-1118": "os.joinRoom",
        "os.leaveRoom": "actions/rooms",
        "id-1123": "os.leaveRoom",
        "os.listBuiltinTags": "actions/app",
        "id-1268": "os.listBuiltinTags",
        "os.listData": "actions/records",
        "id-1364": "os.listData",
        "os.listFormAnimations": "actions/animations",
        "id-1472": "os.listFormAnimations",
        "os.listInstUpdates": "actions/os",
        "id-1488": "os.listInstUpdates",
        "os.listUserStudios": "actions/records",
        "id-1433": "os.listUserStudios",
        "os.loadInst": "actions/os",
        "id-930": "os.loadInst",
        "os.log": "actions/os",
        "id-1061": "os.log",
        "os.meetCommand": "actions/os",
        "id-1524": "os.meetCommand",
        "os.meetFunction": "actions/os",
        "id-1529": "os.meetFunction",
        "os.openBarcodeScanner": "actions/barcodes",
        "id-877": "os.openBarcodeScanner",
        "os.openCircleWipe": "actions/portals",
        "id-1036": "os.openCircleWipe",
        "os.openDevConsole": "actions/os",
        "id-1009": "os.openDevConsole",
        "os.openImageClassifier": "actions/image-classification",
        "id-892": "os.openImageClassifier",
        "os.openPhotoCamera": "actions/camera",
        "id-899": "os.openPhotoCamera",
        "os.openQRCodeScanner": "actions/barcodes",
        "id-863": "os.openQRCodeScanner",
        "os.openURL": "actions/portals",
        "id-1005": "os.openURL",
        "os.parseBotsFromData": "actions/files",
        "id-942": "os.parseBotsFromData",
        "os.playSound": "actions/audio",
        "id-1012": "os.playSound",
        "os.raycast": "actions/portals",
        "id-1446": "os.raycast",
        "os.raycastFromCamera": "actions/portals",
        "id-1441": "os.raycastFromCamera",
        "os.recordData": "actions/records",
        "id-1338": "os.recordData",
        "os.recordEvent": "actions/records",
        "id-1421": "os.recordEvent",
        "os.recordFile": "actions/records",
        "id-1382": "os.recordFile",
        "os.recordManualApprovalData": "actions/records",
        "id-1345": "os.recordManualApprovalData",
        "os.registerApp": "actions/app",
        "id-1158": "os.registerApp",
        "os.registerTagPrefix": "actions/app",
        "id-1153": "os.registerTagPrefix",
        "os.remoteCount": "actions/os",
        "id-1510": "os.remoteCount",
        "os.remotes": "actions/os",
        "id-1485": "os.remotes",
        "os.replaceDragBot": "actions/portals",
        "id-946": "os.replaceDragBot",
        "os.requestAuthBot": "actions/records",
        "id-1271": "os.requestAuthBot",
        "os.requestAuthBotInBackground": "actions/records",
        "id-1274": "os.requestAuthBotInBackground",
        "os.requestFullscreenMode": "actions/portals",
        "id-705": "os.requestFullscreenMode",
        "os.requestWakeLock": "actions/os",
        "id-826": "os.requestWakeLock",
        "os.revokeInstRole": "actions/records",
        "id-1327": "os.revokeInstRole",
        "os.revokeRecordMarkerPermission": "actions/records",
        "id-1292": "os.revokeRecordMarkerPermission",
        "os.revokeUserRole": "actions/records",
        "id-1312": "os.revokeUserRole",
        "os.run": "actions/os",
        "id-775": "os.run",
        "os.setClipboard": "actions/os",
        "id-718": "os.setClipboard",
        "os.setRoomOptions": "actions/rooms",
        "id-1128": "os.setRoomOptions",
        "os.setRoomTrackOptions": "actions/rooms",
        "id-1142": "os.setRoomTrackOptions",
        "os.share": "actions/os",
        "id-1028": "os.share",
        "os.showBarcode": "actions/barcodes",
        "id-884": "os.showBarcode",
        "os.showConfirm": "actions/portals",
        "id-993": "os.showConfirm",
        "os.showHtml": "actions/os",
        "id-711": "os.showHtml",
        "os.showInputForTag": "actions/portals",
        "id-977": "os.showInputForTag",
        "os.showJoinCode": "actions/barcodes",
        "id-700": "os.showJoinCode",
        "os.showQRCode": "actions/barcodes",
        "id-870": "os.showQRCode",
        "os.showUploadAuxFile": "actions/files",
        "id-857": "os.showUploadAuxFile",
        "os.showUploadFiles": "actions/files",
        "id-860": "os.showUploadFiles",
        "os.sleep": "actions/os",
        "id-680": "os.sleep",
        "os.startFormAnimation": "actions/animations",
        "id-1461": "os.startFormAnimation",
        "os.stopFormAnimation": "actions/animations",
        "id-1467": "os.stopFormAnimation",
        "os.tip": "actions/portals",
        "id-689": "os.tip",
        "os.toast": "actions/os",
        "id-684": "os.toast",
        "os.totalRemoteCount": "actions/os",
        "id-1514": "os.totalRemoteCount",
        "os.unloadInst": "actions/os",
        "id-934": "os.unloadInst",
        "os.unregisterApp": "actions/app",
        "id-1163": "os.unregisterApp",
        "os.version": "actions/os",
        "id-779": "os.version",
        "os.vrSupported": "actions/xr",
        "id-811": "os.vrSupported",
        "os.agreedUponTime": "actions/time",
        "id-911": "os.agreedUponTime",
        "os.deadReckoningTime": "actions/time",
        "id-919": "os.deadReckoningTime",
        "os.instLatency": "actions/time",
        "id-913": "os.instLatency",
        "os.instTimeOffset": "actions/time",
        "id-915": "os.instTimeOffset",
        "os.instTimeOffsetSpread": "actions/time",
        "id-917": "os.instTimeOffsetSpread",
        "os.localTime": "actions/time",
        "id-909": "os.localTime",
        "remote": "actions/event",
        "id-559": "remote",
        "sendRemoteData": "actions/event",
        "id-571": "sendRemoteData",
        "removeTags": "actions/data",
        "id-364": "removeTags",
        "renameTag": "actions/data",
        "id-369": "renameTag",
        "setTag": "actions/data",
        "id-316": "setTag",
        "setTagMask": "actions/data",
        "id-322": "setTagMask",
        "subtractMods": "actions/mods",
        "id-380": "subtractMods",
        "superShout": "actions/event",
        "id-445": "superShout",
        "uuid": "actions/data",
        "id-582": "uuid",
        "web.get": "actions/web",
        "id-1955": "web.get",
        "web.hook": "actions/web",
        "id-1966": "web.hook",
        "web.post": "actions/web",
        "id-1960": "web.post",
        "configBot": "actions/os",
        "id-645": "configBot"
    }
}