{
    "hash": "actions/experimental",
    "pageTitle": "Experimental Actions",
    "pageDescription": "Experimental actions are actions that are not yet fully supported and may change in the future.",
    "pageSidebarLabel": "Experimental",
    "contents": [
        {
            "id": 1686,
            "order": 9999,
            "name": "experiment.beginRecording",
            "reflection": {
                "id": 1686,
                "name": "__type",
                "kind": 4096,
                "kindString": "Call signature",
                "flags": {},
                "comment": {
                    "shortText": "Starts a new recording. Returns a promise that resolves when recording has started.\nThe returned promise will throw an error if recording could not be started. Reasons for this include insufficient permissions and not having a microphone.",
                    "tags": [
                        {
                            "tag": "example",
                            "paramName": "",
                            "text": "Record for 10 seconds and download the files.\nawait experiment.beginRecording({\n    audio: true,\n    video: true,\n    screen: false\n});\nawait os.sleep(10000);\nconst data = await experiment.endRecording();\nlet index = 0;\nfor(let file of data.files) {\n    os.download(file.data, `file-${index}`);\n    index += 1;\n}\n"
                        },
                        {
                            "tag": "example",
                            "paramName": "",
                            "text": "Record the screen with microphone audio.\nawait experiment.beginRecording({\n    audio: ['microphone'],\n    video: false,\n    screen: true\n});\nawait os.sleep(10000);\nconst data = await experiment.endRecording();\nlet index = 0;\nfor(let file of data.files) {\n    os.download(file.data, `file-${index}`);\n    index += 1;\n}\n"
                        },
                        {
                            "tag": "dochash",
                            "paramName": "",
                            "text": "actions/experimental"
                        },
                        {
                            "tag": "doctitle",
                            "paramName": "",
                            "text": "Experimental Actions"
                        },
                        {
                            "tag": "docsidebar",
                            "paramName": "",
                            "text": "Experimental"
                        },
                        {
                            "tag": "docdescription",
                            "paramName": "",
                            "text": "Experimental actions are actions that are not yet fully supported and may change in the future."
                        },
                        {
                            "tag": "docname",
                            "paramName": "",
                            "text": "experiment.beginRecording\n"
                        }
                    ]
                },
                "parameters": [
                    {
                        "id": 1687,
                        "name": "options",
                        "kind": 32768,
                        "kindString": "Parameter",
                        "flags": {
                            "isOptional": true
                        },
                        "comment": {
                            "shortText": "the options that should be used for the recording.\nDefaults to: `{ audio: true, video: true, screen: false }`\n",
                            "tags": []
                        },
                        "type": {
                            "type": "reference",
                            "id": 2696,
                            "name": "RecordingOptions"
                        }
                    }
                ],
                "type": {
                    "type": "reference",
                    "typeArguments": [
                        {
                            "type": "intrinsic",
                            "name": "void"
                        }
                    ],
                    "qualifiedName": "Promise",
                    "package": "typescript",
                    "name": "Promise"
                }
            },
            "comment": {
                "shortText": "Starts a new recording. Returns a promise that resolves when recording has started.\nThe returned promise will throw an error if recording could not be started. Reasons for this include insufficient permissions and not having a microphone.",
                "text": "",
                "tags": [
                    {
                        "tagName": "example",
                        "paramName": "",
                        "text": "Record for 10 seconds and download the files.\nawait experiment.beginRecording({\n    audio: true,\n    video: true,\n    screen: false\n});\nawait os.sleep(10000);\nconst data = await experiment.endRecording();\nlet index = 0;\nfor(let file of data.files) {\n    os.download(file.data, `file-${index}`);\n    index += 1;\n}\n"
                    },
                    {
                        "tagName": "example",
                        "paramName": "",
                        "text": "Record the screen with microphone audio.\nawait experiment.beginRecording({\n    audio: ['microphone'],\n    video: false,\n    screen: true\n});\nawait os.sleep(10000);\nconst data = await experiment.endRecording();\nlet index = 0;\nfor(let file of data.files) {\n    os.download(file.data, `file-${index}`);\n    index += 1;\n}\n"
                    },
                    {
                        "tagName": "dochash",
                        "paramName": "",
                        "text": "actions/experimental"
                    },
                    {
                        "tagName": "doctitle",
                        "paramName": "",
                        "text": "Experimental Actions"
                    },
                    {
                        "tagName": "docsidebar",
                        "paramName": "",
                        "text": "Experimental"
                    },
                    {
                        "tagName": "docdescription",
                        "paramName": "",
                        "text": "Experimental actions are actions that are not yet fully supported and may change in the future."
                    },
                    {
                        "tagName": "docname",
                        "paramName": "",
                        "text": "experiment.beginRecording\n"
                    }
                ]
            },
            "group": null
        },
        {
            "id": 1690,
            "order": 9999,
            "name": "experiment.endRecording",
            "reflection": {
                "id": 1690,
                "name": "__type",
                "kind": 4096,
                "kindString": "Call signature",
                "flags": {},
                "comment": {
                    "shortText": "Stops the recording that is in progress. Returns a promise that resolves with the recorded data.",
                    "tags": [
                        {
                            "tag": "example",
                            "paramName": "",
                            "text": "Record for 10 seconds and download the files.\nawait experiment.beginRecording({\n    audio: true,\n    video: true,\n    screen: false\n});\nawait os.sleep(10000);\nconst data = await experiment.endRecording();\nlet index = 0;\nfor(let file of data.files) {\n    os.download(file.data, `file-${index}`);\n    index += 1;\n}\n"
                        },
                        {
                            "tag": "dochash",
                            "paramName": "",
                            "text": "actions/experimental"
                        },
                        {
                            "tag": "docname",
                            "paramName": "",
                            "text": "experiment.endRecording\n"
                        }
                    ]
                },
                "type": {
                    "type": "reference",
                    "typeArguments": [
                        {
                            "type": "reference",
                            "id": 2689,
                            "name": "Recording"
                        }
                    ],
                    "qualifiedName": "Promise",
                    "package": "typescript",
                    "name": "Promise"
                }
            },
            "comment": {
                "shortText": "Stops the recording that is in progress. Returns a promise that resolves with the recorded data.",
                "text": "",
                "tags": [
                    {
                        "tagName": "example",
                        "paramName": "",
                        "text": "Record for 10 seconds and download the files.\nawait experiment.beginRecording({\n    audio: true,\n    video: true,\n    screen: false\n});\nawait os.sleep(10000);\nconst data = await experiment.endRecording();\nlet index = 0;\nfor(let file of data.files) {\n    os.download(file.data, `file-${index}`);\n    index += 1;\n}\n"
                    },
                    {
                        "tagName": "dochash",
                        "paramName": "",
                        "text": "actions/experimental"
                    },
                    {
                        "tagName": "docname",
                        "paramName": "",
                        "text": "experiment.endRecording\n"
                    }
                ]
            },
            "group": null
        },
        {
            "id": 1669,
            "order": 9999,
            "name": "experiment.getAnchorPointPosition",
            "reflection": {
                "id": 1669,
                "name": "__type",
                "kind": 4096,
                "kindString": "Call signature",
                "flags": {},
                "comment": {
                    "shortText": "Gets the absolute position in the given dimension that the center of the given bot would be placed at if the bot was using the given anchor point.",
                    "tags": [
                        {
                            "tag": "example",
                            "paramName": "",
                            "text": "Get the top anchor point of the current bot in the \"home\" dimension.\nconst point = experiment.getAnchorPointPosition(bot, \"home\", \"top\");\nos.toast(point);\n"
                        },
                        {
                            "tag": "example",
                            "paramName": "",
                            "text": "Get the back right anchor point of the current bot in the \"home\" dimension.\nconst point = experiment.getAnchorPointPosition(bot, \"home\", [ 0.5, -0.5, 0 ]);\nos.toast(point);\n"
                        },
                        {
                            "tag": "example",
                            "paramName": "",
                            "text": "Place bots at each of the anchor points.\nlet points = [\n    'top',\n    'bottom',\n    'front',\n    'back',\n    'left',\n    'right',\n    'center',\n];\n\nfor(let point of points) {\n    let pos = experiment.getAnchorPointPosition(bot, os.getCurrentDimension(), point);\n    create({\n        space: 'tempShared',\n        color: 'green',\n        [os.getCurrentDimension()]: true,\n        [os.getCurrentDimension() + \"X\"]: pos.x,\n        [os.getCurrentDimension() + \"Y\"]: pos.y,\n        [os.getCurrentDimension() + \"Z\"]: pos.z,\n        anchorPoint: 'center',\n        targetAnchorPoint: point,\n        scale: 0.1,\n    });\n}\n"
                        },
                        {
                            "tag": "dochash",
                            "paramName": "",
                            "text": "actions/experimental"
                        },
                        {
                            "tag": "docname",
                            "paramName": "",
                            "text": "experiment.getAnchorPointPosition\n"
                        }
                    ]
                },
                "parameters": [
                    {
                        "id": 1670,
                        "name": "bot",
                        "kind": 32768,
                        "kindString": "Parameter",
                        "flags": {},
                        "comment": {
                            "shortText": "the bot that the anchor point position should be calculated for.",
                            "tags": []
                        },
                        "type": {
                            "type": "reference",
                            "id": 2734,
                            "name": "Bot"
                        }
                    },
                    {
                        "id": 1671,
                        "name": "dimension",
                        "kind": 32768,
                        "kindString": "Parameter",
                        "flags": {},
                        "comment": {
                            "shortText": "the dimension that the anchor point position should be calculated in.",
                            "tags": []
                        },
                        "type": {
                            "type": "intrinsic",
                            "name": "string"
                        }
                    },
                    {
                        "id": 1672,
                        "name": "anchorPoint",
                        "kind": 32768,
                        "kindString": "Parameter",
                        "flags": {},
                        "comment": {
                            "shortText": "the anchor point that should be calculated. Can be any valid [`#anchorPoint`](tags:anchorPoint) value.\n",
                            "tags": []
                        },
                        "type": {
                            "type": "reference",
                            "name": "BotAnchorPoint"
                        }
                    }
                ],
                "type": {
                    "type": "reflection",
                    "declaration": {
                        "id": 1673,
                        "name": "__type",
                        "kind": 65536,
                        "kindString": "Type literal",
                        "flags": {},
                        "children": [
                            {
                                "id": 1674,
                                "name": "x",
                                "kind": 1024,
                                "kindString": "Property",
                                "flags": {},
                                "sources": [
                                    {
                                        "fileName": "src/aux-common/runtime/AuxLibrary.ts",
                                        "line": 11902,
                                        "character": 9
                                    }
                                ],
                                "type": {
                                    "type": "intrinsic",
                                    "name": "number"
                                }
                            },
                            {
                                "id": 1675,
                                "name": "y",
                                "kind": 1024,
                                "kindString": "Property",
                                "flags": {},
                                "sources": [
                                    {
                                        "fileName": "src/aux-common/runtime/AuxLibrary.ts",
                                        "line": 11902,
                                        "character": 20
                                    }
                                ],
                                "type": {
                                    "type": "intrinsic",
                                    "name": "number"
                                }
                            },
                            {
                                "id": 1676,
                                "name": "z",
                                "kind": 1024,
                                "kindString": "Property",
                                "flags": {},
                                "sources": [
                                    {
                                        "fileName": "src/aux-common/runtime/AuxLibrary.ts",
                                        "line": 11902,
                                        "character": 31
                                    }
                                ],
                                "type": {
                                    "type": "intrinsic",
                                    "name": "number"
                                }
                            }
                        ],
                        "groups": [
                            {
                                "title": "Properties",
                                "kind": 1024,
                                "children": [
                                    1674,
                                    1675,
                                    1676
                                ]
                            }
                        ],
                        "sources": [
                            {
                                "fileName": "src/aux-common/runtime/AuxLibrary.ts",
                                "line": 11902,
                                "character": 7
                            }
                        ]
                    }
                }
            },
            "comment": {
                "shortText": "Gets the absolute position in the given dimension that the center of the given bot would be placed at if the bot was using the given anchor point.",
                "text": "",
                "tags": [
                    {
                        "tagName": "example",
                        "paramName": "",
                        "text": "Get the top anchor point of the current bot in the \"home\" dimension.\nconst point = experiment.getAnchorPointPosition(bot, \"home\", \"top\");\nos.toast(point);\n"
                    },
                    {
                        "tagName": "example",
                        "paramName": "",
                        "text": "Get the back right anchor point of the current bot in the \"home\" dimension.\nconst point = experiment.getAnchorPointPosition(bot, \"home\", [ 0.5, -0.5, 0 ]);\nos.toast(point);\n"
                    },
                    {
                        "tagName": "example",
                        "paramName": "",
                        "text": "Place bots at each of the anchor points.\nlet points = [\n    'top',\n    'bottom',\n    'front',\n    'back',\n    'left',\n    'right',\n    'center',\n];\n\nfor(let point of points) {\n    let pos = experiment.getAnchorPointPosition(bot, os.getCurrentDimension(), point);\n    create({\n        space: 'tempShared',\n        color: 'green',\n        [os.getCurrentDimension()]: true,\n        [os.getCurrentDimension() + \"X\"]: pos.x,\n        [os.getCurrentDimension() + \"Y\"]: pos.y,\n        [os.getCurrentDimension() + \"Z\"]: pos.z,\n        anchorPoint: 'center',\n        targetAnchorPoint: point,\n        scale: 0.1,\n    });\n}\n"
                    },
                    {
                        "tagName": "dochash",
                        "paramName": "",
                        "text": "actions/experimental"
                    },
                    {
                        "tagName": "docname",
                        "paramName": "",
                        "text": "experiment.getAnchorPointPosition\n"
                    }
                ]
            },
            "group": null
        },
        {
            "id": 1698,
            "order": 9999,
            "name": "experiment.getVoices",
            "reflection": {
                "id": 1698,
                "name": "__type",
                "kind": 4096,
                "kindString": "Call signature",
                "flags": {},
                "comment": {
                    "shortText": "Gets the list of synthetic voices that are supported by the system.\nReturns a promise that resolves with the voices.",
                    "tags": [
                        {
                            "tag": "example",
                            "paramName": "",
                            "text": "Toast the list of voices that are supported.\nconst voices = await experiment.getVoices();\nos.toast(voices);\n"
                        },
                        {
                            "tag": "example",
                            "paramName": "",
                            "text": "Get the first US English voice.\nconst voices = await experiment.getVoices();\nconst usEnglish = voices.find(v => v.language === \"en-US\");\nos.toast(usEnglish);\n"
                        },
                        {
                            "tag": "dochash",
                            "paramName": "",
                            "text": "actions/experimental"
                        },
                        {
                            "tag": "docname",
                            "paramName": "",
                            "text": "experiment.getVoices\n"
                        }
                    ]
                },
                "type": {
                    "type": "reference",
                    "typeArguments": [
                        {
                            "type": "array",
                            "elementType": {
                                "type": "reference",
                                "id": 2700,
                                "name": "SyntheticVoice"
                            }
                        }
                    ],
                    "qualifiedName": "Promise",
                    "package": "typescript",
                    "name": "Promise"
                }
            },
            "comment": {
                "shortText": "Gets the list of synthetic voices that are supported by the system.\nReturns a promise that resolves with the voices.",
                "text": "",
                "tags": [
                    {
                        "tagName": "example",
                        "paramName": "",
                        "text": "Toast the list of voices that are supported.\nconst voices = await experiment.getVoices();\nos.toast(voices);\n"
                    },
                    {
                        "tagName": "example",
                        "paramName": "",
                        "text": "Get the first US English voice.\nconst voices = await experiment.getVoices();\nconst usEnglish = voices.find(v => v.language === \"en-US\");\nos.toast(usEnglish);\n"
                    },
                    {
                        "tagName": "dochash",
                        "paramName": "",
                        "text": "actions/experimental"
                    },
                    {
                        "tagName": "docname",
                        "paramName": "",
                        "text": "experiment.getVoices\n"
                    }
                ]
            },
            "group": null
        },
        {
            "id": 1642,
            "order": 9999,
            "name": "experiment.localFormAnimation",
            "reflection": {
                "id": 1642,
                "name": "__type",
                "kind": 4096,
                "kindString": "Call signature",
                "flags": {},
                "comment": {
                    "shortText": "Locally plays the given animation on the given bot.",
                    "text": "If an animation is already playing, it will be interrupted.\nWhen the given animation is finished playing, the interrupted animation will be restored.\n",
                    "tags": [
                        {
                            "tag": "example",
                            "paramName": "",
                            "text": "Play the \"jump\" animation on this bot.\nexperiment.localFormAnimation(this, \"jump\");\n"
                        },
                        {
                            "tag": "dochash",
                            "paramName": "",
                            "text": "actions/experimental"
                        },
                        {
                            "tag": "docname",
                            "paramName": "",
                            "text": "experiment.localFormAnimation\n"
                        }
                    ]
                },
                "parameters": [
                    {
                        "id": 1643,
                        "name": "bot",
                        "kind": 32768,
                        "kindString": "Parameter",
                        "flags": {},
                        "comment": {
                            "shortText": "the Bot or Bot ID that the animation should be played on.",
                            "tags": []
                        },
                        "type": {
                            "type": "union",
                            "types": [
                                {
                                    "type": "intrinsic",
                                    "name": "string"
                                },
                                {
                                    "type": "reference",
                                    "id": 2734,
                                    "name": "Bot"
                                }
                            ]
                        }
                    },
                    {
                        "id": 1644,
                        "name": "animation",
                        "kind": 32768,
                        "kindString": "Parameter",
                        "flags": {},
                        "comment": {
                            "shortText": "the name or index of the animation that should be played.\n",
                            "tags": []
                        },
                        "type": {
                            "type": "union",
                            "types": [
                                {
                                    "type": "intrinsic",
                                    "name": "string"
                                },
                                {
                                    "type": "intrinsic",
                                    "name": "number"
                                }
                            ]
                        }
                    }
                ],
                "type": {
                    "type": "reference",
                    "name": "LocalFormAnimationAction"
                }
            },
            "comment": {
                "shortText": "Locally plays the given animation on the given bot.",
                "text": "If an animation is already playing, it will be interrupted.\nWhen the given animation is finished playing, the interrupted animation will be restored.\n",
                "tags": [
                    {
                        "tagName": "example",
                        "paramName": "",
                        "text": "Play the \"jump\" animation on this bot.\nexperiment.localFormAnimation(this, \"jump\");\n"
                    },
                    {
                        "tagName": "dochash",
                        "paramName": "",
                        "text": "actions/experimental"
                    },
                    {
                        "tagName": "docname",
                        "paramName": "",
                        "text": "experiment.localFormAnimation\n"
                    }
                ]
            },
            "group": null
        },
        {
            "id": 1647,
            "order": 9999,
            "name": "experiment.localPositionTween",
            "reflection": {
                "id": 1647,
                "name": "__type",
                "kind": 4096,
                "kindString": "Call signature",
                "flags": {},
                "comment": {
                    "shortText": "Locally plays a tween that moves the given bot in the given dimension to the given position.\nOptionally allows customizing the easing of the tween.",
                    "text": "Returns a promise that resolves when the tween is finished.\n\nWhile the tween is playing, any updates to the bot's position and rotation are ignored.\nOnce the tween is done playing, any change to the bot will reset the position/rotation.\n\n\n",
                    "tags": [
                        {
                            "tag": "example",
                            "paramName": "",
                            "text": "Tween the bot to X = 10 in the `home` dimension.\nexperiment.localPositionTween(\n    this,\n    'home',\n    {\n        x: 10,\n    });\n"
                        },
                        {
                            "tag": "example",
                            "paramName": "",
                            "text": "Tween the bot over 5 seconds.\nexperiment.localPositionTween(\n    this,\n    'home',\n    {\n        x: 10,\n    },\n    {\n        duration: 5\n    });\n"
                        },
                        {
                            "tag": "example",
                            "paramName": "",
                            "text": "Tween the bot with quadratic easing.\nexperiment.localPositionTween(\n    this,\n    'home',\n    {\n        x: 10,\n    },\n    {\n        easing: {\n            type: 'quadratic',\n            mode: 'inout'\n        }\n    });\n"
                        },
                        {
                            "tag": "dochash",
                            "paramName": "",
                            "text": "actions/experimental"
                        },
                        {
                            "tag": "docname",
                            "paramName": "",
                            "text": "experiment.localPositionTween\n"
                        }
                    ]
                },
                "parameters": [
                    {
                        "id": 1648,
                        "name": "bot",
                        "kind": 32768,
                        "kindString": "Parameter",
                        "flags": {},
                        "comment": {
                            "shortText": "the bot or ID of the bot that should be tweened.",
                            "tags": []
                        },
                        "type": {
                            "type": "union",
                            "types": [
                                {
                                    "type": "intrinsic",
                                    "name": "string"
                                },
                                {
                                    "type": "reference",
                                    "id": 2734,
                                    "name": "Bot"
                                }
                            ]
                        }
                    },
                    {
                        "id": 1649,
                        "name": "dimension",
                        "kind": 32768,
                        "kindString": "Parameter",
                        "flags": {},
                        "comment": {
                            "shortText": "the dimension that the bot should be tweened in.\nNote that the tween will only work if the given dimension is currently in the grid portal or miniGridPortal.\n",
                            "tags": []
                        },
                        "type": {
                            "type": "intrinsic",
                            "name": "string"
                        }
                    },
                    {
                        "id": 1650,
                        "name": "position",
                        "kind": 32768,
                        "kindString": "Parameter",
                        "flags": {},
                        "comment": {
                            "shortText": "the position that the bot should be tweened to. If you exclude a dimension (like `x`, `y`, or `z`), then it will remain unchanged.",
                            "tags": []
                        },
                        "type": {
                            "type": "reflection",
                            "declaration": {
                                "id": 1651,
                                "name": "__type",
                                "kind": 65536,
                                "kindString": "Type literal",
                                "flags": {},
                                "children": [
                                    {
                                        "id": 1652,
                                        "name": "x",
                                        "kind": 1024,
                                        "kindString": "Property",
                                        "flags": {},
                                        "sources": [
                                            {
                                                "fileName": "src/aux-common/runtime/AuxLibrary.ts",
                                                "line": 11769,
                                                "character": 20
                                            }
                                        ],
                                        "type": {
                                            "type": "intrinsic",
                                            "name": "number"
                                        }
                                    },
                                    {
                                        "id": 1653,
                                        "name": "y",
                                        "kind": 1024,
                                        "kindString": "Property",
                                        "flags": {},
                                        "sources": [
                                            {
                                                "fileName": "src/aux-common/runtime/AuxLibrary.ts",
                                                "line": 11769,
                                                "character": 31
                                            }
                                        ],
                                        "type": {
                                            "type": "intrinsic",
                                            "name": "number"
                                        }
                                    },
                                    {
                                        "id": 1654,
                                        "name": "z",
                                        "kind": 1024,
                                        "kindString": "Property",
                                        "flags": {
                                            "isOptional": true
                                        },
                                        "sources": [
                                            {
                                                "fileName": "src/aux-common/runtime/AuxLibrary.ts",
                                                "line": 11769,
                                                "character": 42
                                            }
                                        ],
                                        "type": {
                                            "type": "intrinsic",
                                            "name": "number"
                                        }
                                    }
                                ],
                                "groups": [
                                    {
                                        "title": "Properties",
                                        "kind": 1024,
                                        "children": [
                                            1652,
                                            1653,
                                            1654
                                        ]
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "id": 1655,
                        "name": "options",
                        "kind": 32768,
                        "kindString": "Parameter",
                        "flags": {
                            "isOptional": true
                        },
                        "comment": {
                            "shortText": "the options that should be used.\n",
                            "tags": []
                        },
                        "type": {
                            "type": "reference",
                            "id": 2508,
                            "name": "TweenOptions"
                        }
                    }
                ],
                "type": {
                    "type": "reference",
                    "typeArguments": [
                        {
                            "type": "intrinsic",
                            "name": "void"
                        }
                    ],
                    "qualifiedName": "Promise",
                    "package": "typescript",
                    "name": "Promise"
                }
            },
            "comment": {
                "shortText": "Locally plays a tween that moves the given bot in the given dimension to the given position.\nOptionally allows customizing the easing of the tween.",
                "text": "Returns a promise that resolves when the tween is finished.\n\nWhile the tween is playing, any updates to the bot's position and rotation are ignored.\nOnce the tween is done playing, any change to the bot will reset the position/rotation.\n\n\n",
                "tags": [
                    {
                        "tagName": "example",
                        "paramName": "",
                        "text": "Tween the bot to X = 10 in the `home` dimension.\nexperiment.localPositionTween(\n    this,\n    'home',\n    {\n        x: 10,\n    });\n"
                    },
                    {
                        "tagName": "example",
                        "paramName": "",
                        "text": "Tween the bot over 5 seconds.\nexperiment.localPositionTween(\n    this,\n    'home',\n    {\n        x: 10,\n    },\n    {\n        duration: 5\n    });\n"
                    },
                    {
                        "tagName": "example",
                        "paramName": "",
                        "text": "Tween the bot with quadratic easing.\nexperiment.localPositionTween(\n    this,\n    'home',\n    {\n        x: 10,\n    },\n    {\n        easing: {\n            type: 'quadratic',\n            mode: 'inout'\n        }\n    });\n"
                    },
                    {
                        "tagName": "dochash",
                        "paramName": "",
                        "text": "actions/experimental"
                    },
                    {
                        "tagName": "docname",
                        "paramName": "",
                        "text": "experiment.localPositionTween\n"
                    }
                ]
            },
            "group": null
        },
        {
            "id": 1658,
            "order": 9999,
            "name": "experiment.localRotationTween",
            "reflection": {
                "id": 1658,
                "name": "__type",
                "kind": 4096,
                "kindString": "Call signature",
                "flags": {},
                "comment": {
                    "shortText": "Locally plays a tween that rotates the given bot in the given dimension to the given rotation.\nOptionally allows customizing the easing of the tween.",
                    "text": "Returns a promise that resolves when the tween is finished.\n\nWhile the tween is playing, any updates to the bot's position and rotation are ignored.\nOnce the tween is done playing, any change to the bot will reset the position/rotation.\n",
                    "tags": [
                        {
                            "tag": "example",
                            "paramName": "",
                            "text": "Tween the bot 90 degrees around the Z axis in the `home` dimension.\nexperiment.localRotationTween(\n    this,\n    'home',\n    {\n        z: Math.PI / 2,\n    });\n"
                        },
                        {
                            "tag": "example",
                            "paramName": "",
                            "text": "Tween the bot for 5 seconds.\nexperiment.localRotationTween(\n    this,\n    'home',\n    {\n        z: Math.PI / 2,\n    },\n    {\n        duration: 5\n    });\n"
                        },
                        {
                            "tag": "example",
                            "paramName": "",
                            "text": "Tween the bot with quadratic easing.\nexperiment.localRotationTween(\n    this,\n    'home',\n    {\n        z: Math.PI / 2,\n    },\n    {\n        easing: {\n            type: 'quadratic',\n            mode: 'inout'\n        }\n    });\n"
                        },
                        {
                            "tag": "dochash",
                            "paramName": "",
                            "text": "actions/experimental"
                        },
                        {
                            "tag": "docname",
                            "paramName": "",
                            "text": "experiment.localRotationTween\n"
                        }
                    ]
                },
                "parameters": [
                    {
                        "id": 1659,
                        "name": "bot",
                        "kind": 32768,
                        "kindString": "Parameter",
                        "flags": {},
                        "comment": {
                            "shortText": "the bot or ID of the bot that should be tweened.",
                            "tags": []
                        },
                        "type": {
                            "type": "union",
                            "types": [
                                {
                                    "type": "intrinsic",
                                    "name": "string"
                                },
                                {
                                    "type": "reference",
                                    "id": 2734,
                                    "name": "Bot"
                                }
                            ]
                        }
                    },
                    {
                        "id": 1660,
                        "name": "dimension",
                        "kind": 32768,
                        "kindString": "Parameter",
                        "flags": {},
                        "comment": {
                            "shortText": "the dimension that the bot should be tweened in.\nNote that the tween will only work if the given dimension is currently in the grid portal or miniGridPortal.\n",
                            "tags": []
                        },
                        "type": {
                            "type": "intrinsic",
                            "name": "string"
                        }
                    },
                    {
                        "id": 1661,
                        "name": "rotation",
                        "kind": 32768,
                        "kindString": "Parameter",
                        "flags": {},
                        "comment": {
                            "shortText": "the rotation that the bot should be tweened to in radians. If you exclude a dimension (like `x`, `y`, or `z`), then it will remain unchanged.",
                            "tags": []
                        },
                        "type": {
                            "type": "reflection",
                            "declaration": {
                                "id": 1662,
                                "name": "__type",
                                "kind": 65536,
                                "kindString": "Type literal",
                                "flags": {},
                                "children": [
                                    {
                                        "id": 1663,
                                        "name": "x",
                                        "kind": 1024,
                                        "kindString": "Property",
                                        "flags": {},
                                        "sources": [
                                            {
                                                "fileName": "src/aux-common/runtime/AuxLibrary.ts",
                                                "line": 11839,
                                                "character": 20
                                            }
                                        ],
                                        "type": {
                                            "type": "intrinsic",
                                            "name": "number"
                                        }
                                    },
                                    {
                                        "id": 1664,
                                        "name": "y",
                                        "kind": 1024,
                                        "kindString": "Property",
                                        "flags": {},
                                        "sources": [
                                            {
                                                "fileName": "src/aux-common/runtime/AuxLibrary.ts",
                                                "line": 11839,
                                                "character": 31
                                            }
                                        ],
                                        "type": {
                                            "type": "intrinsic",
                                            "name": "number"
                                        }
                                    },
                                    {
                                        "id": 1665,
                                        "name": "z",
                                        "kind": 1024,
                                        "kindString": "Property",
                                        "flags": {
                                            "isOptional": true
                                        },
                                        "sources": [
                                            {
                                                "fileName": "src/aux-common/runtime/AuxLibrary.ts",
                                                "line": 11839,
                                                "character": 42
                                            }
                                        ],
                                        "type": {
                                            "type": "intrinsic",
                                            "name": "number"
                                        }
                                    }
                                ],
                                "groups": [
                                    {
                                        "title": "Properties",
                                        "kind": 1024,
                                        "children": [
                                            1663,
                                            1664,
                                            1665
                                        ]
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "id": 1666,
                        "name": "options",
                        "kind": 32768,
                        "kindString": "Parameter",
                        "flags": {
                            "isOptional": true
                        },
                        "comment": {
                            "shortText": "The options that should be used for the tween.\n",
                            "tags": []
                        },
                        "type": {
                            "type": "reference",
                            "id": 2508,
                            "name": "TweenOptions"
                        }
                    }
                ],
                "type": {
                    "type": "reference",
                    "typeArguments": [
                        {
                            "type": "intrinsic",
                            "name": "void"
                        }
                    ],
                    "qualifiedName": "Promise",
                    "package": "typescript",
                    "name": "Promise"
                }
            },
            "comment": {
                "shortText": "Locally plays a tween that rotates the given bot in the given dimension to the given rotation.\nOptionally allows customizing the easing of the tween.",
                "text": "Returns a promise that resolves when the tween is finished.\n\nWhile the tween is playing, any updates to the bot's position and rotation are ignored.\nOnce the tween is done playing, any change to the bot will reset the position/rotation.\n",
                "tags": [
                    {
                        "tagName": "example",
                        "paramName": "",
                        "text": "Tween the bot 90 degrees around the Z axis in the `home` dimension.\nexperiment.localRotationTween(\n    this,\n    'home',\n    {\n        z: Math.PI / 2,\n    });\n"
                    },
                    {
                        "tagName": "example",
                        "paramName": "",
                        "text": "Tween the bot for 5 seconds.\nexperiment.localRotationTween(\n    this,\n    'home',\n    {\n        z: Math.PI / 2,\n    },\n    {\n        duration: 5\n    });\n"
                    },
                    {
                        "tagName": "example",
                        "paramName": "",
                        "text": "Tween the bot with quadratic easing.\nexperiment.localRotationTween(\n    this,\n    'home',\n    {\n        z: Math.PI / 2,\n    },\n    {\n        easing: {\n            type: 'quadratic',\n            mode: 'inout'\n        }\n    });\n"
                    },
                    {
                        "tagName": "dochash",
                        "paramName": "",
                        "text": "actions/experimental"
                    },
                    {
                        "tagName": "docname",
                        "paramName": "",
                        "text": "experiment.localRotationTween\n"
                    }
                ]
            },
            "group": null
        },
        {
            "id": 1693,
            "order": 9999,
            "name": "experiment.speakText",
            "reflection": {
                "id": 1693,
                "name": "__type",
                "kind": 4096,
                "kindString": "Call signature",
                "flags": {},
                "comment": {
                    "shortText": "Speaks the given text using a synthetic voice and options.\nNote that this is a local effect. The gererated sounds are only played in the current session.",
                    "text": "Returns a promise that resolves when the text has been spoken.",
                    "tags": [
                        {
                            "tag": "dochash",
                            "paramName": "",
                            "text": "actions/experimental"
                        },
                        {
                            "tag": "docname",
                            "paramName": "",
                            "text": "experiment.speakText\n"
                        }
                    ]
                },
                "parameters": [
                    {
                        "id": 1694,
                        "name": "text",
                        "kind": 32768,
                        "kindString": "Parameter",
                        "flags": {},
                        "comment": {
                            "shortText": "the text that should be spoken.",
                            "tags": []
                        },
                        "type": {
                            "type": "intrinsic",
                            "name": "string"
                        }
                    },
                    {
                        "id": 1695,
                        "name": "options",
                        "kind": 32768,
                        "kindString": "Parameter",
                        "flags": {
                            "isOptional": true
                        },
                        "comment": {
                            "shortText": "the options that should be used to speak the text.\n",
                            "tags": []
                        },
                        "type": {
                            "type": "reference",
                            "id": 2511,
                            "name": "SpeakTextOptions"
                        }
                    }
                ],
                "type": {
                    "type": "reference",
                    "typeArguments": [
                        {
                            "type": "intrinsic",
                            "name": "void"
                        }
                    ],
                    "qualifiedName": "Promise",
                    "package": "typescript",
                    "name": "Promise"
                }
            },
            "comment": {
                "shortText": "Speaks the given text using a synthetic voice and options.\nNote that this is a local effect. The gererated sounds are only played in the current session.",
                "text": "Returns a promise that resolves when the text has been spoken.",
                "tags": [
                    {
                        "tagName": "dochash",
                        "paramName": "",
                        "text": "actions/experimental"
                    },
                    {
                        "tagName": "docname",
                        "paramName": "",
                        "text": "experiment.speakText\n"
                    }
                ]
            },
            "group": null
        }
    ],
    "references": {
        "CasualOSError": "types/error",
        "id-2910": "CasualOSError",
        "Quaternion": "types/math/rotations",
        "id-3300": "Quaternion",
        "Rotation": "types/math/rotations",
        "id-3332": "Rotation",
        "Vector2": "types/math/vectors",
        "id-3166": "Vector2",
        "Vector3": "types/math/vectors",
        "id-3223": "Vector3",
        "AIChatMessage": "types/ai",
        "id-2929": "AIChatMessage",
        "AIChatOptions": "types/ai",
        "id-2720": "AIChatOptions",
        "AIGenerateSkyboxOptions": "types/ai",
        "id-2730": "AIGenerateSkyboxOptions",
        "AIGenerateSkyboxRequest": "types/ai",
        "id-2526": "AIGenerateSkyboxRequest",
        "AIGenerateSkyboxResult": "types/ai",
        "id-2530": "AIGenerateSkyboxResult",
        "AddCountFailure": "types/records/events",
        "id-3113": "AddCountFailure",
        "AddCountSuccess": "types/records/events",
        "id-3108": "AddCountSuccess",
        "AnimateTagOptions": "types/animation",
        "id-2131": "AnimateTagOptions",
        "AttachDebuggerOptions": "types/debuggers/common",
        "id-2506": "AttachDebuggerOptions",
        "CasualOSDevice": "types/os",
        "id-2898": "CasualOSDevice",
        "CasualOSVersion": "types/os",
        "id-2890": "CasualOSVersion",
        "AxisAndAngle": "types/math/rotations",
        "id-3378": "AxisAndAngle",
        "BotTagMasks": "types/core",
        "id-2867": "BotTagMasks",
        "BotTags": "types/core",
        "id-2782": "BotTags",
        "BotState": "types/core",
        "id-2880": "BotState",
        "CompiledBotListeners": "types/core",
        "id-2861": "CompiledBotListeners",
        "ConvertGeolocationToWhat3WordsOptions": "types/os",
        "id-2555": "ConvertGeolocationToWhat3WordsOptions",
        "CreatePublicRecordKeyFailure": "types/records/key",
        "id-2940": "CreatePublicRecordKeyFailure",
        "CreatePublicRecordKeySuccess": "types/records/key",
        "id-2936": "CreatePublicRecordKeySuccess",
        "DebuggerCallFrame": "types/debuggers/common",
        "id-2459": "DebuggerCallFrame",
        "DebuggerFunctionLocation": "types/debuggers/common",
        "id-2494": "DebuggerFunctionLocation",
        "DebuggerPause": "types/debuggers/common",
        "id-2488": "DebuggerPause",
        "DebuggerTagMaskUpdate": "types/debuggers/common",
        "id-2467": "DebuggerTagMaskUpdate",
        "DebuggerTagUpdate": "types/debuggers/common",
        "id-2473": "DebuggerTagUpdate",
        "DebuggerVariable": "types/debuggers/common",
        "id-2500": "DebuggerVariable",
        "Easing": "types/animation",
        "id-2535": "Easing",
        "EnableXROptions": "types/os",
        "id-2629": "EnableXROptions",
        "EraseDataFailure": "types/records/data",
        "id-3084": "EraseDataFailure",
        "EraseDataSuccess": "types/records/data",
        "id-3080": "EraseDataSuccess",
        "EraseFileFailure": "types/records/files",
        "id-3103": "EraseFileFailure",
        "EraseFileSuccess": "types/records/files",
        "id-3099": "EraseFileSuccess",
        "EulerAnglesRotation": "types/math/rotations",
        "id-3381": "EulerAnglesRotation",
        "FocusOnOptions": "types/os",
        "id-2589": "FocusOnOptions",
        "FocusOnRotation": "types/os",
        "id-2601": "FocusOnRotation",
        "FormAnimationData": "types/os",
        "id-2647": "FormAnimationData",
        "FromToRotation": "types/math/rotations",
        "id-3375": "FromToRotation",
        "GenericError": "types/error",
        "id-2907": "GenericError",
        "GetCountFailure": "types/records/events",
        "id-3124": "GetCountFailure",
        "GetCountSuccess": "types/records/events",
        "id-3118": "GetCountSuccess",
        "GetDataFailure": "types/records/data",
        "id-3075": "GetDataFailure",
        "GetDataSuccess": "types/records/data",
        "id-3066": "GetDataSuccess",
        "GetRoomOptionsFailure": "types/os",
        "id-2221": "GetRoomOptionsFailure",
        "GetRoomOptionsSuccess": "types/os",
        "id-2217": "GetRoomOptionsSuccess",
        "GetRoomRemoteOptionsFailure": "types/os",
        "id-2264": "GetRoomRemoteOptionsFailure",
        "GetRoomRemoteOptionsSuccess": "types/os",
        "id-2259": "GetRoomRemoteOptionsSuccess",
        "GetRoomTrackOptionsFailure": "types/os",
        "id-2240": "GetRoomTrackOptionsFailure",
        "GetRoomTrackOptionsSuccess": "types/os",
        "id-2235": "GetRoomTrackOptionsSuccess",
        "GrantMarkerPermissionFailure": "types/records/policies",
        "id-3152": "GrantMarkerPermissionFailure",
        "GrantMarkerPermissionSuccess": "types/records/policies",
        "id-3150": "GrantMarkerPermissionSuccess",
        "GrantRoleFailure": "types/records/roles",
        "id-3138": "GrantRoleFailure",
        "GrantRoleSuccess": "types/records/roles",
        "id-3136": "GrantRoleSuccess",
        "ImageClassifierOptions": "types/os",
        "id-2607": "ImageClassifierOptions",
        "InstUpdate": "types/os",
        "id-2903": "InstUpdate",
        "JoinRoomFailure": "types/os",
        "id-2202": "JoinRoomFailure",
        "JoinRoomSuccess": "types/os",
        "id-2199": "JoinRoomSuccess",
        "LeaveRoomFailure": "types/os",
        "id-2211": "LeaveRoomFailure",
        "LeaveRoomSuccess": "types/os",
        "id-2208": "LeaveRoomSuccess",
        "ListDataFailure": "types/records/data",
        "id-3094": "ListDataFailure",
        "ListDataSuccess": "types/records/data",
        "id-3089": "ListDataSuccess",
        "LookRotation": "types/math/rotations",
        "id-3398": "LookRotation",
        "MediaPermissionOptions": "types/os",
        "id-2626": "MediaPermissionOptions",
        "Debugger": "types/debuggers/debugger",
        "id-2271": "Debugger",
        "NormalDebuggerOptions": "types/debuggers/common",
        "id-2478": "NormalDebuggerOptions",
        "PhotoCameraOptions": "types/camera",
        "id-2704": "PhotoCameraOptions",
        "ParsedBotLink": "types/core",
        "id-2886": "ParsedBotLink",
        "PartialBotState": "types/core",
        "id-2883": "PartialBotState",
        "PausableDebugger": "types/debuggers/pausable-debugger",
        "id-2327": "PausableDebugger",
        "PausableDebuggerOptions": "types/debuggers/common",
        "id-2483": "PausableDebuggerOptions",
        "PauseTrigger": "types/debuggers/common",
        "id-2446": "PauseTrigger",
        "PauseTriggerOptions": "types/debuggers/common",
        "id-2454": "PauseTriggerOptions",
        "Photo": "types/camera",
        "id-2716": "Photo",
        "PossiblePauseTriggerLocation": "types/debuggers/common",
        "id-2441": "PossiblePauseTriggerLocation",
        "PseudoRandomNumberGenerator": "types/core",
        "id-2515": "PseudoRandomNumberGenerator",
        "QuaternionRotation": "types/math/rotations",
        "id-3391": "QuaternionRotation",
        "RaycastRay": "types/os",
        "id-2195": "RaycastRay",
        "RaycastResult": "types/os",
        "id-2192": "RaycastResult",
        "RecordActionOptions": "types/records/extra",
        "id-2538": "RecordActionOptions",
        "RecordDataFailure": "types/records/data",
        "id-3061": "RecordDataFailure",
        "RecordDataSuccess": "types/records/data",
        "id-3057": "RecordDataSuccess",
        "RecordFileFailure": "types/records/files",
        "id-2162": "RecordFileFailure",
        "RecordFileSuccess": "types/records/files",
        "id-2158": "RecordFileSuccess",
        "RecordedFile": "types/experimental",
        "id-2691": "RecordedFile",
        "Recording": "types/experimental",
        "id-2689": "Recording",
        "RecordingOptions": "types/experimental",
        "id-2696": "RecordingOptions",
        "RegisterPrefixOptions": "types/core",
        "id-2686": "RegisterPrefixOptions",
        "RevokeMarkerPermissionFailure": "types/records/policies",
        "id-3159": "RevokeMarkerPermissionFailure",
        "RevokeMarkerPermissionSuccess": "types/records/policies",
        "id-3157": "RevokeMarkerPermissionSuccess",
        "RevokeRoleFailure": "types/records/roles",
        "id-3145": "RevokeRoleFailure",
        "RevokeRoleSuccess": "types/records/roles",
        "id-3143": "RevokeRoleSuccess",
        "RoomJoinOptions": "types/os",
        "id-2652": "RoomJoinOptions",
        "RoomOptions": "types/os",
        "id-2661": "RoomOptions",
        "RoomRemoteOptions": "types/os",
        "id-2677": "RoomRemoteOptions",
        "RoomTrackOptions": "types/os",
        "id-2665": "RoomTrackOptions",
        "RuntimeBot": "types/core",
        "id-2734": "RuntimeBot",
        "RuntimeBotLinks": "types/core",
        "id-2873": "RuntimeBotLinks",
        "RuntimeBotVars": "types/core",
        "id-2870": "RuntimeBotVars",
        "SequenceRotation": "types/math/rotations",
        "id-3389": "SequenceRotation",
        "SetRoomOptionsSuccess": "types/os",
        "id-2226": "SetRoomOptionsSuccess",
        "SetRoomTrackOptions": "types/os",
        "id-2683": "SetRoomTrackOptions",
        "SetRoomTrackOptionsFailure": "types/os",
        "id-2252": "SetRoomTrackOptionsFailure",
        "SetRoomTrackOptionsSuccess": "types/os",
        "id-2247": "SetRoomTrackOptionsSuccess",
        "ShareOptions": "types/os",
        "id-2585": "ShareOptions",
        "ShowChatOptions": "types/os",
        "id-2579": "ShowChatOptions",
        "ShowConfirmOptions": "types/os",
        "id-2621": "ShowConfirmOptions",
        "ShowInputOptions": "types/os",
        "id-2612": "ShowInputOptions",
        "SnapAxis": "types/os",
        "id-2559": "SnapAxis",
        "SnapGridTarget": "types/os",
        "id-2167": "SnapGridTarget",
        "SnapPoint": "types/os",
        "id-2571": "SnapPoint",
        "SpeakTextOptions": "types/experimental",
        "id-2511": "SpeakTextOptions",
        "StartFormAnimationOptions": "types/os",
        "id-2631": "StartFormAnimationOptions",
        "StopFormAnimationOptions": "types/os",
        "id-2644": "StopFormAnimationOptions",
        "SuccessfulGeolocation": "types/os",
        "id-2541": "SuccessfulGeolocation",
        "SyntheticVoice": "types/experimental",
        "id-2700": "SyntheticVoice",
        "TweenOptions": "types/experimental",
        "id-2508": "TweenOptions",
        "UnsuccessfulGeolocation": "types/os",
        "id-2551": "UnsuccessfulGeolocation",
        "UpdateEventRecordFailure": "types/records/events",
        "id-3131": "UpdateEventRecordFailure",
        "UpdateEventRecordSuccess": "types/records/events",
        "id-3129": "UpdateEventRecordSuccess",
        "UploadedFile": "types/os",
        "id-2188": "UploadedFile",
        "WebhookOptions": "types/web",
        "id-2112": "WebhookOptions",
        "WebhookResult": "types/web",
        "id-2124": "WebhookResult",
        "AddCountResult": "types/records/events",
        "id-3107": "AddCountResult",
        "AvailablePermissions": "types/permissions",
        "id-2945": "AvailablePermissions",
        "BarcodeFormat": "types/os",
        "id-2606": "BarcodeFormat",
        "BotFilter": "types/core",
        "id-2146": "BotFilter",
        "BotSpace": "types/core",
        "id-2857": "BotSpace",
        "CameraType": "types/os",
        "id-2605": "CameraType",
        "CreatePublicRecordKeyResult": "types/records/key",
        "id-2935": "CreatePublicRecordKeyResult",
        "EaseMode": "types/animation",
        "id-2534": "EaseMode",
        "EaseType": "types/animation",
        "id-2533": "EaseType",
        "EraseDataResult": "types/records/data",
        "id-3079": "EraseDataResult",
        "EraseFileResult": "types/records/files",
        "id-3098": "EraseFileResult",
        "Geolocation": "types/os",
        "id-2540": "Geolocation",
        "GetCountResult": "types/records/events",
        "id-3117": "GetCountResult",
        "GetDataResult": "types/records/data",
        "id-3065": "GetDataResult",
        "GetRoomOptionsResult": "types/os",
        "id-2216": "GetRoomOptionsResult",
        "GetRoomRemoteOptionsResult": "types/os",
        "id-2258": "GetRoomRemoteOptionsResult",
        "GetRoomTrackOptionsResult": "types/os",
        "id-2234": "GetRoomTrackOptionsResult",
        "GrantMarkerPermissionResult": "types/records/policies",
        "id-3149": "GrantMarkerPermissionResult",
        "GrantRoleResult": "types/records/roles",
        "id-3135": "GrantRoleResult",
        "JoinRoomResult": "types/os",
        "id-2198": "JoinRoomResult",
        "LeaveRoomResult": "types/os",
        "id-2207": "LeaveRoomResult",
        "ListDataResult": "types/records/data",
        "id-3088": "ListDataResult",
        "Mod": "types/core",
        "id-2141": "Mod",
        "PortalType": "types/core",
        "id-2889": "PortalType",
        "PossiblePauseTriggerStates": "types/debuggers/common",
        "id-2445": "PossiblePauseTriggerStates",
        "RecordDataResult": "types/records/data",
        "id-3056": "RecordDataResult",
        "RecordFileResult": "types/records/files",
        "id-2157": "RecordFileResult",
        "RevokeMarkerPermissionResult": "types/records/policies",
        "id-3156": "RevokeMarkerPermissionResult",
        "RevokeRoleResult": "types/records/roles",
        "id-3142": "RevokeRoleResult",
        "SetRoomOptionsResult": "types/os",
        "id-2225": "SetRoomOptionsResult",
        "SetRoomTrackOptionsResult": "types/os",
        "id-2246": "SetRoomTrackOptionsResult",
        "SnapTarget": "types/os",
        "id-2578": "SnapTarget",
        "TagFilter": "types/core",
        "id-2142": "TagFilter",
        "UpdateEventRecordResult": "types/records/events",
        "id-3128": "UpdateEventRecordResult",
        "animateTag-byOptions": "actions/utility",
        "id-364": "animateTag-byOptions",
        "getbot-tag": "actions/data",
        "id-33": "getbot-tag",
        "getbots-tag": "actions/data",
        "id-17": "getbots-tag",
        "animateTag-byTag": "actions/utility",
        "id-358": "animateTag-byTag",
        "changeState": "actions/data",
        "id-177": "changeState",
        "create": "actions/data",
        "id-162": "create",
        "destroy": "actions/data",
        "id-166": "destroy",
        "getbot-filters": "actions/data",
        "id-26": "getbot-filters",
        "getbots-filters": "actions/data",
        "id-10": "getbots-filters",
        "priorityShout": "actions/event",
        "id-225": "priorityShout",
        "shout": "actions/event",
        "id-237": "shout",
        "updateBotLinks": "actions/data",
        "id-198": "updateBotLinks",
        "whisper": "actions/event",
        "id-263": "whisper",
        "action.perform": "actions/event",
        "id-1621": "action.perform",
        "action.reject": "actions/event",
        "id-1625": "action.reject",
        "ai.chat-string": "actions/ai",
        "id-423": "ai.chat-string",
        "ai.chat-message": "actions/ai",
        "id-426": "ai.chat-message",
        "ai.chat-messages": "actions/ai",
        "id-429": "ai.chat-messages",
        "ai.generateSkybox-string": "actions/ai",
        "id-434": "ai.generateSkybox-string",
        "ai.generateSkybox-request": "actions/ai",
        "id-438": "ai.generateSkybox-request",
        "applyDiffToSnapshot": "actions/data",
        "id-83": "applyDiffToSnapshot",
        "applyMod": "actions/mods",
        "id-152": "applyMod",
        "assert": "actions/debuggers",
        "id-407": "assert",
        "assertEqual": "actions/debuggers",
        "id-412": "assertEqual",
        "atPosition": "actions/bot-filters",
        "id-293": "atPosition",
        "byCreator": "actions/bot-filters",
        "id-314": "byCreator",
        "byID": "actions/bot-filters",
        "id-281": "byID",
        "byMod": "actions/bot-filters",
        "id-285": "byMod",
        "bySpace": "actions/bot-filters",
        "id-310": "bySpace",
        "byTag": "actions/bot-filters",
        "id-276": "byTag",
        "bytes.fromBase64String": "actions/bytes",
        "id-1845": "bytes.fromBase64String",
        "bytes.fromHexString": "actions/bytes",
        "id-1853": "bytes.fromHexString",
        "bytes.toBase64String": "actions/bytes",
        "id-1841": "bytes.toBase64String",
        "bytes.toHexString": "actions/bytes",
        "id-1849": "bytes.toHexString",
        "clearAnimations": "actions/utility",
        "id-378": "clearAnimations",
        "clearTagMasks": "actions/data",
        "id-106": "clearTagMasks",
        "crypto.hash-raw": "actions/crypto",
        "id-1859": "crypto.hash-raw",
        "crypto.hash-string": "actions/crypto",
        "id-1865": "crypto.hash-string",
        "crypto.hmac-raw": "actions/crypto",
        "id-1896": "crypto.hmac-raw",
        "crypto.hmac-string": "actions/crypto",
        "id-1889": "crypto.hmac-string",
        "crypto.asymmetric.decrypt": "actions/crypto",
        "id-1954": "crypto.asymmetric.decrypt",
        "crypto.asymmetric.encrypt": "actions/crypto",
        "id-1949": "crypto.asymmetric.encrypt",
        "crypto.asymmetric.isEncrypted": "actions/crypto",
        "id-1960": "crypto.asymmetric.isEncrypted",
        "crypto.asymmetric.isKeypair": "actions/crypto",
        "id-1945": "crypto.asymmetric.isKeypair",
        "crypto.asymmetric.keypair": "actions/crypto",
        "id-1941": "crypto.asymmetric.keypair",
        "crypto.encrypt": "actions/crypto",
        "id-1925": "crypto.encrypt",
        "crypto.hmacSha256": "actions/crypto",
        "id-1915": "crypto.hmacSha256",
        "crypto.hmacSha512": "actions/crypto",
        "id-1920": "crypto.hmacSha512",
        "crypto.isEncrypted": "actions/crypto",
        "id-1935": "crypto.isEncrypted",
        "crypto.keypair": "actions/crypto",
        "id-1964": "crypto.keypair",
        "crypto.sha256": "actions/crypto",
        "id-1881": "crypto.sha256",
        "crypto.sha512": "actions/crypto",
        "id-1885": "crypto.sha512",
        "crypto.sign": "actions/crypto",
        "id-1968": "crypto.sign",
        "deleteTagMaskText": "actions/data",
        "id-133": "deleteTagMaskText",
        "deleteTagText": "actions/data",
        "id-126": "deleteTagText",
        "diffSnapshots": "actions/data",
        "id-78": "diffSnapshots",
        "either": "actions/bot-filters",
        "id-318": "either",
        "os.beginAudioRecording": "actions/audio",
        "id-1679": "os.beginAudioRecording",
        "experiment.beginRecording": "actions/experimental",
        "id-1686": "experiment.beginRecording",
        "os.endAudioRecording": "actions/audio",
        "id-1683": "os.endAudioRecording",
        "experiment.endRecording": "actions/experimental",
        "id-1690": "experiment.endRecording",
        "experiment.getAnchorPointPosition": "actions/experimental",
        "id-1669": "experiment.getAnchorPointPosition",
        "experiment.getVoices": "actions/experimental",
        "id-1698": "experiment.getVoices",
        "experiment.localFormAnimation": "actions/experimental",
        "id-1642": "experiment.localFormAnimation",
        "experiment.localPositionTween": "actions/experimental",
        "id-1647": "experiment.localPositionTween",
        "experiment.localRotationTween": "actions/experimental",
        "id-1658": "experiment.localRotationTween",
        "experiment.speakText": "actions/experimental",
        "id-1693": "experiment.speakText",
        "getBotLinks": "actions/data",
        "id-194": "getBotLinks",
        "getBotPosition": "actions/data",
        "id-52": "getBotPosition",
        "getBotRotation": "actions/data",
        "id-57": "getBotRotation",
        "getBotTagValues": "actions/data",
        "id-42": "getBotTagValues",
        "getFormattedJSON": "actions/data",
        "id-70": "getFormattedJSON",
        "getID": "actions/data",
        "id-62": "getID",
        "getJSON": "actions/data",
        "id-66": "getJSON",
        "getLink": "actions/data",
        "id-190": "getLink",
        "getMod": "actions/mods",
        "id-47": "getMod",
        "getSnapshot": "actions/data",
        "id-74": "getSnapshot",
        "getTag": "actions/data",
        "id-88": "getTag",
        "inDimension": "actions/bot-filters",
        "id-289": "inDimension",
        "inStack": "actions/bot-filters",
        "id-299": "inStack",
        "insertTagMaskText": "actions/data",
        "id-118": "insertTagMaskText",
        "insertTagText": "actions/data",
        "id-111": "insertTagText",
        "math.abs": "actions/math",
        "id-1715": "math.abs",
        "math.addVectors": "actions/math",
        "id-1785": "math.addVectors",
        "math.areClose": "actions/math",
        "id-1816": "math.areClose",
        "math.avg": "actions/math",
        "id-1707": "math.avg",
        "math.degreesToRadians": "actions/math",
        "id-1741": "math.degreesToRadians",
        "math.getAnchorPointOffset": "actions/math",
        "id-1781": "math.getAnchorPointOffset",
        "math.getForwardDirection": "actions/math",
        "id-1749": "math.getForwardDirection",
        "math.getSeededRandomNumberGenerator": "actions/math",
        "id-1723": "math.getSeededRandomNumberGenerator",
        "math.intersectPlane": "actions/math",
        "id-1758": "math.intersectPlane",
        "math.negateVector": "actions/math",
        "id-1795": "math.negateVector",
        "math.normalizeVector": "actions/math",
        "id-1800": "math.normalizeVector",
        "math.radiansToDegrees": "actions/math",
        "id-1745": "math.radiansToDegrees",
        "math.random": "actions/math",
        "id-1736": "math.random",
        "math.randomInt": "actions/math",
        "id-1731": "math.randomInt",
        "math.scaleVector": "actions/math",
        "id-1810": "math.scaleVector",
        "math.setRandomSeed": "actions/math",
        "id-1727": "math.setRandomSeed",
        "math.sqrt": "actions/math",
        "id-1711": "math.sqrt",
        "math.stdDev": "actions/math",
        "id-1719": "math.stdDev",
        "math.subtractVectors": "actions/math",
        "id-1790": "math.subtractVectors",
        "math.sum": "actions/math",
        "id-1703": "math.sum",
        "math.vectorLength": "actions/math",
        "id-1805": "math.vectorLength",
        "neighboring": "actions/bot-filters",
        "id-304": "neighboring",
        "not": "actions/bot-filters",
        "id-325": "not",
        "os.attachDebugger": "actions/debuggers",
        "id-1319": "os.attachDebugger",
        "os.createDebugger-normal": "actions/debuggers",
        "id-1308": "os.createDebugger-normal",
        "os.createDebugger-pausable": "actions/debuggers",
        "id-1312": "os.createDebugger-pausable",
        "os.focusOn-bot": "actions/portals",
        "id-501": "os.focusOn-bot",
        "os.focusOn-position": "actions/portals",
        "id-506": "os.focusOn-position",
        "os.getExecutingDebugger": "actions/debuggers",
        "id-1316": "os.getExecutingDebugger",
        "showChat-options": "actions/os",
        "id-528": "showChat-options",
        "showChat-placeholder": "actions/os",
        "id-524": "showChat-placeholder",
        "os.showInput": "actions/portals",
        "id-744": "os.showInput",
        "os.addBotDropGrid": "actions/portals",
        "id-818": "os.addBotDropGrid",
        "os.addBotDropSnap": "actions/portals",
        "id-809": "os.addBotDropSnap",
        "os.addDropGrid": "actions/portals",
        "id-814": "os.addDropGrid",
        "os.addDropSnap": "actions/portals",
        "id-805": "os.addDropSnap",
        "os.applyUpdatesToInst": "actions/os",
        "id-1262": "os.applyUpdatesToInst",
        "os.arSupported": "actions/xr",
        "id-569": "os.arSupported",
        "os.bufferFormAddressGLTF": "actions/animations",
        "id-1215": "os.bufferFormAddressGLTF",
        "os.bufferSound": "actions/audio",
        "id-781": "os.bufferSound",
        "os.calculateRayFromCamera": "actions/portals",
        "id-1210": "os.calculateRayFromCamera",
        "os.cancelSound": "actions/audio",
        "id-785": "os.cancelSound",
        "os.capturePhoto": "actions/camera",
        "id-664": "os.capturePhoto",
        "os.closeBarcodeScanner": "actions/barcodes",
        "id-642": "os.closeBarcodeScanner",
        "os.closeCircleWipe": "actions/portals",
        "id-797": "os.closeCircleWipe",
        "os.closeImageClassifier": "actions/image-classification",
        "id-657": "os.closeImageClassifier",
        "os.closePhotoCamera": "actions/camera",
        "id-668": "os.closePhotoCamera",
        "os.closeQRCodeScanner": "actions/barcodes",
        "id-628": "os.closeQRCodeScanner",
        "os.compileApp": "actions/app",
        "id-932": "os.compileApp",
        "os.convertGeolocationToWhat3Words": "actions/os",
        "id-1195": "os.convertGeolocationToWhat3Words",
        "os.countEvents": "actions/records",
        "id-1189": "os.countEvents",
        "os.createInitializationUpdate": "actions/os",
        "id-1258": "os.createInitializationUpdate",
        "os.device": "actions/os",
        "id-546": "os.device",
        "os.disableAR": "actions/xr",
        "id-559": "os.disableAR",
        "os.disablePointOfView": "actions/portals",
        "id-584": "os.disablePointOfView",
        "os.disableVR": "actions/xr",
        "id-566": "os.disableVR",
        "os.disableWakeLock": "actions/os",
        "id-590": "os.disableWakeLock",
        "os.download": "actions/files",
        "id-596": "os.download",
        "os.downloadBots": "actions/files",
        "id-602": "os.downloadBots",
        "os.downloadBotsAsInitialzationUpdate": "actions/files",
        "id-607": "os.downloadBotsAsInitialzationUpdate",
        "os.downloadInst": "actions/files",
        "id-615": "os.downloadInst",
        "os.enableAR": "actions/xr",
        "id-555": "os.enableAR",
        "os.enableCustomDragging": "actions/portals",
        "id-823": "os.enableCustomDragging",
        "os.enablePointOfView": "actions/portals",
        "id-575": "os.enablePointOfView",
        "os.enableVR": "actions/xr",
        "id-562": "os.enableVR",
        "os.eraseData": "actions/records",
        "id-1132": "os.eraseData",
        "os.eraseManualApprovalData": "actions/records",
        "id-1138": "os.eraseManualApprovalData",
        "os.exitFullscreenMode": "actions/portals",
        "id-472": "os.exitFullscreenMode",
        "os.getAverageFrameRate": "actions/os",
        "id-880": "os.getAverageFrameRate",
        "os.getCameraPosition": "actions/portals",
        "id-836": "os.getCameraPosition",
        "os.getCameraRotation": "actions/portals",
        "id-840": "os.getCameraRotation",
        "os.getCurrentDimension": "actions/portals",
        "id-715": "os.getCurrentDimension",
        "os.getCurrentInst": "actions/portals",
        "id-721": "os.getCurrentInst",
        "os.getCurrentInstUpdate": "actions/os",
        "id-1266": "os.getCurrentInstUpdate",
        "os.getData": "actions/records",
        "id-1114": "os.getData",
        "os.getDimensionalDepth": "actions/portals",
        "id-734": "os.getDimensionalDepth",
        "os.getFocusPoint": "actions/portals",
        "id-848": "os.getFocusPoint",
        "os.getGeolocation": "actions/os",
        "id-830": "os.getGeolocation",
        "os.getInputList": "actions/portals",
        "id-873": "os.getInputList",
        "os.getInputState": "actions/portals",
        "id-868": "os.getInputState",
        "os.getInstStateFromUpdates": "actions/os",
        "id-1254": "os.getInstStateFromUpdates",
        "os.getManualApprovalData": "actions/records",
        "id-1120": "os.getManualApprovalData",
        "os.getMediaPermission": "actions/os",
        "id-876": "os.getMediaPermission",
        "os.getMenuDimension": "actions/portals",
        "id-724": "os.getMenuDimension",
        "os.getMiniPortalDimension": "actions/portals",
        "id-727": "os.getMiniPortalDimension",
        "os.getPointerDirection": "actions/portals",
        "id-864": "os.getPointerDirection",
        "os.getPointerPosition": "actions/portals",
        "id-852": "os.getPointerPosition",
        "os.getPointerRotation": "actions/portals",
        "id-856": "os.getPointerRotation",
        "os.getPortalDimension": "actions/portals",
        "id-730": "os.getPortalDimension",
        "os.getPublicRecordKey": "actions/records",
        "id-1039": "os.getPublicRecordKey",
        "os.getRoomOptions": "actions/rooms",
        "id-898": "os.getRoomOptions",
        "os.getRoomRemoteOptions": "actions/rooms",
        "id-913": "os.getRoomRemoteOptions",
        "os.getRoomTrackOptions": "actions/rooms",
        "id-902": "os.getRoomTrackOptions",
        "os.getSubjectlessPublicRecordKey": "actions/records",
        "id-1043": "os.getSubjectlessPublicRecordKey",
        "os.getWakeLockConfiguration": "actions/os",
        "id-593": "os.getWakeLockConfiguration",
        "os.goToDimension": "actions/portals",
        "id-758": "os.goToDimension",
        "os.goToURL": "actions/portals",
        "id-762": "os.goToURL",
        "os.grantInstAdminPermission": "actions/records",
        "id-1061": "os.grantInstAdminPermission",
        "os.grantInstRole": "actions/records",
        "id-1081": "os.grantInstRole",
        "os.grantRecordMarkerPermission": "actions/records",
        "id-1047": "os.grantRecordMarkerPermission",
        "os.grantUserRole": "actions/records",
        "id-1066": "os.grantUserRole",
        "os.hasBotInMiniPortal": "actions/portals",
        "id-789": "os.hasBotInMiniPortal",
        "os.hideBarcode": "actions/barcodes",
        "id-650": "os.hideBarcode",
        "os.hideChat": "actions/os",
        "id-536": "os.hideChat",
        "os.hideHtml": "actions/os",
        "id-479": "os.hideHtml",
        "os.hideQRCode": "actions/barcodes",
        "id-635": "os.hideQRCode",
        "os.hideTips": "actions/portals",
        "id-460": "os.hideTips",
        "os.importAUX": "actions/files",
        "id-699": "os.importAUX",
        "os.inSheet": "actions/portals",
        "id-833": "os.inSheet",
        "os.instStatuses": "actions/os",
        "id-1283": "os.instStatuses",
        "os.instances": "actions/os",
        "id-1273": "os.instances",
        "os.isCollaborative": "actions/os",
        "id-549": "os.isCollaborative",
        "os.isInDimension": "actions/portals",
        "id-711": "os.isInDimension",
        "os.isRecordKey": "actions/records",
        "id-1096": "os.isRecordKey",
        "os.joinRoom": "actions/rooms",
        "id-883": "os.joinRoom",
        "os.leaveRoom": "actions/rooms",
        "id-888": "os.leaveRoom",
        "os.listBuiltinTags": "actions/app",
        "id-1033": "os.listBuiltinTags",
        "os.listData": "actions/records",
        "id-1126": "os.listData",
        "os.listFormAnimations": "actions/animations",
        "id-1230": "os.listFormAnimations",
        "os.listInstUpdates": "actions/os",
        "id-1251": "os.listInstUpdates",
        "os.loadInst": "actions/os",
        "id-691": "os.loadInst",
        "os.log": "actions/os",
        "id-826": "os.log",
        "os.meetCommand": "actions/os",
        "id-1296": "os.meetCommand",
        "os.meetFunction": "actions/os",
        "id-1301": "os.meetFunction",
        "os.openBarcodeScanner": "actions/barcodes",
        "id-638": "os.openBarcodeScanner",
        "os.openCircleWipe": "actions/portals",
        "id-801": "os.openCircleWipe",
        "os.openDevConsole": "actions/os",
        "id-770": "os.openDevConsole",
        "os.openImageClassifier": "actions/image-classification",
        "id-653": "os.openImageClassifier",
        "os.openPhotoCamera": "actions/camera",
        "id-660": "os.openPhotoCamera",
        "os.openQRCodeScanner": "actions/barcodes",
        "id-624": "os.openQRCodeScanner",
        "os.openURL": "actions/portals",
        "id-766": "os.openURL",
        "os.parseBotsFromData": "actions/files",
        "id-703": "os.parseBotsFromData",
        "os.playSound": "actions/audio",
        "id-777": "os.playSound",
        "os.raycast": "actions/portals",
        "id-1204": "os.raycast",
        "os.raycastFromCamera": "actions/portals",
        "id-1199": "os.raycastFromCamera",
        "os.recordData": "actions/records",
        "id-1100": "os.recordData",
        "os.recordEvent": "actions/records",
        "id-1183": "os.recordEvent",
        "os.recordFile": "actions/records",
        "id-1144": "os.recordFile",
        "os.recordManualApprovalData": "actions/records",
        "id-1107": "os.recordManualApprovalData",
        "os.registerApp": "actions/app",
        "id-923": "os.registerApp",
        "os.registerTagPrefix": "actions/app",
        "id-918": "os.registerTagPrefix",
        "os.remoteCount": "actions/os",
        "id-1276": "os.remoteCount",
        "os.remotes": "actions/os",
        "id-1248": "os.remotes",
        "os.replaceDragBot": "actions/portals",
        "id-707": "os.replaceDragBot",
        "os.requestAuthBot": "actions/records",
        "id-1036": "os.requestAuthBot",
        "os.requestFullscreenMode": "actions/portals",
        "id-469": "os.requestFullscreenMode",
        "os.requestWakeLock": "actions/os",
        "id-587": "os.requestWakeLock",
        "os.revokeInstRole": "actions/records",
        "id-1089": "os.revokeInstRole",
        "os.revokeRecordMarkerPermission": "actions/records",
        "id-1054": "os.revokeRecordMarkerPermission",
        "os.revokeUserRole": "actions/records",
        "id-1074": "os.revokeUserRole",
        "os.run": "actions/os",
        "id-539": "os.run",
        "os.setClipboard": "actions/os",
        "id-482": "os.setClipboard",
        "os.setRoomOptions": "actions/rooms",
        "id-893": "os.setRoomOptions",
        "os.setRoomTrackOptions": "actions/rooms",
        "id-907": "os.setRoomTrackOptions",
        "os.share": "actions/os",
        "id-793": "os.share",
        "os.showBarcode": "actions/barcodes",
        "id-645": "os.showBarcode",
        "os.showConfirm": "actions/portals",
        "id-754": "os.showConfirm",
        "os.showHtml": "actions/os",
        "id-475": "os.showHtml",
        "os.showInputForTag": "actions/portals",
        "id-738": "os.showInputForTag",
        "os.showJoinCode": "actions/barcodes",
        "id-464": "os.showJoinCode",
        "os.showQRCode": "actions/barcodes",
        "id-631": "os.showQRCode",
        "os.showUploadAuxFile": "actions/files",
        "id-618": "os.showUploadAuxFile",
        "os.showUploadFiles": "actions/files",
        "id-621": "os.showUploadFiles",
        "os.sleep": "actions/os",
        "id-444": "os.sleep",
        "os.startFormAnimation": "actions/animations",
        "id-1219": "os.startFormAnimation",
        "os.stopFormAnimation": "actions/animations",
        "id-1225": "os.stopFormAnimation",
        "os.tip": "actions/portals",
        "id-453": "os.tip",
        "os.toast": "actions/os",
        "id-448": "os.toast",
        "os.totalRemoteCount": "actions/os",
        "id-1280": "os.totalRemoteCount",
        "os.unloadInst": "actions/os",
        "id-695": "os.unloadInst",
        "os.unregisterApp": "actions/app",
        "id-928": "os.unregisterApp",
        "os.version": "actions/os",
        "id-543": "os.version",
        "os.vrSupported": "actions/xr",
        "id-572": "os.vrSupported",
        "os.agreedUponTime": "actions/time",
        "id-672": "os.agreedUponTime",
        "os.deadReckoningTime": "actions/time",
        "id-680": "os.deadReckoningTime",
        "os.instLatency": "actions/time",
        "id-674": "os.instLatency",
        "os.instTimeOffset": "actions/time",
        "id-676": "os.instTimeOffset",
        "os.instTimeOffsetSpread": "actions/time",
        "id-678": "os.instTimeOffsetSpread",
        "os.localTime": "actions/time",
        "id-670": "os.localTime",
        "removeTags": "actions/data",
        "id-141": "removeTags",
        "renameTag": "actions/data",
        "id-146": "renameTag",
        "setTag": "actions/data",
        "id-93": "setTag",
        "setTagMask": "actions/data",
        "id-99": "setTagMask",
        "subtractMods": "actions/mods",
        "id-157": "subtractMods",
        "superShout": "actions/event",
        "id-220": "superShout",
        "uuid": "actions/data",
        "id-355": "uuid",
        "web.get": "actions/web",
        "id-2011": "web.get",
        "web.hook": "actions/web",
        "id-2022": "web.hook",
        "web.post": "actions/web",
        "id-2016": "web.post",
        "configBot": "actions/os",
        "id-418": "configBot"
    }
}