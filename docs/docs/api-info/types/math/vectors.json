{
    "hash": "types/math/vectors",
    "pageTitle": "Vectors",
    "pageDescription": "Vectors help represent positions and directions.",
    "pageSidebarLabel": "Vectors",
    "contents": [
        {
            "id": 3205,
            "order": 0,
            "name": "Vector2",
            "reflection": {
                "id": 3205,
                "name": "Vector2",
                "kind": 128,
                "kindString": "Class",
                "flags": {},
                "comment": {
                    "shortText": "Defines a class that represents a 2D point in space.",
                    "tags": [
                        {
                            "tag": "dochash",
                            "paramName": "",
                            "text": "types/math/vectors"
                        },
                        {
                            "tag": "docorder",
                            "paramName": "",
                            "text": "0"
                        },
                        {
                            "tag": "doctitle",
                            "paramName": "",
                            "text": "Vectors"
                        },
                        {
                            "tag": "docsidebar",
                            "paramName": "",
                            "text": "Vectors"
                        },
                        {
                            "tag": "docdescription",
                            "paramName": "",
                            "text": "Vectors help represent positions and directions."
                        },
                        {
                            "tag": "docname",
                            "paramName": "",
                            "text": "Vector2\n"
                        }
                    ]
                },
                "children": [
                    {
                        "id": 3228,
                        "name": "constructor",
                        "kind": 512,
                        "kindString": "Constructor",
                        "flags": {},
                        "sources": [
                            {
                                "fileName": "src/aux-common/math/Vector2.ts",
                                "line": 36,
                                "character": 4
                            }
                        ],
                        "signatures": [
                            {
                                "id": 3229,
                                "name": "new Vector2",
                                "kind": 16384,
                                "kindString": "Constructor signature",
                                "flags": {},
                                "comment": {
                                    "shortText": "Constructs a new 2D vector with the given X and Y values.",
                                    "tags": [
                                        {
                                            "tag": "example",
                                            "paramName": "",
                                            "text": "Create a new Vector2 object with the position (2, 3).\nlet myVector = new Vector2(2, 3);\n\nos.toast(`X: ${myVector.x}, Y: ${myVector.y}`);\n"
                                        },
                                        {
                                            "tag": "example",
                                            "paramName": "",
                                            "text": "Move this bot to (10, 15) in the home dimension.\ntags.homePosition = new Vector2(10, 15);\n"
                                        }
                                    ]
                                },
                                "parameters": [
                                    {
                                        "id": 3230,
                                        "name": "x",
                                        "kind": 32768,
                                        "kindString": "Parameter",
                                        "flags": {},
                                        "comment": {
                                            "shortText": "The X value of the vector.",
                                            "tags": []
                                        },
                                        "type": {
                                            "type": "intrinsic",
                                            "name": "number"
                                        },
                                        "defaultValue": "0"
                                    },
                                    {
                                        "id": 3231,
                                        "name": "y",
                                        "kind": 32768,
                                        "kindString": "Parameter",
                                        "flags": {},
                                        "comment": {
                                            "shortText": "The Y value of the vector.\n",
                                            "tags": []
                                        },
                                        "type": {
                                            "type": "intrinsic",
                                            "name": "number"
                                        },
                                        "defaultValue": "0"
                                    }
                                ],
                                "type": {
                                    "type": "reference",
                                    "id": 3205,
                                    "name": "Vector2"
                                }
                            }
                        ]
                    },
                    {
                        "id": 3232,
                        "name": "x",
                        "kind": 1024,
                        "kindString": "Property",
                        "flags": {},
                        "comment": {
                            "shortText": "The X value of this vector.",
                            "tags": []
                        },
                        "sources": [
                            {
                                "fileName": "src/aux-common/math/Vector2.ts",
                                "line": 16,
                                "character": 4
                            }
                        ],
                        "type": {
                            "type": "intrinsic",
                            "name": "number"
                        }
                    },
                    {
                        "id": 3233,
                        "name": "y",
                        "kind": 1024,
                        "kindString": "Property",
                        "flags": {},
                        "comment": {
                            "shortText": "The Y value of this vector.",
                            "tags": []
                        },
                        "sources": [
                            {
                                "fileName": "src/aux-common/math/Vector2.ts",
                                "line": 21,
                                "character": 4
                            }
                        ],
                        "type": {
                            "type": "intrinsic",
                            "name": "number"
                        }
                    },
                    {
                        "id": 3234,
                        "name": "add",
                        "kind": 2048,
                        "kindString": "Method",
                        "flags": {},
                        "sources": [
                            {
                                "fileName": "src/aux-common/math/Vector2.ts",
                                "line": 169,
                                "character": 4
                            }
                        ],
                        "signatures": [
                            {
                                "id": 3235,
                                "name": "add",
                                "kind": 4096,
                                "kindString": "Call signature",
                                "flags": {},
                                "comment": {
                                    "shortText": "Adds this vector with the other vector and returns the result.",
                                    "tags": [
                                        {
                                            "tag": "example",
                                            "paramName": "",
                                            "text": "Add two vectors together.\nconst first = new Vector2(1, 2);\nconst second = new Vector2(3, 4);\nconst added = first.add(second);\n\nos.toast(added); // Prints (4, 6)\n"
                                        }
                                    ]
                                },
                                "parameters": [
                                    {
                                        "id": 3236,
                                        "name": "other",
                                        "kind": 32768,
                                        "kindString": "Parameter",
                                        "flags": {},
                                        "comment": {
                                            "shortText": "The other vector to add with this vector.\n",
                                            "tags": []
                                        },
                                        "type": {
                                            "type": "reference",
                                            "id": 3205,
                                            "name": "Vector2"
                                        }
                                    }
                                ],
                                "type": {
                                    "type": "reference",
                                    "id": 3205,
                                    "name": "Vector2"
                                }
                            }
                        ]
                    },
                    {
                        "id": 3246,
                        "name": "dot",
                        "kind": 2048,
                        "kindString": "Method",
                        "flags": {},
                        "sources": [
                            {
                                "fileName": "src/aux-common/math/Vector2.ts",
                                "line": 244,
                                "character": 4
                            }
                        ],
                        "signatures": [
                            {
                                "id": 3247,
                                "name": "dot",
                                "kind": 4096,
                                "kindString": "Call signature",
                                "flags": {},
                                "comment": {
                                    "shortText": "Calculates the dot product of this vector compared to the given other vector.\nReturns a number that is positive if the vectors point in the same direction,\nnegative if they point in opposite directions, and zero if they are perpendicular.\nFor normalized vectors, this value is clamped to 1 and -1.",
                                    "tags": [
                                        {
                                            "tag": "example",
                                            "paramName": "",
                                            "text": "Determine how two vectors are pointing towards/away from the same direction.\nconst first = new Vector2(1, 2);\nconst second = new Vector2(3, 4);\n\nconst dot = first.dot(second);\nif (dot < 0) {\n    os.toast(\"Vectors are pointing away from each other!\");\n} else if (dot === 0) {\n    os.toast(\"Vectors 90 degrees away from each other!\");\n} else {\n    os.toast(\"Vectors are pointing towards from each other!\");\n}\n"
                                        }
                                    ]
                                },
                                "parameters": [
                                    {
                                        "id": 3248,
                                        "name": "other",
                                        "kind": 32768,
                                        "kindString": "Parameter",
                                        "flags": {},
                                        "comment": {
                                            "shortText": "The other vector to calculate the dot product with.\n",
                                            "tags": []
                                        },
                                        "type": {
                                            "type": "reference",
                                            "id": 3205,
                                            "name": "Vector2"
                                        }
                                    }
                                ],
                                "type": {
                                    "type": "intrinsic",
                                    "name": "number"
                                }
                            }
                        ]
                    },
                    {
                        "id": 3259,
                        "name": "equals",
                        "kind": 2048,
                        "kindString": "Method",
                        "flags": {},
                        "sources": [
                            {
                                "fileName": "src/aux-common/math/Vector2.ts",
                                "line": 330,
                                "character": 4
                            }
                        ],
                        "signatures": [
                            {
                                "id": 3260,
                                "name": "equals",
                                "kind": 4096,
                                "kindString": "Call signature",
                                "flags": {},
                                "comment": {
                                    "shortText": "Determines if this vector equals the other vector.",
                                    "tags": [
                                        {
                                            "tag": "example",
                                            "paramName": "",
                                            "text": "Determine if two vectors represent the same value.\nconst first = new Vector2(1, 2);\nconst second = new Vector2(3, 4);\nconst third = new Vector2(1, 2);\n\nos.toast(`first == second: ${first.equals(second)}; first == third: ${first.equals(third)}`)\n"
                                        }
                                    ]
                                },
                                "parameters": [
                                    {
                                        "id": 3261,
                                        "name": "other",
                                        "kind": 32768,
                                        "kindString": "Parameter",
                                        "flags": {},
                                        "comment": {
                                            "shortText": "The other vector.\n",
                                            "tags": []
                                        },
                                        "type": {
                                            "type": "reference",
                                            "id": 3205,
                                            "name": "Vector2"
                                        }
                                    }
                                ],
                                "type": {
                                    "type": "intrinsic",
                                    "name": "boolean"
                                }
                            }
                        ]
                    },
                    {
                        "id": 3249,
                        "name": "length",
                        "kind": 2048,
                        "kindString": "Method",
                        "flags": {},
                        "sources": [
                            {
                                "fileName": "src/aux-common/math/Vector2.ts",
                                "line": 257,
                                "character": 4
                            }
                        ],
                        "signatures": [
                            {
                                "id": 3250,
                                "name": "length",
                                "kind": 4096,
                                "kindString": "Call signature",
                                "flags": {},
                                "comment": {
                                    "shortText": "Calculates the length of this vector and returns the result.",
                                    "tags": [
                                        {
                                            "tag": "example",
                                            "paramName": "",
                                            "text": "Get the length of the vector.\nconst myVector = new Vector2(1, 2);\nconst length = myVector.length();\n\nos.toast(`Vector is ${length} units long`);\n"
                                        }
                                    ]
                                },
                                "type": {
                                    "type": "intrinsic",
                                    "name": "number"
                                }
                            }
                        ]
                    },
                    {
                        "id": 3243,
                        "name": "multiply",
                        "kind": 2048,
                        "kindString": "Method",
                        "flags": {},
                        "sources": [
                            {
                                "fileName": "src/aux-common/math/Vector2.ts",
                                "line": 220,
                                "character": 4
                            }
                        ],
                        "signatures": [
                            {
                                "id": 3244,
                                "name": "multiply",
                                "kind": 4096,
                                "kindString": "Call signature",
                                "flags": {},
                                "comment": {
                                    "shortText": "Multiplies this vector by the given other vector and returns the result.",
                                    "tags": [
                                        {
                                            "tag": "example",
                                            "paramName": "",
                                            "text": "Multiply two vectors together.\nconst first = new Vector2(1, 2);\nconst second = new Vector2(3, 4);\nconst multiplied = first.multiply(second);\n\nos.toast(multiplied); // Prints (3, 8)\n"
                                        }
                                    ]
                                },
                                "parameters": [
                                    {
                                        "id": 3245,
                                        "name": "other",
                                        "kind": 32768,
                                        "kindString": "Parameter",
                                        "flags": {},
                                        "comment": {
                                            "shortText": "The other vector to multiply with this vector.\n",
                                            "tags": []
                                        },
                                        "type": {
                                            "type": "reference",
                                            "id": 3205,
                                            "name": "Vector2"
                                        }
                                    }
                                ],
                                "type": {
                                    "type": "reference",
                                    "id": 3205,
                                    "name": "Vector2"
                                }
                            }
                        ]
                    },
                    {
                        "id": 3240,
                        "name": "multiplyScalar",
                        "kind": 2048,
                        "kindString": "Method",
                        "flags": {},
                        "sources": [
                            {
                                "fileName": "src/aux-common/math/Vector2.ts",
                                "line": 205,
                                "character": 4
                            }
                        ],
                        "signatures": [
                            {
                                "id": 3241,
                                "name": "multiplyScalar",
                                "kind": 4096,
                                "kindString": "Call signature",
                                "flags": {},
                                "comment": {
                                    "shortText": "Multiplies each component of this vector by the given value and returns the result.",
                                    "tags": [
                                        {
                                            "tag": "example",
                                            "paramName": "",
                                            "text": "Scale a vector by 10.\nconst myVector = new Vector2(1, 1);\nconst scaled = myVector.multiplyScalar(10);\nos.toast(scaled); // Prints (10, 10)\n"
                                        }
                                    ]
                                },
                                "parameters": [
                                    {
                                        "id": 3242,
                                        "name": "scale",
                                        "kind": 32768,
                                        "kindString": "Parameter",
                                        "flags": {},
                                        "comment": {
                                            "shortText": "The scale that should be applied to this vector.\n",
                                            "tags": []
                                        },
                                        "type": {
                                            "type": "intrinsic",
                                            "name": "number"
                                        }
                                    }
                                ],
                                "type": {
                                    "type": "reference",
                                    "id": 3205,
                                    "name": "Vector2"
                                }
                            }
                        ]
                    },
                    {
                        "id": 3255,
                        "name": "negate",
                        "kind": 2048,
                        "kindString": "Method",
                        "flags": {},
                        "sources": [
                            {
                                "fileName": "src/aux-common/math/Vector2.ts",
                                "line": 302,
                                "character": 4
                            }
                        ],
                        "signatures": [
                            {
                                "id": 3256,
                                "name": "negate",
                                "kind": 4096,
                                "kindString": "Call signature",
                                "flags": {},
                                "comment": {
                                    "shortText": "Negates each component of this vector and returns a new vector that contains the result.",
                                    "tags": [
                                        {
                                            "tag": "example",
                                            "paramName": "",
                                            "text": "Negate a vector.\nconst myVector = new Vector2(1, 2);\nconst negated = myVector.negate();\n\nos.toast(`Vector: ${myVector}, Negated: ${negated}`);\n"
                                        }
                                    ]
                                },
                                "type": {
                                    "type": "reference",
                                    "id": 3205,
                                    "name": "Vector2"
                                }
                            }
                        ]
                    },
                    {
                        "id": 3253,
                        "name": "normalize",
                        "kind": 2048,
                        "kindString": "Method",
                        "flags": {},
                        "sources": [
                            {
                                "fileName": "src/aux-common/math/Vector2.ts",
                                "line": 288,
                                "character": 4
                            }
                        ],
                        "signatures": [
                            {
                                "id": 3254,
                                "name": "normalize",
                                "kind": 4096,
                                "kindString": "Call signature",
                                "flags": {},
                                "comment": {
                                    "shortText": "Calculates the normalized version of this vector and returns it.\nA normalized vector is a vector whose length equals 1.",
                                    "text": "Normalizing a vector preserves its directionality while making the length (i.e. scale) of it 1.\n",
                                    "tags": [
                                        {
                                            "tag": "example",
                                            "paramName": "",
                                            "text": "Normalize a vector.\nconst myVector = new Vector2(1, 2);\nconst normalized = myVector.normalize();\n\nos.toast(`Vector: ${myVector}, Normalized: ${normalized}`);\n"
                                        }
                                    ]
                                },
                                "type": {
                                    "type": "reference",
                                    "id": 3205,
                                    "name": "Vector2"
                                }
                            }
                        ]
                    },
                    {
                        "id": 3251,
                        "name": "squareLength",
                        "kind": 2048,
                        "kindString": "Method",
                        "flags": {},
                        "sources": [
                            {
                                "fileName": "src/aux-common/math/Vector2.ts",
                                "line": 272,
                                "character": 4
                            }
                        ],
                        "signatures": [
                            {
                                "id": 3252,
                                "name": "squareLength",
                                "kind": 4096,
                                "kindString": "Call signature",
                                "flags": {},
                                "comment": {
                                    "shortText": "Calculates the square length of this vector and returns the result.\nThis is equivalent to length^2, but it is faster to calculate than length because it doesn't require\ncalculating a square root.",
                                    "tags": [
                                        {
                                            "tag": "example",
                                            "paramName": "",
                                            "text": "Get the square length of the vector.\nconst myVector = new Vector2(1, 2);\nconst length = myVector.squareLength();\n\nos.toast(`Vector is ${length}^2 units long`);\n"
                                        }
                                    ]
                                },
                                "type": {
                                    "type": "intrinsic",
                                    "name": "number"
                                }
                            }
                        ]
                    },
                    {
                        "id": 3237,
                        "name": "subtract",
                        "kind": 2048,
                        "kindString": "Method",
                        "flags": {},
                        "sources": [
                            {
                                "fileName": "src/aux-common/math/Vector2.ts",
                                "line": 192,
                                "character": 4
                            }
                        ],
                        "signatures": [
                            {
                                "id": 3238,
                                "name": "subtract",
                                "kind": 4096,
                                "kindString": "Call signature",
                                "flags": {},
                                "comment": {
                                    "shortText": "Subtracts the other vector from this vector and returns the result.",
                                    "tags": [
                                        {
                                            "tag": "example",
                                            "paramName": "",
                                            "text": "Subtract two vectors.\nconst first = new Vector2(1, 2);\nconst second = new Vector2(3, 4);\nconst subtracted = first.subtract(second);\nos.toast(subtracted);\n"
                                        },
                                        {
                                            "tag": "example",
                                            "paramName": "",
                                            "text": "Find the direction from one vector to another.\nconst first = new Vector2(1, 2);\nconst second = new Vector2(3, 4);\n\nconst directionFromFirstToSecond = second.subtract(first);\nconst directionFromSecondToFirst = first.subtract(second);\n\nos.toast(`first -> second = ${directionFromFirstToSecond}; second -> first = ${directionFromSecondToFirst}`);\n"
                                        }
                                    ]
                                },
                                "parameters": [
                                    {
                                        "id": 3239,
                                        "name": "other",
                                        "kind": 32768,
                                        "kindString": "Parameter",
                                        "flags": {},
                                        "comment": {
                                            "shortText": "The other vector that should be subtracted from this vector.\n",
                                            "tags": []
                                        },
                                        "type": {
                                            "type": "reference",
                                            "id": 3205,
                                            "name": "Vector2"
                                        }
                                    }
                                ],
                                "type": {
                                    "type": "reference",
                                    "id": 3205,
                                    "name": "Vector2"
                                }
                            }
                        ]
                    },
                    {
                        "id": 3257,
                        "name": "toString",
                        "kind": 2048,
                        "kindString": "Method",
                        "flags": {},
                        "sources": [
                            {
                                "fileName": "src/aux-common/math/Vector2.ts",
                                "line": 315,
                                "character": 4
                            }
                        ],
                        "signatures": [
                            {
                                "id": 3258,
                                "name": "toString",
                                "kind": 4096,
                                "kindString": "Call signature",
                                "flags": {},
                                "comment": {
                                    "shortText": "Converts this vector to a human-readable string representation.",
                                    "tags": [
                                        {
                                            "tag": "example",
                                            "paramName": "",
                                            "text": "Get a string of a vector.\nconst myVector = new Vector2(1, 2);\nconst vectorString = myVector.toString();\n\nos.toast('My Vector: ' + vectorString);\n"
                                        }
                                    ]
                                },
                                "type": {
                                    "type": "intrinsic",
                                    "name": "string"
                                }
                            }
                        ]
                    },
                    {
                        "id": 3210,
                        "name": "angleBetween",
                        "kind": 2048,
                        "kindString": "Method",
                        "flags": {
                            "isStatic": true
                        },
                        "sources": [
                            {
                                "fileName": "src/aux-common/math/Vector2.ts",
                                "line": 78,
                                "character": 11
                            }
                        ],
                        "signatures": [
                            {
                                "id": 3211,
                                "name": "angleBetween",
                                "kind": 4096,
                                "kindString": "Call signature",
                                "flags": {},
                                "comment": {
                                    "shortText": "Calculates the angle between the two given vectors and returns the result in radians.",
                                    "tags": [
                                        {
                                            "tag": "example",
                                            "paramName": "",
                                            "text": "Find the angle between two vectors.\nconst first = new Vector2(\n    Math.cos(Math.PI / 3),\n    Math.sin(Math.PI / 3)\n); // 60 degrees\nconst second = new Vector2(\n    Math.cos(Math.PI / 2),\n    Math.sin(Math.PI / 2)\n); // 90 degrees\n\nconst angle = Vector2.angleBetween(first, second);\nos.toast(angle);\n"
                                        }
                                    ]
                                },
                                "parameters": [
                                    {
                                        "id": 3212,
                                        "name": "first",
                                        "kind": 32768,
                                        "kindString": "Parameter",
                                        "flags": {},
                                        "comment": {
                                            "shortText": "The first vector that should be used for comparision.",
                                            "tags": []
                                        },
                                        "type": {
                                            "type": "reference",
                                            "id": 3205,
                                            "name": "Vector2"
                                        }
                                    },
                                    {
                                        "id": 3213,
                                        "name": "second",
                                        "kind": 32768,
                                        "kindString": "Parameter",
                                        "flags": {},
                                        "comment": {
                                            "shortText": "The second vector that should be used for comparision.\n",
                                            "tags": []
                                        },
                                        "type": {
                                            "type": "reference",
                                            "id": 3205,
                                            "name": "Vector2"
                                        }
                                    }
                                ],
                                "type": {
                                    "type": "intrinsic",
                                    "name": "number"
                                }
                            }
                        ]
                    },
                    {
                        "id": 3206,
                        "name": "createNormalized",
                        "kind": 2048,
                        "kindString": "Method",
                        "flags": {
                            "isStatic": true
                        },
                        "sources": [
                            {
                                "fileName": "src/aux-common/math/Vector2.ts",
                                "line": 55,
                                "character": 11
                            }
                        ],
                        "signatures": [
                            {
                                "id": 3207,
                                "name": "createNormalized",
                                "kind": 4096,
                                "kindString": "Call signature",
                                "flags": {},
                                "comment": {
                                    "shortText": "Creates a 2D vector with the given X and Y values that is normalized immediately upon creation.",
                                    "tags": [
                                        {
                                            "tag": "example",
                                            "paramName": "",
                                            "text": "Create a normalized vector\nconst vector = Vector2.createNormalized(1, 2);\n"
                                        }
                                    ]
                                },
                                "parameters": [
                                    {
                                        "id": 3208,
                                        "name": "x",
                                        "kind": 32768,
                                        "kindString": "Parameter",
                                        "flags": {},
                                        "comment": {
                                            "shortText": "The X value of the vector.",
                                            "tags": []
                                        },
                                        "type": {
                                            "type": "intrinsic",
                                            "name": "number"
                                        }
                                    },
                                    {
                                        "id": 3209,
                                        "name": "y",
                                        "kind": 32768,
                                        "kindString": "Parameter",
                                        "flags": {},
                                        "comment": {
                                            "shortText": "The Y value of the vector.\n",
                                            "tags": []
                                        },
                                        "type": {
                                            "type": "intrinsic",
                                            "name": "number"
                                        }
                                    }
                                ],
                                "type": {
                                    "type": "reference",
                                    "id": 3205,
                                    "name": "Vector2"
                                }
                            }
                        ]
                    },
                    {
                        "id": 3214,
                        "name": "distanceBetween",
                        "kind": 2048,
                        "kindString": "Method",
                        "flags": {
                            "isStatic": true
                        },
                        "sources": [
                            {
                                "fileName": "src/aux-common/math/Vector2.ts",
                                "line": 97,
                                "character": 11
                            }
                        ],
                        "signatures": [
                            {
                                "id": 3215,
                                "name": "distanceBetween",
                                "kind": 4096,
                                "kindString": "Call signature",
                                "flags": {},
                                "comment": {
                                    "shortText": "Calculates the distance between the two given vectors and returns the result.",
                                    "tags": [
                                        {
                                            "tag": "example",
                                            "paramName": "",
                                            "text": "Find the distance between two vectors.\nconst first = new Vector2(5, 10);\nconst second = new Vector2(9, 2);\nconst distance = Vector2.distanceBetween(first, second);\n\nos.toast(`Distance: ${distance}`);\n"
                                        }
                                    ]
                                },
                                "parameters": [
                                    {
                                        "id": 3216,
                                        "name": "first",
                                        "kind": 32768,
                                        "kindString": "Parameter",
                                        "flags": {},
                                        "comment": {
                                            "shortText": "The first vector that should be used for comparision.",
                                            "tags": []
                                        },
                                        "type": {
                                            "type": "reference",
                                            "id": 3205,
                                            "name": "Vector2"
                                        }
                                    },
                                    {
                                        "id": 3217,
                                        "name": "second",
                                        "kind": 32768,
                                        "kindString": "Parameter",
                                        "flags": {},
                                        "comment": {
                                            "shortText": "The second vector that should be used for comparision.\n",
                                            "tags": []
                                        },
                                        "type": {
                                            "type": "reference",
                                            "id": 3205,
                                            "name": "Vector2"
                                        }
                                    }
                                ],
                                "type": {
                                    "type": "intrinsic",
                                    "name": "number"
                                }
                            }
                        ]
                    },
                    {
                        "id": 3223,
                        "name": "interpolateDirection",
                        "kind": 2048,
                        "kindString": "Method",
                        "flags": {
                            "isStatic": true
                        },
                        "sources": [
                            {
                                "fileName": "src/aux-common/math/Vector2.ts",
                                "line": 150,
                                "character": 11
                            }
                        ],
                        "signatures": [
                            {
                                "id": 3224,
                                "name": "interpolateDirection",
                                "kind": 4096,
                                "kindString": "Call signature",
                                "flags": {},
                                "comment": {
                                    "shortText": "Constructs a new vector that is the directional linear interpolation between the given start and end positions.\nThe degree that the result is interpolated is determined by the given amount parameter.",
                                    "text": "This function works similarly to interpolatePosition(), except the result is always a normalized vector.\n",
                                    "tags": [
                                        {
                                            "tag": "example",
                                            "paramName": "",
                                            "text": "Find the direction that points halfway between the two vectors.\nconst start = new Vector2(5, 10);\nconst finish = new Vector2(9, 2);\nconst halfway = Vector2.interpolatePosition(start, finish, 0.5);\n\nos.toast(halfway);\n"
                                        }
                                    ]
                                },
                                "parameters": [
                                    {
                                        "id": 3225,
                                        "name": "start",
                                        "kind": 32768,
                                        "kindString": "Parameter",
                                        "flags": {},
                                        "comment": {
                                            "shortText": "The start position.",
                                            "tags": []
                                        },
                                        "type": {
                                            "type": "reference",
                                            "id": 3205,
                                            "name": "Vector2"
                                        }
                                    },
                                    {
                                        "id": 3226,
                                        "name": "finish",
                                        "kind": 32768,
                                        "kindString": "Parameter",
                                        "flags": {},
                                        "comment": {
                                            "shortText": "The end position.",
                                            "tags": []
                                        },
                                        "type": {
                                            "type": "reference",
                                            "id": 3205,
                                            "name": "Vector2"
                                        }
                                    },
                                    {
                                        "id": 3227,
                                        "name": "amount",
                                        "kind": 32768,
                                        "kindString": "Parameter",
                                        "flags": {},
                                        "comment": {
                                            "shortText": "The amount that the resulting position should be interpolated between the start and end positions.  Values near 0 indicate rotations close to the first and values near 1 indicate rotations close to the second.\n",
                                            "tags": []
                                        },
                                        "type": {
                                            "type": "intrinsic",
                                            "name": "number"
                                        }
                                    }
                                ],
                                "type": {
                                    "type": "reference",
                                    "id": 3205,
                                    "name": "Vector2"
                                }
                            }
                        ]
                    },
                    {
                        "id": 3218,
                        "name": "interpolatePosition",
                        "kind": 2048,
                        "kindString": "Method",
                        "flags": {
                            "isStatic": true
                        },
                        "sources": [
                            {
                                "fileName": "src/aux-common/math/Vector2.ts",
                                "line": 123,
                                "character": 11
                            }
                        ],
                        "signatures": [
                            {
                                "id": 3219,
                                "name": "interpolatePosition",
                                "kind": 4096,
                                "kindString": "Call signature",
                                "flags": {},
                                "comment": {
                                    "shortText": "Constructs a new vector that is the linear interpolation between the given start and end positions.\nThe degree that the result is interpolated is determined by the given amount parameter.",
                                    "tags": [
                                        {
                                            "tag": "example",
                                            "paramName": "",
                                            "text": "Find the position that is halfway between two vectors.\nconst start = new Vector2(5, 10);\nconst finish = new Vector2(9, 2);\nconst halfway = Vector2.interpolatePosition(start, finish, 0.5);\n\nos.toast(halfway);\n"
                                        },
                                        {
                                            "tag": "example",
                                            "paramName": "",
                                            "text": "Find the position that is 1/4 between two vectors.\nconst start = new Vector2(5, 10);\nconst finish = new Vector2(9, 2);\nconst halfway = Vector2.interpolatePosition(start, finish, 0.25);\n\nos.toast(halfway);\n"
                                        }
                                    ]
                                },
                                "parameters": [
                                    {
                                        "id": 3220,
                                        "name": "start",
                                        "kind": 32768,
                                        "kindString": "Parameter",
                                        "flags": {},
                                        "comment": {
                                            "shortText": "The start position.",
                                            "tags": []
                                        },
                                        "type": {
                                            "type": "reference",
                                            "id": 3205,
                                            "name": "Vector2"
                                        }
                                    },
                                    {
                                        "id": 3221,
                                        "name": "finish",
                                        "kind": 32768,
                                        "kindString": "Parameter",
                                        "flags": {},
                                        "comment": {
                                            "shortText": "The end position.",
                                            "tags": []
                                        },
                                        "type": {
                                            "type": "reference",
                                            "id": 3205,
                                            "name": "Vector2"
                                        }
                                    },
                                    {
                                        "id": 3222,
                                        "name": "amount",
                                        "kind": 32768,
                                        "kindString": "Parameter",
                                        "flags": {},
                                        "comment": {
                                            "shortText": "The amount that the resulting position should be interpolated between the start and end positions.  Values near 0 indicate rotations close to the first and values near 1 indicate rotations close to the second.\n",
                                            "tags": []
                                        },
                                        "type": {
                                            "type": "intrinsic",
                                            "name": "number"
                                        }
                                    }
                                ],
                                "type": {
                                    "type": "reference",
                                    "id": 3205,
                                    "name": "Vector2"
                                }
                            }
                        ]
                    }
                ],
                "groups": [
                    {
                        "title": "Constructors",
                        "kind": 512,
                        "children": [
                            3228
                        ]
                    },
                    {
                        "title": "Properties",
                        "kind": 1024,
                        "children": [
                            3232,
                            3233
                        ]
                    },
                    {
                        "title": "Methods",
                        "kind": 2048,
                        "children": [
                            3234,
                            3246,
                            3259,
                            3249,
                            3243,
                            3240,
                            3255,
                            3253,
                            3251,
                            3237,
                            3257,
                            3210,
                            3206,
                            3214,
                            3223,
                            3218
                        ]
                    }
                ],
                "sources": [
                    {
                        "fileName": "src/aux-common/math/Vector2.ts",
                        "line": 12,
                        "character": 13
                    }
                ]
            },
            "comment": {
                "shortText": "Defines a class that represents a 2D point in space.",
                "text": "",
                "tags": [
                    {
                        "tagName": "dochash",
                        "paramName": "",
                        "text": "types/math/vectors"
                    },
                    {
                        "tagName": "docorder",
                        "paramName": "",
                        "text": "0"
                    },
                    {
                        "tagName": "doctitle",
                        "paramName": "",
                        "text": "Vectors"
                    },
                    {
                        "tagName": "docsidebar",
                        "paramName": "",
                        "text": "Vectors"
                    },
                    {
                        "tagName": "docdescription",
                        "paramName": "",
                        "text": "Vectors help represent positions and directions."
                    },
                    {
                        "tagName": "docname",
                        "paramName": "",
                        "text": "Vector2\n"
                    }
                ]
            },
            "group": null
        },
        {
            "id": 3262,
            "order": 1,
            "name": "Vector3",
            "reflection": {
                "id": 3262,
                "name": "Vector3",
                "kind": 128,
                "kindString": "Class",
                "flags": {},
                "comment": {
                    "shortText": "Defines a class that represents a 3D point in space.",
                    "tags": [
                        {
                            "tag": "dochash",
                            "paramName": "",
                            "text": "types/math/vectors"
                        },
                        {
                            "tag": "docorder",
                            "paramName": "",
                            "text": "1"
                        },
                        {
                            "tag": "doctitle",
                            "paramName": "",
                            "text": "Vectors"
                        },
                        {
                            "tag": "docsidebar",
                            "paramName": "",
                            "text": "Vectors"
                        },
                        {
                            "tag": "docdescription",
                            "paramName": "",
                            "text": "Vectors help represent positions and directions."
                        },
                        {
                            "tag": "docname",
                            "paramName": "",
                            "text": "Vector3\n"
                        }
                    ]
                },
                "children": [
                    {
                        "id": 3286,
                        "name": "constructor",
                        "kind": 512,
                        "kindString": "Constructor",
                        "flags": {},
                        "sources": [
                            {
                                "fileName": "src/aux-common/math/Vector3.ts",
                                "line": 65,
                                "character": 4
                            }
                        ],
                        "signatures": [
                            {
                                "id": 3287,
                                "name": "new Vector3",
                                "kind": 16384,
                                "kindString": "Constructor signature",
                                "flags": {},
                                "comment": {
                                    "shortText": "Constructs a new 3D vector with the given X and Y values.",
                                    "tags": [
                                        {
                                            "tag": "example",
                                            "paramName": "",
                                            "text": "Create a new Vector3 object with the position (2, 3, 4).\nlet myVector = new Vector3(2, 3, 4);\n\nos.toast(`X: ${myVector.x}, Y: ${myVector.y}, Z: ${myVector.z}`);\n"
                                        },
                                        {
                                            "tag": "example",
                                            "paramName": "",
                                            "text": "Move this bot to (1, 2, 3) in the home dimension.\ntags.homePosition = new Vector3(1, 2, 3);\n"
                                        }
                                    ]
                                },
                                "parameters": [
                                    {
                                        "id": 3288,
                                        "name": "x",
                                        "kind": 32768,
                                        "kindString": "Parameter",
                                        "flags": {},
                                        "comment": {
                                            "shortText": "The X value of the vector.",
                                            "tags": []
                                        },
                                        "type": {
                                            "type": "intrinsic",
                                            "name": "number"
                                        },
                                        "defaultValue": "0"
                                    },
                                    {
                                        "id": 3289,
                                        "name": "y",
                                        "kind": 32768,
                                        "kindString": "Parameter",
                                        "flags": {},
                                        "comment": {
                                            "shortText": "The Y value of the vector.",
                                            "tags": []
                                        },
                                        "type": {
                                            "type": "intrinsic",
                                            "name": "number"
                                        },
                                        "defaultValue": "0"
                                    },
                                    {
                                        "id": 3290,
                                        "name": "z",
                                        "kind": 32768,
                                        "kindString": "Parameter",
                                        "flags": {},
                                        "comment": {
                                            "shortText": "The Z value of the vector.\n",
                                            "tags": []
                                        },
                                        "type": {
                                            "type": "intrinsic",
                                            "name": "number"
                                        },
                                        "defaultValue": "0"
                                    }
                                ],
                                "type": {
                                    "type": "reference",
                                    "id": 3262,
                                    "name": "Vector3"
                                }
                            }
                        ]
                    },
                    {
                        "id": 3291,
                        "name": "x",
                        "kind": 1024,
                        "kindString": "Property",
                        "flags": {},
                        "comment": {
                            "shortText": "The X value of this vector.",
                            "tags": []
                        },
                        "sources": [
                            {
                                "fileName": "src/aux-common/math/Vector3.ts",
                                "line": 18,
                                "character": 4
                            }
                        ],
                        "type": {
                            "type": "intrinsic",
                            "name": "number"
                        }
                    },
                    {
                        "id": 3292,
                        "name": "y",
                        "kind": 1024,
                        "kindString": "Property",
                        "flags": {},
                        "comment": {
                            "shortText": "The Y value of this vector.",
                            "tags": []
                        },
                        "sources": [
                            {
                                "fileName": "src/aux-common/math/Vector3.ts",
                                "line": 23,
                                "character": 4
                            }
                        ],
                        "type": {
                            "type": "intrinsic",
                            "name": "number"
                        }
                    },
                    {
                        "id": 3293,
                        "name": "z",
                        "kind": 1024,
                        "kindString": "Property",
                        "flags": {},
                        "comment": {
                            "shortText": "The Z value of this vector.",
                            "tags": []
                        },
                        "sources": [
                            {
                                "fileName": "src/aux-common/math/Vector3.ts",
                                "line": 28,
                                "character": 4
                            }
                        ],
                        "type": {
                            "type": "intrinsic",
                            "name": "number"
                        }
                    },
                    {
                        "id": 3294,
                        "name": "xy",
                        "kind": 262144,
                        "kindString": "Accessor",
                        "flags": {},
                        "sources": [
                            {
                                "fileName": "src/aux-common/math/Vector3.ts",
                                "line": 33,
                                "character": 8
                            }
                        ],
                        "getSignature": [
                            {
                                "id": 3295,
                                "name": "xy",
                                "kind": 524288,
                                "kindString": "Get signature",
                                "flags": {},
                                "comment": {
                                    "shortText": "Gets a new Vector2 that contains this vector's X and Y components.",
                                    "tags": []
                                },
                                "type": {
                                    "type": "reference",
                                    "id": 3205,
                                    "name": "Vector2"
                                }
                            }
                        ]
                    },
                    {
                        "id": 3296,
                        "name": "xz",
                        "kind": 262144,
                        "kindString": "Accessor",
                        "flags": {},
                        "sources": [
                            {
                                "fileName": "src/aux-common/math/Vector3.ts",
                                "line": 40,
                                "character": 8
                            }
                        ],
                        "getSignature": [
                            {
                                "id": 3297,
                                "name": "xz",
                                "kind": 524288,
                                "kindString": "Get signature",
                                "flags": {},
                                "comment": {
                                    "shortText": "Gets a new Vector2 that contains this vector's X and Z components.",
                                    "tags": []
                                },
                                "type": {
                                    "type": "reference",
                                    "id": 3205,
                                    "name": "Vector2"
                                }
                            }
                        ]
                    },
                    {
                        "id": 3298,
                        "name": "yz",
                        "kind": 262144,
                        "kindString": "Accessor",
                        "flags": {},
                        "sources": [
                            {
                                "fileName": "src/aux-common/math/Vector3.ts",
                                "line": 47,
                                "character": 8
                            }
                        ],
                        "getSignature": [
                            {
                                "id": 3299,
                                "name": "yz",
                                "kind": 524288,
                                "kindString": "Get signature",
                                "flags": {},
                                "comment": {
                                    "shortText": "Gets a new Vector2 that contains this vector's Y and Z components.",
                                    "tags": []
                                },
                                "type": {
                                    "type": "reference",
                                    "id": 3205,
                                    "name": "Vector2"
                                }
                            }
                        ]
                    },
                    {
                        "id": 3300,
                        "name": "add",
                        "kind": 2048,
                        "kindString": "Method",
                        "flags": {},
                        "sources": [
                            {
                                "fileName": "src/aux-common/math/Vector3.ts",
                                "line": 208,
                                "character": 4
                            }
                        ],
                        "signatures": [
                            {
                                "id": 3301,
                                "name": "add",
                                "kind": 4096,
                                "kindString": "Call signature",
                                "flags": {},
                                "comment": {
                                    "shortText": "Adds this vector with the other vector and returns the result.",
                                    "tags": [
                                        {
                                            "tag": "example",
                                            "paramName": "",
                                            "text": "Add two vectors together.\nconst first = new Vector3(1, 2, 3);\nconst second = new Vector3(3, 4, 5);\nconst added = first.add(second);\n\nos.toast(added); // Prints (4, 6, 8)\n"
                                        }
                                    ]
                                },
                                "parameters": [
                                    {
                                        "id": 3302,
                                        "name": "other",
                                        "kind": 32768,
                                        "kindString": "Parameter",
                                        "flags": {},
                                        "comment": {
                                            "shortText": "The other vector to add with this vector.\n",
                                            "tags": []
                                        },
                                        "type": {
                                            "type": "reference",
                                            "id": 3262,
                                            "name": "Vector3"
                                        }
                                    }
                                ],
                                "type": {
                                    "type": "reference",
                                    "id": 3262,
                                    "name": "Vector3"
                                }
                            }
                        ]
                    },
                    {
                        "id": 3315,
                        "name": "cross",
                        "kind": 2048,
                        "kindString": "Method",
                        "flags": {},
                        "sources": [
                            {
                                "fileName": "src/aux-common/math/Vector3.ts",
                                "line": 312,
                                "character": 4
                            }
                        ],
                        "signatures": [
                            {
                                "id": 3316,
                                "name": "cross",
                                "kind": 4096,
                                "kindString": "Call signature",
                                "flags": {},
                                "comment": {
                                    "shortText": "Calculates the cross product of this vector with the given other vector.\nReturns a new vector that is perpendicular to both vectors.\nNote that the order of the vectors greatly matters. For example, (1, 0, 0).cross(0, 1, 0) === (0, 0, 1) but (0, 1, 0).cross(1, 0, 0) === (0, 0, -1).",
                                    "tags": [
                                        {
                                            "tag": "example",
                                            "paramName": "",
                                            "text": "Calculate a vector that is perpendicular to two vectors.\nconst first = new Vector3(1, 0, 0);\nconst second = new Vector3(0, 1, 0);\n\nconst result = first.cross(second);\nos.toast(`Result: ${result}`); // Prints (0, 0, 1)\n"
                                        }
                                    ]
                                },
                                "parameters": [
                                    {
                                        "id": 3317,
                                        "name": "other",
                                        "kind": 32768,
                                        "kindString": "Parameter",
                                        "flags": {},
                                        "comment": {
                                            "shortText": "The other vector to calculate the cross product with.\n",
                                            "tags": []
                                        },
                                        "type": {
                                            "type": "reference",
                                            "id": 3262,
                                            "name": "Vector3"
                                        }
                                    }
                                ],
                                "type": {
                                    "type": "reference",
                                    "id": 3262,
                                    "name": "Vector3"
                                }
                            }
                        ]
                    },
                    {
                        "id": 3312,
                        "name": "dot",
                        "kind": 2048,
                        "kindString": "Method",
                        "flags": {},
                        "sources": [
                            {
                                "fileName": "src/aux-common/math/Vector3.ts",
                                "line": 295,
                                "character": 4
                            }
                        ],
                        "signatures": [
                            {
                                "id": 3313,
                                "name": "dot",
                                "kind": 4096,
                                "kindString": "Call signature",
                                "flags": {},
                                "comment": {
                                    "shortText": "Calculates the dot product of this vector compared to the given other vector.\nReturns a number that is positive if the vectors point in the same direction,\nnegative if they point in opposite directions, and zero if they are perpendicular.\nFor normalized vectors, this value is clamped to 1 and -1.",
                                    "tags": [
                                        {
                                            "tag": "example",
                                            "paramName": "",
                                            "text": "Determine how two vectors are pointing towards/away from the same direction.\nconst first = new Vector3(1, 2, 3);\nconst second = new Vector3(3, 4, 5);\n\nconst dot = first.dot(second);\nif (dot < 0) {\n    os.toast(\"Vectors are pointing away from each other!\");\n} else if (dot === 0) {\n    os.toast(\"Vectors 90 degrees away from each other!\");\n} else {\n    os.toast(\"Vectors are pointing towards from each other!\");\n}\n"
                                        }
                                    ]
                                },
                                "parameters": [
                                    {
                                        "id": 3314,
                                        "name": "other",
                                        "kind": 32768,
                                        "kindString": "Parameter",
                                        "flags": {},
                                        "comment": {
                                            "shortText": "The other vector to calculate the dot product with.\n",
                                            "tags": []
                                        },
                                        "type": {
                                            "type": "reference",
                                            "id": 3262,
                                            "name": "Vector3"
                                        }
                                    }
                                ],
                                "type": {
                                    "type": "intrinsic",
                                    "name": "number"
                                }
                            }
                        ]
                    },
                    {
                        "id": 3328,
                        "name": "equals",
                        "kind": 2048,
                        "kindString": "Method",
                        "flags": {},
                        "sources": [
                            {
                                "fileName": "src/aux-common/math/Vector3.ts",
                                "line": 405,
                                "character": 4
                            }
                        ],
                        "signatures": [
                            {
                                "id": 3329,
                                "name": "equals",
                                "kind": 4096,
                                "kindString": "Call signature",
                                "flags": {},
                                "comment": {
                                    "shortText": "Determines if this vector equals the other vector.",
                                    "tags": [
                                        {
                                            "tag": "example",
                                            "paramName": "",
                                            "text": "Determine if two vectors represent the same value.\nconst first = new Vector3(1, 2, 3);\nconst second = new Vector3(3, 4, 5);\nconst third = new Vector3(1, 2, 3);\n\nos.toast(`first == second: ${first.equals(second)}; first == third: ${first.equals(third)}`)\n"
                                        }
                                    ]
                                },
                                "parameters": [
                                    {
                                        "id": 3330,
                                        "name": "other",
                                        "kind": 32768,
                                        "kindString": "Parameter",
                                        "flags": {},
                                        "comment": {
                                            "shortText": "The other value to compare to.\n",
                                            "tags": []
                                        },
                                        "type": {
                                            "type": "reference",
                                            "id": 3262,
                                            "name": "Vector3"
                                        }
                                    }
                                ],
                                "type": {
                                    "type": "intrinsic",
                                    "name": "boolean"
                                }
                            }
                        ]
                    },
                    {
                        "id": 3318,
                        "name": "length",
                        "kind": 2048,
                        "kindString": "Method",
                        "flags": {},
                        "sources": [
                            {
                                "fileName": "src/aux-common/math/Vector3.ts",
                                "line": 329,
                                "character": 4
                            }
                        ],
                        "signatures": [
                            {
                                "id": 3319,
                                "name": "length",
                                "kind": 4096,
                                "kindString": "Call signature",
                                "flags": {},
                                "comment": {
                                    "shortText": "Calculates the length of this vector and returns the result.",
                                    "tags": [
                                        {
                                            "tag": "example",
                                            "paramName": "",
                                            "text": "Get the length of the vector.\nconst myVector = new Vector3(1, 2, 3);\nconst length = myVector.length();\n\nos.toast(`Vector is ${length} units long`);\n"
                                        }
                                    ]
                                },
                                "type": {
                                    "type": "intrinsic",
                                    "name": "number"
                                }
                            }
                        ]
                    },
                    {
                        "id": 3309,
                        "name": "multiply",
                        "kind": 2048,
                        "kindString": "Method",
                        "flags": {},
                        "sources": [
                            {
                                "fileName": "src/aux-common/math/Vector3.ts",
                                "line": 267,
                                "character": 4
                            }
                        ],
                        "signatures": [
                            {
                                "id": 3310,
                                "name": "multiply",
                                "kind": 4096,
                                "kindString": "Call signature",
                                "flags": {},
                                "comment": {
                                    "shortText": "Multiplies this vector by the given other vector and returns the result.",
                                    "tags": [
                                        {
                                            "tag": "example",
                                            "paramName": "",
                                            "text": "Multiply two vectors together.\nconst first = new Vector3(1, 2, 3);\nconst second = new Vector3(3, 4, 5);\nconst multiplied = first.multiply(second);\n\nos.toast(multiplied); // Prints (3, 8, 15)\n"
                                        }
                                    ]
                                },
                                "parameters": [
                                    {
                                        "id": 3311,
                                        "name": "other",
                                        "kind": 32768,
                                        "kindString": "Parameter",
                                        "flags": {},
                                        "comment": {
                                            "shortText": "The other vector to multiply with this vector.\n",
                                            "tags": []
                                        },
                                        "type": {
                                            "type": "reference",
                                            "id": 3262,
                                            "name": "Vector3"
                                        }
                                    }
                                ],
                                "type": {
                                    "type": "reference",
                                    "id": 3262,
                                    "name": "Vector3"
                                }
                            }
                        ]
                    },
                    {
                        "id": 3306,
                        "name": "multiplyScalar",
                        "kind": 2048,
                        "kindString": "Method",
                        "flags": {},
                        "sources": [
                            {
                                "fileName": "src/aux-common/math/Vector3.ts",
                                "line": 252,
                                "character": 4
                            }
                        ],
                        "signatures": [
                            {
                                "id": 3307,
                                "name": "multiplyScalar",
                                "kind": 4096,
                                "kindString": "Call signature",
                                "flags": {},
                                "comment": {
                                    "shortText": "Multiplies each component of this vector by the given value and returns the result.",
                                    "tags": [
                                        {
                                            "tag": "example",
                                            "paramName": "",
                                            "text": "Scale a vector by 10.\nconst myVector = new Vector3(1, 1, 1);\nconst scaled = myVector.multiplyScalar(10);\nos.toast(scaled); // Prints (10, 10, 10)\n"
                                        }
                                    ]
                                },
                                "parameters": [
                                    {
                                        "id": 3308,
                                        "name": "scale",
                                        "kind": 32768,
                                        "kindString": "Parameter",
                                        "flags": {},
                                        "comment": {
                                            "shortText": "The scale that should be applied to this vector.\n",
                                            "tags": []
                                        },
                                        "type": {
                                            "type": "intrinsic",
                                            "name": "number"
                                        }
                                    }
                                ],
                                "type": {
                                    "type": "reference",
                                    "id": 3262,
                                    "name": "Vector3"
                                }
                            }
                        ]
                    },
                    {
                        "id": 3324,
                        "name": "negate",
                        "kind": 2048,
                        "kindString": "Method",
                        "flags": {},
                        "sources": [
                            {
                                "fileName": "src/aux-common/math/Vector3.ts",
                                "line": 377,
                                "character": 4
                            }
                        ],
                        "signatures": [
                            {
                                "id": 3325,
                                "name": "negate",
                                "kind": 4096,
                                "kindString": "Call signature",
                                "flags": {},
                                "comment": {
                                    "shortText": "Negates each component of this vector and returns a new vector that contains the result.",
                                    "tags": [
                                        {
                                            "tag": "example",
                                            "paramName": "",
                                            "text": "Negate a vector.\nconst myVector = new Vector3(1, 2, 3);\nconst negated = myVector.negate();\n\nos.toast(`Vector: ${myVector}, Negated: ${negated}`);\n"
                                        }
                                    ]
                                },
                                "type": {
                                    "type": "reference",
                                    "id": 3262,
                                    "name": "Vector3"
                                }
                            }
                        ]
                    },
                    {
                        "id": 3322,
                        "name": "normalize",
                        "kind": 2048,
                        "kindString": "Method",
                        "flags": {},
                        "sources": [
                            {
                                "fileName": "src/aux-common/math/Vector3.ts",
                                "line": 360,
                                "character": 4
                            }
                        ],
                        "signatures": [
                            {
                                "id": 3323,
                                "name": "normalize",
                                "kind": 4096,
                                "kindString": "Call signature",
                                "flags": {},
                                "comment": {
                                    "shortText": "Calculates the normalized version of this vector and returns it.\nA normalized vector is a vector whose length equals 1.",
                                    "text": "Normalizing a vector preserves its directionality while making the length (i.e. scale) of it 1.\n",
                                    "tags": [
                                        {
                                            "tag": "example",
                                            "paramName": "",
                                            "text": "Normalize a vector.\nconst myVector = new Vector3(1, 2, 3);\nconst normalized = myVector.normalize();\n\nos.toast(`Vector: ${myVector}, Normalized: ${normalized}`);\n"
                                        }
                                    ]
                                },
                                "type": {
                                    "type": "reference",
                                    "id": 3262,
                                    "name": "Vector3"
                                }
                            }
                        ]
                    },
                    {
                        "id": 3320,
                        "name": "squareLength",
                        "kind": 2048,
                        "kindString": "Method",
                        "flags": {},
                        "sources": [
                            {
                                "fileName": "src/aux-common/math/Vector3.ts",
                                "line": 344,
                                "character": 4
                            }
                        ],
                        "signatures": [
                            {
                                "id": 3321,
                                "name": "squareLength",
                                "kind": 4096,
                                "kindString": "Call signature",
                                "flags": {},
                                "comment": {
                                    "shortText": "Calculates the square length of this vector and returns the result.\nThis is equivalent to length^2, but it is faster to calculate than length because it doesn't require\ncalculating a square root.",
                                    "tags": [
                                        {
                                            "tag": "example",
                                            "paramName": "",
                                            "text": "Get the square length of the vector.\nconst myVector = new Vector3(1, 2, 3);\nconst length = myVector.squareLength();\n\nos.toast(`Vector is ${length}^2 units long`);\n"
                                        }
                                    ]
                                },
                                "type": {
                                    "type": "intrinsic",
                                    "name": "number"
                                }
                            }
                        ]
                    },
                    {
                        "id": 3303,
                        "name": "subtract",
                        "kind": 2048,
                        "kindString": "Method",
                        "flags": {},
                        "sources": [
                            {
                                "fileName": "src/aux-common/math/Vector3.ts",
                                "line": 235,
                                "character": 4
                            }
                        ],
                        "signatures": [
                            {
                                "id": 3304,
                                "name": "subtract",
                                "kind": 4096,
                                "kindString": "Call signature",
                                "flags": {},
                                "comment": {
                                    "shortText": "Subtracts the other vector from this vector and returns the result.",
                                    "tags": [
                                        {
                                            "tag": "example",
                                            "paramName": "",
                                            "text": "Subtract two vectors.\nconst first = new Vector3(1, 2, 3);\nconst second = new Vector3(3, 4, 5);\nconst subtracted = first.subtract(second);\nos.toast(subtracted);\n"
                                        },
                                        {
                                            "tag": "example",
                                            "paramName": "",
                                            "text": "Find the direction from one vector to another.\nconst first = new Vector3(1, 2, 3);\nconst second = new Vector3(3, 4, 5);\n\nconst directionFromFirstToSecond = second.subtract(first);\nconst directionFromSecondToFirst = first.subtract(second);\n\nos.toast(`first -> second = ${directionFromFirstToSecond}; second -> first = ${directionFromSecondToFirst}`);\n"
                                        }
                                    ]
                                },
                                "parameters": [
                                    {
                                        "id": 3305,
                                        "name": "other",
                                        "kind": 32768,
                                        "kindString": "Parameter",
                                        "flags": {},
                                        "comment": {
                                            "shortText": "The other vector that should be subtracted from this vector.\n",
                                            "tags": []
                                        },
                                        "type": {
                                            "type": "reference",
                                            "id": 3262,
                                            "name": "Vector3"
                                        }
                                    }
                                ],
                                "type": {
                                    "type": "reference",
                                    "id": 3262,
                                    "name": "Vector3"
                                }
                            }
                        ]
                    },
                    {
                        "id": 3326,
                        "name": "toString",
                        "kind": 2048,
                        "kindString": "Method",
                        "flags": {},
                        "sources": [
                            {
                                "fileName": "src/aux-common/math/Vector3.ts",
                                "line": 390,
                                "character": 4
                            }
                        ],
                        "signatures": [
                            {
                                "id": 3327,
                                "name": "toString",
                                "kind": 4096,
                                "kindString": "Call signature",
                                "flags": {},
                                "comment": {
                                    "shortText": "Converts this vector to a human-readable string representation.",
                                    "tags": [
                                        {
                                            "tag": "example",
                                            "paramName": "",
                                            "text": "Get a string of a vector.\nconst myVector = new Vector3(1, 2, 3);\nconst vectorString = myVector.toString();\n\nos.toast('My Vector: ' + vectorString);\n"
                                        }
                                    ]
                                },
                                "type": {
                                    "type": "intrinsic",
                                    "name": "string"
                                }
                            }
                        ]
                    },
                    {
                        "id": 3268,
                        "name": "angleBetween",
                        "kind": 2048,
                        "kindString": "Method",
                        "flags": {
                            "isStatic": true
                        },
                        "sources": [
                            {
                                "fileName": "src/aux-common/math/Vector3.ts",
                                "line": 111,
                                "character": 11
                            }
                        ],
                        "signatures": [
                            {
                                "id": 3269,
                                "name": "angleBetween",
                                "kind": 4096,
                                "kindString": "Call signature",
                                "flags": {},
                                "comment": {
                                    "shortText": "Calculates the angle between the two given vectors and returns the result in radians.",
                                    "tags": [
                                        {
                                            "tag": "example",
                                            "paramName": "",
                                            "text": "Find the angle between two vectors.\nconst first = new Vector3(\n    Math.cos(Math.PI / 3),\n    Math.sin(Math.PI / 3),\n    0,\n); // 60 degrees\nconst second = new Vector3(\n    Math.cos(Math.PI / 2),\n    Math.sin(Math.PI / 2),\n    0\n); // 90 degrees\n\nconst angle = Vector3.angleBetween(first, second);\nos.toast(angle);\n"
                                        }
                                    ]
                                },
                                "parameters": [
                                    {
                                        "id": 3270,
                                        "name": "first",
                                        "kind": 32768,
                                        "kindString": "Parameter",
                                        "flags": {},
                                        "comment": {
                                            "shortText": "The first vector that should be used for comparision.",
                                            "tags": []
                                        },
                                        "type": {
                                            "type": "reference",
                                            "id": 3262,
                                            "name": "Vector3"
                                        }
                                    },
                                    {
                                        "id": 3271,
                                        "name": "second",
                                        "kind": 32768,
                                        "kindString": "Parameter",
                                        "flags": {},
                                        "comment": {
                                            "shortText": "The second vector that should be used for comparision.\n",
                                            "tags": []
                                        },
                                        "type": {
                                            "type": "reference",
                                            "id": 3262,
                                            "name": "Vector3"
                                        }
                                    }
                                ],
                                "type": {
                                    "type": "intrinsic",
                                    "name": "number"
                                }
                            }
                        ]
                    },
                    {
                        "id": 3263,
                        "name": "createNormalized",
                        "kind": 2048,
                        "kindString": "Method",
                        "flags": {
                            "isStatic": true
                        },
                        "sources": [
                            {
                                "fileName": "src/aux-common/math/Vector3.ts",
                                "line": 86,
                                "character": 11
                            }
                        ],
                        "signatures": [
                            {
                                "id": 3264,
                                "name": "createNormalized",
                                "kind": 4096,
                                "kindString": "Call signature",
                                "flags": {},
                                "comment": {
                                    "shortText": "Creates a 3D vector with the given X and Y values that is normalized immediately upon creation.",
                                    "tags": [
                                        {
                                            "tag": "example",
                                            "paramName": "",
                                            "text": "Create a normalized vector\nconst vector = Vector3.createNormalized(1, 2, 3);\n"
                                        }
                                    ]
                                },
                                "parameters": [
                                    {
                                        "id": 3265,
                                        "name": "x",
                                        "kind": 32768,
                                        "kindString": "Parameter",
                                        "flags": {},
                                        "comment": {
                                            "shortText": "The X value of the vector.",
                                            "tags": []
                                        },
                                        "type": {
                                            "type": "intrinsic",
                                            "name": "number"
                                        }
                                    },
                                    {
                                        "id": 3266,
                                        "name": "y",
                                        "kind": 32768,
                                        "kindString": "Parameter",
                                        "flags": {},
                                        "comment": {
                                            "shortText": "The Y value of the vector.",
                                            "tags": []
                                        },
                                        "type": {
                                            "type": "intrinsic",
                                            "name": "number"
                                        }
                                    },
                                    {
                                        "id": 3267,
                                        "name": "z",
                                        "kind": 32768,
                                        "kindString": "Parameter",
                                        "flags": {},
                                        "comment": {
                                            "shortText": "The Z value of the vector.\n",
                                            "tags": []
                                        },
                                        "type": {
                                            "type": "intrinsic",
                                            "name": "number"
                                        }
                                    }
                                ],
                                "type": {
                                    "type": "reference",
                                    "id": 3262,
                                    "name": "Vector3"
                                }
                            }
                        ]
                    },
                    {
                        "id": 3272,
                        "name": "distanceBetween",
                        "kind": 2048,
                        "kindString": "Method",
                        "flags": {
                            "isStatic": true
                        },
                        "sources": [
                            {
                                "fileName": "src/aux-common/math/Vector3.ts",
                                "line": 136,
                                "character": 11
                            }
                        ],
                        "signatures": [
                            {
                                "id": 3273,
                                "name": "distanceBetween",
                                "kind": 4096,
                                "kindString": "Call signature",
                                "flags": {},
                                "comment": {
                                    "shortText": "Calculates the distance between the two given vectors and returns the result.",
                                    "tags": [
                                        {
                                            "tag": "example",
                                            "paramName": "",
                                            "text": "Find the distance between two vectors.\nconst first = new Vector3(5, 10, 3);\nconst second = new Vector3(9, 2, 6);\nconst distance = Vector3.distanceBetween(first, second);\n\nos.toast(`Distance: ${distance}`);\n"
                                        }
                                    ]
                                },
                                "parameters": [
                                    {
                                        "id": 3274,
                                        "name": "first",
                                        "kind": 32768,
                                        "kindString": "Parameter",
                                        "flags": {},
                                        "comment": {
                                            "shortText": "The first vector that should be used for comparision.",
                                            "tags": []
                                        },
                                        "type": {
                                            "type": "reference",
                                            "id": 3262,
                                            "name": "Vector3"
                                        }
                                    },
                                    {
                                        "id": 3275,
                                        "name": "second",
                                        "kind": 32768,
                                        "kindString": "Parameter",
                                        "flags": {},
                                        "comment": {
                                            "shortText": "The second vector that should be used for comparision.\n",
                                            "tags": []
                                        },
                                        "type": {
                                            "type": "reference",
                                            "id": 3262,
                                            "name": "Vector3"
                                        }
                                    }
                                ],
                                "type": {
                                    "type": "intrinsic",
                                    "name": "number"
                                }
                            }
                        ]
                    },
                    {
                        "id": 3281,
                        "name": "interpolateDirection",
                        "kind": 2048,
                        "kindString": "Method",
                        "flags": {
                            "isStatic": true
                        },
                        "sources": [
                            {
                                "fileName": "src/aux-common/math/Vector3.ts",
                                "line": 189,
                                "character": 11
                            }
                        ],
                        "signatures": [
                            {
                                "id": 3282,
                                "name": "interpolateDirection",
                                "kind": 4096,
                                "kindString": "Call signature",
                                "flags": {},
                                "comment": {
                                    "shortText": "Constructs a new vector that is the directional linear interpolation between the given start and end positions.\nThe degree that the result is interpolated is determined by the given amount parameter.",
                                    "text": "This function works similarly to interpolatePosition(), except the result is always a normalized vector.\n",
                                    "tags": [
                                        {
                                            "tag": "example",
                                            "paramName": "",
                                            "text": "Find the direction that points halfway between the two vectors.\nconst start = new Vector3(5, 10, 16);\nconst finish = new Vector3(9, 2, 6);\nconst halfway = Vector3.interpolatePosition(start, finish, 0.5);\n\nos.toast(halfway);\n"
                                        }
                                    ]
                                },
                                "parameters": [
                                    {
                                        "id": 3283,
                                        "name": "start",
                                        "kind": 32768,
                                        "kindString": "Parameter",
                                        "flags": {},
                                        "comment": {
                                            "shortText": "The start position.",
                                            "tags": []
                                        },
                                        "type": {
                                            "type": "reference",
                                            "id": 3262,
                                            "name": "Vector3"
                                        }
                                    },
                                    {
                                        "id": 3284,
                                        "name": "finish",
                                        "kind": 32768,
                                        "kindString": "Parameter",
                                        "flags": {},
                                        "comment": {
                                            "shortText": "The end position.",
                                            "tags": []
                                        },
                                        "type": {
                                            "type": "reference",
                                            "id": 3262,
                                            "name": "Vector3"
                                        }
                                    },
                                    {
                                        "id": 3285,
                                        "name": "amount",
                                        "kind": 32768,
                                        "kindString": "Parameter",
                                        "flags": {},
                                        "comment": {
                                            "shortText": "The amount that the resulting position should be interpolated between the start and end positions.  Values near 0 indicate rotations close to the first and values near 1 indicate rotations close to the second.\n",
                                            "tags": []
                                        },
                                        "type": {
                                            "type": "intrinsic",
                                            "name": "number"
                                        }
                                    }
                                ],
                                "type": {
                                    "type": "reference",
                                    "id": 3262,
                                    "name": "Vector3"
                                }
                            }
                        ]
                    },
                    {
                        "id": 3276,
                        "name": "interpolatePosition",
                        "kind": 2048,
                        "kindString": "Method",
                        "flags": {
                            "isStatic": true
                        },
                        "sources": [
                            {
                                "fileName": "src/aux-common/math/Vector3.ts",
                                "line": 162,
                                "character": 11
                            }
                        ],
                        "signatures": [
                            {
                                "id": 3277,
                                "name": "interpolatePosition",
                                "kind": 4096,
                                "kindString": "Call signature",
                                "flags": {},
                                "comment": {
                                    "shortText": "Constructs a new vector that is the linear interpolation between the given start and end positions.\nThe degree that the result is interpolated is determined by the given amount parameter.",
                                    "tags": [
                                        {
                                            "tag": "example",
                                            "paramName": "",
                                            "text": "Find the position that is halfway between two vectors.\nconst start = new Vector3(5, 10, 15);\nconst finish = new Vector3(9, 2, 6);\nconst halfway = Vector3.interpolatePosition(start, finish, 0.5);\n\nos.toast(halfway);\n"
                                        },
                                        {
                                            "tag": "example",
                                            "paramName": "",
                                            "text": "Find the position that is 1/4 between two vectors.\nconst start = new Vector3(5, 10, 15);\nconst finish = new Vector3(9, 2, 6);\nconst halfway = Vector3.interpolatePosition(start, finish, 0.25);\n\nos.toast(halfway);\n"
                                        }
                                    ]
                                },
                                "parameters": [
                                    {
                                        "id": 3278,
                                        "name": "start",
                                        "kind": 32768,
                                        "kindString": "Parameter",
                                        "flags": {},
                                        "comment": {
                                            "shortText": "The start position.",
                                            "tags": []
                                        },
                                        "type": {
                                            "type": "reference",
                                            "id": 3262,
                                            "name": "Vector3"
                                        }
                                    },
                                    {
                                        "id": 3279,
                                        "name": "finish",
                                        "kind": 32768,
                                        "kindString": "Parameter",
                                        "flags": {},
                                        "comment": {
                                            "shortText": "The end position.",
                                            "tags": []
                                        },
                                        "type": {
                                            "type": "reference",
                                            "id": 3262,
                                            "name": "Vector3"
                                        }
                                    },
                                    {
                                        "id": 3280,
                                        "name": "amount",
                                        "kind": 32768,
                                        "kindString": "Parameter",
                                        "flags": {},
                                        "comment": {
                                            "shortText": "The amount that the resulting position should be interpolated between the start and end positions.  Values near 0 indicate rotations close to the first and values near 1 indicate rotations close to the second.\n",
                                            "tags": []
                                        },
                                        "type": {
                                            "type": "intrinsic",
                                            "name": "number"
                                        }
                                    }
                                ],
                                "type": {
                                    "type": "reference",
                                    "id": 3262,
                                    "name": "Vector3"
                                }
                            }
                        ]
                    }
                ],
                "groups": [
                    {
                        "title": "Constructors",
                        "kind": 512,
                        "children": [
                            3286
                        ]
                    },
                    {
                        "title": "Properties",
                        "kind": 1024,
                        "children": [
                            3291,
                            3292,
                            3293
                        ]
                    },
                    {
                        "title": "Accessors",
                        "kind": 262144,
                        "children": [
                            3294,
                            3296,
                            3298
                        ]
                    },
                    {
                        "title": "Methods",
                        "kind": 2048,
                        "children": [
                            3300,
                            3315,
                            3312,
                            3328,
                            3318,
                            3309,
                            3306,
                            3324,
                            3322,
                            3320,
                            3303,
                            3326,
                            3268,
                            3263,
                            3272,
                            3281,
                            3276
                        ]
                    }
                ],
                "sources": [
                    {
                        "fileName": "src/aux-common/math/Vector3.ts",
                        "line": 14,
                        "character": 13
                    }
                ]
            },
            "comment": {
                "shortText": "Defines a class that represents a 3D point in space.",
                "text": "",
                "tags": [
                    {
                        "tagName": "dochash",
                        "paramName": "",
                        "text": "types/math/vectors"
                    },
                    {
                        "tagName": "docorder",
                        "paramName": "",
                        "text": "1"
                    },
                    {
                        "tagName": "doctitle",
                        "paramName": "",
                        "text": "Vectors"
                    },
                    {
                        "tagName": "docsidebar",
                        "paramName": "",
                        "text": "Vectors"
                    },
                    {
                        "tagName": "docdescription",
                        "paramName": "",
                        "text": "Vectors help represent positions and directions."
                    },
                    {
                        "tagName": "docname",
                        "paramName": "",
                        "text": "Vector3\n"
                    }
                ]
            },
            "group": null
        }
    ],
    "references": {
        "CasualOSError": "types/error",
        "id-2949": "CasualOSError",
        "Quaternion": "types/math/rotations",
        "id-3339": "Quaternion",
        "Rotation": "types/math/rotations",
        "id-3371": "Rotation",
        "Vector2": "types/math/vectors",
        "id-3205": "Vector2",
        "Vector3": "types/math/vectors",
        "id-3262": "Vector3",
        "AIChatMessage": "types/ai",
        "id-2968": "AIChatMessage",
        "AIChatOptions": "types/ai",
        "id-2746": "AIChatOptions",
        "AIGenerateImageSuccess": "types/ai",
        "id-2551": "AIGenerateImageSuccess",
        "AIGenerateImageOptions": "types/ai",
        "id-2760": "AIGenerateImageOptions",
        "AIGenerateSkyboxOptions": "types/ai",
        "id-2756": "AIGenerateSkyboxOptions",
        "AIGenerateSkyboxRequest": "types/ai",
        "id-2544": "AIGenerateSkyboxRequest",
        "AIGenerateSkyboxResult": "types/ai",
        "id-2548": "AIGenerateSkyboxResult",
        "AIGeneratedImage": "types/ai",
        "id-2554": "AIGeneratedImage",
        "AddCountFailure": "types/records/events",
        "id-3152": "AddCountFailure",
        "AddCountSuccess": "types/records/events",
        "id-3147": "AddCountSuccess",
        "AnimateTagOptions": "types/animation",
        "id-2149": "AnimateTagOptions",
        "AttachDebuggerOptions": "types/debuggers/common",
        "id-2524": "AttachDebuggerOptions",
        "CasualOSDevice": "types/os",
        "id-2937": "CasualOSDevice",
        "CasualOSVersion": "types/os",
        "id-2929": "CasualOSVersion",
        "AxisAndAngle": "types/math/rotations",
        "id-3417": "AxisAndAngle",
        "BotTagMasks": "types/core",
        "id-2906": "BotTagMasks",
        "BotTags": "types/core",
        "id-2821": "BotTags",
        "BotState": "types/core",
        "id-2919": "BotState",
        "CompiledBotListeners": "types/core",
        "id-2900": "CompiledBotListeners",
        "ConvertGeolocationToWhat3WordsOptions": "types/os",
        "id-2581": "ConvertGeolocationToWhat3WordsOptions",
        "CreatePublicRecordKeyFailure": "types/records/key",
        "id-2979": "CreatePublicRecordKeyFailure",
        "CreatePublicRecordKeySuccess": "types/records/key",
        "id-2975": "CreatePublicRecordKeySuccess",
        "DebuggerCallFrame": "types/debuggers/common",
        "id-2477": "DebuggerCallFrame",
        "DebuggerFunctionLocation": "types/debuggers/common",
        "id-2512": "DebuggerFunctionLocation",
        "DebuggerPause": "types/debuggers/common",
        "id-2506": "DebuggerPause",
        "DebuggerTagMaskUpdate": "types/debuggers/common",
        "id-2485": "DebuggerTagMaskUpdate",
        "DebuggerTagUpdate": "types/debuggers/common",
        "id-2491": "DebuggerTagUpdate",
        "DebuggerVariable": "types/debuggers/common",
        "id-2518": "DebuggerVariable",
        "Easing": "types/animation",
        "id-2561": "Easing",
        "EnableXROptions": "types/os",
        "id-2655": "EnableXROptions",
        "EraseDataFailure": "types/records/data",
        "id-3123": "EraseDataFailure",
        "EraseDataSuccess": "types/records/data",
        "id-3119": "EraseDataSuccess",
        "EraseFileFailure": "types/records/files",
        "id-3142": "EraseFileFailure",
        "EraseFileSuccess": "types/records/files",
        "id-3138": "EraseFileSuccess",
        "EulerAnglesRotation": "types/math/rotations",
        "id-3420": "EulerAnglesRotation",
        "FocusOnOptions": "types/os",
        "id-2615": "FocusOnOptions",
        "FocusOnRotation": "types/os",
        "id-2627": "FocusOnRotation",
        "FormAnimationData": "types/os",
        "id-2673": "FormAnimationData",
        "FromToRotation": "types/math/rotations",
        "id-3414": "FromToRotation",
        "GenericError": "types/error",
        "id-2946": "GenericError",
        "GetCountFailure": "types/records/events",
        "id-3163": "GetCountFailure",
        "GetCountSuccess": "types/records/events",
        "id-3157": "GetCountSuccess",
        "GetDataFailure": "types/records/data",
        "id-3114": "GetDataFailure",
        "GetDataSuccess": "types/records/data",
        "id-3105": "GetDataSuccess",
        "GetRoomOptionsFailure": "types/os",
        "id-2239": "GetRoomOptionsFailure",
        "GetRoomOptionsSuccess": "types/os",
        "id-2235": "GetRoomOptionsSuccess",
        "GetRoomRemoteOptionsFailure": "types/os",
        "id-2282": "GetRoomRemoteOptionsFailure",
        "GetRoomRemoteOptionsSuccess": "types/os",
        "id-2277": "GetRoomRemoteOptionsSuccess",
        "GetRoomTrackOptionsFailure": "types/os",
        "id-2258": "GetRoomTrackOptionsFailure",
        "GetRoomTrackOptionsSuccess": "types/os",
        "id-2253": "GetRoomTrackOptionsSuccess",
        "GrantMarkerPermissionFailure": "types/records/policies",
        "id-3191": "GrantMarkerPermissionFailure",
        "GrantMarkerPermissionSuccess": "types/records/policies",
        "id-3189": "GrantMarkerPermissionSuccess",
        "GrantRoleFailure": "types/records/roles",
        "id-3177": "GrantRoleFailure",
        "GrantRoleSuccess": "types/records/roles",
        "id-3175": "GrantRoleSuccess",
        "ImageClassifierOptions": "types/os",
        "id-2633": "ImageClassifierOptions",
        "InstUpdate": "types/os",
        "id-2942": "InstUpdate",
        "JoinRoomFailure": "types/os",
        "id-2220": "JoinRoomFailure",
        "JoinRoomSuccess": "types/os",
        "id-2217": "JoinRoomSuccess",
        "LeaveRoomFailure": "types/os",
        "id-2229": "LeaveRoomFailure",
        "LeaveRoomSuccess": "types/os",
        "id-2226": "LeaveRoomSuccess",
        "ListDataFailure": "types/records/data",
        "id-3133": "ListDataFailure",
        "ListDataSuccess": "types/records/data",
        "id-3128": "ListDataSuccess",
        "LookRotation": "types/math/rotations",
        "id-3437": "LookRotation",
        "MediaPermissionOptions": "types/os",
        "id-2652": "MediaPermissionOptions",
        "Debugger": "types/debuggers/debugger",
        "id-2289": "Debugger",
        "NormalDebuggerOptions": "types/debuggers/common",
        "id-2496": "NormalDebuggerOptions",
        "PhotoCameraOptions": "types/camera",
        "id-2730": "PhotoCameraOptions",
        "ParsedBotLink": "types/core",
        "id-2925": "ParsedBotLink",
        "PartialBotState": "types/core",
        "id-2922": "PartialBotState",
        "PausableDebugger": "types/debuggers/pausable-debugger",
        "id-2345": "PausableDebugger",
        "PausableDebuggerOptions": "types/debuggers/common",
        "id-2501": "PausableDebuggerOptions",
        "PauseTrigger": "types/debuggers/common",
        "id-2464": "PauseTrigger",
        "PauseTriggerOptions": "types/debuggers/common",
        "id-2472": "PauseTriggerOptions",
        "Photo": "types/camera",
        "id-2742": "Photo",
        "PossiblePauseTriggerLocation": "types/debuggers/common",
        "id-2459": "PossiblePauseTriggerLocation",
        "PseudoRandomNumberGenerator": "types/core",
        "id-2533": "PseudoRandomNumberGenerator",
        "QuaternionRotation": "types/math/rotations",
        "id-3430": "QuaternionRotation",
        "RaycastRay": "types/os",
        "id-2213": "RaycastRay",
        "RaycastResult": "types/os",
        "id-2210": "RaycastResult",
        "RecordActionOptions": "types/records/extra",
        "id-2564": "RecordActionOptions",
        "RecordDataFailure": "types/records/data",
        "id-3100": "RecordDataFailure",
        "RecordDataSuccess": "types/records/data",
        "id-3096": "RecordDataSuccess",
        "RecordFileFailure": "types/records/files",
        "id-2180": "RecordFileFailure",
        "RecordFileSuccess": "types/records/files",
        "id-2176": "RecordFileSuccess",
        "RecordedFile": "types/experimental",
        "id-2717": "RecordedFile",
        "Recording": "types/experimental",
        "id-2715": "Recording",
        "RecordingOptions": "types/experimental",
        "id-2722": "RecordingOptions",
        "RegisterPrefixOptions": "types/core",
        "id-2712": "RegisterPrefixOptions",
        "RevokeMarkerPermissionFailure": "types/records/policies",
        "id-3198": "RevokeMarkerPermissionFailure",
        "RevokeMarkerPermissionSuccess": "types/records/policies",
        "id-3196": "RevokeMarkerPermissionSuccess",
        "RevokeRoleFailure": "types/records/roles",
        "id-3184": "RevokeRoleFailure",
        "RevokeRoleSuccess": "types/records/roles",
        "id-3182": "RevokeRoleSuccess",
        "RoomJoinOptions": "types/os",
        "id-2678": "RoomJoinOptions",
        "RoomOptions": "types/os",
        "id-2687": "RoomOptions",
        "RoomRemoteOptions": "types/os",
        "id-2703": "RoomRemoteOptions",
        "RoomTrackOptions": "types/os",
        "id-2691": "RoomTrackOptions",
        "RuntimeBot": "types/core",
        "id-2773": "RuntimeBot",
        "RuntimeBotLinks": "types/core",
        "id-2912": "RuntimeBotLinks",
        "RuntimeBotVars": "types/core",
        "id-2909": "RuntimeBotVars",
        "SequenceRotation": "types/math/rotations",
        "id-3428": "SequenceRotation",
        "SetRoomOptionsSuccess": "types/os",
        "id-2244": "SetRoomOptionsSuccess",
        "SetRoomTrackOptions": "types/os",
        "id-2709": "SetRoomTrackOptions",
        "SetRoomTrackOptionsFailure": "types/os",
        "id-2270": "SetRoomTrackOptionsFailure",
        "SetRoomTrackOptionsSuccess": "types/os",
        "id-2265": "SetRoomTrackOptionsSuccess",
        "ShareOptions": "types/os",
        "id-2611": "ShareOptions",
        "ShowChatOptions": "types/os",
        "id-2605": "ShowChatOptions",
        "ShowConfirmOptions": "types/os",
        "id-2647": "ShowConfirmOptions",
        "ShowInputOptions": "types/os",
        "id-2638": "ShowInputOptions",
        "SnapAxis": "types/os",
        "id-2585": "SnapAxis",
        "SnapGridTarget": "types/os",
        "id-2185": "SnapGridTarget",
        "SnapPoint": "types/os",
        "id-2597": "SnapPoint",
        "SpeakTextOptions": "types/experimental",
        "id-2529": "SpeakTextOptions",
        "StartFormAnimationOptions": "types/os",
        "id-2657": "StartFormAnimationOptions",
        "StopFormAnimationOptions": "types/os",
        "id-2670": "StopFormAnimationOptions",
        "SuccessfulGeolocation": "types/os",
        "id-2567": "SuccessfulGeolocation",
        "SyntheticVoice": "types/experimental",
        "id-2726": "SyntheticVoice",
        "TweenOptions": "types/experimental",
        "id-2526": "TweenOptions",
        "UnsuccessfulGeolocation": "types/os",
        "id-2577": "UnsuccessfulGeolocation",
        "UpdateEventRecordFailure": "types/records/events",
        "id-3170": "UpdateEventRecordFailure",
        "UpdateEventRecordSuccess": "types/records/events",
        "id-3168": "UpdateEventRecordSuccess",
        "UploadedFile": "types/os",
        "id-2206": "UploadedFile",
        "WebhookOptions": "types/web",
        "id-2130": "WebhookOptions",
        "WebhookResult": "types/web",
        "id-2142": "WebhookResult",
        "AddCountResult": "types/records/events",
        "id-3146": "AddCountResult",
        "AvailablePermissions": "types/permissions",
        "id-2984": "AvailablePermissions",
        "BarcodeFormat": "types/os",
        "id-2632": "BarcodeFormat",
        "BotFilter": "types/core",
        "id-2164": "BotFilter",
        "BotSpace": "types/core",
        "id-2896": "BotSpace",
        "CameraType": "types/os",
        "id-2631": "CameraType",
        "CreatePublicRecordKeyResult": "types/records/key",
        "id-2974": "CreatePublicRecordKeyResult",
        "EaseMode": "types/animation",
        "id-2560": "EaseMode",
        "EaseType": "types/animation",
        "id-2559": "EaseType",
        "EraseDataResult": "types/records/data",
        "id-3118": "EraseDataResult",
        "EraseFileResult": "types/records/files",
        "id-3137": "EraseFileResult",
        "Geolocation": "types/os",
        "id-2566": "Geolocation",
        "GetCountResult": "types/records/events",
        "id-3156": "GetCountResult",
        "GetDataResult": "types/records/data",
        "id-3104": "GetDataResult",
        "GetRoomOptionsResult": "types/os",
        "id-2234": "GetRoomOptionsResult",
        "GetRoomRemoteOptionsResult": "types/os",
        "id-2276": "GetRoomRemoteOptionsResult",
        "GetRoomTrackOptionsResult": "types/os",
        "id-2252": "GetRoomTrackOptionsResult",
        "GrantMarkerPermissionResult": "types/records/policies",
        "id-3188": "GrantMarkerPermissionResult",
        "GrantRoleResult": "types/records/roles",
        "id-3174": "GrantRoleResult",
        "JoinRoomResult": "types/os",
        "id-2216": "JoinRoomResult",
        "LeaveRoomResult": "types/os",
        "id-2225": "LeaveRoomResult",
        "ListDataResult": "types/records/data",
        "id-3127": "ListDataResult",
        "Mod": "types/core",
        "id-2159": "Mod",
        "PortalType": "types/core",
        "id-2928": "PortalType",
        "PossiblePauseTriggerStates": "types/debuggers/common",
        "id-2463": "PossiblePauseTriggerStates",
        "RecordDataResult": "types/records/data",
        "id-3095": "RecordDataResult",
        "RecordFileResult": "types/records/files",
        "id-2175": "RecordFileResult",
        "RevokeMarkerPermissionResult": "types/records/policies",
        "id-3195": "RevokeMarkerPermissionResult",
        "RevokeRoleResult": "types/records/roles",
        "id-3181": "RevokeRoleResult",
        "SetRoomOptionsResult": "types/os",
        "id-2243": "SetRoomOptionsResult",
        "SetRoomTrackOptionsResult": "types/os",
        "id-2264": "SetRoomTrackOptionsResult",
        "SnapTarget": "types/os",
        "id-2604": "SnapTarget",
        "TagFilter": "types/core",
        "id-2160": "TagFilter",
        "UpdateEventRecordResult": "types/records/events",
        "id-3167": "UpdateEventRecordResult",
        "animateTag-byOptions": "actions/utility",
        "id-364": "animateTag-byOptions",
        "getbot-tag": "actions/data",
        "id-33": "getbot-tag",
        "getbots-tag": "actions/data",
        "id-17": "getbots-tag",
        "animateTag-byTag": "actions/utility",
        "id-358": "animateTag-byTag",
        "changeState": "actions/data",
        "id-177": "changeState",
        "create": "actions/data",
        "id-162": "create",
        "destroy": "actions/data",
        "id-166": "destroy",
        "getbot-filters": "actions/data",
        "id-26": "getbot-filters",
        "getbots-filters": "actions/data",
        "id-10": "getbots-filters",
        "priorityShout": "actions/event",
        "id-225": "priorityShout",
        "shout": "actions/event",
        "id-237": "shout",
        "updateBotLinks": "actions/data",
        "id-198": "updateBotLinks",
        "whisper": "actions/event",
        "id-263": "whisper",
        "action.perform": "actions/event",
        "id-1630": "action.perform",
        "action.reject": "actions/event",
        "id-1634": "action.reject",
        "ai.chat-string": "actions/ai",
        "id-423": "ai.chat-string",
        "ai.chat-message": "actions/ai",
        "id-426": "ai.chat-message",
        "ai.chat-messages": "actions/ai",
        "id-429": "ai.chat-messages",
        "ai.generateImage-string": "actions/ai",
        "id-442": "ai.generateImage-string",
        "ai.generateImage-request": "actions/ai",
        "id-446": "ai.generateImage-request",
        "ai.generateSkybox-string": "actions/ai",
        "id-434": "ai.generateSkybox-string",
        "ai.generateSkybox-request": "actions/ai",
        "id-438": "ai.generateSkybox-request",
        "applyDiffToSnapshot": "actions/data",
        "id-83": "applyDiffToSnapshot",
        "applyMod": "actions/mods",
        "id-152": "applyMod",
        "assert": "actions/debuggers",
        "id-407": "assert",
        "assertEqual": "actions/debuggers",
        "id-412": "assertEqual",
        "atPosition": "actions/bot-filters",
        "id-293": "atPosition",
        "byCreator": "actions/bot-filters",
        "id-314": "byCreator",
        "byID": "actions/bot-filters",
        "id-281": "byID",
        "byMod": "actions/bot-filters",
        "id-285": "byMod",
        "bySpace": "actions/bot-filters",
        "id-310": "bySpace",
        "byTag": "actions/bot-filters",
        "id-276": "byTag",
        "bytes.fromBase64String": "actions/bytes",
        "id-1854": "bytes.fromBase64String",
        "bytes.fromBase64Url": "actions/bytes",
        "id-1871": "bytes.fromBase64Url",
        "bytes.fromHexString": "actions/bytes",
        "id-1862": "bytes.fromHexString",
        "bytes.toBase64String": "actions/bytes",
        "id-1850": "bytes.toBase64String",
        "bytes.toBase64Url": "actions/bytes",
        "id-1866": "bytes.toBase64Url",
        "bytes.toHexString": "actions/bytes",
        "id-1858": "bytes.toHexString",
        "clearAnimations": "actions/utility",
        "id-378": "clearAnimations",
        "clearTagMasks": "actions/data",
        "id-106": "clearTagMasks",
        "crypto.hash-raw": "actions/crypto",
        "id-1877": "crypto.hash-raw",
        "crypto.hash-string": "actions/crypto",
        "id-1883": "crypto.hash-string",
        "crypto.hmac-raw": "actions/crypto",
        "id-1914": "crypto.hmac-raw",
        "crypto.hmac-string": "actions/crypto",
        "id-1907": "crypto.hmac-string",
        "crypto.asymmetric.decrypt": "actions/crypto",
        "id-1972": "crypto.asymmetric.decrypt",
        "crypto.asymmetric.encrypt": "actions/crypto",
        "id-1967": "crypto.asymmetric.encrypt",
        "crypto.asymmetric.isEncrypted": "actions/crypto",
        "id-1978": "crypto.asymmetric.isEncrypted",
        "crypto.asymmetric.isKeypair": "actions/crypto",
        "id-1963": "crypto.asymmetric.isKeypair",
        "crypto.asymmetric.keypair": "actions/crypto",
        "id-1959": "crypto.asymmetric.keypair",
        "crypto.encrypt": "actions/crypto",
        "id-1943": "crypto.encrypt",
        "crypto.hmacSha256": "actions/crypto",
        "id-1933": "crypto.hmacSha256",
        "crypto.hmacSha512": "actions/crypto",
        "id-1938": "crypto.hmacSha512",
        "crypto.isEncrypted": "actions/crypto",
        "id-1953": "crypto.isEncrypted",
        "crypto.keypair": "actions/crypto",
        "id-1982": "crypto.keypair",
        "crypto.sha256": "actions/crypto",
        "id-1899": "crypto.sha256",
        "crypto.sha512": "actions/crypto",
        "id-1903": "crypto.sha512",
        "crypto.sign": "actions/crypto",
        "id-1986": "crypto.sign",
        "deleteTagMaskText": "actions/data",
        "id-133": "deleteTagMaskText",
        "deleteTagText": "actions/data",
        "id-126": "deleteTagText",
        "diffSnapshots": "actions/data",
        "id-78": "diffSnapshots",
        "either": "actions/bot-filters",
        "id-318": "either",
        "os.beginAudioRecording": "actions/audio",
        "id-1688": "os.beginAudioRecording",
        "experiment.beginRecording": "actions/experimental",
        "id-1695": "experiment.beginRecording",
        "os.endAudioRecording": "actions/audio",
        "id-1692": "os.endAudioRecording",
        "experiment.endRecording": "actions/experimental",
        "id-1699": "experiment.endRecording",
        "experiment.getAnchorPointPosition": "actions/experimental",
        "id-1678": "experiment.getAnchorPointPosition",
        "experiment.getVoices": "actions/experimental",
        "id-1707": "experiment.getVoices",
        "experiment.localFormAnimation": "actions/experimental",
        "id-1651": "experiment.localFormAnimation",
        "experiment.localPositionTween": "actions/experimental",
        "id-1656": "experiment.localPositionTween",
        "experiment.localRotationTween": "actions/experimental",
        "id-1667": "experiment.localRotationTween",
        "experiment.speakText": "actions/experimental",
        "id-1702": "experiment.speakText",
        "getBotLinks": "actions/data",
        "id-194": "getBotLinks",
        "getBotPosition": "actions/data",
        "id-52": "getBotPosition",
        "getBotRotation": "actions/data",
        "id-57": "getBotRotation",
        "getBotTagValues": "actions/data",
        "id-42": "getBotTagValues",
        "getFormattedJSON": "actions/data",
        "id-70": "getFormattedJSON",
        "getID": "actions/data",
        "id-62": "getID",
        "getJSON": "actions/data",
        "id-66": "getJSON",
        "getLink": "actions/data",
        "id-190": "getLink",
        "getMod": "actions/mods",
        "id-47": "getMod",
        "getSnapshot": "actions/data",
        "id-74": "getSnapshot",
        "getTag": "actions/data",
        "id-88": "getTag",
        "inDimension": "actions/bot-filters",
        "id-289": "inDimension",
        "inStack": "actions/bot-filters",
        "id-299": "inStack",
        "insertTagMaskText": "actions/data",
        "id-118": "insertTagMaskText",
        "insertTagText": "actions/data",
        "id-111": "insertTagText",
        "math.abs": "actions/math",
        "id-1724": "math.abs",
        "math.addVectors": "actions/math",
        "id-1794": "math.addVectors",
        "math.areClose": "actions/math",
        "id-1825": "math.areClose",
        "math.avg": "actions/math",
        "id-1716": "math.avg",
        "math.degreesToRadians": "actions/math",
        "id-1750": "math.degreesToRadians",
        "math.getAnchorPointOffset": "actions/math",
        "id-1790": "math.getAnchorPointOffset",
        "math.getForwardDirection": "actions/math",
        "id-1758": "math.getForwardDirection",
        "math.getSeededRandomNumberGenerator": "actions/math",
        "id-1732": "math.getSeededRandomNumberGenerator",
        "math.intersectPlane": "actions/math",
        "id-1767": "math.intersectPlane",
        "math.negateVector": "actions/math",
        "id-1804": "math.negateVector",
        "math.normalizeVector": "actions/math",
        "id-1809": "math.normalizeVector",
        "math.radiansToDegrees": "actions/math",
        "id-1754": "math.radiansToDegrees",
        "math.random": "actions/math",
        "id-1745": "math.random",
        "math.randomInt": "actions/math",
        "id-1740": "math.randomInt",
        "math.scaleVector": "actions/math",
        "id-1819": "math.scaleVector",
        "math.setRandomSeed": "actions/math",
        "id-1736": "math.setRandomSeed",
        "math.sqrt": "actions/math",
        "id-1720": "math.sqrt",
        "math.stdDev": "actions/math",
        "id-1728": "math.stdDev",
        "math.subtractVectors": "actions/math",
        "id-1799": "math.subtractVectors",
        "math.sum": "actions/math",
        "id-1712": "math.sum",
        "math.vectorLength": "actions/math",
        "id-1814": "math.vectorLength",
        "neighboring": "actions/bot-filters",
        "id-304": "neighboring",
        "not": "actions/bot-filters",
        "id-325": "not",
        "os.attachDebugger": "actions/debuggers",
        "id-1328": "os.attachDebugger",
        "os.createDebugger-normal": "actions/debuggers",
        "id-1317": "os.createDebugger-normal",
        "os.createDebugger-pausable": "actions/debuggers",
        "id-1321": "os.createDebugger-pausable",
        "os.focusOn-bot": "actions/portals",
        "id-510": "os.focusOn-bot",
        "os.focusOn-position": "actions/portals",
        "id-515": "os.focusOn-position",
        "os.getExecutingDebugger": "actions/debuggers",
        "id-1325": "os.getExecutingDebugger",
        "showChat-options": "actions/os",
        "id-537": "showChat-options",
        "showChat-placeholder": "actions/os",
        "id-533": "showChat-placeholder",
        "os.showInput": "actions/portals",
        "id-753": "os.showInput",
        "os.addBotDropGrid": "actions/portals",
        "id-827": "os.addBotDropGrid",
        "os.addBotDropSnap": "actions/portals",
        "id-818": "os.addBotDropSnap",
        "os.addDropGrid": "actions/portals",
        "id-823": "os.addDropGrid",
        "os.addDropSnap": "actions/portals",
        "id-814": "os.addDropSnap",
        "os.applyUpdatesToInst": "actions/os",
        "id-1271": "os.applyUpdatesToInst",
        "os.arSupported": "actions/xr",
        "id-578": "os.arSupported",
        "os.bufferFormAddressGLTF": "actions/animations",
        "id-1224": "os.bufferFormAddressGLTF",
        "os.bufferSound": "actions/audio",
        "id-790": "os.bufferSound",
        "os.calculateRayFromCamera": "actions/portals",
        "id-1219": "os.calculateRayFromCamera",
        "os.cancelSound": "actions/audio",
        "id-794": "os.cancelSound",
        "os.capturePhoto": "actions/camera",
        "id-673": "os.capturePhoto",
        "os.closeBarcodeScanner": "actions/barcodes",
        "id-651": "os.closeBarcodeScanner",
        "os.closeCircleWipe": "actions/portals",
        "id-806": "os.closeCircleWipe",
        "os.closeImageClassifier": "actions/image-classification",
        "id-666": "os.closeImageClassifier",
        "os.closePhotoCamera": "actions/camera",
        "id-677": "os.closePhotoCamera",
        "os.closeQRCodeScanner": "actions/barcodes",
        "id-637": "os.closeQRCodeScanner",
        "os.compileApp": "actions/app",
        "id-941": "os.compileApp",
        "os.convertGeolocationToWhat3Words": "actions/os",
        "id-1204": "os.convertGeolocationToWhat3Words",
        "os.countEvents": "actions/records",
        "id-1198": "os.countEvents",
        "os.createInitializationUpdate": "actions/os",
        "id-1267": "os.createInitializationUpdate",
        "os.device": "actions/os",
        "id-555": "os.device",
        "os.disableAR": "actions/xr",
        "id-568": "os.disableAR",
        "os.disablePointOfView": "actions/portals",
        "id-593": "os.disablePointOfView",
        "os.disableVR": "actions/xr",
        "id-575": "os.disableVR",
        "os.disableWakeLock": "actions/os",
        "id-599": "os.disableWakeLock",
        "os.download": "actions/files",
        "id-605": "os.download",
        "os.downloadBots": "actions/files",
        "id-611": "os.downloadBots",
        "os.downloadBotsAsInitialzationUpdate": "actions/files",
        "id-616": "os.downloadBotsAsInitialzationUpdate",
        "os.downloadInst": "actions/files",
        "id-624": "os.downloadInst",
        "os.enableAR": "actions/xr",
        "id-564": "os.enableAR",
        "os.enableCustomDragging": "actions/portals",
        "id-832": "os.enableCustomDragging",
        "os.enablePointOfView": "actions/portals",
        "id-584": "os.enablePointOfView",
        "os.enableVR": "actions/xr",
        "id-571": "os.enableVR",
        "os.eraseData": "actions/records",
        "id-1141": "os.eraseData",
        "os.eraseManualApprovalData": "actions/records",
        "id-1147": "os.eraseManualApprovalData",
        "os.exitFullscreenMode": "actions/portals",
        "id-481": "os.exitFullscreenMode",
        "os.getAverageFrameRate": "actions/os",
        "id-889": "os.getAverageFrameRate",
        "os.getCameraPosition": "actions/portals",
        "id-845": "os.getCameraPosition",
        "os.getCameraRotation": "actions/portals",
        "id-849": "os.getCameraRotation",
        "os.getCurrentDimension": "actions/portals",
        "id-724": "os.getCurrentDimension",
        "os.getCurrentInst": "actions/portals",
        "id-730": "os.getCurrentInst",
        "os.getCurrentInstUpdate": "actions/os",
        "id-1275": "os.getCurrentInstUpdate",
        "os.getData": "actions/records",
        "id-1123": "os.getData",
        "os.getDimensionalDepth": "actions/portals",
        "id-743": "os.getDimensionalDepth",
        "os.getFocusPoint": "actions/portals",
        "id-857": "os.getFocusPoint",
        "os.getGeolocation": "actions/os",
        "id-839": "os.getGeolocation",
        "os.getInputList": "actions/portals",
        "id-882": "os.getInputList",
        "os.getInputState": "actions/portals",
        "id-877": "os.getInputState",
        "os.getInstStateFromUpdates": "actions/os",
        "id-1263": "os.getInstStateFromUpdates",
        "os.getManualApprovalData": "actions/records",
        "id-1129": "os.getManualApprovalData",
        "os.getMediaPermission": "actions/os",
        "id-885": "os.getMediaPermission",
        "os.getMenuDimension": "actions/portals",
        "id-733": "os.getMenuDimension",
        "os.getMiniPortalDimension": "actions/portals",
        "id-736": "os.getMiniPortalDimension",
        "os.getPointerDirection": "actions/portals",
        "id-873": "os.getPointerDirection",
        "os.getPointerPosition": "actions/portals",
        "id-861": "os.getPointerPosition",
        "os.getPointerRotation": "actions/portals",
        "id-865": "os.getPointerRotation",
        "os.getPortalDimension": "actions/portals",
        "id-739": "os.getPortalDimension",
        "os.getPublicRecordKey": "actions/records",
        "id-1048": "os.getPublicRecordKey",
        "os.getRoomOptions": "actions/rooms",
        "id-907": "os.getRoomOptions",
        "os.getRoomRemoteOptions": "actions/rooms",
        "id-922": "os.getRoomRemoteOptions",
        "os.getRoomTrackOptions": "actions/rooms",
        "id-911": "os.getRoomTrackOptions",
        "os.getSubjectlessPublicRecordKey": "actions/records",
        "id-1052": "os.getSubjectlessPublicRecordKey",
        "os.getWakeLockConfiguration": "actions/os",
        "id-602": "os.getWakeLockConfiguration",
        "os.goToDimension": "actions/portals",
        "id-767": "os.goToDimension",
        "os.goToURL": "actions/portals",
        "id-771": "os.goToURL",
        "os.grantInstAdminPermission": "actions/records",
        "id-1070": "os.grantInstAdminPermission",
        "os.grantInstRole": "actions/records",
        "id-1090": "os.grantInstRole",
        "os.grantRecordMarkerPermission": "actions/records",
        "id-1056": "os.grantRecordMarkerPermission",
        "os.grantUserRole": "actions/records",
        "id-1075": "os.grantUserRole",
        "os.hasBotInMiniPortal": "actions/portals",
        "id-798": "os.hasBotInMiniPortal",
        "os.hideBarcode": "actions/barcodes",
        "id-659": "os.hideBarcode",
        "os.hideChat": "actions/os",
        "id-545": "os.hideChat",
        "os.hideHtml": "actions/os",
        "id-488": "os.hideHtml",
        "os.hideQRCode": "actions/barcodes",
        "id-644": "os.hideQRCode",
        "os.hideTips": "actions/portals",
        "id-469": "os.hideTips",
        "os.importAUX": "actions/files",
        "id-708": "os.importAUX",
        "os.inSheet": "actions/portals",
        "id-842": "os.inSheet",
        "os.instStatuses": "actions/os",
        "id-1292": "os.instStatuses",
        "os.instances": "actions/os",
        "id-1282": "os.instances",
        "os.isCollaborative": "actions/os",
        "id-558": "os.isCollaborative",
        "os.isInDimension": "actions/portals",
        "id-720": "os.isInDimension",
        "os.isRecordKey": "actions/records",
        "id-1105": "os.isRecordKey",
        "os.joinRoom": "actions/rooms",
        "id-892": "os.joinRoom",
        "os.leaveRoom": "actions/rooms",
        "id-897": "os.leaveRoom",
        "os.listBuiltinTags": "actions/app",
        "id-1042": "os.listBuiltinTags",
        "os.listData": "actions/records",
        "id-1135": "os.listData",
        "os.listFormAnimations": "actions/animations",
        "id-1239": "os.listFormAnimations",
        "os.listInstUpdates": "actions/os",
        "id-1260": "os.listInstUpdates",
        "os.loadInst": "actions/os",
        "id-700": "os.loadInst",
        "os.log": "actions/os",
        "id-835": "os.log",
        "os.meetCommand": "actions/os",
        "id-1305": "os.meetCommand",
        "os.meetFunction": "actions/os",
        "id-1310": "os.meetFunction",
        "os.openBarcodeScanner": "actions/barcodes",
        "id-647": "os.openBarcodeScanner",
        "os.openCircleWipe": "actions/portals",
        "id-810": "os.openCircleWipe",
        "os.openDevConsole": "actions/os",
        "id-779": "os.openDevConsole",
        "os.openImageClassifier": "actions/image-classification",
        "id-662": "os.openImageClassifier",
        "os.openPhotoCamera": "actions/camera",
        "id-669": "os.openPhotoCamera",
        "os.openQRCodeScanner": "actions/barcodes",
        "id-633": "os.openQRCodeScanner",
        "os.openURL": "actions/portals",
        "id-775": "os.openURL",
        "os.parseBotsFromData": "actions/files",
        "id-712": "os.parseBotsFromData",
        "os.playSound": "actions/audio",
        "id-786": "os.playSound",
        "os.raycast": "actions/portals",
        "id-1213": "os.raycast",
        "os.raycastFromCamera": "actions/portals",
        "id-1208": "os.raycastFromCamera",
        "os.recordData": "actions/records",
        "id-1109": "os.recordData",
        "os.recordEvent": "actions/records",
        "id-1192": "os.recordEvent",
        "os.recordFile": "actions/records",
        "id-1153": "os.recordFile",
        "os.recordManualApprovalData": "actions/records",
        "id-1116": "os.recordManualApprovalData",
        "os.registerApp": "actions/app",
        "id-932": "os.registerApp",
        "os.registerTagPrefix": "actions/app",
        "id-927": "os.registerTagPrefix",
        "os.remoteCount": "actions/os",
        "id-1285": "os.remoteCount",
        "os.remotes": "actions/os",
        "id-1257": "os.remotes",
        "os.replaceDragBot": "actions/portals",
        "id-716": "os.replaceDragBot",
        "os.requestAuthBot": "actions/records",
        "id-1045": "os.requestAuthBot",
        "os.requestFullscreenMode": "actions/portals",
        "id-478": "os.requestFullscreenMode",
        "os.requestWakeLock": "actions/os",
        "id-596": "os.requestWakeLock",
        "os.revokeInstRole": "actions/records",
        "id-1098": "os.revokeInstRole",
        "os.revokeRecordMarkerPermission": "actions/records",
        "id-1063": "os.revokeRecordMarkerPermission",
        "os.revokeUserRole": "actions/records",
        "id-1083": "os.revokeUserRole",
        "os.run": "actions/os",
        "id-548": "os.run",
        "os.setClipboard": "actions/os",
        "id-491": "os.setClipboard",
        "os.setRoomOptions": "actions/rooms",
        "id-902": "os.setRoomOptions",
        "os.setRoomTrackOptions": "actions/rooms",
        "id-916": "os.setRoomTrackOptions",
        "os.share": "actions/os",
        "id-802": "os.share",
        "os.showBarcode": "actions/barcodes",
        "id-654": "os.showBarcode",
        "os.showConfirm": "actions/portals",
        "id-763": "os.showConfirm",
        "os.showHtml": "actions/os",
        "id-484": "os.showHtml",
        "os.showInputForTag": "actions/portals",
        "id-747": "os.showInputForTag",
        "os.showJoinCode": "actions/barcodes",
        "id-473": "os.showJoinCode",
        "os.showQRCode": "actions/barcodes",
        "id-640": "os.showQRCode",
        "os.showUploadAuxFile": "actions/files",
        "id-627": "os.showUploadAuxFile",
        "os.showUploadFiles": "actions/files",
        "id-630": "os.showUploadFiles",
        "os.sleep": "actions/os",
        "id-453": "os.sleep",
        "os.startFormAnimation": "actions/animations",
        "id-1228": "os.startFormAnimation",
        "os.stopFormAnimation": "actions/animations",
        "id-1234": "os.stopFormAnimation",
        "os.tip": "actions/portals",
        "id-462": "os.tip",
        "os.toast": "actions/os",
        "id-457": "os.toast",
        "os.totalRemoteCount": "actions/os",
        "id-1289": "os.totalRemoteCount",
        "os.unloadInst": "actions/os",
        "id-704": "os.unloadInst",
        "os.unregisterApp": "actions/app",
        "id-937": "os.unregisterApp",
        "os.version": "actions/os",
        "id-552": "os.version",
        "os.vrSupported": "actions/xr",
        "id-581": "os.vrSupported",
        "os.agreedUponTime": "actions/time",
        "id-681": "os.agreedUponTime",
        "os.deadReckoningTime": "actions/time",
        "id-689": "os.deadReckoningTime",
        "os.instLatency": "actions/time",
        "id-683": "os.instLatency",
        "os.instTimeOffset": "actions/time",
        "id-685": "os.instTimeOffset",
        "os.instTimeOffsetSpread": "actions/time",
        "id-687": "os.instTimeOffsetSpread",
        "os.localTime": "actions/time",
        "id-679": "os.localTime",
        "removeTags": "actions/data",
        "id-141": "removeTags",
        "renameTag": "actions/data",
        "id-146": "renameTag",
        "setTag": "actions/data",
        "id-93": "setTag",
        "setTagMask": "actions/data",
        "id-99": "setTagMask",
        "subtractMods": "actions/mods",
        "id-157": "subtractMods",
        "superShout": "actions/event",
        "id-220": "superShout",
        "uuid": "actions/data",
        "id-355": "uuid",
        "web.get": "actions/web",
        "id-2029": "web.get",
        "web.hook": "actions/web",
        "id-2040": "web.hook",
        "web.post": "actions/web",
        "id-2034": "web.post",
        "configBot": "actions/os",
        "id-418": "configBot"
    }
}