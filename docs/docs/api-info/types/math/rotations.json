{
    "hash": "types/math/rotations",
    "pageTitle": "Rotations",
    "pageDescription": "Rotations help represent orientation.",
    "pageSidebarLabel": "Rotations",
    "contents": [
        {
            "id": 3251,
            "order": 0,
            "name": "Rotation",
            "reflection": {
                "id": 3251,
                "name": "Rotation",
                "kind": 128,
                "kindString": "Class",
                "flags": {},
                "comment": {
                    "shortText": "Defines a class that can represent geometric rotations.",
                    "tags": [
                        {
                            "tag": "dochash",
                            "paramName": "",
                            "text": "types/math/rotations"
                        },
                        {
                            "tag": "docorder",
                            "paramName": "",
                            "text": "0"
                        },
                        {
                            "tag": "doctitle",
                            "paramName": "",
                            "text": "Rotations"
                        },
                        {
                            "tag": "docsidebar",
                            "paramName": "",
                            "text": "Rotations"
                        },
                        {
                            "tag": "docdescription",
                            "paramName": "",
                            "text": "Rotations help represent orientation."
                        },
                        {
                            "tag": "docname",
                            "paramName": "",
                            "text": "Rotation\n"
                        }
                    ]
                },
                "children": [
                    {
                        "id": 3270,
                        "name": "constructor",
                        "kind": 512,
                        "kindString": "Constructor",
                        "flags": {},
                        "sources": [
                            {
                                "fileName": "src/aux-common/math/Rotation.ts",
                                "line": 54,
                                "character": 4
                            }
                        ],
                        "signatures": [
                            {
                                "id": 3271,
                                "name": "new Rotation",
                                "kind": 16384,
                                "kindString": "Constructor signature",
                                "flags": {},
                                "comment": {
                                    "shortText": "Creates a new rotation using the given parameters.",
                                    "tags": [
                                        {
                                            "tag": "example",
                                            "paramName": "",
                                            "text": "Create a rotation from an axis and angle.\nconst rotation = new Rotation({\n    axis: new Vector3(0, 0, 1),\n    angle: Math.PI / 2\n}); // 90 degree rotation around Z axis\n"
                                        },
                                        {
                                            "tag": "example",
                                            "paramName": "",
                                            "text": "Create a rotation from two vectors.\nconst rotation = new Rotation({\n    from: new Vector3(1, 0, 0),\n    to: new Vector3(0, 1, 0)\n}); // Rotation that rotates (1, 0, 0) to (0, 1, 0)\n"
                                        },
                                        {
                                            "tag": "example",
                                            "paramName": "",
                                            "text": "Create a rotation that looks along the X axis.\nconst rotation = new Rotation({\n    direction: new Vector3(1, 0, 0),\n    upwards: new Vector3(0, 0, 1),\n    errorHandling: 'nudge'\n});\n"
                                        },
                                        {
                                            "tag": "example",
                                            "paramName": "",
                                            "text": "Tilt this bot forwards in the home dimension.\ntags.homeRotation = new Rotation({\n    axis: new Vector3(1, 0, 0),\n    angle: Math.PI / 6 // 30 degrees\n});\n"
                                        }
                                    ]
                                },
                                "parameters": [
                                    {
                                        "id": 3272,
                                        "name": "rotation",
                                        "kind": 32768,
                                        "kindString": "Parameter",
                                        "flags": {
                                            "isOptional": true
                                        },
                                        "comment": {
                                            "shortText": "The information that should be used to construct the rotation.\n",
                                            "tags": []
                                        },
                                        "type": {
                                            "type": "union",
                                            "types": [
                                                {
                                                    "type": "reference",
                                                    "id": 3219,
                                                    "name": "Quaternion"
                                                },
                                                {
                                                    "type": "reference",
                                                    "id": 3297,
                                                    "name": "AxisAndAngle"
                                                },
                                                {
                                                    "type": "reference",
                                                    "id": 3294,
                                                    "name": "FromToRotation"
                                                },
                                                {
                                                    "type": "reference",
                                                    "id": 3317,
                                                    "name": "LookRotation"
                                                },
                                                {
                                                    "type": "reference",
                                                    "id": 3310,
                                                    "name": "QuaternionRotation"
                                                },
                                                {
                                                    "type": "reference",
                                                    "id": 3308,
                                                    "name": "SequenceRotation"
                                                },
                                                {
                                                    "type": "reference",
                                                    "id": 3300,
                                                    "name": "EulerAnglesRotation"
                                                }
                                            ]
                                        }
                                    }
                                ],
                                "type": {
                                    "type": "reference",
                                    "id": 3251,
                                    "name": "Rotation"
                                }
                            }
                        ]
                    },
                    {
                        "id": 3273,
                        "name": "_q",
                        "kind": 1024,
                        "kindString": "Property",
                        "flags": {
                            "isPrivate": true
                        },
                        "sources": [
                            {
                                "fileName": "src/aux-common/math/Rotation.ts",
                                "line": 16,
                                "character": 12
                            }
                        ],
                        "type": {
                            "type": "reference",
                            "id": 3219,
                            "name": "Quaternion"
                        }
                    },
                    {
                        "id": 3274,
                        "name": "quaternion",
                        "kind": 262144,
                        "kindString": "Accessor",
                        "flags": {},
                        "sources": [
                            {
                                "fileName": "src/aux-common/math/Rotation.ts",
                                "line": 21,
                                "character": 8
                            }
                        ],
                        "getSignature": [
                            {
                                "id": 3275,
                                "name": "quaternion",
                                "kind": 524288,
                                "kindString": "Get signature",
                                "flags": {},
                                "comment": {
                                    "shortText": "The quaternion that this rotation uses.",
                                    "tags": []
                                },
                                "type": {
                                    "type": "reference",
                                    "id": 3219,
                                    "name": "Quaternion"
                                }
                            }
                        ]
                    },
                    {
                        "id": 3287,
                        "name": "axisAndAngle",
                        "kind": 2048,
                        "kindString": "Method",
                        "flags": {},
                        "sources": [
                            {
                                "fileName": "src/aux-common/math/Rotation.ts",
                                "line": 410,
                                "character": 4
                            }
                        ],
                        "signatures": [
                            {
                                "id": 3288,
                                "name": "axisAndAngle",
                                "kind": 4096,
                                "kindString": "Call signature",
                                "flags": {},
                                "comment": {
                                    "shortText": "Gets the axis and angle that this rotation rotates around.",
                                    "tags": []
                                },
                                "type": {
                                    "type": "reference",
                                    "id": 3297,
                                    "name": "AxisAndAngle"
                                }
                            }
                        ]
                    },
                    {
                        "id": 3282,
                        "name": "combineWith",
                        "kind": 2048,
                        "kindString": "Method",
                        "flags": {},
                        "sources": [
                            {
                                "fileName": "src/aux-common/math/Rotation.ts",
                                "line": 385,
                                "character": 4
                            }
                        ],
                        "signatures": [
                            {
                                "id": 3283,
                                "name": "combineWith",
                                "kind": 4096,
                                "kindString": "Call signature",
                                "flags": {},
                                "comment": {
                                    "shortText": "Combines this rotation with the other rotation and returns a new rotation that represents the combination of the two.",
                                    "tags": [
                                        {
                                            "tag": "example",
                                            "paramName": "",
                                            "text": "Combine two rotations together.\nconst first = new Rotation({\n    axis: new Vector3(1, 0, 0),\n    angle: Math.PI / 4\n}); // 45 degree rotation around X axis\nconst second = new Rotation({\n    axis: new Vector3(1, 0, 0),\n    angle: Math.PI / 4\n}); // 45 degree rotation around X axis\n\nconst third = first.combineWith(second); // 90 degree rotation around X\n\nos.toast(third);\n"
                                        }
                                    ]
                                },
                                "parameters": [
                                    {
                                        "id": 3284,
                                        "name": "other",
                                        "kind": 32768,
                                        "kindString": "Parameter",
                                        "flags": {},
                                        "comment": {
                                            "shortText": "The other rotation.\n",
                                            "tags": []
                                        },
                                        "type": {
                                            "type": "reference",
                                            "id": 3251,
                                            "name": "Rotation"
                                        }
                                    }
                                ],
                                "type": {
                                    "type": "reference",
                                    "id": 3251,
                                    "name": "Rotation"
                                }
                            }
                        ]
                    },
                    {
                        "id": 3289,
                        "name": "equals",
                        "kind": 2048,
                        "kindString": "Method",
                        "flags": {},
                        "sources": [
                            {
                                "fileName": "src/aux-common/math/Rotation.ts",
                                "line": 428,
                                "character": 4
                            }
                        ],
                        "signatures": [
                            {
                                "id": 3290,
                                "name": "equals",
                                "kind": 4096,
                                "kindString": "Call signature",
                                "flags": {},
                                "comment": {
                                    "shortText": "Determines if this rotation equals the other rotation.",
                                    "tags": []
                                },
                                "parameters": [
                                    {
                                        "id": 3291,
                                        "name": "other",
                                        "kind": 32768,
                                        "kindString": "Parameter",
                                        "flags": {},
                                        "comment": {
                                            "shortText": "The rotation to check.\n",
                                            "tags": []
                                        },
                                        "type": {
                                            "type": "reference",
                                            "id": 3251,
                                            "name": "Rotation"
                                        }
                                    }
                                ],
                                "type": {
                                    "type": "intrinsic",
                                    "name": "boolean"
                                }
                            }
                        ]
                    },
                    {
                        "id": 3285,
                        "name": "invert",
                        "kind": 2048,
                        "kindString": "Method",
                        "flags": {},
                        "sources": [
                            {
                                "fileName": "src/aux-common/math/Rotation.ts",
                                "line": 403,
                                "character": 4
                            }
                        ],
                        "signatures": [
                            {
                                "id": 3286,
                                "name": "invert",
                                "kind": 4096,
                                "kindString": "Call signature",
                                "flags": {},
                                "comment": {
                                    "shortText": "Calculates the inverse rotation of this rotation and returns a new rotation with the result.",
                                    "tags": [
                                        {
                                            "tag": "example",
                                            "paramName": "",
                                            "text": "Calculate the inverse of a rotation.\nconst first = new Rotation({\n    axis: new Vector3(1, 0, 0),\n    angle: Math.PI / 4\n}); // 45 degree rotation around X axis\nconst inverse = first.inverse();\n\nconst result = first.combineWith(inverse);\n\nos.toast(result);\n"
                                        }
                                    ]
                                },
                                "type": {
                                    "type": "reference",
                                    "id": 3251,
                                    "name": "Rotation"
                                }
                            }
                        ]
                    },
                    {
                        "id": 3279,
                        "name": "rotateVector2",
                        "kind": 2048,
                        "kindString": "Method",
                        "flags": {},
                        "sources": [
                            {
                                "fileName": "src/aux-common/math/Rotation.ts",
                                "line": 363,
                                "character": 4
                            }
                        ],
                        "signatures": [
                            {
                                "id": 3280,
                                "name": "rotateVector2",
                                "kind": 4096,
                                "kindString": "Call signature",
                                "flags": {},
                                "comment": {
                                    "shortText": "Rotates the given [`Vector2`](ref:Vector2) by this quaternion and returns a new vector containing the result.\nNote that rotations around any other axis than (0, 0, 1) or (0, 0, -1) can produce results that contain a Z component.",
                                    "tags": [
                                        {
                                            "tag": "example",
                                            "paramName": "",
                                            "text": "Apply a rotation to a Vector2 object.\nconst rotation = new Rotation({\n    axis: new Vector3(1, 0, 0),\n    angle: Math.PI / 4\n}); // 45 degree rotation around X axis\n\nconst point = new Vector2(1, 2);\nconst rotated = rotation.rotateVector2(point);\nos.toast(rotated);\n"
                                        }
                                    ]
                                },
                                "parameters": [
                                    {
                                        "id": 3281,
                                        "name": "vector",
                                        "kind": 32768,
                                        "kindString": "Parameter",
                                        "flags": {},
                                        "comment": {
                                            "shortText": "The 2D vector that should be rotated.\n",
                                            "tags": []
                                        },
                                        "type": {
                                            "type": "reference",
                                            "id": 3085,
                                            "name": "Vector2"
                                        }
                                    }
                                ],
                                "type": {
                                    "type": "reference",
                                    "id": 3142,
                                    "name": "Vector3"
                                }
                            }
                        ]
                    },
                    {
                        "id": 3276,
                        "name": "rotateVector3",
                        "kind": 2048,
                        "kindString": "Method",
                        "flags": {},
                        "sources": [
                            {
                                "fileName": "src/aux-common/math/Rotation.ts",
                                "line": 317,
                                "character": 4
                            }
                        ],
                        "signatures": [
                            {
                                "id": 3277,
                                "name": "rotateVector3",
                                "kind": 4096,
                                "kindString": "Call signature",
                                "flags": {},
                                "comment": {
                                    "shortText": "Rotates the given [`Vector3`](ref:Vector3) by this quaternion and returns a new vector containing the result.",
                                    "tags": [
                                        {
                                            "tag": "example",
                                            "paramName": "",
                                            "text": "Apply a rotation to a Vector3 object.\nconst rotation = new Rotation({\n    axis: new Vector3(1, 0, 0),\n    angle: Math.PI / 4\n}); // 45 degree rotation around X axis\n\nconst point = new Vector3(1, 2, 0);\nconst rotated = rotation.rotateVector3(point);\nos.toast(rotated);\n"
                                        }
                                    ]
                                },
                                "parameters": [
                                    {
                                        "id": 3278,
                                        "name": "vector",
                                        "kind": 32768,
                                        "kindString": "Parameter",
                                        "flags": {},
                                        "comment": {
                                            "shortText": "The 3D vector that should be rotated.\n",
                                            "tags": []
                                        },
                                        "type": {
                                            "type": "reference",
                                            "id": 3142,
                                            "name": "Vector3"
                                        }
                                    }
                                ],
                                "type": {
                                    "type": "reference",
                                    "id": 3142,
                                    "name": "Vector3"
                                }
                            }
                        ]
                    },
                    {
                        "id": 3292,
                        "name": "toString",
                        "kind": 2048,
                        "kindString": "Method",
                        "flags": {},
                        "sources": [
                            {
                                "fileName": "src/aux-common/math/Rotation.ts",
                                "line": 444,
                                "character": 4
                            }
                        ],
                        "signatures": [
                            {
                                "id": 3293,
                                "name": "toString",
                                "kind": 4096,
                                "kindString": "Call signature",
                                "flags": {},
                                "comment": {
                                    "shortText": "Converts this rotation to a human-readable string representation.",
                                    "tags": [
                                        {
                                            "tag": "example",
                                            "paramName": "",
                                            "text": "Get a string of a rotation.\nconst myRotation = new Rotation({\n    axis: new Vector3(1, 0, 0),\n    angle: Math.PI / 4\n}); // 45 degree rotation around X axis\nconst rotationString = myRotation.toString();\n\nos.toast('My Rotation: ' + rotationString);\n"
                                        }
                                    ]
                                },
                                "type": {
                                    "type": "intrinsic",
                                    "name": "string"
                                }
                            }
                        ]
                    },
                    {
                        "id": 3261,
                        "name": "angleBetween",
                        "kind": 2048,
                        "kindString": "Method",
                        "flags": {
                            "isStatic": true
                        },
                        "sources": [
                            {
                                "fileName": "src/aux-common/math/Rotation.ts",
                                "line": 248,
                                "character": 11
                            }
                        ],
                        "signatures": [
                            {
                                "id": 3262,
                                "name": "angleBetween",
                                "kind": 4096,
                                "kindString": "Call signature",
                                "flags": {},
                                "comment": {
                                    "shortText": "Determines the angle between the two given quaternions and returns the result in radians.",
                                    "tags": []
                                },
                                "parameters": [
                                    {
                                        "id": 3263,
                                        "name": "first",
                                        "kind": 32768,
                                        "kindString": "Parameter",
                                        "flags": {},
                                        "comment": {
                                            "shortText": "The first quaternion. Must be a quaterion that represents a rotation",
                                            "tags": []
                                        },
                                        "type": {
                                            "type": "reference",
                                            "id": 3251,
                                            "name": "Rotation"
                                        }
                                    },
                                    {
                                        "id": 3264,
                                        "name": "second",
                                        "kind": 32768,
                                        "kindString": "Parameter",
                                        "flags": {},
                                        "comment": {
                                            "shortText": "The second quaternion.\n",
                                            "tags": []
                                        },
                                        "type": {
                                            "type": "reference",
                                            "id": 3251,
                                            "name": "Rotation"
                                        }
                                    }
                                ],
                                "type": {
                                    "type": "intrinsic",
                                    "name": "number"
                                }
                            }
                        ]
                    },
                    {
                        "id": 3265,
                        "name": "interpolate",
                        "kind": 2048,
                        "kindString": "Method",
                        "flags": {
                            "isStatic": true
                        },
                        "sources": [
                            {
                                "fileName": "src/aux-common/math/Rotation.ts",
                                "line": 260,
                                "character": 11
                            }
                        ],
                        "signatures": [
                            {
                                "id": 3266,
                                "name": "interpolate",
                                "kind": 4096,
                                "kindString": "Call signature",
                                "flags": {},
                                "comment": {
                                    "shortText": "Constructs a new rotation that is the spherical linear interpolation between the given first and second rotations.\nThe degree that the result is interpolated is determined by the given amount parameter.",
                                    "tags": []
                                },
                                "parameters": [
                                    {
                                        "id": 3267,
                                        "name": "first",
                                        "kind": 32768,
                                        "kindString": "Parameter",
                                        "flags": {},
                                        "comment": {
                                            "shortText": "The first rotation.",
                                            "tags": []
                                        },
                                        "type": {
                                            "type": "reference",
                                            "id": 3251,
                                            "name": "Rotation"
                                        }
                                    },
                                    {
                                        "id": 3268,
                                        "name": "second",
                                        "kind": 32768,
                                        "kindString": "Parameter",
                                        "flags": {},
                                        "comment": {
                                            "shortText": "The second rotation.",
                                            "tags": []
                                        },
                                        "type": {
                                            "type": "reference",
                                            "id": 3251,
                                            "name": "Rotation"
                                        }
                                    },
                                    {
                                        "id": 3269,
                                        "name": "amount",
                                        "kind": 32768,
                                        "kindString": "Parameter",
                                        "flags": {},
                                        "comment": {
                                            "shortText": "The amount that the resulting rotation should be interpolated between the first and second rotations. Values near 0 indicate rotations close to the first and values near 1 indicate rotations close to the second.\n",
                                            "tags": []
                                        },
                                        "type": {
                                            "type": "intrinsic",
                                            "name": "number"
                                        }
                                    }
                                ],
                                "type": {
                                    "type": "reference",
                                    "id": 3251,
                                    "name": "Rotation"
                                }
                            }
                        ]
                    },
                    {
                        "id": 3252,
                        "name": "quaternionFromAxisAndAngle",
                        "kind": 2048,
                        "kindString": "Method",
                        "flags": {
                            "isStatic": true
                        },
                        "sources": [
                            {
                                "fileName": "src/aux-common/math/Rotation.ts",
                                "line": 133,
                                "character": 11
                            }
                        ],
                        "signatures": [
                            {
                                "id": 3253,
                                "name": "quaternionFromAxisAndAngle",
                                "kind": 4096,
                                "kindString": "Call signature",
                                "flags": {},
                                "comment": {
                                    "shortText": "Constructs a new Quaternion from the given axis and angle.",
                                    "tags": []
                                },
                                "parameters": [
                                    {
                                        "id": 3254,
                                        "name": "axisAndAngle",
                                        "kind": 32768,
                                        "kindString": "Parameter",
                                        "flags": {},
                                        "comment": {
                                            "shortText": "The object that contains the axis and angle values.\n",
                                            "tags": []
                                        },
                                        "type": {
                                            "type": "reference",
                                            "id": 3297,
                                            "name": "AxisAndAngle"
                                        }
                                    }
                                ],
                                "type": {
                                    "type": "reference",
                                    "id": 3219,
                                    "name": "Quaternion"
                                }
                            }
                        ]
                    },
                    {
                        "id": 3255,
                        "name": "quaternionFromTo",
                        "kind": 2048,
                        "kindString": "Method",
                        "flags": {
                            "isStatic": true
                        },
                        "sources": [
                            {
                                "fileName": "src/aux-common/math/Rotation.ts",
                                "line": 150,
                                "character": 11
                            }
                        ],
                        "signatures": [
                            {
                                "id": 3256,
                                "name": "quaternionFromTo",
                                "kind": 4096,
                                "kindString": "Call signature",
                                "flags": {},
                                "comment": {
                                    "shortText": "Constructs a new Quaternion from the given from/to rotation.\nThis is equivalent to calculating the cross product and angle between the two vectors and constructing an axis/angle quaternion.",
                                    "tags": []
                                },
                                "parameters": [
                                    {
                                        "id": 3257,
                                        "name": "fromToRotation",
                                        "kind": 32768,
                                        "kindString": "Parameter",
                                        "flags": {},
                                        "comment": {
                                            "shortText": "The object that contains the from and to values.\n",
                                            "tags": []
                                        },
                                        "type": {
                                            "type": "reference",
                                            "id": 3294,
                                            "name": "FromToRotation"
                                        }
                                    }
                                ],
                                "type": {
                                    "type": "reference",
                                    "id": 3219,
                                    "name": "Quaternion"
                                }
                            }
                        ]
                    },
                    {
                        "id": 3258,
                        "name": "quaternionLook",
                        "kind": 2048,
                        "kindString": "Method",
                        "flags": {
                            "isStatic": true
                        },
                        "sources": [
                            {
                                "fileName": "src/aux-common/math/Rotation.ts",
                                "line": 167,
                                "character": 11
                            }
                        ],
                        "signatures": [
                            {
                                "id": 3259,
                                "name": "quaternionLook",
                                "kind": 4096,
                                "kindString": "Call signature",
                                "flags": {},
                                "comment": {
                                    "shortText": "Constructs a new Quaternion from the given look rotation.",
                                    "tags": []
                                },
                                "parameters": [
                                    {
                                        "id": 3260,
                                        "name": "look",
                                        "kind": 32768,
                                        "kindString": "Parameter",
                                        "flags": {},
                                        "comment": {
                                            "shortText": "The object that contains the look rotation values.\n",
                                            "tags": []
                                        },
                                        "type": {
                                            "type": "reference",
                                            "id": 3317,
                                            "name": "LookRotation"
                                        }
                                    }
                                ],
                                "type": {
                                    "type": "reference",
                                    "id": 3219,
                                    "name": "Quaternion"
                                }
                            }
                        ]
                    }
                ],
                "groups": [
                    {
                        "title": "Constructors",
                        "kind": 512,
                        "children": [
                            3270
                        ]
                    },
                    {
                        "title": "Properties",
                        "kind": 1024,
                        "children": [
                            3273
                        ]
                    },
                    {
                        "title": "Accessors",
                        "kind": 262144,
                        "children": [
                            3274
                        ]
                    },
                    {
                        "title": "Methods",
                        "kind": 2048,
                        "children": [
                            3287,
                            3282,
                            3289,
                            3285,
                            3279,
                            3276,
                            3292,
                            3261,
                            3265,
                            3252,
                            3255,
                            3258
                        ]
                    }
                ],
                "sources": [
                    {
                        "fileName": "src/aux-common/math/Rotation.ts",
                        "line": 15,
                        "character": 13
                    }
                ]
            },
            "comment": {
                "shortText": "Defines a class that can represent geometric rotations.",
                "text": "",
                "tags": [
                    {
                        "tagName": "dochash",
                        "paramName": "",
                        "text": "types/math/rotations"
                    },
                    {
                        "tagName": "docorder",
                        "paramName": "",
                        "text": "0"
                    },
                    {
                        "tagName": "doctitle",
                        "paramName": "",
                        "text": "Rotations"
                    },
                    {
                        "tagName": "docsidebar",
                        "paramName": "",
                        "text": "Rotations"
                    },
                    {
                        "tagName": "docdescription",
                        "paramName": "",
                        "text": "Rotations help represent orientation."
                    },
                    {
                        "tagName": "docname",
                        "paramName": "",
                        "text": "Rotation\n"
                    }
                ]
            },
            "group": null
        },
        {
            "id": 3219,
            "order": 1,
            "name": "Quaternion",
            "reflection": {
                "id": 3219,
                "name": "Quaternion",
                "kind": 128,
                "kindString": "Class",
                "flags": {},
                "comment": {
                    "shortText": "Defines a class that represents a Quaternion. That is, a representation of a 3D rotation.",
                    "text": "Quaternions are a mathematical representation of 3D transformations and are commonly used to calculate and apply rotations to 3D points.\nThey work by defining a quaterion such that q = w + x*i + y*j + z*k, where w, x, y, and z are real numbers and i, j, and k are imaginary numbers.\nThe basics of this is that x, y, and z define a vector that represents the rotation axis, and w defines an angle around which the rotation occurs.\nHowever, because i, j, and k are included we can keep x, y, and z from incorrectly interacting with each other and so avoid common pitfalls like Gimbal lock.\n\nOne little known feature of quaternions is that they can also represent reflections and also scale.\nThis is because there are two different ways to apply a quaternion to a 3D point:\n\n- quaterion * point * inverse(quaterion)\n\nThis formula rotates and scales the point quaternion. The rotation occurs around the axis specified by the quaternion X, Y, and Z values.\nAdditionally, the point will be scaled by the length of the quaternion. (i.e. sqrt( x^2 + y^2 + z^2 + w^2 ))\nThis is why quaternions that are used to represent only rotations must be normalized.\n\n- quaternion * point * quaternion\n\nThis formula reflects scales the point by the quaternion. The reflection occurs across the axis specified by the quaternion X, Y, and Z values.\nAdditionally, the point will be scaled by the length of the quaternion. (i.e. sqrt( x^2 + y^2 + z^2 + w^2 ))\n",
                    "tags": [
                        {
                            "tag": "dochash",
                            "paramName": "",
                            "text": "types/math/rotations"
                        },
                        {
                            "tag": "docorder",
                            "paramName": "",
                            "text": "1"
                        },
                        {
                            "tag": "doctitle",
                            "paramName": "",
                            "text": "Rotations"
                        },
                        {
                            "tag": "docsidebar",
                            "paramName": "",
                            "text": "Rotations"
                        },
                        {
                            "tag": "docdescription",
                            "paramName": "",
                            "text": "Rotations help represent orientation."
                        },
                        {
                            "tag": "docname",
                            "paramName": "",
                            "text": "Quaternion\n"
                        }
                    ]
                },
                "children": [
                    {
                        "id": 3220,
                        "name": "constructor",
                        "kind": 512,
                        "kindString": "Constructor",
                        "flags": {},
                        "sources": [
                            {
                                "fileName": "src/aux-common/math/Quaternion.ts",
                                "line": 58,
                                "character": 4
                            }
                        ],
                        "signatures": [
                            {
                                "id": 3221,
                                "name": "new Quaternion",
                                "kind": 16384,
                                "kindString": "Constructor signature",
                                "flags": {},
                                "comment": {
                                    "shortText": "Creates a new Quaternion with the given values.",
                                    "tags": []
                                },
                                "parameters": [
                                    {
                                        "id": 3222,
                                        "name": "x",
                                        "kind": 32768,
                                        "kindString": "Parameter",
                                        "flags": {},
                                        "comment": {
                                            "shortText": "The X value.",
                                            "tags": []
                                        },
                                        "type": {
                                            "type": "intrinsic",
                                            "name": "number"
                                        },
                                        "defaultValue": "0"
                                    },
                                    {
                                        "id": 3223,
                                        "name": "y",
                                        "kind": 32768,
                                        "kindString": "Parameter",
                                        "flags": {},
                                        "comment": {
                                            "shortText": "The Y value.",
                                            "tags": []
                                        },
                                        "type": {
                                            "type": "intrinsic",
                                            "name": "number"
                                        },
                                        "defaultValue": "0"
                                    },
                                    {
                                        "id": 3224,
                                        "name": "z",
                                        "kind": 32768,
                                        "kindString": "Parameter",
                                        "flags": {},
                                        "comment": {
                                            "shortText": "The Z value.",
                                            "tags": []
                                        },
                                        "type": {
                                            "type": "intrinsic",
                                            "name": "number"
                                        },
                                        "defaultValue": "0"
                                    },
                                    {
                                        "id": 3225,
                                        "name": "w",
                                        "kind": 32768,
                                        "kindString": "Parameter",
                                        "flags": {},
                                        "comment": {
                                            "shortText": "The W value.\n",
                                            "tags": []
                                        },
                                        "type": {
                                            "type": "intrinsic",
                                            "name": "number"
                                        },
                                        "defaultValue": "1"
                                    }
                                ],
                                "type": {
                                    "type": "reference",
                                    "id": 3219,
                                    "name": "Quaternion"
                                }
                            }
                        ]
                    },
                    {
                        "id": 3229,
                        "name": "w",
                        "kind": 1024,
                        "kindString": "Property",
                        "flags": {},
                        "comment": {
                            "shortText": "The W value of the quaternion.",
                            "tags": []
                        },
                        "sources": [
                            {
                                "fileName": "src/aux-common/math/Quaternion.ts",
                                "line": 49,
                                "character": 4
                            }
                        ],
                        "type": {
                            "type": "intrinsic",
                            "name": "number"
                        }
                    },
                    {
                        "id": 3226,
                        "name": "x",
                        "kind": 1024,
                        "kindString": "Property",
                        "flags": {},
                        "comment": {
                            "shortText": "The X value of the quaternion.",
                            "tags": []
                        },
                        "sources": [
                            {
                                "fileName": "src/aux-common/math/Quaternion.ts",
                                "line": 34,
                                "character": 4
                            }
                        ],
                        "type": {
                            "type": "intrinsic",
                            "name": "number"
                        }
                    },
                    {
                        "id": 3227,
                        "name": "y",
                        "kind": 1024,
                        "kindString": "Property",
                        "flags": {},
                        "comment": {
                            "shortText": "The Y value of the quaternion.",
                            "tags": []
                        },
                        "sources": [
                            {
                                "fileName": "src/aux-common/math/Quaternion.ts",
                                "line": 39,
                                "character": 4
                            }
                        ],
                        "type": {
                            "type": "intrinsic",
                            "name": "number"
                        }
                    },
                    {
                        "id": 3228,
                        "name": "z",
                        "kind": 1024,
                        "kindString": "Property",
                        "flags": {},
                        "comment": {
                            "shortText": "The Z value of the quaternion.",
                            "tags": []
                        },
                        "sources": [
                            {
                                "fileName": "src/aux-common/math/Quaternion.ts",
                                "line": 44,
                                "character": 4
                            }
                        ],
                        "type": {
                            "type": "intrinsic",
                            "name": "number"
                        }
                    },
                    {
                        "id": 3243,
                        "name": "equals",
                        "kind": 2048,
                        "kindString": "Method",
                        "flags": {},
                        "sources": [
                            {
                                "fileName": "src/aux-common/math/Quaternion.ts",
                                "line": 161,
                                "character": 4
                            }
                        ],
                        "signatures": [
                            {
                                "id": 3244,
                                "name": "equals",
                                "kind": 4096,
                                "kindString": "Call signature",
                                "flags": {},
                                "comment": {
                                    "shortText": "Determines if this quaternion equals the other quaternion.",
                                    "tags": []
                                },
                                "parameters": [
                                    {
                                        "id": 3245,
                                        "name": "other",
                                        "kind": 32768,
                                        "kindString": "Parameter",
                                        "flags": {},
                                        "comment": {
                                            "shortText": "The other quaternion to apply.\n",
                                            "tags": []
                                        },
                                        "type": {
                                            "type": "reference",
                                            "id": 3219,
                                            "name": "Quaternion"
                                        }
                                    }
                                ],
                                "type": {
                                    "type": "intrinsic",
                                    "name": "boolean"
                                }
                            }
                        ]
                    },
                    {
                        "id": 3233,
                        "name": "invert",
                        "kind": 2048,
                        "kindString": "Method",
                        "flags": {},
                        "sources": [
                            {
                                "fileName": "src/aux-common/math/Quaternion.ts",
                                "line": 107,
                                "character": 4
                            }
                        ],
                        "signatures": [
                            {
                                "id": 3234,
                                "name": "invert",
                                "kind": 4096,
                                "kindString": "Call signature",
                                "flags": {},
                                "comment": {
                                    "shortText": "Calculates the conjugate of this quaternion and returns the result.\nThe conjugate (or inverse) of a quaternion is similar to negating a number.\nWhen you multiply a quaternion by its conjugate, the result is the identity quaternion.",
                                    "tags": []
                                },
                                "type": {
                                    "type": "reference",
                                    "id": 3219,
                                    "name": "Quaternion"
                                }
                            }
                        ]
                    },
                    {
                        "id": 3235,
                        "name": "length",
                        "kind": 2048,
                        "kindString": "Method",
                        "flags": {},
                        "sources": [
                            {
                                "fileName": "src/aux-common/math/Quaternion.ts",
                                "line": 114,
                                "character": 4
                            }
                        ],
                        "signatures": [
                            {
                                "id": 3236,
                                "name": "length",
                                "kind": 4096,
                                "kindString": "Call signature",
                                "flags": {},
                                "comment": {
                                    "shortText": "Gets the length of this vector. That is, the pathagorean theorem applied to X, Y, Z, and W.",
                                    "tags": []
                                },
                                "type": {
                                    "type": "intrinsic",
                                    "name": "number"
                                }
                            }
                        ]
                    },
                    {
                        "id": 3230,
                        "name": "multiply",
                        "kind": 2048,
                        "kindString": "Method",
                        "flags": {},
                        "sources": [
                            {
                                "fileName": "src/aux-common/math/Quaternion.ts",
                                "line": 77,
                                "character": 4
                            }
                        ],
                        "signatures": [
                            {
                                "id": 3231,
                                "name": "multiply",
                                "kind": 4096,
                                "kindString": "Call signature",
                                "flags": {},
                                "comment": {
                                    "shortText": "Multiplies this quaternion by the other quaternion and returns the result.\nIn quaternion math, multiplication can be used to combine quaternions together,\nhowever unlike regular multiplication quaternion multiplication is order dependent.",
                                    "text": "Which frame of reference you want to use depends on which order you use.\nFor example, q2.multiply(q1) starts with the identity, applies q1 to it, and then applies q2 to that.\nWhereas, q1.multiply(q2) starts with the identity, applies q2 to it, and then applies q1 to that.\n",
                                    "tags": []
                                },
                                "parameters": [
                                    {
                                        "id": 3232,
                                        "name": "other",
                                        "kind": 32768,
                                        "kindString": "Parameter",
                                        "flags": {},
                                        "comment": {
                                            "shortText": "The other quaternion.\n",
                                            "tags": []
                                        },
                                        "type": {
                                            "type": "reference",
                                            "id": 3219,
                                            "name": "Quaternion"
                                        }
                                    }
                                ],
                                "type": {
                                    "type": "reference",
                                    "id": 3219,
                                    "name": "Quaternion"
                                }
                            }
                        ]
                    },
                    {
                        "id": 3239,
                        "name": "normalize",
                        "kind": 2048,
                        "kindString": "Method",
                        "flags": {},
                        "sources": [
                            {
                                "fileName": "src/aux-common/math/Quaternion.ts",
                                "line": 143,
                                "character": 4
                            }
                        ],
                        "signatures": [
                            {
                                "id": 3240,
                                "name": "normalize",
                                "kind": 4096,
                                "kindString": "Call signature",
                                "flags": {},
                                "comment": {
                                    "shortText": "Calculates the normalized version of this quaternion and returns it.\nA normalized quaternion is a quaternion whose length equals 1.",
                                    "text": "Normalizing a quaternion preserves its rotation/reflection while making the length (i.e. scale) of it 1.\n",
                                    "tags": []
                                },
                                "type": {
                                    "type": "reference",
                                    "id": 3219,
                                    "name": "Quaternion"
                                }
                            }
                        ]
                    },
                    {
                        "id": 3237,
                        "name": "squareLength",
                        "kind": 2048,
                        "kindString": "Method",
                        "flags": {},
                        "sources": [
                            {
                                "fileName": "src/aux-common/math/Quaternion.ts",
                                "line": 128,
                                "character": 4
                            }
                        ],
                        "signatures": [
                            {
                                "id": 3238,
                                "name": "squareLength",
                                "kind": 4096,
                                "kindString": "Call signature",
                                "flags": {},
                                "comment": {
                                    "shortText": "Calculates the square length of this quaternion and returns the result.\nThis is equivalent to length^2, but it is faster to calculate than length because it doesn't require\ncalculating a square root.",
                                    "tags": []
                                },
                                "type": {
                                    "type": "intrinsic",
                                    "name": "number"
                                }
                            }
                        ]
                    },
                    {
                        "id": 3241,
                        "name": "toString",
                        "kind": 2048,
                        "kindString": "Method",
                        "flags": {},
                        "sources": [
                            {
                                "fileName": "src/aux-common/math/Quaternion.ts",
                                "line": 153,
                                "character": 4
                            }
                        ],
                        "signatures": [
                            {
                                "id": 3242,
                                "name": "toString",
                                "kind": 4096,
                                "kindString": "Call signature",
                                "flags": {},
                                "type": {
                                    "type": "intrinsic",
                                    "name": "string"
                                }
                            }
                        ]
                    }
                ],
                "groups": [
                    {
                        "title": "Constructors",
                        "kind": 512,
                        "children": [
                            3220
                        ]
                    },
                    {
                        "title": "Properties",
                        "kind": 1024,
                        "children": [
                            3229,
                            3226,
                            3227,
                            3228
                        ]
                    },
                    {
                        "title": "Methods",
                        "kind": 2048,
                        "children": [
                            3243,
                            3233,
                            3235,
                            3230,
                            3239,
                            3237,
                            3241
                        ]
                    }
                ],
                "sources": [
                    {
                        "fileName": "src/aux-common/math/Quaternion.ts",
                        "line": 30,
                        "character": 13
                    }
                ]
            },
            "comment": {
                "shortText": "Defines a class that represents a Quaternion. That is, a representation of a 3D rotation.",
                "text": "Quaternions are a mathematical representation of 3D transformations and are commonly used to calculate and apply rotations to 3D points.\nThey work by defining a quaterion such that q = w + x*i + y*j + z*k, where w, x, y, and z are real numbers and i, j, and k are imaginary numbers.\nThe basics of this is that x, y, and z define a vector that represents the rotation axis, and w defines an angle around which the rotation occurs.\nHowever, because i, j, and k are included we can keep x, y, and z from incorrectly interacting with each other and so avoid common pitfalls like Gimbal lock.\n\nOne little known feature of quaternions is that they can also represent reflections and also scale.\nThis is because there are two different ways to apply a quaternion to a 3D point:\n\n- quaterion * point * inverse(quaterion)\n\nThis formula rotates and scales the point quaternion. The rotation occurs around the axis specified by the quaternion X, Y, and Z values.\nAdditionally, the point will be scaled by the length of the quaternion. (i.e. sqrt( x^2 + y^2 + z^2 + w^2 ))\nThis is why quaternions that are used to represent only rotations must be normalized.\n\n- quaternion * point * quaternion\n\nThis formula reflects scales the point by the quaternion. The reflection occurs across the axis specified by the quaternion X, Y, and Z values.\nAdditionally, the point will be scaled by the length of the quaternion. (i.e. sqrt( x^2 + y^2 + z^2 + w^2 ))\n",
                "tags": [
                    {
                        "tagName": "dochash",
                        "paramName": "",
                        "text": "types/math/rotations"
                    },
                    {
                        "tagName": "docorder",
                        "paramName": "",
                        "text": "1"
                    },
                    {
                        "tagName": "doctitle",
                        "paramName": "",
                        "text": "Rotations"
                    },
                    {
                        "tagName": "docsidebar",
                        "paramName": "",
                        "text": "Rotations"
                    },
                    {
                        "tagName": "docdescription",
                        "paramName": "",
                        "text": "Rotations help represent orientation."
                    },
                    {
                        "tagName": "docname",
                        "paramName": "",
                        "text": "Quaternion\n"
                    }
                ]
            },
            "group": null
        },
        {
            "id": 3297,
            "order": 2,
            "name": "AxisAndAngle",
            "reflection": {
                "id": 3297,
                "name": "AxisAndAngle",
                "kind": 256,
                "kindString": "Interface",
                "flags": {},
                "comment": {
                    "shortText": "Defines an interface that represents an Axis and Angle pair.",
                    "tags": [
                        {
                            "tag": "dochash",
                            "paramName": "",
                            "text": "types/math/rotations"
                        },
                        {
                            "tag": "docorder",
                            "paramName": "",
                            "text": "2"
                        },
                        {
                            "tag": "doctitle",
                            "paramName": "",
                            "text": "Rotations"
                        },
                        {
                            "tag": "docsidebar",
                            "paramName": "",
                            "text": "Rotations"
                        },
                        {
                            "tag": "docdescription",
                            "paramName": "",
                            "text": "Rotations help represent orientation."
                        },
                        {
                            "tag": "docname",
                            "paramName": "",
                            "text": "AxisAndAngle\n"
                        }
                    ]
                },
                "children": [
                    {
                        "id": 3299,
                        "name": "angle",
                        "kind": 1024,
                        "kindString": "Property",
                        "flags": {},
                        "comment": {
                            "shortText": "The number of radians that should be rotated around the axis.",
                            "tags": []
                        },
                        "sources": [
                            {
                                "fileName": "src/aux-common/math/Rotation.ts",
                                "line": 496,
                                "character": 4
                            }
                        ],
                        "type": {
                            "type": "intrinsic",
                            "name": "number"
                        }
                    },
                    {
                        "id": 3298,
                        "name": "axis",
                        "kind": 1024,
                        "kindString": "Property",
                        "flags": {},
                        "comment": {
                            "shortText": "The axis about which the angle should rotate around.",
                            "tags": []
                        },
                        "sources": [
                            {
                                "fileName": "src/aux-common/math/Rotation.ts",
                                "line": 491,
                                "character": 4
                            }
                        ],
                        "type": {
                            "type": "reference",
                            "id": 3142,
                            "name": "Vector3"
                        }
                    }
                ],
                "groups": [
                    {
                        "title": "Properties",
                        "kind": 1024,
                        "children": [
                            3299,
                            3298
                        ]
                    }
                ],
                "sources": [
                    {
                        "fileName": "src/aux-common/math/Rotation.ts",
                        "line": 487,
                        "character": 17
                    }
                ]
            },
            "comment": {
                "shortText": "Defines an interface that represents an Axis and Angle pair.",
                "text": "",
                "tags": [
                    {
                        "tagName": "dochash",
                        "paramName": "",
                        "text": "types/math/rotations"
                    },
                    {
                        "tagName": "docorder",
                        "paramName": "",
                        "text": "2"
                    },
                    {
                        "tagName": "doctitle",
                        "paramName": "",
                        "text": "Rotations"
                    },
                    {
                        "tagName": "docsidebar",
                        "paramName": "",
                        "text": "Rotations"
                    },
                    {
                        "tagName": "docdescription",
                        "paramName": "",
                        "text": "Rotations help represent orientation."
                    },
                    {
                        "tagName": "docname",
                        "paramName": "",
                        "text": "AxisAndAngle\n"
                    }
                ]
            },
            "group": null
        },
        {
            "id": 3294,
            "order": 3,
            "name": "FromToRotation",
            "reflection": {
                "id": 3294,
                "name": "FromToRotation",
                "kind": 256,
                "kindString": "Interface",
                "flags": {},
                "comment": {
                    "shortText": "Defines an interface that represents a from/to rotation.\nThat is, a rotation that is able to rotate a vector from the given vector direction to the given vector direction.",
                    "tags": [
                        {
                            "tag": "dochash",
                            "paramName": "",
                            "text": "types/math/rotations"
                        },
                        {
                            "tag": "docorder",
                            "paramName": "",
                            "text": "3"
                        },
                        {
                            "tag": "doctitle",
                            "paramName": "",
                            "text": "Rotations"
                        },
                        {
                            "tag": "docsidebar",
                            "paramName": "",
                            "text": "Rotations"
                        },
                        {
                            "tag": "docdescription",
                            "paramName": "",
                            "text": "Rotations help represent orientation."
                        },
                        {
                            "tag": "docname",
                            "paramName": "",
                            "text": "FromToRotation\n"
                        }
                    ]
                },
                "children": [
                    {
                        "id": 3295,
                        "name": "from",
                        "kind": 1024,
                        "kindString": "Property",
                        "flags": {},
                        "comment": {
                            "shortText": "The direction that the rotation should rotate from.",
                            "tags": []
                        },
                        "sources": [
                            {
                                "fileName": "src/aux-common/math/Rotation.ts",
                                "line": 469,
                                "character": 4
                            }
                        ],
                        "type": {
                            "type": "reference",
                            "id": 3142,
                            "name": "Vector3"
                        }
                    },
                    {
                        "id": 3296,
                        "name": "to",
                        "kind": 1024,
                        "kindString": "Property",
                        "flags": {},
                        "comment": {
                            "shortText": "The direction that the rotation should rotate to.",
                            "tags": []
                        },
                        "sources": [
                            {
                                "fileName": "src/aux-common/math/Rotation.ts",
                                "line": 474,
                                "character": 4
                            }
                        ],
                        "type": {
                            "type": "reference",
                            "id": 3142,
                            "name": "Vector3"
                        }
                    }
                ],
                "groups": [
                    {
                        "title": "Properties",
                        "kind": 1024,
                        "children": [
                            3295,
                            3296
                        ]
                    }
                ],
                "sources": [
                    {
                        "fileName": "src/aux-common/math/Rotation.ts",
                        "line": 465,
                        "character": 17
                    }
                ]
            },
            "comment": {
                "shortText": "Defines an interface that represents a from/to rotation.\nThat is, a rotation that is able to rotate a vector from the given vector direction to the given vector direction.",
                "text": "",
                "tags": [
                    {
                        "tagName": "dochash",
                        "paramName": "",
                        "text": "types/math/rotations"
                    },
                    {
                        "tagName": "docorder",
                        "paramName": "",
                        "text": "3"
                    },
                    {
                        "tagName": "doctitle",
                        "paramName": "",
                        "text": "Rotations"
                    },
                    {
                        "tagName": "docsidebar",
                        "paramName": "",
                        "text": "Rotations"
                    },
                    {
                        "tagName": "docdescription",
                        "paramName": "",
                        "text": "Rotations help represent orientation."
                    },
                    {
                        "tagName": "docname",
                        "paramName": "",
                        "text": "FromToRotation\n"
                    }
                ]
            },
            "group": null
        },
        {
            "id": 3300,
            "order": 4,
            "name": "EulerAnglesRotation",
            "reflection": {
                "id": 3300,
                "name": "EulerAnglesRotation",
                "kind": 256,
                "kindString": "Interface",
                "flags": {},
                "comment": {
                    "shortText": "Defines an interface that represents an Euler Angles rotation.",
                    "tags": [
                        {
                            "tag": "dochash",
                            "paramName": "",
                            "text": "types/math/rotations"
                        },
                        {
                            "tag": "docorder",
                            "paramName": "",
                            "text": "4"
                        },
                        {
                            "tag": "doctitle",
                            "paramName": "",
                            "text": "Rotations"
                        },
                        {
                            "tag": "docsidebar",
                            "paramName": "",
                            "text": "Rotations"
                        },
                        {
                            "tag": "docdescription",
                            "paramName": "",
                            "text": "Rotations help represent orientation."
                        },
                        {
                            "tag": "docname",
                            "paramName": "",
                            "text": "EulerAnglesRotation\n"
                        }
                    ]
                },
                "children": [
                    {
                        "id": 3301,
                        "name": "euler",
                        "kind": 1024,
                        "kindString": "Property",
                        "flags": {},
                        "sources": [
                            {
                                "fileName": "src/aux-common/math/Rotation.ts",
                                "line": 510,
                                "character": 4
                            }
                        ],
                        "type": {
                            "type": "reflection",
                            "declaration": {
                                "id": 3302,
                                "name": "__type",
                                "kind": 65536,
                                "kindString": "Type literal",
                                "flags": {},
                                "children": [
                                    {
                                        "id": 3307,
                                        "name": "extrinsic",
                                        "kind": 1024,
                                        "kindString": "Property",
                                        "flags": {
                                            "isOptional": true
                                        },
                                        "comment": {
                                            "shortText": "Whether the euler angles are extrinsic.\nDefaults to false.",
                                            "tags": []
                                        },
                                        "sources": [
                                            {
                                                "fileName": "src/aux-common/math/Rotation.ts",
                                                "line": 536,
                                                "character": 8
                                            }
                                        ],
                                        "type": {
                                            "type": "intrinsic",
                                            "name": "boolean"
                                        }
                                    },
                                    {
                                        "id": 3306,
                                        "name": "order",
                                        "kind": 1024,
                                        "kindString": "Property",
                                        "flags": {
                                            "isOptional": true
                                        },
                                        "comment": {
                                            "shortText": "The order that the rotations should be applied in.\nDefaults to XYZ.",
                                            "tags": []
                                        },
                                        "sources": [
                                            {
                                                "fileName": "src/aux-common/math/Rotation.ts",
                                                "line": 530,
                                                "character": 8
                                            }
                                        ],
                                        "type": {
                                            "type": "intrinsic",
                                            "name": "string"
                                        }
                                    },
                                    {
                                        "id": 3303,
                                        "name": "x",
                                        "kind": 1024,
                                        "kindString": "Property",
                                        "flags": {},
                                        "comment": {
                                            "shortText": "The amount to rotate around the X axis.",
                                            "tags": []
                                        },
                                        "sources": [
                                            {
                                                "fileName": "src/aux-common/math/Rotation.ts",
                                                "line": 514,
                                                "character": 8
                                            }
                                        ],
                                        "type": {
                                            "type": "intrinsic",
                                            "name": "number"
                                        }
                                    },
                                    {
                                        "id": 3304,
                                        "name": "y",
                                        "kind": 1024,
                                        "kindString": "Property",
                                        "flags": {},
                                        "comment": {
                                            "shortText": "The amount to rotate around the Y axis.",
                                            "tags": []
                                        },
                                        "sources": [
                                            {
                                                "fileName": "src/aux-common/math/Rotation.ts",
                                                "line": 519,
                                                "character": 8
                                            }
                                        ],
                                        "type": {
                                            "type": "intrinsic",
                                            "name": "number"
                                        }
                                    },
                                    {
                                        "id": 3305,
                                        "name": "z",
                                        "kind": 1024,
                                        "kindString": "Property",
                                        "flags": {},
                                        "comment": {
                                            "shortText": "The amount to rotate around the Z axis.",
                                            "tags": []
                                        },
                                        "sources": [
                                            {
                                                "fileName": "src/aux-common/math/Rotation.ts",
                                                "line": 524,
                                                "character": 8
                                            }
                                        ],
                                        "type": {
                                            "type": "intrinsic",
                                            "name": "number"
                                        }
                                    }
                                ],
                                "groups": [
                                    {
                                        "title": "Properties",
                                        "kind": 1024,
                                        "children": [
                                            3307,
                                            3306,
                                            3303,
                                            3304,
                                            3305
                                        ]
                                    }
                                ]
                            }
                        }
                    }
                ],
                "groups": [
                    {
                        "title": "Properties",
                        "kind": 1024,
                        "children": [
                            3301
                        ]
                    }
                ],
                "sources": [
                    {
                        "fileName": "src/aux-common/math/Rotation.ts",
                        "line": 509,
                        "character": 17
                    }
                ]
            },
            "comment": {
                "shortText": "Defines an interface that represents an Euler Angles rotation.",
                "text": "",
                "tags": [
                    {
                        "tagName": "dochash",
                        "paramName": "",
                        "text": "types/math/rotations"
                    },
                    {
                        "tagName": "docorder",
                        "paramName": "",
                        "text": "4"
                    },
                    {
                        "tagName": "doctitle",
                        "paramName": "",
                        "text": "Rotations"
                    },
                    {
                        "tagName": "docsidebar",
                        "paramName": "",
                        "text": "Rotations"
                    },
                    {
                        "tagName": "docdescription",
                        "paramName": "",
                        "text": "Rotations help represent orientation."
                    },
                    {
                        "tagName": "docname",
                        "paramName": "",
                        "text": "EulerAnglesRotation\n"
                    }
                ]
            },
            "group": null
        },
        {
            "id": 3308,
            "order": 5,
            "name": "SequenceRotation",
            "reflection": {
                "id": 3308,
                "name": "SequenceRotation",
                "kind": 256,
                "kindString": "Interface",
                "flags": {},
                "comment": {
                    "shortText": "Defines an interface that represents a sequence of rotations.",
                    "tags": [
                        {
                            "tag": "dochash",
                            "paramName": "",
                            "text": "types/math/rotations"
                        },
                        {
                            "tag": "docorder",
                            "paramName": "",
                            "text": "5"
                        },
                        {
                            "tag": "doctitle",
                            "paramName": "",
                            "text": "Rotations"
                        },
                        {
                            "tag": "docsidebar",
                            "paramName": "",
                            "text": "Rotations"
                        },
                        {
                            "tag": "docdescription",
                            "paramName": "",
                            "text": "Rotations help represent orientation."
                        },
                        {
                            "tag": "docname",
                            "paramName": "",
                            "text": "SequenceRotation\n"
                        }
                    ]
                },
                "children": [
                    {
                        "id": 3309,
                        "name": "sequence",
                        "kind": 1024,
                        "kindString": "Property",
                        "flags": {},
                        "comment": {
                            "shortText": "The sequence of successive rotations.",
                            "tags": []
                        },
                        "sources": [
                            {
                                "fileName": "src/aux-common/math/Rotation.ts",
                                "line": 554,
                                "character": 4
                            }
                        ],
                        "type": {
                            "type": "array",
                            "elementType": {
                                "type": "reference",
                                "id": 3251,
                                "name": "Rotation"
                            }
                        }
                    }
                ],
                "groups": [
                    {
                        "title": "Properties",
                        "kind": 1024,
                        "children": [
                            3309
                        ]
                    }
                ],
                "sources": [
                    {
                        "fileName": "src/aux-common/math/Rotation.ts",
                        "line": 550,
                        "character": 17
                    }
                ]
            },
            "comment": {
                "shortText": "Defines an interface that represents a sequence of rotations.",
                "text": "",
                "tags": [
                    {
                        "tagName": "dochash",
                        "paramName": "",
                        "text": "types/math/rotations"
                    },
                    {
                        "tagName": "docorder",
                        "paramName": "",
                        "text": "5"
                    },
                    {
                        "tagName": "doctitle",
                        "paramName": "",
                        "text": "Rotations"
                    },
                    {
                        "tagName": "docsidebar",
                        "paramName": "",
                        "text": "Rotations"
                    },
                    {
                        "tagName": "docdescription",
                        "paramName": "",
                        "text": "Rotations help represent orientation."
                    },
                    {
                        "tagName": "docname",
                        "paramName": "",
                        "text": "SequenceRotation\n"
                    }
                ]
            },
            "group": null
        },
        {
            "id": 3310,
            "order": 6,
            "name": "QuaternionRotation",
            "reflection": {
                "id": 3310,
                "name": "QuaternionRotation",
                "kind": 256,
                "kindString": "Interface",
                "flags": {},
                "comment": {
                    "shortText": "Defines an interface that represents a rotation constructed from a Quaternion.",
                    "tags": [
                        {
                            "tag": "dochash",
                            "paramName": "",
                            "text": "types/math/rotations"
                        },
                        {
                            "tag": "docorder",
                            "paramName": "",
                            "text": "6"
                        },
                        {
                            "tag": "doctitle",
                            "paramName": "",
                            "text": "Rotations"
                        },
                        {
                            "tag": "docsidebar",
                            "paramName": "",
                            "text": "Rotations"
                        },
                        {
                            "tag": "docdescription",
                            "paramName": "",
                            "text": "Rotations help represent orientation."
                        },
                        {
                            "tag": "docname",
                            "paramName": "",
                            "text": "QuaternionRotation\n"
                        }
                    ]
                },
                "children": [
                    {
                        "id": 3311,
                        "name": "quaternion",
                        "kind": 1024,
                        "kindString": "Property",
                        "flags": {},
                        "sources": [
                            {
                                "fileName": "src/aux-common/math/Rotation.ts",
                                "line": 568,
                                "character": 4
                            }
                        ],
                        "type": {
                            "type": "reflection",
                            "declaration": {
                                "id": 3312,
                                "name": "__type",
                                "kind": 65536,
                                "kindString": "Type literal",
                                "flags": {},
                                "children": [
                                    {
                                        "id": 3316,
                                        "name": "w",
                                        "kind": 1024,
                                        "kindString": "Property",
                                        "flags": {},
                                        "sources": [
                                            {
                                                "fileName": "src/aux-common/math/Rotation.ts",
                                                "line": 568,
                                                "character": 51
                                            }
                                        ],
                                        "type": {
                                            "type": "intrinsic",
                                            "name": "number"
                                        }
                                    },
                                    {
                                        "id": 3313,
                                        "name": "x",
                                        "kind": 1024,
                                        "kindString": "Property",
                                        "flags": {},
                                        "sources": [
                                            {
                                                "fileName": "src/aux-common/math/Rotation.ts",
                                                "line": 568,
                                                "character": 18
                                            }
                                        ],
                                        "type": {
                                            "type": "intrinsic",
                                            "name": "number"
                                        }
                                    },
                                    {
                                        "id": 3314,
                                        "name": "y",
                                        "kind": 1024,
                                        "kindString": "Property",
                                        "flags": {},
                                        "sources": [
                                            {
                                                "fileName": "src/aux-common/math/Rotation.ts",
                                                "line": 568,
                                                "character": 29
                                            }
                                        ],
                                        "type": {
                                            "type": "intrinsic",
                                            "name": "number"
                                        }
                                    },
                                    {
                                        "id": 3315,
                                        "name": "z",
                                        "kind": 1024,
                                        "kindString": "Property",
                                        "flags": {},
                                        "sources": [
                                            {
                                                "fileName": "src/aux-common/math/Rotation.ts",
                                                "line": 568,
                                                "character": 40
                                            }
                                        ],
                                        "type": {
                                            "type": "intrinsic",
                                            "name": "number"
                                        }
                                    }
                                ],
                                "groups": [
                                    {
                                        "title": "Properties",
                                        "kind": 1024,
                                        "children": [
                                            3316,
                                            3313,
                                            3314,
                                            3315
                                        ]
                                    }
                                ]
                            }
                        }
                    }
                ],
                "groups": [
                    {
                        "title": "Properties",
                        "kind": 1024,
                        "children": [
                            3311
                        ]
                    }
                ],
                "sources": [
                    {
                        "fileName": "src/aux-common/math/Rotation.ts",
                        "line": 567,
                        "character": 17
                    }
                ]
            },
            "comment": {
                "shortText": "Defines an interface that represents a rotation constructed from a Quaternion.",
                "text": "",
                "tags": [
                    {
                        "tagName": "dochash",
                        "paramName": "",
                        "text": "types/math/rotations"
                    },
                    {
                        "tagName": "docorder",
                        "paramName": "",
                        "text": "6"
                    },
                    {
                        "tagName": "doctitle",
                        "paramName": "",
                        "text": "Rotations"
                    },
                    {
                        "tagName": "docsidebar",
                        "paramName": "",
                        "text": "Rotations"
                    },
                    {
                        "tagName": "docdescription",
                        "paramName": "",
                        "text": "Rotations help represent orientation."
                    },
                    {
                        "tagName": "docname",
                        "paramName": "",
                        "text": "QuaternionRotation\n"
                    }
                ]
            },
            "group": null
        },
        {
            "id": 3317,
            "order": 7,
            "name": "LookRotation",
            "reflection": {
                "id": 3317,
                "name": "LookRotation",
                "kind": 256,
                "kindString": "Interface",
                "flags": {},
                "comment": {
                    "shortText": "Defines an interface that represents a rotation transforms (0, 1, 0) and (0, 0, 1) to look along the given direction and upwards axes.",
                    "tags": [
                        {
                            "tag": "dochash",
                            "paramName": "",
                            "text": "types/math/rotations"
                        },
                        {
                            "tag": "docorder",
                            "paramName": "",
                            "text": "7"
                        },
                        {
                            "tag": "doctitle",
                            "paramName": "",
                            "text": "Rotations"
                        },
                        {
                            "tag": "docsidebar",
                            "paramName": "",
                            "text": "Rotations"
                        },
                        {
                            "tag": "docdescription",
                            "paramName": "",
                            "text": "Rotations help represent orientation."
                        },
                        {
                            "tag": "docname",
                            "paramName": "",
                            "text": "LookRotation\n"
                        }
                    ]
                },
                "children": [
                    {
                        "id": 3318,
                        "name": "direction",
                        "kind": 1024,
                        "kindString": "Property",
                        "flags": {},
                        "comment": {
                            "shortText": "The direction that (0, 1, 0) should be pointing along after the rotation is applied.",
                            "tags": []
                        },
                        "sources": [
                            {
                                "fileName": "src/aux-common/math/Rotation.ts",
                                "line": 585,
                                "character": 4
                            }
                        ],
                        "type": {
                            "type": "reference",
                            "id": 3142,
                            "name": "Vector3"
                        }
                    },
                    {
                        "id": 3320,
                        "name": "errorHandling",
                        "kind": 1024,
                        "kindString": "Property",
                        "flags": {},
                        "comment": {
                            "shortText": "How errors with the direction and upwards vectors should be handled.\nIf the direction and upwards vectors are parallel or perpendicular, then it is not possible to create a rotation\nthat looks along the direction and uses the upwards vector. The upwards vector is essentially useless in this scenario\nand as a result there are an infinite number of possible valid rotations that look along direction vector.",
                            "text": "This parameter provides two ways to handle this situation:\n\n- \"error\" indicates that an error should be thrown when this situation arises.\n- \"nudge\" indicates that the direction vector should be nudged by a miniscule amount in an arbitrary direction.\n          This causes the upwards and direction vectors to no longer be parallel, but it can also cause rotation bugs when the direction and upwards are the same.\n",
                            "tags": []
                        },
                        "sources": [
                            {
                                "fileName": "src/aux-common/math/Rotation.ts",
                                "line": 608,
                                "character": 4
                            }
                        ],
                        "type": {
                            "type": "union",
                            "types": [
                                {
                                    "type": "literal",
                                    "value": "error"
                                },
                                {
                                    "type": "literal",
                                    "value": "nudge"
                                }
                            ]
                        }
                    },
                    {
                        "id": 3319,
                        "name": "upwards",
                        "kind": 1024,
                        "kindString": "Property",
                        "flags": {},
                        "comment": {
                            "shortText": "The direction that the upward axis should be pointing along after the rotation is applied.\nIf the direction and upwards vectors are not perpendicular, then the direction will be prioritized and the angle between\nupwards and the resulting upwards vector will be minimized.",
                            "text": "If direction and upwards are perpendicular, then applying the rotation to (0, 0, 1) will give the upwards vector.\n",
                            "tags": []
                        },
                        "sources": [
                            {
                                "fileName": "src/aux-common/math/Rotation.ts",
                                "line": 594,
                                "character": 4
                            }
                        ],
                        "type": {
                            "type": "reference",
                            "id": 3142,
                            "name": "Vector3"
                        }
                    }
                ],
                "groups": [
                    {
                        "title": "Properties",
                        "kind": 1024,
                        "children": [
                            3318,
                            3320,
                            3319
                        ]
                    }
                ],
                "sources": [
                    {
                        "fileName": "src/aux-common/math/Rotation.ts",
                        "line": 581,
                        "character": 17
                    }
                ]
            },
            "comment": {
                "shortText": "Defines an interface that represents a rotation transforms (0, 1, 0) and (0, 0, 1) to look along the given direction and upwards axes.",
                "text": "",
                "tags": [
                    {
                        "tagName": "dochash",
                        "paramName": "",
                        "text": "types/math/rotations"
                    },
                    {
                        "tagName": "docorder",
                        "paramName": "",
                        "text": "7"
                    },
                    {
                        "tagName": "doctitle",
                        "paramName": "",
                        "text": "Rotations"
                    },
                    {
                        "tagName": "docsidebar",
                        "paramName": "",
                        "text": "Rotations"
                    },
                    {
                        "tagName": "docdescription",
                        "paramName": "",
                        "text": "Rotations help represent orientation."
                    },
                    {
                        "tagName": "docname",
                        "paramName": "",
                        "text": "LookRotation\n"
                    }
                ]
            },
            "group": null
        }
    ],
    "references": {
        "Quaternion": "types/math/rotations",
        "id-3219": "Quaternion",
        "Rotation": "types/math/rotations",
        "id-3251": "Rotation",
        "Vector2": "types/math/vectors",
        "id-3085": "Vector2",
        "Vector3": "types/math/vectors",
        "id-3142": "Vector3",
        "AddCountFailure": "types/records/events",
        "id-3032": "AddCountFailure",
        "AddCountSuccess": "types/records/events",
        "id-3027": "AddCountSuccess",
        "AnimateTagOptions": "types/animation",
        "id-2110": "AnimateTagOptions",
        "AttachDebuggerOptions": "types/debuggers/common",
        "id-2485": "AttachDebuggerOptions",
        "CasualOSDevice": "types/os",
        "id-2851": "CasualOSDevice",
        "CasualOSVersion": "types/os",
        "id-2843": "CasualOSVersion",
        "AxisAndAngle": "types/math/rotations",
        "id-3297": "AxisAndAngle",
        "BotTagMasks": "types/core",
        "id-2820": "BotTagMasks",
        "BotTags": "types/core",
        "id-2735": "BotTags",
        "BotState": "types/core",
        "id-2833": "BotState",
        "CompiledBotListeners": "types/core",
        "id-2814": "CompiledBotListeners",
        "ConvertGeolocationToWhat3WordsOptions": "types/os",
        "id-2527": "ConvertGeolocationToWhat3WordsOptions",
        "CreatePublicRecordKeyFailure": "types/records/key",
        "id-2865": "CreatePublicRecordKeyFailure",
        "CreatePublicRecordKeySuccess": "types/records/key",
        "id-2861": "CreatePublicRecordKeySuccess",
        "DebuggerCallFrame": "types/debuggers/common",
        "id-2438": "DebuggerCallFrame",
        "DebuggerFunctionLocation": "types/debuggers/common",
        "id-2473": "DebuggerFunctionLocation",
        "DebuggerPause": "types/debuggers/common",
        "id-2467": "DebuggerPause",
        "DebuggerTagMaskUpdate": "types/debuggers/common",
        "id-2446": "DebuggerTagMaskUpdate",
        "DebuggerTagUpdate": "types/debuggers/common",
        "id-2452": "DebuggerTagUpdate",
        "DebuggerVariable": "types/debuggers/common",
        "id-2479": "DebuggerVariable",
        "Easing": "types/animation",
        "id-2507": "Easing",
        "EnableXROptions": "types/os",
        "id-2601": "EnableXROptions",
        "EraseDataFailure": "types/records/data",
        "id-3000": "EraseDataFailure",
        "EraseDataSuccess": "types/records/data",
        "id-2996": "EraseDataSuccess",
        "EraseFileFailure": "types/records/files",
        "id-3022": "EraseFileFailure",
        "EraseFileSuccess": "types/records/files",
        "id-3018": "EraseFileSuccess",
        "EulerAnglesRotation": "types/math/rotations",
        "id-3300": "EulerAnglesRotation",
        "FocusOnOptions": "types/os",
        "id-2561": "FocusOnOptions",
        "FocusOnRotation": "types/os",
        "id-2573": "FocusOnRotation",
        "FormAnimationData": "types/os",
        "id-2619": "FormAnimationData",
        "FromToRotation": "types/math/rotations",
        "id-3294": "FromToRotation",
        "GetCountFailure": "types/records/events",
        "id-3043": "GetCountFailure",
        "GetCountSuccess": "types/records/events",
        "id-3037": "GetCountSuccess",
        "GetDataFailure": "types/records/data",
        "id-2991": "GetDataFailure",
        "GetDataSuccess": "types/records/data",
        "id-2982": "GetDataSuccess",
        "GetRoomOptionsFailure": "types/os",
        "id-2200": "GetRoomOptionsFailure",
        "GetRoomOptionsSuccess": "types/os",
        "id-2196": "GetRoomOptionsSuccess",
        "GetRoomRemoteOptionsFailure": "types/os",
        "id-2243": "GetRoomRemoteOptionsFailure",
        "GetRoomRemoteOptionsSuccess": "types/os",
        "id-2238": "GetRoomRemoteOptionsSuccess",
        "GetRoomTrackOptionsFailure": "types/os",
        "id-2219": "GetRoomTrackOptionsFailure",
        "GetRoomTrackOptionsSuccess": "types/os",
        "id-2214": "GetRoomTrackOptionsSuccess",
        "GrantMarkerPermissionFailure": "types/records/policies",
        "id-3071": "GrantMarkerPermissionFailure",
        "GrantMarkerPermissionSuccess": "types/records/policies",
        "id-3069": "GrantMarkerPermissionSuccess",
        "GrantRoleFailure": "types/records/roles",
        "id-3057": "GrantRoleFailure",
        "GrantRoleSuccess": "types/records/roles",
        "id-3055": "GrantRoleSuccess",
        "ImageClassifierOptions": "types/os",
        "id-2579": "ImageClassifierOptions",
        "InstUpdate": "types/os",
        "id-2856": "InstUpdate",
        "JoinRoomFailure": "types/os",
        "id-2181": "JoinRoomFailure",
        "JoinRoomSuccess": "types/os",
        "id-2178": "JoinRoomSuccess",
        "LeaveRoomFailure": "types/os",
        "id-2190": "LeaveRoomFailure",
        "LeaveRoomSuccess": "types/os",
        "id-2187": "LeaveRoomSuccess",
        "ListDataFailure": "types/records/data",
        "id-3013": "ListDataFailure",
        "ListDataSuccess": "types/records/data",
        "id-3005": "ListDataSuccess",
        "LookRotation": "types/math/rotations",
        "id-3317": "LookRotation",
        "MediaPermissionOptions": "types/os",
        "id-2598": "MediaPermissionOptions",
        "Debugger": "types/debuggers/debugger",
        "id-2250": "Debugger",
        "NormalDebuggerOptions": "types/debuggers/common",
        "id-2457": "NormalDebuggerOptions",
        "PhotoCameraOptions": "types/camera",
        "id-2676": "PhotoCameraOptions",
        "ParsedBotLink": "types/core",
        "id-2839": "ParsedBotLink",
        "PartialBotState": "types/core",
        "id-2836": "PartialBotState",
        "PausableDebugger": "types/debuggers/pausable-debugger",
        "id-2306": "PausableDebugger",
        "PausableDebuggerOptions": "types/debuggers/common",
        "id-2462": "PausableDebuggerOptions",
        "PauseTrigger": "types/debuggers/common",
        "id-2425": "PauseTrigger",
        "PauseTriggerOptions": "types/debuggers/common",
        "id-2433": "PauseTriggerOptions",
        "Photo": "types/camera",
        "id-2683": "Photo",
        "PossiblePauseTriggerLocation": "types/debuggers/common",
        "id-2420": "PossiblePauseTriggerLocation",
        "PseudoRandomNumberGenerator": "types/core",
        "id-2494": "PseudoRandomNumberGenerator",
        "QuaternionRotation": "types/math/rotations",
        "id-3310": "QuaternionRotation",
        "RaycastRay": "types/os",
        "id-2174": "RaycastRay",
        "RaycastResult": "types/os",
        "id-2171": "RaycastResult",
        "RecordActionOptions": "types/records/extra",
        "id-2510": "RecordActionOptions",
        "RecordDataFailure": "types/records/data",
        "id-2977": "RecordDataFailure",
        "RecordDataSuccess": "types/records/data",
        "id-2973": "RecordDataSuccess",
        "RecordFileFailure": "types/records/files",
        "id-2141": "RecordFileFailure",
        "RecordFileSuccess": "types/records/files",
        "id-2137": "RecordFileSuccess",
        "RecordedFile": "types/experimental",
        "id-2663": "RecordedFile",
        "Recording": "types/experimental",
        "id-2661": "Recording",
        "RecordingOptions": "types/experimental",
        "id-2668": "RecordingOptions",
        "RegisterPrefixOptions": "types/core",
        "id-2658": "RegisterPrefixOptions",
        "RevokeMarkerPermissionFailure": "types/records/policies",
        "id-3078": "RevokeMarkerPermissionFailure",
        "RevokeMarkerPermissionSuccess": "types/records/policies",
        "id-3076": "RevokeMarkerPermissionSuccess",
        "RevokeRoleFailure": "types/records/roles",
        "id-3064": "RevokeRoleFailure",
        "RevokeRoleSuccess": "types/records/roles",
        "id-3062": "RevokeRoleSuccess",
        "RoomJoinOptions": "types/os",
        "id-2624": "RoomJoinOptions",
        "RoomOptions": "types/os",
        "id-2633": "RoomOptions",
        "RoomRemoteOptions": "types/os",
        "id-2649": "RoomRemoteOptions",
        "RoomTrackOptions": "types/os",
        "id-2637": "RoomTrackOptions",
        "RuntimeBot": "types/core",
        "id-2687": "RuntimeBot",
        "RuntimeBotLinks": "types/core",
        "id-2826": "RuntimeBotLinks",
        "RuntimeBotVars": "types/core",
        "id-2823": "RuntimeBotVars",
        "SequenceRotation": "types/math/rotations",
        "id-3308": "SequenceRotation",
        "SetRoomOptionsSuccess": "types/os",
        "id-2205": "SetRoomOptionsSuccess",
        "SetRoomTrackOptions": "types/os",
        "id-2655": "SetRoomTrackOptions",
        "SetRoomTrackOptionsFailure": "types/os",
        "id-2231": "SetRoomTrackOptionsFailure",
        "SetRoomTrackOptionsSuccess": "types/os",
        "id-2226": "SetRoomTrackOptionsSuccess",
        "ShareOptions": "types/os",
        "id-2557": "ShareOptions",
        "ShowChatOptions": "types/os",
        "id-2551": "ShowChatOptions",
        "ShowConfirmOptions": "types/os",
        "id-2593": "ShowConfirmOptions",
        "ShowInputOptions": "types/os",
        "id-2584": "ShowInputOptions",
        "SnapAxis": "types/os",
        "id-2531": "SnapAxis",
        "SnapGridTarget": "types/os",
        "id-2146": "SnapGridTarget",
        "SnapPoint": "types/os",
        "id-2543": "SnapPoint",
        "SpeakTextOptions": "types/experimental",
        "id-2490": "SpeakTextOptions",
        "StartFormAnimationOptions": "types/os",
        "id-2603": "StartFormAnimationOptions",
        "StopFormAnimationOptions": "types/os",
        "id-2616": "StopFormAnimationOptions",
        "SuccessfulGeolocation": "types/os",
        "id-2513": "SuccessfulGeolocation",
        "SyntheticVoice": "types/experimental",
        "id-2672": "SyntheticVoice",
        "TweenOptions": "types/experimental",
        "id-2487": "TweenOptions",
        "UnsuccessfulGeolocation": "types/os",
        "id-2523": "UnsuccessfulGeolocation",
        "UpdateEventRecordFailure": "types/records/events",
        "id-3050": "UpdateEventRecordFailure",
        "UpdateEventRecordSuccess": "types/records/events",
        "id-3048": "UpdateEventRecordSuccess",
        "UploadedFile": "types/os",
        "id-2167": "UploadedFile",
        "WebhookOptions": "types/web",
        "id-2091": "WebhookOptions",
        "WebhookResult": "types/web",
        "id-2103": "WebhookResult",
        "AddCountResult": "types/records/events",
        "id-3026": "AddCountResult",
        "AvailablePermissions": "types/permissions",
        "id-2870": "AvailablePermissions",
        "BarcodeFormat": "types/os",
        "id-2578": "BarcodeFormat",
        "BotFilter": "types/core",
        "id-2125": "BotFilter",
        "BotSpace": "types/core",
        "id-2810": "BotSpace",
        "CameraType": "types/os",
        "id-2577": "CameraType",
        "CreatePublicRecordKeyResult": "types/records/key",
        "id-2860": "CreatePublicRecordKeyResult",
        "EaseMode": "types/animation",
        "id-2506": "EaseMode",
        "EaseType": "types/animation",
        "id-2505": "EaseType",
        "EraseDataResult": "types/records/data",
        "id-2995": "EraseDataResult",
        "EraseFileResult": "types/records/files",
        "id-3017": "EraseFileResult",
        "Geolocation": "types/os",
        "id-2512": "Geolocation",
        "GetCountResult": "types/records/events",
        "id-3036": "GetCountResult",
        "GetDataResult": "types/records/data",
        "id-2981": "GetDataResult",
        "GetRoomOptionsResult": "types/os",
        "id-2195": "GetRoomOptionsResult",
        "GetRoomRemoteOptionsResult": "types/os",
        "id-2237": "GetRoomRemoteOptionsResult",
        "GetRoomTrackOptionsResult": "types/os",
        "id-2213": "GetRoomTrackOptionsResult",
        "GrantMarkerPermissionResult": "types/records/policies",
        "id-3068": "GrantMarkerPermissionResult",
        "GrantRoleResult": "types/records/roles",
        "id-3054": "GrantRoleResult",
        "JoinRoomResult": "types/os",
        "id-2177": "JoinRoomResult",
        "LeaveRoomResult": "types/os",
        "id-2186": "LeaveRoomResult",
        "ListDataResult": "types/records/data",
        "id-3004": "ListDataResult",
        "Mod": "types/core",
        "id-2120": "Mod",
        "PortalType": "types/core",
        "id-2842": "PortalType",
        "PossiblePauseTriggerStates": "types/debuggers/common",
        "id-2424": "PossiblePauseTriggerStates",
        "RecordDataResult": "types/records/data",
        "id-2972": "RecordDataResult",
        "RecordFileResult": "types/records/files",
        "id-2136": "RecordFileResult",
        "RevokeMarkerPermissionResult": "types/records/policies",
        "id-3075": "RevokeMarkerPermissionResult",
        "RevokeRoleResult": "types/records/roles",
        "id-3061": "RevokeRoleResult",
        "SetRoomOptionsResult": "types/os",
        "id-2204": "SetRoomOptionsResult",
        "SetRoomTrackOptionsResult": "types/os",
        "id-2225": "SetRoomTrackOptionsResult",
        "SnapTarget": "types/os",
        "id-2550": "SnapTarget",
        "TagFilter": "types/core",
        "id-2121": "TagFilter",
        "UpdateEventRecordResult": "types/records/events",
        "id-3047": "UpdateEventRecordResult",
        "animateTag-byOptions": "actions/utility",
        "id-364": "animateTag-byOptions",
        "getbot-tag": "actions/data",
        "id-33": "getbot-tag",
        "getbots-tag": "actions/data",
        "id-17": "getbots-tag",
        "animateTag-byTag": "actions/utility",
        "id-358": "animateTag-byTag",
        "changeState": "actions/data",
        "id-177": "changeState",
        "create": "actions/data",
        "id-162": "create",
        "destroy": "actions/data",
        "id-166": "destroy",
        "getbot-filters": "actions/data",
        "id-26": "getbot-filters",
        "getbots-filters": "actions/data",
        "id-10": "getbots-filters",
        "priorityShout": "actions/event",
        "id-225": "priorityShout",
        "shout": "actions/event",
        "id-237": "shout",
        "updateBotLinks": "actions/data",
        "id-198": "updateBotLinks",
        "whisper": "actions/event",
        "id-263": "whisper",
        "action.perform": "actions/event",
        "id-1600": "action.perform",
        "action.reject": "actions/event",
        "id-1604": "action.reject",
        "applyDiffToSnapshot": "actions/data",
        "id-83": "applyDiffToSnapshot",
        "applyMod": "actions/mods",
        "id-152": "applyMod",
        "assert": "actions/debuggers",
        "id-407": "assert",
        "assertEqual": "actions/debuggers",
        "id-412": "assertEqual",
        "atPosition": "actions/bot-filters",
        "id-293": "atPosition",
        "byCreator": "actions/bot-filters",
        "id-314": "byCreator",
        "byID": "actions/bot-filters",
        "id-281": "byID",
        "byMod": "actions/bot-filters",
        "id-285": "byMod",
        "bySpace": "actions/bot-filters",
        "id-310": "bySpace",
        "byTag": "actions/bot-filters",
        "id-276": "byTag",
        "bytes.fromBase64String": "actions/bytes",
        "id-1824": "bytes.fromBase64String",
        "bytes.fromHexString": "actions/bytes",
        "id-1832": "bytes.fromHexString",
        "bytes.toBase64String": "actions/bytes",
        "id-1820": "bytes.toBase64String",
        "bytes.toHexString": "actions/bytes",
        "id-1828": "bytes.toHexString",
        "clearAnimations": "actions/utility",
        "id-378": "clearAnimations",
        "clearTagMasks": "actions/data",
        "id-106": "clearTagMasks",
        "crypto.hash-raw": "actions/crypto",
        "id-1838": "crypto.hash-raw",
        "crypto.hash-string": "actions/crypto",
        "id-1844": "crypto.hash-string",
        "crypto.hmac-raw": "actions/crypto",
        "id-1875": "crypto.hmac-raw",
        "crypto.hmac-string": "actions/crypto",
        "id-1868": "crypto.hmac-string",
        "crypto.asymmetric.decrypt": "actions/crypto",
        "id-1933": "crypto.asymmetric.decrypt",
        "crypto.asymmetric.encrypt": "actions/crypto",
        "id-1928": "crypto.asymmetric.encrypt",
        "crypto.asymmetric.isEncrypted": "actions/crypto",
        "id-1939": "crypto.asymmetric.isEncrypted",
        "crypto.asymmetric.isKeypair": "actions/crypto",
        "id-1924": "crypto.asymmetric.isKeypair",
        "crypto.asymmetric.keypair": "actions/crypto",
        "id-1920": "crypto.asymmetric.keypair",
        "crypto.encrypt": "actions/crypto",
        "id-1904": "crypto.encrypt",
        "crypto.hmacSha256": "actions/crypto",
        "id-1894": "crypto.hmacSha256",
        "crypto.hmacSha512": "actions/crypto",
        "id-1899": "crypto.hmacSha512",
        "crypto.isEncrypted": "actions/crypto",
        "id-1914": "crypto.isEncrypted",
        "crypto.keypair": "actions/crypto",
        "id-1943": "crypto.keypair",
        "crypto.sha256": "actions/crypto",
        "id-1860": "crypto.sha256",
        "crypto.sha512": "actions/crypto",
        "id-1864": "crypto.sha512",
        "crypto.sign": "actions/crypto",
        "id-1947": "crypto.sign",
        "deleteTagMaskText": "actions/data",
        "id-133": "deleteTagMaskText",
        "deleteTagText": "actions/data",
        "id-126": "deleteTagText",
        "diffSnapshots": "actions/data",
        "id-78": "diffSnapshots",
        "either": "actions/bot-filters",
        "id-318": "either",
        "os.beginAudioRecording": "actions/audio",
        "id-1658": "os.beginAudioRecording",
        "experiment.beginRecording": "actions/experimental",
        "id-1665": "experiment.beginRecording",
        "os.endAudioRecording": "actions/audio",
        "id-1662": "os.endAudioRecording",
        "experiment.endRecording": "actions/experimental",
        "id-1669": "experiment.endRecording",
        "experiment.getAnchorPointPosition": "actions/experimental",
        "id-1648": "experiment.getAnchorPointPosition",
        "experiment.getVoices": "actions/experimental",
        "id-1677": "experiment.getVoices",
        "experiment.localFormAnimation": "actions/experimental",
        "id-1621": "experiment.localFormAnimation",
        "experiment.localPositionTween": "actions/experimental",
        "id-1626": "experiment.localPositionTween",
        "experiment.localRotationTween": "actions/experimental",
        "id-1637": "experiment.localRotationTween",
        "experiment.speakText": "actions/experimental",
        "id-1672": "experiment.speakText",
        "getBotLinks": "actions/data",
        "id-194": "getBotLinks",
        "getBotPosition": "actions/data",
        "id-52": "getBotPosition",
        "getBotRotation": "actions/data",
        "id-57": "getBotRotation",
        "getBotTagValues": "actions/data",
        "id-42": "getBotTagValues",
        "getFormattedJSON": "actions/data",
        "id-70": "getFormattedJSON",
        "getID": "actions/data",
        "id-62": "getID",
        "getJSON": "actions/data",
        "id-66": "getJSON",
        "getLink": "actions/data",
        "id-190": "getLink",
        "getMod": "actions/mods",
        "id-47": "getMod",
        "getSnapshot": "actions/data",
        "id-74": "getSnapshot",
        "getTag": "actions/data",
        "id-88": "getTag",
        "inDimension": "actions/bot-filters",
        "id-289": "inDimension",
        "inStack": "actions/bot-filters",
        "id-299": "inStack",
        "insertTagMaskText": "actions/data",
        "id-118": "insertTagMaskText",
        "insertTagText": "actions/data",
        "id-111": "insertTagText",
        "math.abs": "actions/math",
        "id-1694": "math.abs",
        "math.addVectors": "actions/math",
        "id-1764": "math.addVectors",
        "math.areClose": "actions/math",
        "id-1795": "math.areClose",
        "math.avg": "actions/math",
        "id-1686": "math.avg",
        "math.degreesToRadians": "actions/math",
        "id-1720": "math.degreesToRadians",
        "math.getAnchorPointOffset": "actions/math",
        "id-1760": "math.getAnchorPointOffset",
        "math.getForwardDirection": "actions/math",
        "id-1728": "math.getForwardDirection",
        "math.getSeededRandomNumberGenerator": "actions/math",
        "id-1702": "math.getSeededRandomNumberGenerator",
        "math.intersectPlane": "actions/math",
        "id-1737": "math.intersectPlane",
        "math.negateVector": "actions/math",
        "id-1774": "math.negateVector",
        "math.normalizeVector": "actions/math",
        "id-1779": "math.normalizeVector",
        "math.radiansToDegrees": "actions/math",
        "id-1724": "math.radiansToDegrees",
        "math.random": "actions/math",
        "id-1715": "math.random",
        "math.randomInt": "actions/math",
        "id-1710": "math.randomInt",
        "math.scaleVector": "actions/math",
        "id-1789": "math.scaleVector",
        "math.setRandomSeed": "actions/math",
        "id-1706": "math.setRandomSeed",
        "math.sqrt": "actions/math",
        "id-1690": "math.sqrt",
        "math.stdDev": "actions/math",
        "id-1698": "math.stdDev",
        "math.subtractVectors": "actions/math",
        "id-1769": "math.subtractVectors",
        "math.sum": "actions/math",
        "id-1682": "math.sum",
        "math.vectorLength": "actions/math",
        "id-1784": "math.vectorLength",
        "neighboring": "actions/bot-filters",
        "id-304": "neighboring",
        "not": "actions/bot-filters",
        "id-325": "not",
        "os.attachDebugger": "actions/debuggers",
        "id-1298": "os.attachDebugger",
        "os.createDebugger-normal": "actions/debuggers",
        "id-1287": "os.createDebugger-normal",
        "os.createDebugger-pausable": "actions/debuggers",
        "id-1291": "os.createDebugger-pausable",
        "os.focusOn-bot": "actions/portals",
        "id-480": "os.focusOn-bot",
        "os.focusOn-position": "actions/portals",
        "id-485": "os.focusOn-position",
        "os.getExecutingDebugger": "actions/debuggers",
        "id-1295": "os.getExecutingDebugger",
        "showChat-options": "actions/os",
        "id-507": "showChat-options",
        "showChat-placeholder": "actions/os",
        "id-503": "showChat-placeholder",
        "os.showInput": "actions/portals",
        "id-723": "os.showInput",
        "os.addBotDropGrid": "actions/portals",
        "id-797": "os.addBotDropGrid",
        "os.addBotDropSnap": "actions/portals",
        "id-788": "os.addBotDropSnap",
        "os.addDropGrid": "actions/portals",
        "id-793": "os.addDropGrid",
        "os.addDropSnap": "actions/portals",
        "id-784": "os.addDropSnap",
        "os.applyUpdatesToInst": "actions/os",
        "id-1241": "os.applyUpdatesToInst",
        "os.arSupported": "actions/xr",
        "id-548": "os.arSupported",
        "os.bufferFormAddressGLTF": "actions/animations",
        "id-1194": "os.bufferFormAddressGLTF",
        "os.bufferSound": "actions/audio",
        "id-760": "os.bufferSound",
        "os.calculateRayFromCamera": "actions/portals",
        "id-1189": "os.calculateRayFromCamera",
        "os.cancelSound": "actions/audio",
        "id-764": "os.cancelSound",
        "os.capturePhoto": "actions/camera",
        "id-643": "os.capturePhoto",
        "os.closeBarcodeScanner": "actions/barcodes",
        "id-621": "os.closeBarcodeScanner",
        "os.closeCircleWipe": "actions/portals",
        "id-776": "os.closeCircleWipe",
        "os.closeImageClassifier": "actions/image-classification",
        "id-636": "os.closeImageClassifier",
        "os.closePhotoCamera": "actions/camera",
        "id-647": "os.closePhotoCamera",
        "os.closeQRCodeScanner": "actions/barcodes",
        "id-607": "os.closeQRCodeScanner",
        "os.compileApp": "actions/app",
        "id-911": "os.compileApp",
        "os.convertGeolocationToWhat3Words": "actions/os",
        "id-1174": "os.convertGeolocationToWhat3Words",
        "os.countEvents": "actions/records",
        "id-1168": "os.countEvents",
        "os.createInitializationUpdate": "actions/os",
        "id-1237": "os.createInitializationUpdate",
        "os.device": "actions/os",
        "id-525": "os.device",
        "os.disableAR": "actions/xr",
        "id-538": "os.disableAR",
        "os.disablePointOfView": "actions/portals",
        "id-563": "os.disablePointOfView",
        "os.disableVR": "actions/xr",
        "id-545": "os.disableVR",
        "os.disableWakeLock": "actions/os",
        "id-569": "os.disableWakeLock",
        "os.download": "actions/files",
        "id-575": "os.download",
        "os.downloadBots": "actions/files",
        "id-581": "os.downloadBots",
        "os.downloadBotsAsInitialzationUpdate": "actions/files",
        "id-586": "os.downloadBotsAsInitialzationUpdate",
        "os.downloadInst": "actions/files",
        "id-594": "os.downloadInst",
        "os.enableAR": "actions/xr",
        "id-534": "os.enableAR",
        "os.enableCustomDragging": "actions/portals",
        "id-802": "os.enableCustomDragging",
        "os.enablePointOfView": "actions/portals",
        "id-554": "os.enablePointOfView",
        "os.enableVR": "actions/xr",
        "id-541": "os.enableVR",
        "os.eraseData": "actions/records",
        "id-1111": "os.eraseData",
        "os.eraseManualApprovalData": "actions/records",
        "id-1117": "os.eraseManualApprovalData",
        "os.exitFullscreenMode": "actions/portals",
        "id-451": "os.exitFullscreenMode",
        "os.getAverageFrameRate": "actions/os",
        "id-859": "os.getAverageFrameRate",
        "os.getCameraPosition": "actions/portals",
        "id-815": "os.getCameraPosition",
        "os.getCameraRotation": "actions/portals",
        "id-819": "os.getCameraRotation",
        "os.getCurrentDimension": "actions/portals",
        "id-694": "os.getCurrentDimension",
        "os.getCurrentInst": "actions/portals",
        "id-700": "os.getCurrentInst",
        "os.getCurrentInstUpdate": "actions/os",
        "id-1245": "os.getCurrentInstUpdate",
        "os.getData": "actions/records",
        "id-1093": "os.getData",
        "os.getDimensionalDepth": "actions/portals",
        "id-713": "os.getDimensionalDepth",
        "os.getFocusPoint": "actions/portals",
        "id-827": "os.getFocusPoint",
        "os.getGeolocation": "actions/os",
        "id-809": "os.getGeolocation",
        "os.getInputList": "actions/portals",
        "id-852": "os.getInputList",
        "os.getInputState": "actions/portals",
        "id-847": "os.getInputState",
        "os.getInstStateFromUpdates": "actions/os",
        "id-1233": "os.getInstStateFromUpdates",
        "os.getManualApprovalData": "actions/records",
        "id-1099": "os.getManualApprovalData",
        "os.getMediaPermission": "actions/os",
        "id-855": "os.getMediaPermission",
        "os.getMenuDimension": "actions/portals",
        "id-703": "os.getMenuDimension",
        "os.getMiniPortalDimension": "actions/portals",
        "id-706": "os.getMiniPortalDimension",
        "os.getPointerDirection": "actions/portals",
        "id-843": "os.getPointerDirection",
        "os.getPointerPosition": "actions/portals",
        "id-831": "os.getPointerPosition",
        "os.getPointerRotation": "actions/portals",
        "id-835": "os.getPointerRotation",
        "os.getPortalDimension": "actions/portals",
        "id-709": "os.getPortalDimension",
        "os.getPublicRecordKey": "actions/records",
        "id-1018": "os.getPublicRecordKey",
        "os.getRoomOptions": "actions/rooms",
        "id-877": "os.getRoomOptions",
        "os.getRoomRemoteOptions": "actions/rooms",
        "id-892": "os.getRoomRemoteOptions",
        "os.getRoomTrackOptions": "actions/rooms",
        "id-881": "os.getRoomTrackOptions",
        "os.getSubjectlessPublicRecordKey": "actions/records",
        "id-1022": "os.getSubjectlessPublicRecordKey",
        "os.getWakeLockConfiguration": "actions/os",
        "id-572": "os.getWakeLockConfiguration",
        "os.goToDimension": "actions/portals",
        "id-737": "os.goToDimension",
        "os.goToURL": "actions/portals",
        "id-741": "os.goToURL",
        "os.grantInstAdminPermission": "actions/records",
        "id-1040": "os.grantInstAdminPermission",
        "os.grantInstRole": "actions/records",
        "id-1060": "os.grantInstRole",
        "os.grantRecordMarkerPermission": "actions/records",
        "id-1026": "os.grantRecordMarkerPermission",
        "os.grantUserRole": "actions/records",
        "id-1045": "os.grantUserRole",
        "os.hasBotInMiniPortal": "actions/portals",
        "id-768": "os.hasBotInMiniPortal",
        "os.hideBarcode": "actions/barcodes",
        "id-629": "os.hideBarcode",
        "os.hideChat": "actions/os",
        "id-515": "os.hideChat",
        "os.hideHtml": "actions/os",
        "id-458": "os.hideHtml",
        "os.hideQRCode": "actions/barcodes",
        "id-614": "os.hideQRCode",
        "os.hideTips": "actions/portals",
        "id-439": "os.hideTips",
        "os.importAUX": "actions/files",
        "id-678": "os.importAUX",
        "os.inSheet": "actions/portals",
        "id-812": "os.inSheet",
        "os.instStatuses": "actions/os",
        "id-1262": "os.instStatuses",
        "os.instances": "actions/os",
        "id-1252": "os.instances",
        "os.isCollaborative": "actions/os",
        "id-528": "os.isCollaborative",
        "os.isInDimension": "actions/portals",
        "id-690": "os.isInDimension",
        "os.isRecordKey": "actions/records",
        "id-1075": "os.isRecordKey",
        "os.joinRoom": "actions/rooms",
        "id-862": "os.joinRoom",
        "os.leaveRoom": "actions/rooms",
        "id-867": "os.leaveRoom",
        "os.listBuiltinTags": "actions/app",
        "id-1012": "os.listBuiltinTags",
        "os.listData": "actions/records",
        "id-1105": "os.listData",
        "os.listFormAnimations": "actions/animations",
        "id-1209": "os.listFormAnimations",
        "os.listInstUpdates": "actions/os",
        "id-1230": "os.listInstUpdates",
        "os.loadInst": "actions/os",
        "id-670": "os.loadInst",
        "os.log": "actions/os",
        "id-805": "os.log",
        "os.meetCommand": "actions/os",
        "id-1275": "os.meetCommand",
        "os.meetFunction": "actions/os",
        "id-1280": "os.meetFunction",
        "os.openBarcodeScanner": "actions/barcodes",
        "id-617": "os.openBarcodeScanner",
        "os.openCircleWipe": "actions/portals",
        "id-780": "os.openCircleWipe",
        "os.openDevConsole": "actions/os",
        "id-749": "os.openDevConsole",
        "os.openImageClassifier": "actions/image-classification",
        "id-632": "os.openImageClassifier",
        "os.openPhotoCamera": "actions/camera",
        "id-639": "os.openPhotoCamera",
        "os.openQRCodeScanner": "actions/barcodes",
        "id-603": "os.openQRCodeScanner",
        "os.openURL": "actions/portals",
        "id-745": "os.openURL",
        "os.parseBotsFromData": "actions/files",
        "id-682": "os.parseBotsFromData",
        "os.playSound": "actions/audio",
        "id-756": "os.playSound",
        "os.raycast": "actions/portals",
        "id-1183": "os.raycast",
        "os.raycastFromCamera": "actions/portals",
        "id-1178": "os.raycastFromCamera",
        "os.recordData": "actions/records",
        "id-1079": "os.recordData",
        "os.recordEvent": "actions/records",
        "id-1162": "os.recordEvent",
        "os.recordFile": "actions/records",
        "id-1123": "os.recordFile",
        "os.recordManualApprovalData": "actions/records",
        "id-1086": "os.recordManualApprovalData",
        "os.registerApp": "actions/app",
        "id-902": "os.registerApp",
        "os.registerTagPrefix": "actions/app",
        "id-897": "os.registerTagPrefix",
        "os.remoteCount": "actions/os",
        "id-1255": "os.remoteCount",
        "os.remotes": "actions/os",
        "id-1227": "os.remotes",
        "os.replaceDragBot": "actions/portals",
        "id-686": "os.replaceDragBot",
        "os.requestAuthBot": "actions/records",
        "id-1015": "os.requestAuthBot",
        "os.requestFullscreenMode": "actions/portals",
        "id-448": "os.requestFullscreenMode",
        "os.requestWakeLock": "actions/os",
        "id-566": "os.requestWakeLock",
        "os.revokeInstRole": "actions/records",
        "id-1068": "os.revokeInstRole",
        "os.revokeRecordMarkerPermission": "actions/records",
        "id-1033": "os.revokeRecordMarkerPermission",
        "os.revokeUserRole": "actions/records",
        "id-1053": "os.revokeUserRole",
        "os.run": "actions/os",
        "id-518": "os.run",
        "os.setClipboard": "actions/os",
        "id-461": "os.setClipboard",
        "os.setRoomOptions": "actions/rooms",
        "id-872": "os.setRoomOptions",
        "os.setRoomTrackOptions": "actions/rooms",
        "id-886": "os.setRoomTrackOptions",
        "os.share": "actions/os",
        "id-772": "os.share",
        "os.showBarcode": "actions/barcodes",
        "id-624": "os.showBarcode",
        "os.showConfirm": "actions/portals",
        "id-733": "os.showConfirm",
        "os.showHtml": "actions/os",
        "id-454": "os.showHtml",
        "os.showInputForTag": "actions/portals",
        "id-717": "os.showInputForTag",
        "os.showJoinCode": "actions/barcodes",
        "id-443": "os.showJoinCode",
        "os.showQRCode": "actions/barcodes",
        "id-610": "os.showQRCode",
        "os.showUploadAuxFile": "actions/files",
        "id-597": "os.showUploadAuxFile",
        "os.showUploadFiles": "actions/files",
        "id-600": "os.showUploadFiles",
        "os.sleep": "actions/os",
        "id-423": "os.sleep",
        "os.startFormAnimation": "actions/animations",
        "id-1198": "os.startFormAnimation",
        "os.stopFormAnimation": "actions/animations",
        "id-1204": "os.stopFormAnimation",
        "os.tip": "actions/portals",
        "id-432": "os.tip",
        "os.toast": "actions/os",
        "id-427": "os.toast",
        "os.totalRemoteCount": "actions/os",
        "id-1259": "os.totalRemoteCount",
        "os.unloadInst": "actions/os",
        "id-674": "os.unloadInst",
        "os.unregisterApp": "actions/app",
        "id-907": "os.unregisterApp",
        "os.version": "actions/os",
        "id-522": "os.version",
        "os.vrSupported": "actions/xr",
        "id-551": "os.vrSupported",
        "os.agreedUponTime": "actions/time",
        "id-651": "os.agreedUponTime",
        "os.deadReckoningTime": "actions/time",
        "id-659": "os.deadReckoningTime",
        "os.instLatency": "actions/time",
        "id-653": "os.instLatency",
        "os.instTimeOffset": "actions/time",
        "id-655": "os.instTimeOffset",
        "os.instTimeOffsetSpread": "actions/time",
        "id-657": "os.instTimeOffsetSpread",
        "os.localTime": "actions/time",
        "id-649": "os.localTime",
        "removeTags": "actions/data",
        "id-141": "removeTags",
        "renameTag": "actions/data",
        "id-146": "renameTag",
        "setTag": "actions/data",
        "id-93": "setTag",
        "setTagMask": "actions/data",
        "id-99": "setTagMask",
        "subtractMods": "actions/mods",
        "id-157": "subtractMods",
        "superShout": "actions/event",
        "id-220": "superShout",
        "uuid": "actions/data",
        "id-355": "uuid",
        "web.get": "actions/web",
        "id-1990": "web.get",
        "web.hook": "actions/web",
        "id-2001": "web.hook",
        "web.post": "actions/web",
        "id-1995": "web.post",
        "configBot": "actions/os",
        "id-418": "configBot"
    }
}