{
  "id": 1,
  "name": "Vector2",
  "kind": 128,
  "kindString": "Class",
  "flags": {},
  "comment": {
    "shortText": "Defines a class that represents a 2D point in space."
  },
  "children": [
    {
      "id": 24,
      "name": "constructor",
      "kind": 512,
      "kindString": "Constructor",
      "flags": {},
      "sources": [
        {
          "fileName": "src/aux-common/math/Vector2.ts",
          "line": 30,
          "character": 4
        }
      ],
      "signatures": [
        {
          "id": 25,
          "name": "new Vector2",
          "kind": 16384,
          "kindString": "Constructor signature",
          "flags": {},
          "comment": {
            "shortText": "Constructs a new 2D vector with the given X and Y values.",
            "tags": [
              {
                "tag": "example",
                "text": "Create a new Vector2 object with the position (2, 3).\nlet myVector = new Vector2(2, 3);\n\nos.toast(`X: ${myVector.x}, Y: ${myVector.y}`);\n"
              },
              {
                "tag": "example",
                "text": "Move this bot to (10, 15) in the home dimension.\ntags.homePosition = new Vector2(10, 15);\n"
              }
            ]
          },
          "parameters": [
            {
              "id": 26,
              "name": "x",
              "kind": 32768,
              "kindString": "Parameter",
              "flags": {},
              "comment": {
                "shortText": "The X value of the vector."
              },
              "type": {
                "type": "intrinsic",
                "name": "number"
              },
              "defaultValue": "0"
            },
            {
              "id": 27,
              "name": "y",
              "kind": 32768,
              "kindString": "Parameter",
              "flags": {},
              "comment": {
                "shortText": "The Y value of the vector.\n"
              },
              "type": {
                "type": "intrinsic",
                "name": "number"
              },
              "defaultValue": "0"
            }
          ],
          "type": {
            "type": "reference",
            "id": 1,
            "name": "Vector2"
          }
        }
      ]
    },
    {
      "id": 28,
      "name": "x",
      "kind": 1024,
      "kindString": "Property",
      "flags": {},
      "comment": {
        "shortText": "The X value of this vector."
      },
      "sources": [
        {
          "fileName": "src/aux-common/math/Vector2.ts",
          "line": 10,
          "character": 4
        }
      ],
      "type": {
        "type": "intrinsic",
        "name": "number"
      }
    },
    {
      "id": 29,
      "name": "y",
      "kind": 1024,
      "kindString": "Property",
      "flags": {},
      "comment": {
        "shortText": "The Y value of this vector."
      },
      "sources": [
        {
          "fileName": "src/aux-common/math/Vector2.ts",
          "line": 15,
          "character": 4
        }
      ],
      "type": {
        "type": "intrinsic",
        "name": "number"
      }
    },
    {
      "id": 30,
      "name": "add",
      "kind": 2048,
      "kindString": "Method",
      "flags": {},
      "sources": [
        {
          "fileName": "src/aux-common/math/Vector2.ts",
          "line": 163,
          "character": 4
        }
      ],
      "signatures": [
        {
          "id": 31,
          "name": "add",
          "kind": 4096,
          "kindString": "Call signature",
          "flags": {},
          "comment": {
            "shortText": "Adds this vector with the other vector and returns the result.",
            "tags": [
              {
                "tag": "example",
                "text": "Add two vectors together.\nconst first = new Vector2(1, 2);\nconst second = new Vector2(3, 4);\nconst added = first.add(second);\n\nos.toast(added); // Prints (4, 6)\n"
              }
            ]
          },
          "parameters": [
            {
              "id": 32,
              "name": "other",
              "kind": 32768,
              "kindString": "Parameter",
              "flags": {},
              "comment": {
                "shortText": "The other vector to add with this vector.\n"
              },
              "type": {
                "type": "reference",
                "id": 1,
                "name": "Vector2"
              }
            }
          ],
          "type": {
            "type": "reference",
            "id": 1,
            "name": "Vector2"
          }
        }
      ]
    },
    {
      "id": 42,
      "name": "dot",
      "kind": 2048,
      "kindString": "Method",
      "flags": {},
      "sources": [
        {
          "fileName": "src/aux-common/math/Vector2.ts",
          "line": 238,
          "character": 4
        }
      ],
      "signatures": [
        {
          "id": 43,
          "name": "dot",
          "kind": 4096,
          "kindString": "Call signature",
          "flags": {},
          "comment": {
            "shortText": "Calculates the dot product of this vector compared to the given other vector.\nReturns a number that is positive if the vectors point in the same direction,\nnegative if they point in opposite directions, and zero if they are perpendicular.\nFor normalized vectors, this value is clamped to 1 and -1.",
            "tags": [
              {
                "tag": "example",
                "text": "Determine how two vectors are pointing towards/away from the same direction.\nconst first = new Vector2(1, 2);\nconst second = new Vector2(3, 4);\n\nconst dot = first.dot(second);\nif (dot < 0) {\n    os.toast(\"Vectors are pointing away from each other!\");\n} else if (dot === 0) {\n    os.toast(\"Vectors 90 degrees away from each other!\");\n} else {\n    os.toast(\"Vectors are pointing towards from each other!\");\n}\n"
              }
            ]
          },
          "parameters": [
            {
              "id": 44,
              "name": "other",
              "kind": 32768,
              "kindString": "Parameter",
              "flags": {},
              "comment": {
                "shortText": "The other vector to calculate the dot product with.\n"
              },
              "type": {
                "type": "reference",
                "id": 1,
                "name": "Vector2"
              }
            }
          ],
          "type": {
            "type": "intrinsic",
            "name": "number"
          }
        }
      ]
    },
    {
      "id": 55,
      "name": "equals",
      "kind": 2048,
      "kindString": "Method",
      "flags": {},
      "sources": [
        {
          "fileName": "src/aux-common/math/Vector2.ts",
          "line": 324,
          "character": 4
        }
      ],
      "signatures": [
        {
          "id": 56,
          "name": "equals",
          "kind": 4096,
          "kindString": "Call signature",
          "flags": {},
          "comment": {
            "shortText": "Determines if this vector equals the other vector.",
            "tags": [
              {
                "tag": "example",
                "text": "Determine if two vectors represent the same value.\nconst first = new Vector2(1, 2);\nconst second = new Vector2(3, 4);\nconst third = new Vector2(1, 2);\n\nos.toast(`first == second: ${first.equals(second)}; first == third: ${first.equals(third)}`)\n"
              }
            ]
          },
          "parameters": [
            {
              "id": 57,
              "name": "other",
              "kind": 32768,
              "kindString": "Parameter",
              "flags": {},
              "comment": {
                "shortText": "The other vector.\n"
              },
              "type": {
                "type": "reference",
                "id": 1,
                "name": "Vector2"
              }
            }
          ],
          "type": {
            "type": "intrinsic",
            "name": "boolean"
          }
        }
      ]
    },
    {
      "id": 45,
      "name": "length",
      "kind": 2048,
      "kindString": "Method",
      "flags": {},
      "sources": [
        {
          "fileName": "src/aux-common/math/Vector2.ts",
          "line": 251,
          "character": 4
        }
      ],
      "signatures": [
        {
          "id": 46,
          "name": "length",
          "kind": 4096,
          "kindString": "Call signature",
          "flags": {},
          "comment": {
            "shortText": "Calculates the length of this vector and returns the result.",
            "tags": [
              {
                "tag": "example",
                "text": "Get the length of the vector.\nconst myVector = new Vector2(1, 2);\nconst length = myVector.length();\n\nos.toast(`Vector is ${length} units long`);\n"
              }
            ]
          },
          "type": {
            "type": "intrinsic",
            "name": "number"
          }
        }
      ]
    },
    {
      "id": 39,
      "name": "multiply",
      "kind": 2048,
      "kindString": "Method",
      "flags": {},
      "sources": [
        {
          "fileName": "src/aux-common/math/Vector2.ts",
          "line": 214,
          "character": 4
        }
      ],
      "signatures": [
        {
          "id": 40,
          "name": "multiply",
          "kind": 4096,
          "kindString": "Call signature",
          "flags": {},
          "comment": {
            "shortText": "Multiplies this vector by the given other vector and returns the result.",
            "tags": [
              {
                "tag": "example",
                "text": "Multiply two vectors together.\nconst first = new Vector2(1, 2);\nconst second = new Vector2(3, 4);\nconst multiplied = first.multiply(second);\n\nos.toast(multiplied); // Prints (3, 8)\n"
              }
            ]
          },
          "parameters": [
            {
              "id": 41,
              "name": "other",
              "kind": 32768,
              "kindString": "Parameter",
              "flags": {},
              "comment": {
                "shortText": "The other vector to multiply with this vector.\n"
              },
              "type": {
                "type": "reference",
                "id": 1,
                "name": "Vector2"
              }
            }
          ],
          "type": {
            "type": "reference",
            "id": 1,
            "name": "Vector2"
          }
        }
      ]
    },
    {
      "id": 36,
      "name": "multiplyScalar",
      "kind": 2048,
      "kindString": "Method",
      "flags": {},
      "sources": [
        {
          "fileName": "src/aux-common/math/Vector2.ts",
          "line": 199,
          "character": 4
        }
      ],
      "signatures": [
        {
          "id": 37,
          "name": "multiplyScalar",
          "kind": 4096,
          "kindString": "Call signature",
          "flags": {},
          "comment": {
            "shortText": "Multiplies each component of this vector by the given value and returns the result.",
            "tags": [
              {
                "tag": "example",
                "text": "Scale a vector by 10.\nconst myVector = new Vector2(1, 1);\nconst scaled = myVector.multiplyScalar(10);\nos.toast(scaled); // Prints (10, 10)\n"
              }
            ]
          },
          "parameters": [
            {
              "id": 38,
              "name": "scale",
              "kind": 32768,
              "kindString": "Parameter",
              "flags": {},
              "comment": {
                "shortText": "The scale that should be applied to this vector.\n"
              },
              "type": {
                "type": "intrinsic",
                "name": "number"
              }
            }
          ],
          "type": {
            "type": "reference",
            "id": 1,
            "name": "Vector2"
          }
        }
      ]
    },
    {
      "id": 51,
      "name": "negate",
      "kind": 2048,
      "kindString": "Method",
      "flags": {},
      "sources": [
        {
          "fileName": "src/aux-common/math/Vector2.ts",
          "line": 296,
          "character": 4
        }
      ],
      "signatures": [
        {
          "id": 52,
          "name": "negate",
          "kind": 4096,
          "kindString": "Call signature",
          "flags": {},
          "comment": {
            "shortText": "Negates each component of this vector and returns a new vector that contains the result.",
            "tags": [
              {
                "tag": "example",
                "text": "Negate a vector.\nconst myVector = new Vector2(1, 2);\nconst negated = myVector.negate();\n\nos.toast(`Vector: ${myVector}, Negated: ${negated}`);\n"
              }
            ]
          },
          "type": {
            "type": "reference",
            "id": 1,
            "name": "Vector2"
          }
        }
      ]
    },
    {
      "id": 49,
      "name": "normalize",
      "kind": 2048,
      "kindString": "Method",
      "flags": {},
      "sources": [
        {
          "fileName": "src/aux-common/math/Vector2.ts",
          "line": 282,
          "character": 4
        }
      ],
      "signatures": [
        {
          "id": 50,
          "name": "normalize",
          "kind": 4096,
          "kindString": "Call signature",
          "flags": {},
          "comment": {
            "shortText": "Calculates the normalized version of this vector and returns it.\nA normalized vector is a vector whose length equals 1.",
            "text": "Normalizing a vector preserves its directionality while making the length (i.e. scale) of it 1.\n",
            "tags": [
              {
                "tag": "example",
                "text": "Normalize a vector.\nconst myVector = new Vector2(1, 2);\nconst normalized = myVector.normalize();\n\nos.toast(`Vector: ${myVector}, Normalized: ${normalized}`);\n"
              }
            ]
          },
          "type": {
            "type": "reference",
            "id": 1,
            "name": "Vector2"
          }
        }
      ]
    },
    {
      "id": 47,
      "name": "squareLength",
      "kind": 2048,
      "kindString": "Method",
      "flags": {},
      "sources": [
        {
          "fileName": "src/aux-common/math/Vector2.ts",
          "line": 266,
          "character": 4
        }
      ],
      "signatures": [
        {
          "id": 48,
          "name": "squareLength",
          "kind": 4096,
          "kindString": "Call signature",
          "flags": {},
          "comment": {
            "shortText": "Calculates the square length of this vector and returns the result.\nThis is equivalent to length^2, but it is faster to calculate than length because it doesn't require\ncalculating a square root.",
            "tags": [
              {
                "tag": "example",
                "text": "Get the square length of the vector.\nconst myVector = new Vector2(1, 2);\nconst length = myVector.squareLength();\n\nos.toast(`Vector is ${length}^2 units long`);\n"
              }
            ]
          },
          "type": {
            "type": "intrinsic",
            "name": "number"
          }
        }
      ]
    },
    {
      "id": 33,
      "name": "subtract",
      "kind": 2048,
      "kindString": "Method",
      "flags": {},
      "sources": [
        {
          "fileName": "src/aux-common/math/Vector2.ts",
          "line": 186,
          "character": 4
        }
      ],
      "signatures": [
        {
          "id": 34,
          "name": "subtract",
          "kind": 4096,
          "kindString": "Call signature",
          "flags": {},
          "comment": {
            "shortText": "Subtracts the other vector from this vector and returns the result.",
            "tags": [
              {
                "tag": "example",
                "text": "Subtract two vectors.\nconst first = new Vector2(1, 2);\nconst second = new Vector2(3, 4);\nconst subtracted = first.subtract(second);\nos.toast(subtracted);\n"
              },
              {
                "tag": "example",
                "text": "Find the direction from one vector to another.\nconst first = new Vector2(1, 2);\nconst second = new Vector2(3, 4);\n\nconst directionFromFirstToSecond = second.subtract(first);\nconst directionFromSecondToFirst = first.subtract(second);\n\nos.toast(`first -> second = ${directionFromFirstToSecond}; second -> first = ${directionFromSecondToFirst}`);\n"
              }
            ]
          },
          "parameters": [
            {
              "id": 35,
              "name": "other",
              "kind": 32768,
              "kindString": "Parameter",
              "flags": {},
              "comment": {
                "shortText": "The other vector that should be subtracted from this vector.\n"
              },
              "type": {
                "type": "reference",
                "id": 1,
                "name": "Vector2"
              }
            }
          ],
          "type": {
            "type": "reference",
            "id": 1,
            "name": "Vector2"
          }
        }
      ]
    },
    {
      "id": 53,
      "name": "toString",
      "kind": 2048,
      "kindString": "Method",
      "flags": {},
      "sources": [
        {
          "fileName": "src/aux-common/math/Vector2.ts",
          "line": 309,
          "character": 4
        }
      ],
      "signatures": [
        {
          "id": 54,
          "name": "toString",
          "kind": 4096,
          "kindString": "Call signature",
          "flags": {},
          "comment": {
            "shortText": "Converts this vector to a human-readable string representation.",
            "tags": [
              {
                "tag": "example",
                "text": "Get a string of a vector.\nconst myVector = new Vector2(1, 2);\nconst vectorString = myVector.toString();\n\nos.toast('My Vector: ' + vectorString);\n"
              }
            ]
          },
          "type": {
            "type": "intrinsic",
            "name": "string"
          }
        }
      ]
    },
    {
      "id": 6,
      "name": "angleBetween",
      "kind": 2048,
      "kindString": "Method",
      "flags": {
        "isStatic": true
      },
      "sources": [
        {
          "fileName": "src/aux-common/math/Vector2.ts",
          "line": 72,
          "character": 11
        }
      ],
      "signatures": [
        {
          "id": 7,
          "name": "angleBetween",
          "kind": 4096,
          "kindString": "Call signature",
          "flags": {},
          "comment": {
            "shortText": "Calculates the angle between the two given vectors and returns the result in radians.",
            "tags": [
              {
                "tag": "example",
                "text": "Find the angle between two vectors.\nconst first = new Vector2(\n    Math.cos(Math.PI / 3),\n    Math.sin(Math.PI / 3)\n); // 60 degrees\nconst second = new Vector2(\n    Math.cos(Math.PI / 2),\n    Math.sin(Math.PI / 2)\n); // 90 degrees\n\nconst angle = Vector2.angleBetween(first, second);\nos.toast(angle);\n"
              }
            ]
          },
          "parameters": [
            {
              "id": 8,
              "name": "first",
              "kind": 32768,
              "kindString": "Parameter",
              "flags": {},
              "comment": {
                "shortText": "The first vector that should be used for comparision."
              },
              "type": {
                "type": "reference",
                "id": 1,
                "name": "Vector2"
              }
            },
            {
              "id": 9,
              "name": "second",
              "kind": 32768,
              "kindString": "Parameter",
              "flags": {},
              "comment": {
                "shortText": "The second vector that should be used for comparision.\n"
              },
              "type": {
                "type": "reference",
                "id": 1,
                "name": "Vector2"
              }
            }
          ],
          "type": {
            "type": "intrinsic",
            "name": "number"
          }
        }
      ]
    },
    {
      "id": 2,
      "name": "createNormalized",
      "kind": 2048,
      "kindString": "Method",
      "flags": {
        "isStatic": true
      },
      "sources": [
        {
          "fileName": "src/aux-common/math/Vector2.ts",
          "line": 49,
          "character": 11
        }
      ],
      "signatures": [
        {
          "id": 3,
          "name": "createNormalized",
          "kind": 4096,
          "kindString": "Call signature",
          "flags": {},
          "comment": {
            "shortText": "Creates a 2D vector with the given X and Y values that is normalized immediately upon creation.",
            "tags": [
              {
                "tag": "example",
                "text": "Create a normalized vector\nconst vector = Vector2.createNormalized(1, 2);\n"
              }
            ]
          },
          "parameters": [
            {
              "id": 4,
              "name": "x",
              "kind": 32768,
              "kindString": "Parameter",
              "flags": {},
              "comment": {
                "shortText": "The X value of the vector."
              },
              "type": {
                "type": "intrinsic",
                "name": "number"
              }
            },
            {
              "id": 5,
              "name": "y",
              "kind": 32768,
              "kindString": "Parameter",
              "flags": {},
              "comment": {
                "shortText": "The Y value of the vector.\n"
              },
              "type": {
                "type": "intrinsic",
                "name": "number"
              }
            }
          ],
          "type": {
            "type": "reference",
            "id": 1,
            "name": "Vector2"
          }
        }
      ]
    },
    {
      "id": 10,
      "name": "distanceBetween",
      "kind": 2048,
      "kindString": "Method",
      "flags": {
        "isStatic": true
      },
      "sources": [
        {
          "fileName": "src/aux-common/math/Vector2.ts",
          "line": 91,
          "character": 11
        }
      ],
      "signatures": [
        {
          "id": 11,
          "name": "distanceBetween",
          "kind": 4096,
          "kindString": "Call signature",
          "flags": {},
          "comment": {
            "shortText": "Calculates the distance between the two given vectors and returns the result.",
            "tags": [
              {
                "tag": "example",
                "text": "Find the distance between two vectors.\nconst first = new Vector2(5, 10);\nconst second = new Vector2(9, 2);\nconst distance = Vector2.distanceBetween(first, second);\n\nos.toast(`Distance: ${distance}`);\n"
              }
            ]
          },
          "parameters": [
            {
              "id": 12,
              "name": "first",
              "kind": 32768,
              "kindString": "Parameter",
              "flags": {},
              "comment": {
                "shortText": "The first vector that should be used for comparision."
              },
              "type": {
                "type": "reference",
                "id": 1,
                "name": "Vector2"
              }
            },
            {
              "id": 13,
              "name": "second",
              "kind": 32768,
              "kindString": "Parameter",
              "flags": {},
              "comment": {
                "shortText": "The second vector that should be used for comparision.\n"
              },
              "type": {
                "type": "reference",
                "id": 1,
                "name": "Vector2"
              }
            }
          ],
          "type": {
            "type": "intrinsic",
            "name": "number"
          }
        }
      ]
    },
    {
      "id": 19,
      "name": "interpolateDirection",
      "kind": 2048,
      "kindString": "Method",
      "flags": {
        "isStatic": true
      },
      "sources": [
        {
          "fileName": "src/aux-common/math/Vector2.ts",
          "line": 144,
          "character": 11
        }
      ],
      "signatures": [
        {
          "id": 20,
          "name": "interpolateDirection",
          "kind": 4096,
          "kindString": "Call signature",
          "flags": {},
          "comment": {
            "shortText": "Constructs a new vector that is the directional linear interpolation between the given start and end positions.\nThe degree that the result is interpolated is determined by the given amount parameter.",
            "text": "This function works similarly to interpolatePosition(), except the result is always a normalized vector.\n",
            "tags": [
              {
                "tag": "example",
                "text": "Find the direction that points halfway between the two vectors.\nconst start = new Vector2(5, 10);\nconst finish = new Vector2(9, 2);\nconst halfway = Vector2.interpolatePosition(start, finish, 0.5);\n\nos.toast(halfway);\n"
              }
            ]
          },
          "parameters": [
            {
              "id": 21,
              "name": "start",
              "kind": 32768,
              "kindString": "Parameter",
              "flags": {},
              "comment": {
                "shortText": "The start position."
              },
              "type": {
                "type": "reference",
                "id": 1,
                "name": "Vector2"
              }
            },
            {
              "id": 22,
              "name": "finish",
              "kind": 32768,
              "kindString": "Parameter",
              "flags": {},
              "comment": {
                "shortText": "The end position."
              },
              "type": {
                "type": "reference",
                "id": 1,
                "name": "Vector2"
              }
            },
            {
              "id": 23,
              "name": "amount",
              "kind": 32768,
              "kindString": "Parameter",
              "flags": {},
              "comment": {
                "shortText": "The amount that the resulting position should be interpolated between the start and end positions.  Values near 0 indicate rotations close to the first and values near 1 indicate rotations close to the second.\n"
              },
              "type": {
                "type": "intrinsic",
                "name": "number"
              }
            }
          ],
          "type": {
            "type": "reference",
            "id": 1,
            "name": "Vector2"
          }
        }
      ]
    },
    {
      "id": 14,
      "name": "interpolatePosition",
      "kind": 2048,
      "kindString": "Method",
      "flags": {
        "isStatic": true
      },
      "sources": [
        {
          "fileName": "src/aux-common/math/Vector2.ts",
          "line": 117,
          "character": 11
        }
      ],
      "signatures": [
        {
          "id": 15,
          "name": "interpolatePosition",
          "kind": 4096,
          "kindString": "Call signature",
          "flags": {},
          "comment": {
            "shortText": "Constructs a new vector that is the linear interpolation between the given start and end positions.\nThe degree that the result is interpolated is determined by the given amount parameter.",
            "tags": [
              {
                "tag": "example",
                "text": "Find the position that is halfway between two vectors.\nconst start = new Vector2(5, 10);\nconst finish = new Vector2(9, 2);\nconst halfway = Vector2.interpolatePosition(start, finish, 0.5);\n\nos.toast(halfway);\n"
              },
              {
                "tag": "example",
                "text": "Find the position that is 1/4 between two vectors.\nconst start = new Vector2(5, 10);\nconst finish = new Vector2(9, 2);\nconst halfway = Vector2.interpolatePosition(start, finish, 0.25);\n\nos.toast(halfway);\n"
              }
            ]
          },
          "parameters": [
            {
              "id": 16,
              "name": "start",
              "kind": 32768,
              "kindString": "Parameter",
              "flags": {},
              "comment": {
                "shortText": "The start position."
              },
              "type": {
                "type": "reference",
                "id": 1,
                "name": "Vector2"
              }
            },
            {
              "id": 17,
              "name": "finish",
              "kind": 32768,
              "kindString": "Parameter",
              "flags": {},
              "comment": {
                "shortText": "The end position."
              },
              "type": {
                "type": "reference",
                "id": 1,
                "name": "Vector2"
              }
            },
            {
              "id": 18,
              "name": "amount",
              "kind": 32768,
              "kindString": "Parameter",
              "flags": {},
              "comment": {
                "shortText": "The amount that the resulting position should be interpolated between the start and end positions.  Values near 0 indicate rotations close to the first and values near 1 indicate rotations close to the second.\n"
              },
              "type": {
                "type": "intrinsic",
                "name": "number"
              }
            }
          ],
          "type": {
            "type": "reference",
            "id": 1,
            "name": "Vector2"
          }
        }
      ]
    }
  ],
  "groups": [
    {
      "title": "Constructors",
      "kind": 512,
      "children": [
        24
      ]
    },
    {
      "title": "Properties",
      "kind": 1024,
      "children": [
        28,
        29
      ]
    },
    {
      "title": "Methods",
      "kind": 2048,
      "children": [
        30,
        42,
        55,
        45,
        39,
        36,
        51,
        49,
        47,
        33,
        53,
        6,
        2,
        10,
        19,
        14
      ]
    }
  ],
  "sources": [
    {
      "fileName": "src/aux-common/math/Vector2.ts",
      "line": 6,
      "character": 13
    }
  ]
}